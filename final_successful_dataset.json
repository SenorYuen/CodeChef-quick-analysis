{
    "0": {
        "COOK82A": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "2\nBarcelona 2\nMalaga 1\nRealMadrid 1\nEibar 0\nMalaga 3\nRealMadrid 2\nBarcelona 8\nEibar 6",
                    "output": "RealMadrid\nBarcelona",
                    "explanation": ""
                }
            ],
            "problem_statement": "Read problems statements in mandarin chinese, russian and vietnamese as well.\nToday is the final round of La Liga, the most popular professional football league in the world. Real Madrid is playing against Malaga and Barcelona is playing against Eibar. These two matches will decide who wins the league title. Real Madrid is already 3 points ahead of Barcelona in the league standings. In fact, Real Madrid will win the league title, except for one scenario: If Real Madrid loses against Malaga, and Barcelona wins against Eibar, then the La Liga title will go to Barcelona. In any other combination of results, Real Madrid will win the title.\nYou will be given multiple scenarios for these two games, where in each one you will be given the number of goals each team scored in their respective match. A team wins a match if it scores more than the opponent. In case they score the same number of goals, it's a draw. Otherwise, the team loses the game. You are asked to tell the winner of the La Liga title in each scenario.\nInput\n\nThe first line contains a single number T, the number of scenarios.\nEach scenario is described by four lines. Each line starts with a team name followed by the number of goals this team scored in its corresponding match. (Barcelona plays Eibar and Real Madrid plays Malaga). The names are given in any arbitrary order within a scenario.\nOutput\nFor each scenario, output a single line showing the title winner in case this scenario happens. It should be either \"RealMadrid\" or \"Barcelona\".\nConstraints\n\n1 \u2264 T \u2264 500\n0 \u2264 number of goals scored by a team in a match \u2264 20",
            "input_format": "",
            "output_format": "",
            "problem_name": "La Liga",
            "user_tags": [
                "cakewalk",
                "cook82",
                "deadwing97"
            ],
            "computed_tags": [],
            "problem_code_id": "COOK82A",
            "difficulty_level": "956",
            "ai_solutions": [
                "T = int(input())\nfor _ in range(T):\n    scores = {}\n    for _ in range(4):\n        team, goals = input().split()\n        scores[team] = int(goals)\n    if scores['RealMadrid'] < scores['Malaga'] and scores['Barcelona'] > scores['Eibar']:\n        print('Barcelona')\n    else:\n        print('RealMadrid')",
                "def la_liga_winner(T, matches):\n    for match in matches:\n        scores = {}\n        for team, goals in match.items():\n            scores[team] = goals\n        if scores['RealMadrid'] < scores['Malaga'] and scores['Barcelona'] > scores['Eibar']:\n            print('Barcelona')\n        else:\n            print('RealMadrid')\n\nT = int(input())\nmatches = []\nfor _ in range(T):\n    match = {}\n    for _ in range(4):\n        team, goals = input().split()\n        match[team] = int(goals)\n    matches.append(match)\nla_liga_winner(T, matches)"
            ],
            "human_solutions": [
                {
                    "id": 34319254,
                    "submission_date": 1592061727,
                    "language": "PYTH 3",
                    "username": "hatimhussain",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.02",
                    "memory": "17.6M",
                    "solution": 34319254,
                    "code": "for scenario in range(int(input())):\n    teams = dict()\n    for i in range(4):\n        key, val =  input().strip().split()\n        teams[key] = int(val)\n    print('Barcelona') if teams['Barcelona']>teams['Eibar'] and teams['RealMadrid']<teams['Malaga'] else print('RealMadrid')"
                },
                {
                    "id": 32828766,
                    "submission_date": 1588859339,
                    "language": "PYTH 3",
                    "username": "sharmaji27",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.02",
                    "memory": "17.5M",
                    "solution": 32828766,
                    "code": "for _ in range(int(input())):\n    d={}\n    for i in range(4):\n        x = input().split()\n        d[x[0]]=int(x[1])\n    \n    if d[\"Barcelona\"]>d[\"Eibar\"] and d[\"RealMadrid\"]<d[\"Malaga\"]:\n        print(\"Barcelona\")\n    else:\n        print(\"RealMadrid\")"
                }
            ]
        },
        "CYBV": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "1\n5 8",
                    "output": "1",
                    "explanation": "There are $5$ kids and $8$ weapons.  \nHence we will distribute the weapons such that $3$ kids have $2$ weapons each and the remaining $2$ kids have $1$ weapon each.  \nHence the minimum number of weapons a kid cyborg has is $1$. (  That is, $min(1,2)$ = $1$ )"
                }
            ],
            "problem_statement": "2021 was approaching and the world was about to end. So 2 gods Saurabhx and Saurabhy (from Celesta) created the Cyberverse. But this time disappointed with humans both the gods decided not to have humans in this world. So they created a world of cyborgs. A world without humans. Isn\u2019t it interesting? So let us dive into the cyberverse and have a look at their problems.\nThere are $N$ kid cyborgs with Chief Cyborg '100gods' and he has $K$ weapons with him. He wants to distribute those $K$ weapons among $N$ kid cyborgs. Since all the kid cyborgs are very good friends, so they set a rule among themselves for taking those weapons. The rule states that the difference between kid cyborg having the maximum weapons and the kid cyborg having minimum weapons should be less than or equal to $1$. \nFind the value of the minimum number of weapons a kid cyborg can have when all the $K$ weapons are distributed among them.\nInput:\n\nThe first line contains an integer $T$, denoting the number of test cases.\nEach of the next $T$ lines will contain two space-separated integers denoting $N$ and $K$ respectively.\n\nOutput:\n\nFor each test case ,output a single line containing an integer $X$ denoting the minimum number of weapons a kid cyborg can have in that test case.  \n\nConstraints:\n\n$1 \\leq T \\leq 10^5$\n$1 \\leq N \\leq 10^5$\n$1 \\leq K \\leq 10^9$",
            "input_format": "",
            "output_format": "",
            "problem_name": "The Begining Era Of Cyberverse",
            "user_tags": [
                "Integer Division",
                "ad-hoc"
            ],
            "computed_tags": [
                "Mathematics",
                "Basic Maths",
                "Algorithms",
                "Constructive"
            ],
            "problem_code_id": "CYBV",
            "difficulty_level": "964",
            "ai_solutions": [
                "T = int(input())\nfor _ in range(T):\n    N, K = map(int, input().split())\n    if K % N == 0:\n        print(K // N)\n    else:\n        print(K // N)",
                "def min_weapons(T, test_cases):\n    for i in range(T):\n        N, K = test_cases[i]\n        if K % N == 0:\n            print(K // N)\n        else:\n            print(K // N)\n\nT = int(input())\ntest_cases = []\nfor _ in range(T):\n    test_cases.append(list(map(int, input().split())))\nmin_weapons(T, test_cases)"
            ],
            "human_solutions": [
                {
                    "id": 1027790734,
                    "submission_date": 1698678991,
                    "language": "PYTH 3",
                    "username": "ashay21",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.41",
                    "memory": "8.4M",
                    "solution": 1027790734,
                    "code": "for i in range(int(input())):\r\n    n,k=map(int,input().split())\r\n    print(k//n)"
                },
                {
                    "id": 1026461619,
                    "submission_date": 1697723533,
                    "language": "PYTH 3",
                    "username": "srinikhithamel",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.40",
                    "memory": "8.7M",
                    "solution": 1026461619,
                    "code": "t = int(input())\r\nfor i in range(t):\r\n    n,m = map(int,input().split())\r\n    print(m//n)\r\n    \r\n"
                }
            ]
        },
        "MARBLES": {
            "constraints": "1<=k<=n<=1000000",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "2\n10 10\n30 7\n",
                    "output": "1\n475020\n",
                    "explanation": ""
                }
            ],
            "problem_statement": "Rohit dreams he is in a shop with an infinite amount of marbles. He is allowed to select $n$ marbles. \\\nThere are marbles of $k$ different colors. From each color there are also infinitely many marbles. \\\nRohit wants to have at least one marble of each color, but still there are a lot of possibilities for his selection. In his effort to make a decision he wakes up. \\\nNow he asks you how many possibilities for his selection he would have had. \\\nAssume that marbles of equal color can't be distinguished, and the order of the marbles is irrelevant.",
            "input_format": "The first line of input contains a number T <= 100 that indicates the number of test cases to follow. \\\nEach test case consists of one line containing $n$ and $k$, where $n$ is the number of marbles Rohit selects and $k$ is the number of different colors of the marbles.",
            "output_format": "For each test case print the number of possibilities that Rohit would have had.\nYou can assume that this number fits into a signed 64 bit integer.",
            "problem_name": "Marbles",
            "user_tags": [
                "Permutations & Combinations",
                "Partitions"
            ],
            "computed_tags": [
                "Mathematics",
                "Combinatorics"
            ],
            "problem_code_id": "MARBLES",
            "difficulty_level": "925",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 29823628,
                    "submission_date": 1582268921,
                    "language": "PYTH 3",
                    "username": "ayushi0712",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.01",
                    "memory": "17.6M",
                    "solution": 29823628,
                    "code": "for _ in range(int(input())):\n    \n    n,k = map(int,input().split()); n -= 1; k -=1; k = min(k,n-k); ans = 1\n    \n    for i in range(k):\n        ans *= (n-i)\n        ans //= (i+1)\n    \n    print(ans)\n"
                },
                {
                    "id": 29329357,
                    "submission_date": 1580876663,
                    "language": "PYTH 3",
                    "username": "kay_af",
                    "user_rating_star": 3,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.02",
                    "memory": "17.6M",
                    "solution": 29329357,
                    "code": "import math\n\nt = int(input())\n\ndef result(n,k):\n    m = min(n-k, k)\n    u = 1\n    for i in range(m):\n        u*=(n-i)\n    return u//math.factorial(m)\n\nwhile t>0:\n    n, k = list(map(int, input().strip().split(' ')))\n    print(result(n-1, k-1))\n    t=t-1"
                }
            ]
        },
        "PLAYPIAN": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "4\nAB\nABBA\nABAABB\nAA",
                    "output": "yes\nyes\nno\nno",
                    "explanation": "Testcase 1: There is only one day, and both A and B have played exactly once. So this is a valid log. Hence 'yes'.\nTestcase 2: On the first day, A has played before B, and on the second day, B has played first. Hence, this is also a valid log.\nTestcase 3: On the first day, A played before B, but on the second day, A seems to have played twice. This cannot happen, and hence this is 'no'."
                }
            ],
            "problem_statement": "Two sisters, A and B, play the piano every day. During the day, they can play in any order. That is, A might play first and then B, or it could be B first and then A. But each one of them plays the piano exactly once per day. They maintain a common log, in which they write their name whenever they play.\nYou are given the entries of the log, but you're not sure if it has been tampered with or not. Your task is to figure out whether these entries could be valid or not.\nInput\n\nThe first line of the input contains an integer $T$ denoting the number of test cases. The description of the test cases follows.\nThe first line of each test case contains a string $s$ denoting the entries of the log.\n\nOutput\n\nFor each test case, output yes or no according to the answer to the problem.\n\nConstraints\n\n$1 \\le T \\le 500$\n$2 \\le |s| \\le 100$\n$|s|$ is even\nEach character of $s$ is either 'A' or 'B'",
            "input_format": "",
            "output_format": "",
            "problem_name": "Play Piano",
            "user_tags": [
                "ad-hoc"
            ],
            "computed_tags": [
                "Algorithms",
                "Constructive"
            ],
            "problem_code_id": "PLAYPIAN",
            "difficulty_level": "980",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 36129212,
                    "submission_date": 1596189197,
                    "language": "PYTH 3",
                    "username": "frundemprador",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.01",
                    "memory": "17.6M",
                    "solution": 36129212,
                    "code": "for _ in range(int(input())):\n    s = input()\n    flag = True\n    for i in range(0,len(s),2):\n        if s[i:i+2]==\"AA\" or s[i:i+2]==\"BB\":\n            flag = False\n            break\n    if flag==False:\n        print(\"no\")\n    else:\n        print(\"yes\")\n            \n"
                },
                {
                    "id": 36102467,
                    "submission_date": 1596054362,
                    "language": "PYTH 3",
                    "username": "chris_mcclinch",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.02",
                    "memory": "17.6M",
                    "solution": 36102467,
                    "code": "T = int(input())\nfor tc in range(T):\n    log = input()\n    segments = []\n    for i in range(len(log)):\n        if i % 2 == 0:\n            segments.append(log[i:i+2])\n    if 'AA' in segments or 'BB' in segments:\n        print('no')\n    else:\n        print(\"yes\")"
                }
            ]
        },
        "UWCOI21A": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "5\n1\n3\n5\n8\n10",
                    "output": "1 1\n1 3\n1 5\n1 8\n2 5\n",
                    "explanation": ""
                }
            ],
            "problem_statement": "Salmon has some hidden numbers that he wants you to find!\nGiven an integer $N$, find and output any two integers A and B such that:\n* $1 \\le A, B \\le 10^9$, and\n* $A*B = N$.\nInput:\nThe first line of input consists of a single integer $T$ ($1 \\le T \\le 10^5$) -- the number of testcases.\nThe next $T$ lines will consist of one integer, $N$ ($1 \\le\u00a0N \\le 10^9$).\nOutput:\nFor each of the $T$ testcases, output two space-separated integers $A$ and $B$.\nSubtasks\n\nSubtask 1 [100 points]: No additional constraints.",
            "input_format": "",
            "output_format": "",
            "problem_name": "Hidden Numbers",
            "user_tags": [
                "Basic Maths",
                "Observation"
            ],
            "computed_tags": [
                "Mathematics",
                "Algorithms"
            ],
            "problem_code_id": "UWCOI21A",
            "difficulty_level": "917",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 1027952055,
                    "submission_date": 1698772916,
                    "language": "PYTH 3",
                    "username": "harshcodes10",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.35",
                    "memory": "8.7M",
                    "solution": 1027952055,
                    "code": "\r\nt = int(input())\r\nfor i in range(t):\r\n    N = int(input())\r\n    A = 1 \r\n    B = N // A \r\n    \r\n    print(A,B)"
                },
                {
                    "id": 1027531052,
                    "submission_date": 1698488574,
                    "language": "PYTH 3",
                    "username": "csm_22h51a66e5",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.39",
                    "memory": "8.5M",
                    "solution": 1027531052,
                    "code": "t=int(input())\r\nfor i in range(t):\r\n    n=int(input())\r\n    a=1 \r\n    b=n//a\r\n    print(a,' ',b)\r\n            \r\n"
                }
            ]
        },
        "JDELAY": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "1\n5\n1 3\n4 4\n4 10\n1 11\n2 7",
                    "output": "2",
                    "explanation": "Example case 1: The delays of the respective submissions are $2$ minutes, $0$ minutes, $6$ minutes, $10$ minutes and $5$ minutes. Only submissions $3$ and $4$ are delayed by more than $5$ minutes, hence the answer is $2$."
                }
            ],
            "problem_statement": "Read problems statements Bengali , Mandarin chinese , Russian and Vietnamese as well.\nYou have been recently hired as a developer in CodeChef. Your first mission is to implement a feature that will determine the number of submissions that were judged late in a contest.\nThere are $N$ submissions, numbered $1$ through $N$. For each valid $i$, the $i$-th submission was submitted at time $S_i$ and judged at time $J_i$ (in minutes). Submitting and judging both take zero time. Please determine how many submissions received their verdicts after a delay of more than $5$ minutes.\nInput\n\nThe first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\nThe first line of the input contains a single integer $N$.\n$N$ lines follow. For each valid $i$, the $i$-th of these lines contains two space-separated integers $S_i$ and $J_i$.\n\nOutput\nFor each test case, print a single line containing one integer \u2014 the number of submissions for which the judging was delayed by more than 5 minutes.\nConstraints\n\n$1 \\le T \\le 100$\n$1 \\le N \\le 100$\n$1 \\le S_i \\le J_i \\le 300$ for each valid $i$\n\nSubtasks\nSubtask #1 (100 points): original constraints",
            "input_format": "",
            "output_format": "",
            "problem_name": "Judging Delay",
            "user_tags": [
                "Implementation"
            ],
            "computed_tags": [
                "Algorithms"
            ],
            "problem_code_id": "JDELAY",
            "difficulty_level": "964",
            "ai_solutions": [
                "T = int(input())\nfor _ in range(T):\n    N = int(input())\n    late_submissions = 0\n    for _ in range(N):\n        S, J = map(int, input().split())\n        if J - S > 5:\n            late_submissions += 1\n    print(late_submissions)",
                "T = int(input())\nfor _ in range(T):\n    N = int(input())\n    submissions = [list(map(int, input().split())) for _ in range(N)]\n    print(sum(1 for S, J in submissions if J - S > 5))"
            ],
            "human_solutions": [
                {
                    "id": 30760886,
                    "submission_date": 1585227190,
                    "language": "PYTH 3",
                    "username": "tejasri53",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.03",
                    "memory": "17.6M",
                    "solution": 30760886,
                    "code": "t=int(input())\nwhile(t):\n    n=int(input())\n    c=0\n    while(n):\n        a,b=map(int,input().split())\n        if b-a>5:\n            c+=1\n        n-=1\n    print(c)\n    t-=1\n"
                },
                {
                    "id": 30709868,
                    "submission_date": 1585053659,
                    "language": "PYTH 3",
                    "username": "harshita99",
                    "user_rating_star": 3,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.03",
                    "memory": "17.6M",
                    "solution": 30709868,
                    "code": "t=int(input())\nfor i in range(t):\n    n=int(input())\n    count=0\n\n    for ppoo in range(n):\n        s,j=map(int,input().split())\n        if j-s>5:\n            count+=1\n    print(count)\n    \n    "
                }
            ]
        },
        "CO92JUDG": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "3\n5\n3 1 3 3 4\n1 6 2 5 3\n5\n1 6 2 5 3\n3 1 3 3 4\n3\n4 1 3\n2 2 7",
                    "output": "Alice\nBob\nDraw",
                    "explanation": "Example case 1: Alice will choose the finish time in the last race to be considered zero, which means her sum of finish times is 3 + 1 + 3 + 3 + 0 = 10, while Bob will choose the finish time of his second race to be considered zero, so his total sum of finish times is 1 + 0 + 2 + 5 + 3 = 11. Since Alice's sum is smaller, she is considered the winner.\nExample case 2: We're dealing with the same situation as in the previous case, but finish times for the players are swapped, so Bob wins this time.\nExample case 3: Alice will choose the finish time of the first race to be considered zero, which means her total time is 0 + 1 + 3 = 4. Bob will choose the finish time of his last race to be considered zero, which makes his total time 2 + 2 + 0 = 4. The competition is considered a draw because both players have equal sums of finish times."
                }
            ],
            "problem_statement": "Read problems statements in Mandarin chinese, Russian and Vietnamese as well.\nChef is the judge of a competition. There are two players participating in this competition \u2014 Alice and Bob.\nThe competition consists of N races. For each i (1 \u2264 i \u2264 N), Alice finished the i-th race in Ai minutes, while Bob finished it in Bi minutes. The player with the smallest sum of finish times wins. If this total time is the same for Alice and for Bob, a draw is declared.\nThe rules of the competition allow each player to choose a race which will not be counted towards their total time. That is, Alice may choose an index x and her finish time in the race with this index will be considered zero; similarly, Bob may choose an index y and his finish time in the race with this index will be considered zero. Note that x can be different from y; the index chosen by Alice does not affect Bob's total time or vice versa.\nChef, as the judge, needs to announce the result of the competition. He knows that both Alice and Bob play optimally and will always choose the best option. Please help Chef determine the result!\nInput\n\nThe first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows.\nThe first line of each test case contains a single integer N.\nThe second line contains N space-separated integers A1, A2, ..., AN.\nThe third line contains N space-separated integers B1, B2, ..., BN.\n\nOutput\nFor each test case, print a single line containing the string \"Alice\" if Alice wins, \"Bob\" if Bob wins or \"Draw\" if the result is a draw (without quotes).\nConstraints\n\n1 \u2264 T \u2264 100\n2 \u2264 N \u2264 100\n1 \u2264 Ai \u2264 1000 for each valid i\n1 \u2264 Bi \u2264 1000 for each valid i",
            "input_format": "",
            "output_format": "",
            "problem_name": "Chef Judges a Competition",
            "user_tags": [
                "ad-hoc"
            ],
            "computed_tags": [
                "Algorithms",
                "Constructive"
            ],
            "problem_code_id": "CO92JUDG",
            "difficulty_level": "984",
            "ai_solutions": [
                "T = int(input())\nfor _ in range(T):\n    N = int(input())\n    A = list(map(int, input().split()))\n    B = list(map(int, input().split()))\n    A.remove(max(A))\n    B.remove(max(B))\n    sum_A = sum(A)\n    sum_B = sum(B)\n    if sum_A < sum_B:\n        print(\"Alice\")\n    elif sum_A > sum_B:\n        print(\"Bob\")\n    else:\n        print(\"Draw\")",
                "T = int(input())\nfor _ in range(T):\n    N = int(input())\n    A = sorted(list(map(int, input().split())))\n    B = sorted(list(map(int, input().split())))\n    A.pop()\n    B.pop()\n    sum_A = sum(A)\n    sum_B = sum(B)\n    if sum_A < sum_B:\n        print(\"Alice\")\n    elif sum_A > sum_B:\n        print(\"Bob\")\n    else:\n        print(\"Draw\")"
            ],
            "human_solutions": [
                {
                    "id": 33057411,
                    "submission_date": 1589365207,
                    "language": "PYTH 3",
                    "username": "venky13",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.01",
                    "memory": "17.6M",
                    "solution": 33057411,
                    "code": "for i in range(int(input())):\n\tx=int(input())\n\ta=list(map(int,input().split()))\n\tb=list(map(int,input().split()))\n\ta.sort()\n\tb.sort()\n\ta.pop(-1)\n\tb.pop(-1)\n\tc=sum(a)\n\td=sum(b)\n\tif c>d:\n\t\tprint('Bob')\n\telif d>c:\n\t\tprint('Alice')\n\telif c==d:\n\t\tprint('Draw')"
                },
                {
                    "id": 33041017,
                    "submission_date": 1589286997,
                    "language": "PYTH 3",
                    "username": "sameer_kousik",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.01",
                    "memory": "17.6M",
                    "solution": 33041017,
                    "code": "def  call():\n    n = int(input())\n    A = [int(x) for x in input().split()]\n    B = [int(x) for x in input().split()]\n    tA = sum(A)-max(A)\n    tB = sum(B)-max(B)\n    if(tA<tB):\n        print(\"Alice\")\n    elif(tB<tA):\n        print(\"Bob\")\n    else:\n        print('Draw')\n        \nt = int(input())\nfor i in range(t):\n    call()"
                }
            ]
        },
        "RECTSQ": {
            "constraints": "$1 \\le T \\le 20$ \n$1 \\le M \\le 10000$\n$1 \\le N \\le 10000$",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "2\n10 15\n4 6\n",
                    "output": "6\n6\n",
                    "explanation": ""
                }
            ],
            "problem_statement": "Santosh has a farm at Byteland. He has a very big family to look after.  His life takes a sudden turn and he runs into a financial crisis. After giving all the money he has in his hand, he decides to sell his plots. The speciality of his land is that it is rectangular in nature. Santosh comes to know that he will get more money if he sells square shaped plots. So keeping this in mind, he decides to divide his land into minimum possible number of square plots, such that each plot has the same area, and  the plots divide the land perfectly. He does this in order to get the maximum profit out of this.   \nSo your task is to find the minimum number of square plots with the same area, that can be formed out of the rectangular land, such that they divide it perfectly.",
            "input_format": "The first line of the input contains $T$, the number of test cases. Then $T$ lines follow.\nThe first and only line of each test case contains two space-separated integers, $N$ and $M$, the length and the breadth of the land, respectively.",
            "output_format": "For each test case, print the minimum number of square plots with equal area, such that they divide the farm land perfectly, in a new line.",
            "problem_name": "Farmer And His Plot",
            "user_tags": [
                "Basic Maths",
                "Geometry",
                "GCD",
                "Observation"
            ],
            "computed_tags": [
                "Mathematics",
                "Number Theory",
                "Algorithms"
            ],
            "problem_code_id": "RECTSQ",
            "difficulty_level": "936",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 33516478,
                    "submission_date": 1590898769,
                    "language": "PYTH 3",
                    "username": "abhii2401",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.02",
                    "memory": "17.6M",
                    "solution": 33516478,
                    "code": "def hcf(a, b):\r\n    if b < a:\r\n        a, b = b, a\r\n    if a % b == 0:\r\n        return b\r\n    h = 1\r\n    for i in range(1, b + 1):\r\n        if a % i == 0 and b % i == 0:\r\n            h = i\r\n    return h\r\n\r\ndef lcm(a, b, h):\r\n    return a * b // h\r\n\r\nfor _ in range(int(input())):\r\n    n, m = map(int, input().split())\r\n    h = hcf(n, m)\r\n    l = lcm(n, m, h)\r\n    print(l // h)\r\n"
                },
                {
                    "id": 33490145,
                    "submission_date": 1590854373,
                    "language": "PYTH 3",
                    "username": "yarlagadda",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.02",
                    "memory": "17.6M",
                    "solution": 33490145,
                    "code": "import math\nt=int(input())\nfor i in range(t):\n    n,m=map(int,input().split())\n    a=math.gcd(n,m)\n    n1=int(n/a)\n    n2=int(m/a)\n    print(n1*n2)"
                }
            ]
        },
        "NAICHEF": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "2\n5 1 1\n1 1 1 1 1\n2 1 1\n1 2",
                    "output": "1.0000000000\n0.2500000000",
                    "explanation": ""
                }
            ],
            "problem_statement": "Read problems statements in Mandarin chinese, Russian and Vietnamese as well.\nOnce, after a stressful day, Chef decided to relax and visit a casino near his house to gamble. He feels lucky and he's going to bet almost all of his money.\nThe game Chef is going to play in the casino consists of tossing a die with $N$ faces twice. There is a number written on each face of the die (these numbers are not necessarily distinct). In order to win, Chef must get the number $A$ on the first toss and the number $B$ on the second toss of the die.\nThe excited viewers want to know the probability that Chef will win the game. Can you help them find that number? Assume that Chef gets each face of the die with the same probability on each toss and that tosses are mutually independent.\nInput\n\nThe first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\nThe first line of each test case contains three space-separated integers $N$, $A$ and $B$.\nThe second line contains $N$ space-separated integers $x_1, x_2, \\dots, x_N$ denoting the numbers written on the faces of the die.\n\nOutput\nFor each test case, print a single line containing one real number \u2014 the probability that Chef will win. Your answer will be considered correct if its absolute error does not exceed $10^{-6}$.\nConstraints\n\n$1 \\le T \\le 70$\n$1 \\le N \\le 10^4$\n$1 \\le A \\le N$\n$1 \\le B \\le N$\n$1 \\le x_i \\le N$ for each valid $i$\n\nSubtasks\nSubtask #1 (20 points):\n- $T \\le 10$\n- $N \\le 100$\nSubtask #2 (80 points): original constraints",
            "input_format": "",
            "output_format": "",
            "problem_name": "Naive Chef",
            "user_tags": [
                "Data Types",
                "Probability",
                "Basic Maths"
            ],
            "computed_tags": [
                "Basic Programming Concepts",
                "Mathematics"
            ],
            "problem_code_id": "NAICHEF",
            "difficulty_level": "990",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 34940800,
                    "submission_date": 1593741956,
                    "language": "PYTH 3",
                    "username": "sibbu_30",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.08",
                    "memory": "17.9M",
                    "solution": 34940800,
                    "code": "t=int(input())\nfor i in range(t):\n    n,a,b=map(int,input().split())\n    l=list(map(int,input().split()))\n    w=(l.count(a)*l.count(b))/(n*n)\n    print(w)"
                },
                {
                    "id": 34937179,
                    "submission_date": 1593708541,
                    "language": "PYTH 3",
                    "username": "yash_0402",
                    "user_rating_star": 5,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.07",
                    "memory": "18M",
                    "solution": 34937179,
                    "code": "t=int(input())\nwhile t>0 :\n    n,a,b=map(int,input().split())\n    x=list(map(int,input().split()))\n    print((x.count(a)*x.count(b))/(n*n))\n    t-=1"
                }
            ]
        },
        "SNAPE": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "3\n4 5\n10 12\n10 20",
                    "output": "3.0 6.40312\n6.63325 15.6205\n17.3205 22.3607",
                    "explanation": ""
                }
            ],
            "problem_statement": "Read problems statements in Mandarin Chinese and Russian as well.\n\n\nProfessor Snape has lots of potions. Bottles containing all types of potions are stacked on shelves which cover the entire wall from floor to ceiling. Professor Snape has broken his bones several times while climbing the top shelf for retrieving a potion. He decided to get a ladder for him. But he has no time to visit Diagon Alley. So he instructed Ron Weasley to make a ladder for him. Professor Snape specifically wants a step ladder which looks like an inverted 'V' from side view.\nProfessor just mentioned two things before vanishing-\n\nB - separation between left side (LS) and right side (RS) on the ground\nLS - the length of left side\nWhat should be the length of RS? At one extreme LS can be vertical and at other RS can be vertical. Ron is angry and confused. Since Harry is busy battling Voldemort, its your duty to help him find the minimum and maximum length of RS.\nInput\nFirst line contains single integer T, the number of test cases. Then T lines follow each containing 2 integers - B and LS.\nOutput\nOutput T lines, each containing minimum value of RS and maximum value of RS, separated by space. The answer (RS) will be considered correct if it has relative and absolute error less than 10-2.\nConstraints\n1 \u2264 T \u2264 10001 \u2264 B LS \u2264 1000",
            "input_format": "",
            "output_format": "",
            "problem_name": "Snape and Ladder",
            "user_tags": [
                "cakewalk",
                "cook45",
                "geometry",
                "implementation",
                "vinay_adm"
            ],
            "computed_tags": [],
            "problem_code_id": "SNAPE",
            "difficulty_level": "828",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 35914211,
                    "submission_date": 1595659707,
                    "language": "PYTH 3",
                    "username": "aman_ravan02",
                    "user_rating_star": 3,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.02",
                    "memory": "17.6M",
                    "solution": 35914211,
                    "code": "from math import *\r\nfor j in range(int(input())):\r\n    a,b=map(int,input().split())\r\n    c=sqrt(abs(a**2-b**2))\r\n    d=sqrt(a**2+b**2)\r\n    print(c,d)"
                },
                {
                    "id": 35556282,
                    "submission_date": 1594573607,
                    "language": "PYTH 3",
                    "username": "rishav_mz",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.02",
                    "memory": "17.6M",
                    "solution": 35556282,
                    "code": "import math\nt = int(input())\nfor t1 in range(t):\n    a, b = input().split()\n    a , b = int(a) , int(b)\n    print(math.sqrt(b*b - a*a), math.sqrt(b*b + a*a))"
                }
            ]
        },
        "CCOOK": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "7\n0 0 0 0 0\n0 1 0 1 0\n0 0 1 0 0\n1 1 1 1 1\n0 1 1 1 0\n0 1 1 1 1\n1 1 1 1 0",
                    "output": "Beginner\nMiddle Developer\nJunior Developer\nJeff Dean\nSenior Developer\nHacker\nHacker",
                    "explanation": "The first contestant has no solved problems, therefore he is a beginner. The second contestant solved 2 problems (the second and fourth problem), therefore he has the skills of a middle developer. The third contestant solved 1 problem, therefore he's at the expected level of a junior developer. The fourth contestant solved 5 problems \u2014 we can guess it was Jeff Dean. The fifth contestant solved 3 problems, so he is a senior developer. And the last two contestants should be hackers because they solved exactly 4 problems each."
                }
            ],
            "problem_statement": "Read problems statements in Mandarin chinese, Russian and Vietnamese as well.\nChef has obtained the results of a past Cook-Off. He wants to estimate the skill level of each contestant. The contestants can be classified with high probability (w.h.p.) based on the number of solved problems:\n\n\nA contestant that solved exactly 0 problems is a beginner.\nA contestant that solved exactly 1 problem is a junior developer.\nA contestant that solved exactly 2 problems is a middle developer.\nA contestant that solved exactly 3 problems is a senior developer.\nA contestant that solved exactly 4 problems is a hacker.\nA contestant that solved all five problems is Jeff Dean.\n\nPlease help Chef to identify the programming level of each participant.\nInput\n\nThe first line of the input contains a single integer N denoting the number of competitors.\nN lines follow. The i-th of these lines contains five space-separated integers Ai, 1, Ai, 2, Ai, 3, Ai, 4, Ai, 5. The j-th of these integers (1 \u2264 j \u2264 5) is 1 if the i-th contestant solved the j-th problem and 0 otherwise.\n\nOutput\nFor each participant, print a single line containing one string denoting Chef's classification of that contestant \u2014 one of the strings \"Beginner\", \"Junior Developer\", \"Middle Developer\", \"Senior Developer\", \"Hacker\", \"Jeff Dean\" (without quotes).\nConstraints\n\n1 \u2264 N \u2264 5000\n0 \u2264 Ai, j \u2264 1 for each valid i, j",
            "input_format": "",
            "output_format": "",
            "problem_name": "Chef and Cook-Off",
            "user_tags": [
                "Case work",
                "Conditional Statements"
            ],
            "computed_tags": [
                "Special",
                "Basic Programming Concepts"
            ],
            "problem_code_id": "CCOOK",
            "difficulty_level": "961",
            "ai_solutions": [
                "N = int(input())\nfor _ in range(N):\n    problems_solved = sum(map(int, input().split()))\n    if problems_solved == 0:\n        print(\"Beginner\")\n    elif problems_solved == 1:\n        print(\"Junior Developer\")\n    elif problems_solved == 2:\n        print(\"Middle Developer\")\n    elif problems_solved == 3:\n        print(\"Senior Developer\")\n    elif problems_solved == 4:\n        print(\"Hacker\")\n    else:\n        print(\"Jeff Dean\")",
                "N = int(input())\nclassification = [\"Beginner\", \"Junior Developer\", \"Middle Developer\", \"Senior Developer\", \"Hacker\", \"Jeff Dean\"]\nfor _ in range(N):\n    problems_solved = sum(map(int, input().split()))\n    print(classification[problems_solved])"
            ],
            "human_solutions": [
                {
                    "id": 34640789,
                    "submission_date": 1592830033,
                    "language": "PYTH 3",
                    "username": "alekhya77",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.03",
                    "memory": "17.6M",
                    "solution": 34640789,
                    "code": "def EstimateSkill(points) :\n    count = points.count(1)\n    \n    if count == 0:\n        return \"Beginner\"\n    elif count == 1:\n        return \"Junior Developer\"\n    elif count == 2:\n        return \"Middle Developer\"\n    elif count == 3:\n        return \"Senior Developer\"\n    elif count == 4:\n        return \"Hacker\"\n    else:\n        return \"Jeff Dean\"\n    \n    \nLIMIT = int(input()) \n\nwhile LIMIT > 0 :\n    LIMIT -= 1 \n    points = list(map(int, input().split()))\n    print(EstimateSkill(points))"
                },
                {
                    "id": 34557350,
                    "submission_date": 1592716635,
                    "language": "PYTH 3",
                    "username": "anjana_13",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.04",
                    "memory": "17.6M",
                    "solution": 34557350,
                    "code": "for i in range(int(input())):\n    count=0\n    l=list(map(int,input().split()))\n    for num in l:\n        if num==1:\n            count+=1\n    if count==0:\n        print(\"Beginner\")\n    elif count==1:\n        print(\"Junior Developer\")\n    elif count==2:\n        print( \"Middle Developer\")\n    elif count==3:\n        print(\"Senior Developer\")\n    elif count==4:\n        print(\"Hacker\")\n    elif count==5:\n        print( \"Jeff Dean\")"
                }
            ]
        },
        "CHFINTRO": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "2 1500\r\n1499\r\n1501",
                    "output": "Bad boi\r\nGood boi",
                    "explanation": ""
                }
            ],
            "problem_statement": "Read problems statements Hindi , Vietnamese , Mandarin Chinese , Russian and Bengali as well.\n\"Every beginning has an end... and an editorial.\" - taran_1407\nWhat the hell are all these interactive problems? What does flushing output mean? So many questions... Chef explains it in an easy way: you must communicate with a grader program, which accepts your input only if you flushed the output.\nThere is a contest with interactive problems where $N$ people participate. Each contestant has a known rating. Chef wants to know which contestants will not forget to flush the output in interactive problems. Fortunately, he knows that contestants with rating at least $r$ never forget to flush their output and contestants with rating smaller than $r$ always forget to do it. Help Chef!\nInput\n\nThe first line of the input contains two space-separated integers $N$ and $r$.\nEach of the following $N$ lines contains a single integer $R$ denoting the rating of one contestant.\n\nOutput\nFor each contestant, print a single line containing the string \"Good boi\" if this contestant does not forget to flush the output or \"Bad boi\" otherwise.\nConstraints\n\n$1 \\le N \\le 1,000$\n$1,300 \\le r, R \\le 1,501$\n\nSubtasks\nSubtask #1 (100 points): original constraints",
            "input_format": "",
            "output_format": "",
            "problem_name": "Chef and Interactive Contests",
            "user_tags": [
                "Implementation"
            ],
            "computed_tags": [
                "Algorithms"
            ],
            "problem_code_id": "CHFINTRO",
            "difficulty_level": "951",
            "ai_solutions": [
                "N, r = map(int, input().split())\nfor _ in range(N):\n    R = int(input())\n    if R >= r:\n        print(\"Good boi\")\n    else:\n        print(\"Bad boi\")",
                "N, r = map(int, input().split())\nratings = [int(input()) for _ in range(N)]\nfor rating in ratings:\n    print(\"Good boi\" if rating >= r else \"Bad boi\")"
            ],
            "human_solutions": [
                {
                    "id": 32660422,
                    "submission_date": 1588580813,
                    "language": "PYTH 3",
                    "username": "surya_22",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.02",
                    "memory": "17.6M",
                    "solution": 32660422,
                    "code": "t,n=map(int,input().split())\nfor i in range(t):\n    m=int(input())\n    if m>=n:\n        print('Good boi')\n    else:\n        print('Bad boi')"
                },
                {
                    "id": 37578872,
                    "submission_date": 1599466185,
                    "language": "PYTH 3",
                    "username": "jomsaiadarsh",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "\\/misc\\/icons\\/tick-icon.svg",
                    "time": "0.02",
                    "memory": "17.6M",
                    "solution": 37578872,
                    "code": "n,r=list(map(int,input().split()))\nfor i in range(n):\n    s=int(input())\n    if(s>=r):\n        print(\"Good boi\");\n    else:\n        print(\"Bad boi\");"
                }
            ]
        }
    },
    "1": {
        "CHEFCBA": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "1 2 4 2",
                    "output": "Possible",
                    "explanation": "By swapping 4 and the second 2, we get 1 2 2 4. Note that 1 2 2 4 make proportion as 1 : 2 = 2 : 4. Hence answer is \"Possible\""
                }
            ],
            "problem_statement": "Read problems statements in Mandarin Chinese, Russian and Vietnamese as well.\nRead problems statements in Mandarin Chinese, Russian and Vietnamese as well.\nChef recently learned about ratios and proportions. He wrote some positive integers a, b, c, d on a paper. Chef wants to know whether he can shuffle these numbers so as to make some proportion? Formally, four numbers x, y, z, w are said to make a proportion if ratio of x : y is same as that of z : w.\nInput\nOnly line of the input contains four space separated positive integers - a, b, c, d.\nOutput\nPrint \"Possible\" if it is possible to shuffle a, b, c, d to make proportion, otherwise \"Impossible\" (without quotes).\nConstraints\n\n1 \u2264 a, b, c, d  \u2264 1000",
            "input_format": "",
            "output_format": "",
            "problem_name": "Chef and Proportion",
            "user_tags": [
                "Brute Force"
            ],
            "computed_tags": [
                "Algorithms"
            ],
            "problem_code_id": "CHEFCBA",
            "difficulty_level": "1122",
            "ai_solutions": [
                "def check_proportion(a, b, c, d):\n    if a/b == c/d or a/c == b/d or a/d == b/c:\n        return \"Possible\"\n    else:\n        return \"Impossible\"\n\na, b, c, d = map(int, input().split())\nprint(check_proportion(a, b, c, d))",
                "def check_proportion(a, b, c, d):\n    numbers = [a, b, c, d]\n    numbers.sort()\n    if numbers[0]/numbers[1] == numbers[2]/numbers[3]:\n        return \"Possible\"\n    else:\n        return \"Impossible\"\n\na, b, c, d = map(int, input().split())\nprint(check_proportion(a, b, c, d))"
            ],
            "human_solutions": [
                {
                    "id": 34469102,
                    "submission_date": 1592323513,
                    "language": "PYTH 3",
                    "username": "thecodinghero",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.02",
                    "memory": "17.6M",
                    "solution": 34469102,
                    "code": "a = [int(i) for i in input().split() if i.isdigit()]\na.sort();\nif a[0] * a[3] == a[1] * a[2]:\n    print(\"Possible\")\nelse:\n    print(\"Impossible\")\n    "
                },
                {
                    "id": 33617102,
                    "submission_date": 1591264195,
                    "language": "PYTH 3",
                    "username": "naveenrathore",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.02",
                    "memory": "17.5M",
                    "solution": 33617102,
                    "code": "lst = list(map(int, input().split()))\nlst.sort()\nif lst[0] / lst[1] == lst[2] / lst[3]:\n    print(\"Possible\")\nelse:\n    print(\"Impossible\")\n\n"
                }
            ]
        },
        "RNDPAIR": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "3\n4\n3 3 3 3\n6\n1 1 1 2 2 2\n4\n1 2 2 3",
                    "output": "1.00000000\n0.20000000\n0.33333333",
                    "explanation": ""
                }
            ],
            "problem_statement": "Read problems statements in Russian and Vietnamese as well.\nChefu is Chef's little brother, he is 12 years old and he is new to competitive programming.\nChefu is practicing very hard to become a very skilled competitive programmer and win gold medal in IOI.\nNow Chefu is participating in a contest and the problem that he is trying to solve states:\nGiven an array A of N integers, find any i, j such that i  j \n and Ai + Aj is maximum possible \nunfortunately, there's no much time left before the end of the contest, so Chefu doesn't have time to think of correct solution, so instead, he wrote a solution that selects a random pair (i,  j) (i  j) and output Ai + Aj. each pair is equiprobable to be selected.\nNow Chefu wants your help to calculate the probability that his solution will pass a particular input.\n\u00a0\nInput\nFirst line contains an integer T denoting the number of test-cases.\nFirst line of each test-case contains a single integer N\nSecond line of each test-case contains N space-separated integers A1 A2 ... AN\n\u00a0\nOutput\nFor each test-case output a single line containing a single number denoting the probability that Chefu's solution to output a correct answer. your answer will be accepted if the absolute difference between it and correct answer is less than 1e-6\nConstraints\n1 \u2264 T \u2264 100\n2 \u2264 N \u2264 100\n1 \u2264 Ai \u2264 1,000",
            "input_format": "",
            "output_format": "",
            "problem_name": "Random Pair",
            "user_tags": [
                "Probability",
                "Brute Force",
                "Implementation"
            ],
            "computed_tags": [
                "Mathematics",
                "Algorithms"
            ],
            "problem_code_id": "RNDPAIR",
            "difficulty_level": "1174",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 33388777,
                    "submission_date": 1590643052,
                    "language": "PYTH 3",
                    "username": "ansuman_333",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.02",
                    "memory": "17.5M",
                    "solution": 33388777,
                    "code": "t=int(input())\nfor _ in range(t):\n    n=int(input())\n    li=list(map(int, input().split()))\n    a=[]\n    b=0\n    for i in range(n):\n        for j in range(i+1,n):\n            b=li[i]+li[j]\n            a.append(b)\n    max_count=max(a)\n    c=a.count(max_count)\n    print(\"%.8f\"% (c/len(a)))"
                },
                {
                    "id": 33351058,
                    "submission_date": 1590476873,
                    "language": "PYTH 3",
                    "username": "vishal_2",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.01",
                    "memory": "17.6M",
                    "solution": 33351058,
                    "code": "for _ in range(int(input())):\n\tn = int(input())\n\tli = [int(i) for i in input().split()]\n\td = n*(n-1)/2\n\tma = 0\n\tl = 0\n\tfor i in range(n):\n\t\tif li[i]>=ma:\n\t\t\tif li[i]==ma:\n\t\t\t\tl+=1\n\t\t\telse:\n\t\t\t\tind = i\n\t\t\t\tma = li[i]\n\t\t\t\tl = 1\n\tif l>1:\n\t\ts=l*(l-1)/2\n\telse:\n\t\ta = max(li[:ind]+li[ind+1:])\n\t\ts = li.count(a)\n\tprint(f'{s/d:.8f}')"
                }
            ]
        },
        "CHEFSOCK": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "1 2 3",
                    "output": "Unlucky Chef",
                    "explanation": "Test #1:\nWhen Chef arrived at the shop, he had 3 rupees. After buying the jacket, he has 2 rupees left, enough to buy only 1 sock."
                },
                {
                    "input": "1 2 6",
                    "output": "Lucky Chef",
                    "explanation": "Test #2:\nChef had 6 rupees in the beginning. After buying the jacket, he has 5 rupees left, enough to buy a pair of socks for 4 rupees."
                }
            ],
            "problem_statement": "Read problems statements in Mandarin Chinese , Russian and Vietnamese as well.\n\nToday, Chef woke up to find that he had no clean socks. Doing laundry is such a turn-off for Chef, that in such a situation, he always buys new socks instead of cleaning the old dirty ones. He arrived at the fashion store with money rupees in his pocket and started looking for socks. Everything looked good, but then Chef saw a new jacket which cost jacketCost rupees. The jacket was so nice that he could not stop himself from buying it.\n\nInterestingly, the shop only stocks one kind of socks, enabling them to take the unsual route of selling single socks, instead of the more common way of selling in pairs. Each of the socks costs sockCost rupees.\n\n\nChef bought as many socks as he could with his remaining money. It's guaranteed that the shop has more socks than Chef can buy. But now, he is interested in the question: will there be a day when he will have only 1 clean sock, if he uses a pair of socks each day starting tommorow? If such an unlucky day exists, output \"Unlucky Chef\", otherwise output \"Lucky Chef\". Remember that Chef never cleans or reuses any socks used once.\n\nInput\nThe first line of input contains three integers \u2014 jacketCost, sockCost, money \u2014 denoting the cost of a jacket, cost of a single sock, and the initial amount of money Chef has, respectively.\n\n\nOutput\nIn a single line, output \"Unlucky Chef\" if such a day exists. Otherwise, output \"Lucky Chef\". \nConstraints\n1 \u2264 jacketCost \u2264 money \u2264 109\n1 \u2264 sockCost \u2264 109\n\nSubtasks\nSubtask 1:  jacketCost, money, sockCost \u2264 103. Points - 20\nSubtask 2: Original constraints. Points - 80",
            "input_format": "",
            "output_format": "",
            "problem_name": "Chef and Socks",
            "user_tags": [
                "Basic Maths",
                "Implementation"
            ],
            "computed_tags": [
                "Mathematics",
                "Algorithms"
            ],
            "problem_code_id": "CHEFSOCK",
            "difficulty_level": "1122",
            "ai_solutions": [
                "jacketCost, sockCost, money = map(int, input().split())\nremaining_money = money - jacketCost\nsocks_bought = remaining_money // sockCost\nif socks_bought % 2 == 0:\n    print(\"Lucky Chef\")\nelse:\n    print(\"Unlucky Chef\")",
                "def chef_luck(jacketCost, sockCost, money):\n    remaining_money = money - jacketCost\n    socks_bought = remaining_money // sockCost\n    return \"Lucky Chef\" if socks_bought % 2 == 0 else \"Unlucky Chef\"\n\njacketCost, sockCost, money = map(int, input().split())\nprint(chef_luck(jacketCost, sockCost, money))"
            ],
            "human_solutions": [
                {
                    "id": 34371594,
                    "submission_date": 1592143501,
                    "language": "PYTH 3",
                    "username": "vittal_161",
                    "user_rating_star": 3,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.02",
                    "memory": "17.6M",
                    "solution": 34371594,
                    "code": "A,B,C=map(int,input().split())\nif ((C-A)//B)%2==0:\n\tprint(\"Lucky Chef\")\nelse:\n\tprint(\"Unlucky Chef\")"
                },
                {
                    "id": 33542933,
                    "submission_date": 1590994825,
                    "language": "PYTH 3",
                    "username": "bhuwana_18537",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.02",
                    "memory": "17.5M",
                    "solution": 33542933,
                    "code": "#CHEF AND SOCKS\n\njc,sc,m = map(int,input().split())\n\nrem_jcm = m-jc\nrem_scm = (rem_jcm)//sc\n\nif rem_scm % 2 == 0:\n    print(\"Lucky Chef\")\nelse:\n    print(\"Unlucky Chef\")\n    \n"
                }
            ]
        },
        "TRACE": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "1\n3\n1 2 5\n6 3 4\n2 7 1",
                    "output": "13",
                    "explanation": "Example case 1: The submatrix with the largest trace is \n6 3\n2 7\nwhich has trace equal to $6 + 7 = 13$. (This submatrix is obtained for $r=2, c=1, l=2$.)"
                }
            ],
            "problem_statement": "Read problems statements in Mandarin chinese and Vietnamese as well.\nChef is learning linear algebra. Recently, he learnt that for a square matrix $M$, $\\mathop{\\rm trace}(M)$ is defined as the sum of all elements on the main diagonal of $M$ (an element lies on the main diagonal if its row index and column index are equal).\nNow, Chef wants to solve some excercises related to this new quantity, so he wrote down a square matrix $A$ with size $N\\times N$. A square submatrix of $A$ with size $l\\times l$ is a contiguous block of $l\\times l$ elements of $A$. Formally, if $B$ is a submatrix of $A$ with size $l\\times l$, then there must be integers $r$ and $c$ ($1\\le r, c \\le N+1-l$) such that $B_{i,j} = A_{r+i-1, c+j-1}$ for each $1 \\le i, j \\le l$.\nHelp Chef find the maximum trace of a square submatrix of $A$.\nInput\n\nThe first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\nThe first line of each test case contains a single integer $N$.\n$N$ lines follow. For each $i$ ($1 \\le i \\le N$), the $i$-th of these lines contains $N$ space-separated integers $A_{i,1}, A_{i,2}, \\dots, A_{i, N}$ denoting the $i$-th row of the matrix $A$.\n\nOutput\nFor each test case, print a single line containing one integer \u2014 the maximum possible trace.\nConstraints\n\n$1 \\le T \\le 100$\n$2 \\le N \\le 100$\n$1 \\le A_{i,j} \\le 100$ for each valid $i, j$\n\nSubtasks\nSubtask #1 (100 points): original constraints",
            "input_format": "",
            "output_format": "",
            "problem_name": "Trace of Matrix",
            "user_tags": [
                "Observation",
                "Brute Force"
            ],
            "computed_tags": [
                "Algorithms"
            ],
            "problem_code_id": "TRACE",
            "difficulty_level": "1198",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 39941534,
                    "submission_date": 1606848478,
                    "language": "PYTH 3",
                    "username": "shankar_2000",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.48",
                    "memory": "17.6M",
                    "solution": 39941534,
                    "code": "for _ in range(int(input())):\n    n=int(input())\n    l=[]\n    ans=0\n    for i in range(n):\n        l.append(list(map(int,input().split())))\n    for i in range(n-1):\n        for j in range(n-1):\n            l[i+1][j+1]+=l[i][j]\n    for i in range(n):\n        for j in range(n):\n            ans=max(ans,l[i][j])\n    print(ans)"
                },
                {
                    "id": 39688383,
                    "submission_date": 1605706687,
                    "language": "PYTH 3",
                    "username": "sharan_linux",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.48",
                    "memory": "17.6M",
                    "solution": 39688383,
                    "code": "for _ in range(int(input())):\r\n    n=int(input())\r\n    l=[]\r\n    ans=0\r\n    for i in range(n):\r\n        l.append(list(map(int,input().split())))\r\n    for i in range(n-1):\r\n        for j in range(n-1):\r\n            l[i+1][j+1]+=l[i][j]\r\n    for i in range(n):\r\n        for j in range(n):\r\n            ans=max(ans,l[i][j])\r\n    print(ans)"
                }
            ]
        },
        "EXUNA": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "1\n2\n7 12",
                    "output": "7",
                    "explanation": "The two possible ways to order the elements are [7, 12] and [12, 7]. In the first case, the cost is $7 \\bmod 12 = 7$ and in the second case the cost is $12 \\bmod 7 = 5$. Clearly the answer is 7."
                }
            ],
            "problem_statement": "You are given an array $A$ of $N$ positive and pairwise distinct integers. \nYou can permute the elements in any way you want. \nThe cost of an ordering $(A_1, A_2, \\ldots, A_N)$ is defined as $ (((A_1 \\bmod A_2) \\bmod A_3)......) \\bmod A_N$ where $X \\bmod Y$ means the remainder when $X$ is divided by $Y$. \nYou need to find the maximum cost which can be attained through any possible ordering of the elements.\nInput:\n\nThe first line contains $T$ denoting the number of test cases.\nThe first line of each testcase contains a single integer $N$. \nThe second line of each testcase contains $N$ space-separated integers, the elements of $A$. \n\nOutput:\n\nFor each testcase, output the maximum possible cost in a new line. \n\nConstraints\n\n$1 \\leq T \\leq 5*10^5$\n$2 \\leq N \\leq 5*10^5$\n$1 \\leq A_i  \\leq 10^9$\nSum of $N$ over all testcases is less than or equal to $10^6$\nAll elements in a single testcase are distinct.\n\nSubtasks\n\n100 points : Original constraints.",
            "input_format": "",
            "output_format": "",
            "problem_name": "Weird Modulo Problem ",
            "user_tags": [
                "Observation"
            ],
            "computed_tags": [
                "Algorithms"
            ],
            "problem_code_id": "EXUNA",
            "difficulty_level": "1104",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 37120987,
                    "submission_date": 1598261606,
                    "language": "PYTH 3",
                    "username": "shirishareddy7",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.53",
                    "memory": "22.3M",
                    "solution": 37120987,
                    "code": "for _ in range(int(input())):\n      n=int(input())\n      l=list(map(int,input().split()))\n      print(min(l))\n            \n                  \n            \n      \n      "
                },
                {
                    "id": 37024639,
                    "submission_date": 1597937766,
                    "language": "PYTH 3",
                    "username": "sumanthhh_1",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.46",
                    "memory": "22.3M",
                    "solution": 37024639,
                    "code": "for _ in range(int(input())):\r\n     n=int(input())\r\n     a=list(map(int,input().split()))\r\n     print(min(a))\r\n"
                }
            ]
        },
        "UTMOPR": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "1\n2 3\n5 7",
                    "output": "even",
                    "explanation": ""
                }
            ],
            "problem_statement": "Read problems statements in Mandarin Chinese and Russian as well.\nGiven an array consisting of N integers, you have to do the following operation K times.\n\n\nFind out the sum of all the elements in the array. Denote it by S. Insert an integer in the array strictly greater than S. Hence, size of the array will increase by one. \nThus, at the end of the K operations, the array will have N + K elements. Find out the smallest possible value of the last number inserted in the array. Since this number can be very large, you just have to tell whether it will be odd or even. \nInput\nThe first line of each test file contains the number of test cases, T.\nThe description of the test cases follows this line. Each test case description consists of 2 lines.\nThe first line has the values of N and K, separated by a space. \nThe next line contains a single-space separated list of values of the elements in the array.\n\nOutput\nFor each test case, output a single line containing the answer to the problem.If the number is even print \"even\"  and if the number is odd print  \"odd\".\n\nConstraints:\n\n\n1 \u2264 T \u226410\n1 \u2264 K \u2264 106\n1 \u2264 N \u2264 103\n1 \u2264 array element \u2264 109",
            "input_format": "",
            "output_format": "",
            "problem_name": "Strange operations",
            "user_tags": [
                "Implementation"
            ],
            "computed_tags": [
                "Algorithms"
            ],
            "problem_code_id": "UTMOPR",
            "difficulty_level": "1148",
            "ai_solutions": [
                "T = int(input())\nfor _ in range(T):\n    N, K = map(int, input().split())\n    arr = list(map(int, input().split()))\n    S = sum(arr)\n    if S % 2 == 0:\n        if K == 1:\n            print(\"odd\")\n        else:\n            print(\"even\")\n    else:\n        print(\"odd\")",
                "T = int(input())\nfor _ in range(T):\n    N, K = map(int, input().split())\n    arr = list(map(int, input().split()))\n    S = sum(arr)\n    print(\"odd\" if S % 2 == 1 or K == 1 else \"even\")"
            ],
            "human_solutions": [
                {
                    "id": 37942702,
                    "submission_date": 1600180251,
                    "language": "PYTH 3",
                    "username": "shilpa98",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.01",
                    "memory": "17.6M",
                    "solution": 37942702,
                    "code": "for _ in range(int(input())):\n    \n    n,k =  map(int,input().split())\n    s =  sum(map(int,input().split()))\n\n\n    if s% 2 !=0:\n        print( 'even')\n    else:\n        if k==1:\n            print('odd')\n        else:\n            print('even')"
                },
                {
                    "id": 37530817,
                    "submission_date": 1599383291,
                    "language": "PYTH 3",
                    "username": "srisai_525",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.01",
                    "memory": "17.6M",
                    "solution": 37530817,
                    "code": "try:\n    for _ in range(int(input())):\n        N, K = map(int, input().split(\" \"))\n        l = list(map(int, input().split(\" \")))\n        s = sum(l)\n        if(s % 2 == 0 and K == 1):\n            print(\"odd\")\n        else:\n            print(\"even\")\nexcept:\n    pass"
                }
            ]
        },
        "PAJAPONG": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "3\n1 3 3\n5 7 2\n38657 76322 564",
                    "output": "Paja\nChef\nPaja",
                    "explanation": "Example case 1: Chef served for the first three games, after that Paja started serving. He only served in one game, so he is supposed to serve next."
                }
            ],
            "problem_statement": "Read problem statements in Hindi, Bengali, Mandarin Chinese, Russian, and Vietnamese as well.\nChef and Paja are bored, so they are playing an infinite game of ping pong. The rules of the game are as follows:\n- The players play an infinite number of games. At the end of each game, the player who won it scores a point.\n- In each game, one of the players serves. Chef serves in the first game.\n- After every $K$ points are scored (regardless of which players scored them), i.e. whenever $K$ games have been played since the last time the serving player changed, the player that serves in the subsequent games changes: if Chef served in the game that just finished, then Paja will serve in the next game and all subsequent games until the serving player changes again; if Paja served, then Chef will serve.\nThe players got a little too caught up in the game and they forgot who is supposed to serve in the next game. Will you help them determine that? So far, Chef has scored $X$ points and Paja has scored $Y$ points.\nInput\n\nThe first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\nThe first and only line of each test case contains three space-separated integers $X$, $Y$ and $K$.\n\nOutput\nFor each test case, print a single line containing the string \"Chef\" if Chef is supposed to serve next or \"Paja\" otherwise (without quotes).\nConstraints\n\n$1 \\le T \\le 50$\n$0 \\le X, Y \\le 10^9$\n$1 \\le K \\le 10^9$\n\nSubtasks\nSubtask #1 (100 points): original constraints",
            "input_format": "",
            "output_format": "",
            "problem_name": "Ping Paja Pong",
            "user_tags": [
                "Modular Arithmetic",
                "Basic Maths",
                "ad-hoc"
            ],
            "computed_tags": [
                "Mathematics",
                "Algorithms",
                "Constructive"
            ],
            "problem_code_id": "PAJAPONG",
            "difficulty_level": "1172",
            "ai_solutions": [
                "T = int(input())\nfor _ in range(T):\n    X, Y, K = map(int, input().split())\n    if ((X + Y) // K) % 2 == 0:\n        print(\"Chef\")\n    else:\n        print(\"Paja\")",
                "def who_serves_next(T, test_cases):\n    for i in range(T):\n        X, Y, K = test_cases[i]\n        if ((X + Y) // K) % 2 == 0:\n            print(\"Chef\")\n        else:\n            print(\"Paja\")\n\nT = int(input())\ntest_cases = []\nfor _ in range(T):\n    test_cases.append(list(map(int, input().split())))\nwho_serves_next(T, test_cases)"
            ],
            "human_solutions": [
                {
                    "id": 34653967,
                    "submission_date": 1592852862,
                    "language": "PYTH 3",
                    "username": "deepakchaurasi",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.02",
                    "memory": "17.6M",
                    "solution": 34653967,
                    "code": "t=int(input())\nwhile(t>0):\n    x,y,k=map(int,input().split())\n\n    add=x+y\n    if(add%(2*k)<k):\n        print(\"Chef\")\n    else:\n        print(\"Paja\")\n    t-=1\n\n\n"
                },
                {
                    "id": 34547661,
                    "submission_date": 1592654316,
                    "language": "PYTH 3",
                    "username": "jahnavi_02",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.01",
                    "memory": "17.6M",
                    "solution": 34547661,
                    "code": "for t in range(int(input())):\n    x,y,k=map(int,input().split())\n    if ((x+y)//k)%2==0:\n        print('Chef')\n    else:\n        print('Paja')"
                }
            ]
        },
        "LUCKYSTR": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "2 4\n47\n744\n7444\n447\n7774\n77777777777777777777777777777777777777777777774",
                    "output": "Good\nGood\nBad\nGood",
                    "explanation": "The string S = 7444 is good since the favorite string 744 is its substring.\nThe string S = 447 is good since the favorite string 47 is its substring.\nThe string S = 7774 is bad since none of the favorite strings 47 and 744 is a substring of S.\nThe string S = 77777777777777777777777777777777777777777777774 is good since its length is 47. Note, however, that S does not have favorite substrings at all."
                }
            ],
            "problem_statement": "A Little Elephant from the Zoo of Lviv likes lucky strings, i.e., the strings that consist only of the lucky digits 4 and 7.\nThe Little Elephant has K favorite lucky strings A1, A2, ..., AK. He thinks that the lucky string S is good if either |S| \u2265 47 or for some j from 1 to K we have that  Aj is a substring of S.\nThe Little Elephant has found N lucky strings B1, B2, ..., BN under the pillow. Now he wants to know which of them are good. Help him and find for each i from 1 to N whether the string Bi is good or not.\nNotes.\nLet S be some lucky string. Then\n|S| denotes the length of the string S;\n\nS[i] (1 \u2264 i \u2264 |S|) denotes the ith character of S (the numeration of characters starts from 1);\n\nThe string T of the length M is called a substring of S if for some k from 0 to |S| - M we have T[1] = S[k + 1], T[2] = S[k + 2], ..., T[M] = S[k + M].\n\n\nInput\nThe first line of the input file contains two integers K and N, the number of favorite lucky strings of the Little Elephant and the number of strings he has found under the pillow. Each of the following K lines contains one favorite lucky string. Namely, jth line among these K lines contains the string Aj. Each of the following N lines contains one lucky string that was found under the pillow. Namely, ith line among these N lines contains the string Bi. The input file does not contain any whitespaces.\nOutput\nFor each of the N strings that were found under the pillow print Good if it is good, and Bad otherwise.\nConstraints\n1 \u2264 K, N \u2264 50\n\nFor each string S in the input file we have 1 \u2264 |S| \u2264 50.\n\nEach string in the input file consists only of the lucky digits 4 and 7.",
            "input_format": "",
            "output_format": "",
            "problem_name": "Little Elephant and Strings",
            "user_tags": [
                "String",
                "KMP Algorithm",
                "Rabin Karp Algorithm",
                "Z Algorithm",
                "Aho Corasick",
                "Brute Force"
            ],
            "computed_tags": [
                "Data Structures",
                "Advanced Algorithms",
                "String Matching",
                "Algorithms"
            ],
            "problem_code_id": "LUCKYSTR",
            "difficulty_level": "1166",
            "ai_solutions": [
                "K, N = map(int, input().split())\nfav_strings = [input() for _ in range(K)]\nfound_strings = [input() for _ in range(N)]\n\nfor string in found_strings:\n    if len(string) >= 47:\n        print(\"Good\")\n    elif any(fav in string for fav in fav_strings):\n        print(\"Good\")\n    else:\n        print(\"Bad\")",
                "def is_good_string(string, fav_strings):\n    if len(string) >= 47:\n        return \"Good\"\n    for fav in fav_strings:\n        if fav in string:\n            return \"Good\"\n    return \"Bad\"\n\nK, N = map(int, input().split())\nfav_strings = [input() for _ in range(K)]\nfound_strings = [input() for _ in range(N)]\n\nfor string in found_strings:\n    print(is_good_string(string, fav_strings))"
            ],
            "human_solutions": [
                {
                    "id": 37961447,
                    "submission_date": 1600269133,
                    "language": "PYTH 3",
                    "username": "arvind_02",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.02",
                    "memory": "17.6M",
                    "solution": 37961447,
                    "code": "k, n = map(int,input().split())\na = list()\nfor i in range(k):\n    s = input()\n    a.append(s)\nb = []\nfor i in range(n):\n    s1 = input()\n    b.append(s1)\nfor i in b:\n    if len(i) >= 47:\n        print('Good')\n    else:\n        for j in a:\n            if j in i:\n                print('Good')\n                break\n        else:\n            print('Bad')"
                },
                {
                    "id": 36522585,
                    "submission_date": 1597091049,
                    "language": "PYTH 3",
                    "username": "bhavikajain04",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.02",
                    "memory": "17.6M",
                    "solution": 36522585,
                    "code": "k,n=map(int,input().split())\na=[]\nb=[]\nfor _ in range(k):\n    a.append(input())\nfor _ in range(n):\n    b.append(input())\n\n\nfor i in b:\n    f1=0 \n    f2=0\n    if len(i)>=47:\n        f1=1\n    for j in a:\n        if j in i:\n            f2=1 \n            break \n            \n    if (f1 or f2):\n        print(\"Good\")\n    else:\n        print(\"Bad\")\n                \n    "
                }
            ]
        },
        "EXAM1": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "3\r\n6\r\nABCDAB\r\nABCDAB\r\n8\r\nDDCABCCA\r\nDNCBBBBA\r\n3\r\nCDD\r\nNDC",
                    "output": "6\r\n3\r\n1",
                    "explanation": "Example case 1: Chef's answers were all correct, so he got a full score.\nExample case 2: Chef did not answer question $2$ and he answered questions $4$ and $6$ incorrectly, which resulted in discarding answers to questions $5$ and $7$. Note that even though Chef's answer to question $7$ was wrong, it was discarded, so it did not result in discarding his answer to question $8$.\nExample case 3: Chef did not answer the first question and he answered the last question incorrectly, but there is no penalty for that."
                }
            ],
            "problem_statement": "Read problems statements in Hindi, Mandarin Chinese, Russian, Vietnamese, and Bengali as well.\nChef is taking a cooking exam. The exam consists of $N$ multiple-choice questions numbered $1$ through $N$. In each question, Chef may choose one out of four choices: A, B, C and D, or leave the question unanswered.\nAnswering a question correctly gives Chef $1$ point. Not answering a question or answering it incorrectly gives him $0$ points. However, there is a penalty for wrong answers. Specifically, the questions are graded one by one from question $1$ to question $N$; for each $i$ ($1 \\le i \\le N-1$), if Chef answered the $i$-th question incorrectly, his answer to the next question (the $(i+1)$-th question) is discarded without being graded. If an answer is discarded, Chef gets $0$ points for it automatically, but even if it was wrong, the next answer is not discarded. There is no penalty for answering the last question incorrectly or for not answering some questions.\nYou are given the correct answers to all $N$ questions and Chef's answers. Calculate the total number of points Chef scored on the exam.\nInput\n\nThe first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\nThe first line of each test case contains a single integer $N$.\nThe second line contains a single string $S$ with length $N$. For each valid $i$, the $i$-th character of this string denotes the correct answer to the $i$-th question.\nThe third line contains a single string $U$ with length $N$. For each valid $i$, the $i$-th character of this string is 'N' if Chef did not answer the $i$-th question; otherwise, it denotes Chef's answer to this question.\n\nOutput\nFor each test case, print a single line containing one integer \u2014 Chef's score.\nConstraints\n\n$1 \\le T \\le 100$\n$1 \\le N \\le 100$\n$S$ contains only characters 'A', 'B', 'C', 'D'\n$U$ contains only characters 'A', 'B', 'C', 'D', 'N'",
            "input_format": "",
            "output_format": "",
            "problem_name": "Multiple Choice Exam",
            "user_tags": [
                "Implementation"
            ],
            "computed_tags": [
                "Algorithms"
            ],
            "problem_code_id": "EXAM1",
            "difficulty_level": "1135",
            "ai_solutions": [
                "T = int(input())\nfor _ in range(T):\n    N = int(input())\n    S = input()\n    U = input()\n    score = 0\n    i = 0\n    while i < N:\n        if U[i] == 'N':\n            i += 1\n        elif U[i] == S[i]:\n            score += 1\n            i += 1\n        else:\n            i += 2\n    print(score)",
                "T = int(input())\nfor _ in range(T):\n    N = int(input())\n    S = input()\n    U = input()\n    score = 0\n    i = 0\n    while i < N:\n        if U[i] == S[i]:\n            score += 1\n        elif U[i] != 'N':\n            i += 1\n        i += 1\n    print(score)"
            ],
            "human_solutions": [
                {
                    "id": 29137165,
                    "submission_date": 1579844261,
                    "language": "PYTH 3",
                    "username": "pankaj2kumar",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.01",
                    "memory": "17.6M",
                    "solution": 29137165,
                    "code": "for _ in range(int(input())):\r\n\tscore = 0\r\n\tn = int(input())\r\n\tcorr = input()\r\n\tresp = input()\r\n\ti = 0\r\n\t\r\n\twhile i < n:\r\n\t\tif resp[i] == 'N':\r\n\t\t\ti += 1\r\n\t\telif corr[i] == resp[i]:\r\n\t\t\tscore += 1\r\n\t\t\ti += 1\r\n\t\telse:\r\n\t\t\ti += 2\r\n\t\t\r\n\tprint(score)"
                },
                {
                    "id": 29047121,
                    "submission_date": 1579419778,
                    "language": "PYTH 3",
                    "username": "ashu_199900",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.02",
                    "memory": "17.6M",
                    "solution": 29047121,
                    "code": "# ashu@gate2022\r\nfor i in range(int(input())):\r\n    n=int(input())\r\n    s=input()\r\n    a=input()\r\n    t=0\r\n    j=0\r\n    for i in range(n):\r\n        if j<n:\r\n            if a[j]==\"N\":\r\n                j+=1\r\n            else:\r\n                if a[j]==s[j]:\r\n                    j+=1\r\n                    t+=1\r\n                else:\r\n                    j+=2\r\n    print(t)\r\n\r\n"
                }
            ]
        },
        "CENS20D": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "2\n5\n1 1 1 1 1\n1\n10",
                    "output": "10\n0",
                    "explanation": "Example case 1: Number of valid pairs are -$(1,2),(1,3),(1,4),(1,5),(2,3),(2,4),(2,5),(3,4),(3,5)$ and $(4,5)$. Therefore, total valid pairs $= 10$.\nExample case 2: Since $N=1$, therefore there are no valid pairs."
                }
            ],
            "problem_statement": "Priya loves bitwise AND, but she hates programming. Help her solve this problem.\nGiven an array $A$ of size $N$, let $B_{ij}$  denote the bitwise AND of $A[i]$ and $A[j]$. You have to find the number of pairs $(i, j)$, such that $i \\lt j$ and $B_{ij} = A[i]$.\nInput:\n\nThe first line of the input contains a single integer $T$ denoting the number of test cases. \nThe first line of each test case consists of a single integer $N$, denoting the Size of Array $A$. \nThe second line of each test case contains $N$ space-separated integers $A_{1}, A_{2}, A_{3} ... A_{N}$.\n\nOutput:\nFor each test case, output a single line, count of such pairs.\nConstraints\n\n$1 \\leq T \\leq 100$\n$1 \\leq N \\leq 100$\n$1 \\leq A[i] \\leq 100$",
            "input_format": "",
            "output_format": "",
            "problem_name": "Priya and AND",
            "user_tags": [
                "Bit Manipulation",
                "Brute Force"
            ],
            "computed_tags": [
                "Mathematics",
                "Algorithms"
            ],
            "problem_code_id": "CENS20D",
            "difficulty_level": "1143",
            "ai_solutions": [
                "def count_pairs(T, test_cases):\n    for _ in range(T):\n        N = test_cases[_][0]\n        A = test_cases[_][1]\n        count = 0\n        for i in range(N):\n            for j in range(i+1, N):\n                if A[i] & A[j] == A[i]:\n                    count += 1\n        print(count)\n\nT = int(input())\ntest_cases = []\nfor _ in range(T):\n    N = int(input())\n    A = list(map(int, input().split()))\n    test_cases.append((N, A))\ncount_pairs(T, test_cases)",
                "def count_pairs(T, test_cases):\n    for _ in range(T):\n        N = test_cases[_][0]\n        A = test_cases[_][1]\n        count = sum(1 for i in range(N) for j in range(i+1, N) if A[i] & A[j] == A[i])\n        print(count)\n\nT = int(input())\ntest_cases = []\nfor _ in range(T):\n    N = int(input())\n    A = list(map(int, input().split()))\n    test_cases.append((N, A))\ncount_pairs(T, test_cases)"
            ],
            "human_solutions": [
                {
                    "id": 1027678025,
                    "submission_date": 1698599928,
                    "language": "PYTH 3",
                    "username": "bhavanamuthyam",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.06",
                    "memory": "8.5M",
                    "solution": 1027678025,
                    "code": "for _ in range(int(input())):\r\n    n = int(input())\r\n    s = list(map(int,input().split()))\r\n    c = 0\r\n    for i in range(len(s)-1):\r\n        for j in range(i+1,len(s)):\r\n            if s[i] == (s[i] & s[j]):\r\n                c += 1\r\n    else:\r\n        print(c)"
                },
                {
                    "id": 1026030240,
                    "submission_date": 1697523315,
                    "language": "PYTH 3",
                    "username": "srmistk_446",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.13",
                    "memory": "9.5M",
                    "solution": 1026030240,
                    "code": "for i in range(int(input())):\r\n    n = int(input())\r\n    a = list(map(int,input().split()))\r\n    b = a.count(1)\r\n    pairs = 0\r\n    for i in range(len(a)):\r\n        for j in range(i + 1 , len(a)):\r\n            if a[i] & a[j] == a[i]:\r\n                pairs = pairs + 1\r\n    print(pairs)"
                }
            ]
        },
        "C00K0FF": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "3\n5\neasy\nmedium\nmedium-hard\nsimple\ncakewalk\n7\nsimple\nsimple\nmedium\nmedium\neasy-medium\ncakewalk\neasy\n7\ncakewalk\nsimple\neasy\neasy-medium\nmedium\nmedium-hard\nhard",
                    "output": "Yes\nNo\nYes",
                    "explanation": "Example case 2: There are neither problems of \"medium-hard\" level nor \"hard\" level, so it's impossible to form a Cook-Off contest."
                }
            ],
            "problem_statement": "Read problems statements in mandarin chinese, russian and vietnamese as well.\n\n    Chef wants to prepare a Cook-Off contest with 5 problems chosen from a set of N problems. He has marked the difficulty of each problem within a range identified by one of the following strings: \"cakewalk\", \"simple\", \"easy\", \"easy-medium\", \"medium\", \"medium-hard\", \"hard\". According to this page, a Cook-Off contest must have problems of the following difficulties:\n\nexactly one \"cakewalk\";\nexactly one \"simple\";\nexactly one \"easy\";\none \"easy-medium\" or one \"medium\";\none \"medium-hard\" or one \"hard\".\n\n\n    Given the information about the N problems, can you advise Chef if it's possible to pick 5 problems and form a valid Cook-Off contest?\n\n    Input\n\nThe first line of input contains one integer T denoting the number of test cases.\nT test cases follow.\nThe first line of each test case contains a single integer N.\nThen N lines follow; the i-th line contains a single string si, denoting the difficulty of the i-th problem.\n\n\n    Output\n\n    For each test case, output \"Yes\" if it's possible to pick 5 problems and form a valid Cook-Off contest; otherwise, output \"No\".\n\n    Constraints\n\n1 \u2264 T \u2264 100000\n5 \u2264 N \u2264 100000\nsum of N in all test cases \u2264 600000\nsi can only be one of the following strings:\n\"cakewalk\"\n\"simple\"\n\"easy\"\n\"easy-medium\"\n\"medium\"\n\"medium-hard\"\n\"hard\"\n\n\n    Subtask #1 (11 points):\n\nN = 5\n\n\n    Subtask #2 (27 points):\n\n5 \u2264 N \u2264 15\nT \u2264 100\n\n\n    Subtask #3 (62 points):\n\noriginal constraints",
            "input_format": "",
            "output_format": "",
            "problem_name": "Chef and Cook-Off Contests",
            "user_tags": [
                "Conditional Statements",
                "Implementation"
            ],
            "computed_tags": [
                "Basic Programming Concepts",
                "Algorithms"
            ],
            "problem_code_id": "C00K0FF",
            "difficulty_level": "1185",
            "ai_solutions": [
                "T = int(input().strip())\nfor _ in range(T):\n    N = int(input().strip())\n    problems = [input().strip() for _ in range(N)]\n    if problems.count(\"cakewalk\") >= 1 and problems.count(\"simple\") >= 1 and problems.count(\"easy\") >= 1 and (problems.count(\"easy-medium\") >= 1 or problems.count(\"medium\") >= 1) and (problems.count(\"medium-hard\") >= 1 or problems.count(\"hard\") >= 1):\n        print(\"Yes\")\n    else:\n        print(\"No\")",
                "T = int(input().strip())\nfor _ in range(T):\n    N = int(input().strip())\n    problems = [input().strip() for _ in range(N)]\n    difficulties = [\"cakewalk\", \"simple\", \"easy\", [\"easy-medium\", \"medium\"], [\"medium-hard\", \"hard\"]]\n    for difficulty in difficulties:\n        if isinstance(difficulty, list):\n            if not any(problem in problems for problem in difficulty):\n                print(\"No\")\n                break\n        elif difficulty not in problems:\n            print(\"No\")\n            break\n    else:\n        print(\"Yes\")"
            ],
            "human_solutions": [
                {
                    "id": 37940624,
                    "submission_date": 1600174936,
                    "language": "PYTH 3",
                    "username": "sujithv",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.56",
                    "memory": "18.3M",
                    "solution": 37940624,
                    "code": "def fun(a,n):\n    b=['cakewalk','simple','easy'],\n    if 'cakewalk' in a  and 'simple' in a and 'easy' in a and ('easy-medium' in a or 'medium' in a) and ('medium-hard' in a or 'hard' in a):\n        print('Yes')\n    else:\n        print('No')\n        \nfor _ in range(int(input())):\n    n=int(input())\n    a=[]\n    for i in range(n):\n        a.append(input())\n    fun(a,n)"
                },
                {
                    "id": 37699241,
                    "submission_date": 1599665180,
                    "language": "PYTH 3",
                    "username": "yash_swaraj",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.60",
                    "memory": "17.6M",
                    "solution": 37699241,
                    "code": "for _ in range(int(input())):\n    n = int(input())\n    checker = [0]*5\n    for i in range(n):\n        s = input()\n        if s == \"cakewalk\":\n            checker[0] = 1\n        elif s == \"simple\":\n            checker[1] = 1\n        elif s == \"easy\":\n            checker[2] = 1\n        elif s == \"easy-medium\" or s == \"medium\":\n            checker[3] = 1\n        else:\n            checker[4] = 1\n            \n    if sum(checker) == 5:\n        print(\"Yes\")\n    else:\n        print(\"No\")"
                }
            ]
        },
        "MDL": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "2\n3\n2 5 3\n10\n38 9 102 10 96 7 46 28 88 13",
                    "output": "2 5 \n102 7",
                    "explanation": "Example case 1: We remove the element $3$ because it is the median of $(2, 5, 3)$. The final sequence is $(2, 5)$."
                }
            ],
            "problem_statement": "Read problems statements in Hindi, Mandarin Chinese, Russian, Vietnamese, and Bengali as well.\nYou are given a sequence $A_1, A_2, \\ldots, A_N$ of distinct integers. While the sequence contains at least three elements, look at its first three elements, find the median among these elements and delete it. What will the final sequence be?\nInput\n\nThe first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\nThe first line of each test case contains a single integer $N$.\nThe second line contains $N$ space-separated integers $A_1, A_2, \\ldots, A_N$.\n\nOutput\n\nFor each test case, print a single line containing $K$ space-separated integers, where $K$ is the length of the final sequence. For each valid $i$, the $i$-th of these integers should be the $i$-th element of the final sequence.\n\nConstraints\n\n$1 \\le T \\le 74$\n$3 \\le N \\le 19$\n$1 \\le A_i \\le 109$ for each valid $i$",
            "input_format": "",
            "output_format": "",
            "problem_name": "Medel",
            "user_tags": [
                "ad-hoc",
                "Brute Force"
            ],
            "computed_tags": [
                "Algorithms",
                "Constructive"
            ],
            "problem_code_id": "MDL",
            "difficulty_level": "1139",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 33373006,
                    "submission_date": 1590570386,
                    "language": "PYTH 3",
                    "username": "manishreddy_l",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.01",
                    "memory": "17.6M",
                    "solution": 33373006,
                    "code": "for _ in range(int(input())):\r\n    x=int(input())\r\n    l=list(map(int,input().split()))\r\n    if l.index(max(l))<l.index(min(l)):\r\n        print(max(l),min(l))\r\n    else:\r\n        print(min(l),max(l))\r\n"
                },
                {
                    "id": 33345883,
                    "submission_date": 1590438038,
                    "language": "PYTH 3",
                    "username": "ravi_kiran19",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.02",
                    "memory": "17.6M",
                    "solution": 33345883,
                    "code": "t=int(input())\nwhile(t>0):\n    n=int(input())\n    lst=list(map(int,input().split()))\n    while(len(lst)>=3):\n        x=lst[:3]\n        x=sorted(x)\n        lst.remove(x[1])\n    \n    print(* lst)\n    \n    \n    t-=1"
                }
            ]
        },
        "UWCOI20A": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "1\n5\n4\n7\n6\n3\n1",
                    "output": "7",
                    "explanation": ""
                }
            ],
            "problem_statement": "Well known investigative reporter Kim \"Sherlock'' Bumjun needs your help! Today, his mission is to sabotage the operations of the evil JSA. If the JSA is allowed to succeed, they will use the combined power of the WQS binary search and the UFDS to take over the world!\nBut Kim doesn't know where the base is located. He knows that the base is on the highest peak of the Himalayan Mountains. He also knows the heights of each of the $N$ mountains. Can you help Kim find the height of the mountain where the base is located? \nInput:\n\nFirst line will contain $T$, number of testcases. Then the testcases follow.    \nThe first line in each testcase contains one integer, $N$.    \nThe following $N$ lines of each test case each contain one integer: the height of a new mountain.\n\nOutput:\nFor each testcase, output one line with one integer: the height of the tallest mountain for that test case.\nConstraints\n\n$1 \\leq T \\leq 10$\n$1 \\leq N \\leq 100000$\n$0 \\leq$ height of each mountain $\\leq 10^9$\n\nSubtasks:\n\n100 points: No additional constraints.",
            "input_format": "",
            "output_format": "",
            "problem_name": "Peak Finding",
            "user_tags": [
                "Implementation"
            ],
            "computed_tags": [
                "Algorithms"
            ],
            "problem_code_id": "UWCOI20A",
            "difficulty_level": "1078",
            "ai_solutions": [
                "T = int(input())\nfor _ in range(T):\n    N = int(input())\n    heights = [int(input()) for _ in range(N)]\n    print(max(heights))",
                "T = int(input())\nfor _ in range(T):\n    N = int(input())\n    max_height = 0\n    for _ in range(N):\n        height = int(input())\n        if height > max_height:\n            max_height = height\n    print(max_height)"
            ],
            "human_solutions": [
                {
                    "id": 1027875074,
                    "submission_date": 1698740423,
                    "language": "PYTH 3",
                    "username": "o170321",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.44",
                    "memory": "8.4M",
                    "solution": 1027875074,
                    "code": "n = int(input())\r\n\r\nfor i in range(n):\r\n    l = [0]\r\n    k = int(input())\r\n    \r\n    for j in range(k):\r\n        \r\n        m = int(input())\r\n        if(m>l[-1]):\r\n            l.append(m)\r\n            \r\n    \r\n    print(l[-1])"
                },
                {
                    "id": 1027671733,
                    "submission_date": 1698596646,
                    "language": "PYTH 3",
                    "username": "bhavanamuthyam",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.45",
                    "memory": "11.9M",
                    "solution": 1027671733,
                    "code": "for I in range(int(input())):\r\n    k=[]\r\n    n=int(input())\r\n    for j in range(n):\r\n        a=int(input())\r\n        k.append(a)\r\n    print(max(k))"
                }
            ]
        },
        "RRJOKE": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "2\n2\n1 2\n0 0\n3\n3 3\n0 0\n0 3",
                    "output": "3\n0",
                    "explanation": "For the first test case permutation [1, 2] is optimal.  1 xor 2 = 3.\n\nFor the second one both [2, 3, 1] and [1, 3, 2] lead us to the shortest walk, but the second one is lexicographically smaller. So the answer is H([1, 3, 2]) = 1 xor 3 xor 2 = 0 ."
                }
            ],
            "problem_statement": "Read problems statements in Mandarin Chinese and Russian as well.\n\nVadim and Roman like discussing challenging problems with each other. One day Vadim told his friend following problem:\n\n Given N points on a plane. Each point p is defined by it's two integer coordinates \u2014 px and py. The distance between points a and b is min(|ax - bx|, |ay - by|). You should choose a starting point and make a route visiting every point exactly once, i.e. if we write down numbers of points in order you visit them we should obtain a permutation. Of course, overall distance walked should be as small as possible. The number of points may be up to 40.\n\n\"40? Maybe 20? Are you kidding?\" \u2013 asked Roman. \"No, it's not a joke\" \u2013 replied Vadim. So Roman had nothing to do, but try to solve this problem. Since Roman is really weak in problem solving and you are the only friend, except Vadim, with whom Roman can discuss challenging tasks, he has nobody else to ask for help, but you!\n \nInput\nInput description.\nThe first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows.The first line of each test case contains a single integer N denoting the number of points on a plane. The following N lines contain two space-separated integers each \u2014 coordinates of points. \n \nOutput\nOutput description.\nOutput the answer for every test case in a separate line. The answer for every test case is a permutation of length N. In case there are several solutions that lead to minimal distance walked, you should choose the lexicographically smallest one. Let P denote such permutation. To make output smaller, you should output H(P). H(P) = P1 xor P2 xor ... xor PN. Have a look at the example and it's explanation for better understanding. \n \nConstraints\n1 \u2264 T \u2264 10\n1 \u2264 N \u2264 40\n0 \u2264 absolute value of each coordinate \u2264 1000\n1 \u2264 sum over all N in a single test file \u2264 120",
            "input_format": "",
            "output_format": "",
            "problem_name": "Good Joke!",
            "user_tags": [
                "ad-hoc"
            ],
            "computed_tags": [
                "Algorithms",
                "Constructive"
            ],
            "problem_code_id": "RRJOKE",
            "difficulty_level": "1163",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 36913317,
                    "submission_date": 1597817090,
                    "language": "PYTH 3",
                    "username": "avinash_1718",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.02",
                    "memory": "17.6M",
                    "solution": 36913317,
                    "code": "for _ in range(int(input())):\n    n=int(input())\n    for i in range(n) :\n        x, y=map(int,input().split())\n    p=0\n    for i in range(1,n+1):\n        p=p^i\n    print(p) \n        "
                },
                {
                    "id": 36801374,
                    "submission_date": 1597572485,
                    "language": "PYTH 3",
                    "username": "pgk176",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.02",
                    "memory": "17.6M",
                    "solution": 36801374,
                    "code": "try:\n    for _ in range(int(input())):\n        N = int(input())\n        for __ in range(N):\n            a, b = map(int, input().split())\n            \n        ans = 1\n        for i in range(2, N + 1):\n            ans ^= i\n            \n        print(ans)\n    \nexcept Exception as e:\n    print(e.__class__)"
                }
            ]
        },
        "DWNLD": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "3\r\n2 2\r\n2 1\r\n2 3\r\n2 2\r\n1 2\r\n2 3\r\n3 0\r\n1 2\r\n2 4\r\n10 10",
                    "output": "6\r\n3\r\n110",
                    "explanation": "Example case 1. For the first two minutes, internet data of usage of Chef is free. He has to pay for last 2 minutes only, for which he will be charged at 3 dollars per minute, i.e. total 6 dollars.\nExample case 2. For the first two minutes, internet data of usage of Chef is free. He has to pay for last 1 minute only, for which he is being charged at 3 dollars per minute. So, in total he has to pay 3 dollars.\nExample case 3. This time, Chef is not provided any free data usage. He has to pay \nfor entire data usage, which comes out to be 1 * 2 + 2 * 4 + 10 * 10 = 110 dollars."
                }
            ],
            "problem_statement": "Read problems statements in Mandarin Chinese, Russian and Vietnamese as well.\nChef has recently got a broadband internet connection. His history of internet data usage is provided as below.\nDuring the first T1 minutes, the internet data used was D1 MBs per minute, and during the next T2 minutes, it was D2 MBs per minute, and so on till during last TN minutes it was DN MBs per minute.\nThe internet provider charges the Chef 1 dollar for every 1 MB data used, except for the first K minutes, when the internet data is free as part of the plan provided to Chef.\nPlease find out the total amount that Chef has to pay the internet provider (in dollars).\nInput\nFirst line of the input contains a single integer TC the number of test cases. Description of TC test cases follow.\nFirst line of each test case contains two space separated integers N and K.\nNext N lines of each test case contains information about the internet data usage. Specifically, in the i-th line, there will be two space separated integers: Ti and Di.\nOutput\nFor each test case output a single integer in separate line, the amount that Chef has to pay in dollars.\nConstraints\n\n1 \u2264 TC \u2264 1,000\n1 \u2264 N \u2264 10\n0 \u2264 K \u2264 T1 + T2 + ... + TN \n1 \u2264 Ti, Di \u2264 10",
            "input_format": "",
            "output_format": "",
            "problem_name": "Download file",
            "user_tags": [
                "Basic Maths",
                "Implementation"
            ],
            "computed_tags": [
                "Mathematics",
                "Algorithms"
            ],
            "problem_code_id": "DWNLD",
            "difficulty_level": "1147",
            "ai_solutions": [
                "TC = int(input())\nfor _ in range(TC):\n    N, K = map(int, input().split())\n    total_cost = 0\n    total_time = 0\n    for _ in range(N):\n        T, D = map(int, input().split())\n        if total_time + T <= K:\n            total_time += T\n        else:\n            if total_time < K:\n                total_cost += D * (T - (K - total_time))\n                total_time = K\n            else:\n                total_cost += D * T\n    print(total_cost)",
                "TC = int(input())\nfor _ in range(TC):\n    N, K = map(int, input().split())\n    total_cost = 0\n    total_time = 0\n    for _ in range(N):\n        T, D = map(int, input().split())\n        if total_time < K:\n            if total_time + T <= K:\n                total_time += T\n            else:\n                total_cost += D * (T - (K - total_time))\n                total_time = K\n        else:\n            total_cost += D * T\n    print(total_cost)"
            ],
            "human_solutions": [
                {
                    "id": 29756190,
                    "submission_date": 1581913109,
                    "language": "PYTH 3",
                    "username": "aayushi11_",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.03",
                    "memory": "17.6M",
                    "solution": 29756190,
                    "code": "t=int(input())\nfor l in range(t):\n    n,k=map(int,input().split())\n    minute=[]\n    mb_per_minute=[]\n    for i in range(n):\n        a,b=map(int,input().split(' '))\n        minute.append(a)\n        mb_per_minute.append(b)\n    i=0\n    while(k>0 and i<n):\n        if(minute[i]>=k):\n            minute[i]=minute[i]-k\n            k=0\n        elif(minute[i]<k):\n            k=k-minute[i]\n            minute[i]=0\n            \n        if(minute[i]==0):\n            minute.pop(i)\n            mb_per_minute.pop(i)\n    \n    #print(minute)\n#    print(mb_per_minute)\n    sum=0\n    for i in range(len(minute)):\n        sum+=minute[i]*mb_per_minute[i]\n    print(sum)"
                },
                {
                    "id": 29623459,
                    "submission_date": 1581672975,
                    "language": "PYTH 3",
                    "username": "k_vaishnavi",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.04",
                    "memory": "17.6M",
                    "solution": 29623459,
                    "code": "tc=int(input())\nfor i in range(tc):\n    (n,k)=map(int,input().split())\n    tl=[]\n    dl=[]\n    for j in range(n):\n        (t,d)=map(int,input().split())\n        tl.append(t)\n        dl.append(d)\n    s=0\n    h=0\n    while(h!=len(tl) and k!=0):\n        if(tl[h]==k):\n            tl[h]=tl[h]-k\n            k=0\n        else:\n            if(tl[h]>k):\n                tl[h]=tl[h]-k\n                k=0\n            else:\n                k=k-tl[h]\n                tl[h]=0\n        h+=1\n    for x in range(len(tl)):\n        s=s+(tl[x]*dl[x])\n    print(s)\n        "
                }
            ]
        },
        "ADACRA": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "1\nUUDDDUUU",
                    "output": "1",
                    "explanation": "Example case 1. In one step we can flip all the crayons pointing downwards"
                }
            ],
            "problem_statement": "Read problems statements in mandarin chinese, russian and vietnamese as well.\n\nAda has an array of N  crayons, some crayons are pointing upwards and some downwards.\nAda thinks that an array of crayons is beautiful if all the crayons are pointing in the same direction.\n\n\nIn one step you can flip any segment of consecutive crayons. After flipping a segment, all crayons pointing downwards will point upwards and visceversa\n\nWhat is the minimum number of steps to make the array of crayons beautiful?\n\nInput\n\nThe first line of the input contains T the number of test cases.\nEach test case is described in one line containing a string S of N characters, the i-th character is 'U' if the i-th crayon is pointing upwards and 'D' if it is pointing downwards.\n\nOutput\n\nFor each test case, output a single line containing the minimum number of flips needed to make all crayons point to the same direction.\n\nConstraints\n\n1 \u2264 T \u2264 3000\n1 \u2264 N \u2264 50",
            "input_format": "",
            "output_format": "",
            "problem_name": "Ada and crayons",
            "user_tags": [
                "Greedy",
                "Implementation"
            ],
            "computed_tags": [
                "Algorithms"
            ],
            "problem_code_id": "ADACRA",
            "difficulty_level": "1099",
            "ai_solutions": [
                "T = int(input())\nfor _ in range(T):\n    S = input().strip()\n    print(min(S.count('DU'), S.count('UD')))"
            ],
            "human_solutions": [
                {
                    "id": 33169752,
                    "submission_date": 1589878018,
                    "language": "PYTH 3",
                    "username": "darshjain",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.03",
                    "memory": "17.6M",
                    "solution": 33169752,
                    "code": "t=int(input())\nwhile t!=0:\n    s=input()\n    s+='X'\n    n=len(s)\n    m1=m2=c1=c2=0\n    for i in range(0,n-1):\n        if s[i]!=s[i+1]:\n            if s[i]=='U':\n                c1+=1\n            if s[i]=='D':\n                c2+=1\n            if m1<c1 :\n                m1=c1\n            if m2<c2 :\n                m2=c2;\n    if m1>m2:\n        d=m2\n    else:\n        d=m1\n    print(d)\n    t-=1"
                },
                {
                    "id": 33131646,
                    "submission_date": 1589708126,
                    "language": "PYTH 3",
                    "username": "manishreddy_l",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.04",
                    "memory": "17.6M",
                    "solution": 33131646,
                    "code": "for _ in range(int(input())):\r\n    s = input()\r\n    sn = []\r\n    sn.append(s[0])\r\n    i = 1\r\n    while i<len(s):\r\n        if s[i] != s[i-1]:\r\n            sn.append(s[i])\r\n        i+=1\r\n    cd = sn.count('D')\r\n    cu = sn.count('U')\r\n    print(min(cd, cu))"
                }
            ]
        },
        "CLLCM": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "2\n5\n1 2 5 4 3\n1\n7",
                    "output": "NO\nYES",
                    "explanation": "For test $1$: There exists no odd number.\nFor test $2$: The possible odd numbers can be $7$, $21$, $49$, $315$, ..."
                }
            ],
            "problem_statement": "Chef got into a fight with the evil Dr Doof. Dr Doof has decided to destroy all even numbers from the universe using his Evil-Destroy-inator. Chef has $N$ integers with him. To stop Doof, Chef has to find an odd number which is an integer multiple of all $N$ numbers that he has with him. Find if it is possible for Chef to prevent Dr Doof from destroying the even numbers.\nFormally, given $N$ positive integers, find if there exists an odd number which is an integer multiple of all the given $N$ numbers. If yes, print \"YES\", otherwise \"NO\". You can print any letter in any case.\nInput\n\nFirst line contains $T$, number of testcases. Each testcase consists of $2$ lines.\nThe first line of each test case consists of a positive integer $N$, denoting the number of positive integers Chef has.\nThe second line of each test case contains $N$ space separated integers $A_i$ each denoting an integer that Chef has with him.\n\nOutput\nFor every test case, if there exists such an odd number, print \"YES\" on a separate line, otherwise \"NO\". The judge is case insensitive. That means, your code can print any letter in any case ( \"Yes\", \"yes\" or \"YES\" are all accepted).\nConstraints\n\n$1 \\leq T \\leq 10^3$\n$1 \\leq N \\leq 10^3$\n$1 \\leq A_i \\leq 10^3$",
            "input_format": "",
            "output_format": "",
            "problem_name": "Chef vs Doof",
            "user_tags": [
                "Basic Maths",
                "LCM",
                "ad-hoc",
                "Observation"
            ],
            "computed_tags": [
                "Mathematics",
                "Number Theory",
                "Algorithms",
                "Constructive"
            ],
            "problem_code_id": "CLLCM",
            "difficulty_level": "1108",
            "ai_solutions": [
                "T = int(input())\nfor _ in range(T):\n    N = int(input())\n    A = list(map(int, input().split()))\n    if all(a % 2 == 1 for a in A):\n        print(\"YES\")\n    else:\n        print(\"NO\")",
                "T = int(input())\nfor _ in range(T):\n    N = int(input())\n    A = list(map(int, input().split()))\n    print(\"YES\" if all(a & 1 for a in A) else \"NO\")"
            ],
            "human_solutions": [
                {
                    "id": 1027782139,
                    "submission_date": 1698675887,
                    "language": "PYTH 3",
                    "username": "ravithreni",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.20",
                    "memory": "8.7M",
                    "solution": 1027782139,
                    "code": "\r\nfor _ in range(int(input())):\r\n    a = int(input())\r\n    b = list(map(int,input().split()))\r\n    odd_num = list([i for i in b if i%2!=0])\r\n    print(\"YES\") if len(odd_num)==a else print(\"NO\")"
                },
                {
                    "id": 1027520180,
                    "submission_date": 1698484165,
                    "language": "PYTH 3",
                    "username": "lar_here",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.10",
                    "memory": "8.9M",
                    "solution": 1027520180,
                    "code": "for t in range(int(input())) :\r\n    n=int(input())\r\n    a=list(map(int,input().split()))\r\n    itn=0\r\n    for i in a:\r\n        if i%2==0:\r\n            itn=2\r\n            print(\"NO\")\r\n            break\r\n    if itn==0:\r\n        print(\"YES\")"
                }
            ]
        },
        "L56GAME": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "2\n2\n1 2\n5\n7 4 3 2 6",
                    "output": "2\n1",
                    "explanation": ""
                }
            ],
            "problem_statement": "Read problems statements in Mandarin chinese, Russian and Vietnamese as well.\nChef has a sequence A containing N integers A1, A2, ..., AN.\nChef is playing a game with this sequence. In this game, he may perform the following operation any number of times (including zero): Choose an arbitrary pair of elements from the sequence such that their sum is even, delete these two elements from the sequence and insert their sum into the sequence instead.\nThe goal of the game is to minimise the number of elements in the sequence.\nHelp Chef to play the game and find the minimum possible size of the sequence at the end of the game!\nInput\n\nThe first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows.\nThe first line of each test case contains a single integer N.\nThe second line contains N space-separated integers A1, A2, ..., AN.\n\nOutput\n\nFor each test case, print a single line containing one integer \u2014 the minimum possible final size of the sequence.\n\nConstraints\n\n1 \u2264 T \u2264 100\n1 \u2264 N \u2264 100\n1 \u2264 Ai \u2264 1,000 for each valid i\n\nSubtasks\n\nSubtask #1 (100 points): original constraints",
            "input_format": "",
            "output_format": "",
            "problem_name": "Chef and Game with Sequence",
            "user_tags": [
                "ad-hoc"
            ],
            "computed_tags": [
                "Algorithms",
                "Constructive"
            ],
            "problem_code_id": "L56GAME",
            "difficulty_level": "1051",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 35552633,
                    "submission_date": 1594569451,
                    "language": "PYTH 3",
                    "username": "satish4444",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.02",
                    "memory": "17.6M",
                    "solution": 35552633,
                    "code": "for i in range(int(input())):\n    a=int(input())\n    l=list(map(int,input().split()))\n    b=list(filter(lambda x: x%2!=0,l))\n    if(len(l)==1):\n        print(1)\n    elif(len(b)%2==0):\n        print(1)\n    else:\n        print(2)"
                },
                {
                    "id": 35441653,
                    "submission_date": 1594374725,
                    "language": "PYTH 3",
                    "username": "dky2202",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.01",
                    "memory": "17.6M",
                    "solution": 35441653,
                    "code": "t = int(input())\r\n\r\nwhile t:\r\n    n = int(input())\r\n    a = list(map(int, input().split()))\r\n    \r\n    if n == 1:\r\n        print(1)\r\n    else:\r\n        al = []\r\n        \r\n        for i in range(0,n):\r\n            if a[i] % 2 != 0:\r\n                al.append(a[i])\r\n        \r\n        if len(al) % 2 == 0:\r\n            print(1)\r\n        else:\r\n            print(2)\r\n    \r\n    t -= 1"
                }
            ]
        },
        "SEGM01": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "6\r\n001111110\r\n00110011\r\n000\r\n1111\r\n101010101\r\n101111111111",
                    "output": "YES\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO",
                    "explanation": "The answer is \"YES\" for strings 001111110 and 1111.\nThe answer is \"NO\" for 00110011 because the '1' digits form two disjoint segments (while they should all be consecutive, with no '0' digits between them).\nThe answer is \"NO\" for 000 because the segment formed by the '1' digits must be non-empty (as written in the statement)."
                }
            ],
            "problem_statement": "Read problems statements in Mandarin Chinese, Russian and Vietnamese as well.\nBear Limak has a string S.\nEach character of S is a digit '0' or '1'.\nHelp Limak and check if all the '1' digits form a single non-empty segment (consecutive subsequence) in the string. For each test case, print \"YES\" or \"NO\" accordingly.\nInput\nThe first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows.\nThe only line of each test case contains one string S, consisting of digits '0' and '1' only.\nOutput\nFor each test case, output a single line containing the answer \u2014 \"YES\" if all the '1' digits form a single non-empty segment, and \"NO\" otherwise. Don't print the quotes.\nConstraints\n\n1 \u2264 T \u2264 10\n1 \u2264 |S| \u2264 105 (here, |S| denotes the length of S)\n\nSubtasks\n\nSubtask #1 (50 points): 1 \u2264 |S| \u2264 50\nSubtask #2 (50 points): Original constraints.",
            "input_format": "",
            "output_format": "",
            "problem_name": "Bear and Segment 01",
            "user_tags": [
                "Implementation"
            ],
            "computed_tags": [
                "Algorithms"
            ],
            "problem_code_id": "SEGM01",
            "difficulty_level": "1150",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 32824774,
                    "submission_date": 1588854031,
                    "language": "PYTH 3",
                    "username": "gdiksha942",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.07",
                    "memory": "17.6M",
                    "solution": 32824774,
                    "code": "for _ in range(int(input())):\n    n=input()\n    if n.count('1')==0:\n        print('NO')\n        continue\n    for i in range(len(n)-2):\n        if n[i]=='1' and n[i+1]=='0' and '1' in n[i+2:]:\n            print('NO')\n            break\n    else:\n        print('YES')\n"
                },
                {
                    "id": 32819120,
                    "submission_date": 1588847302,
                    "language": "PYTH 3",
                    "username": "hemanth__007",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.07",
                    "memory": "17.6M",
                    "solution": 32819120,
                    "code": "\nfor _ in range(int(input())):\n    n=input()\n    if n.count('1')==0:\n        print('NO')\n        continue\n    for i in range(len(n)-2):\n        if n[i]=='1' and n[i+1]=='0' and '1' in n[i+2:]:\n            print('NO')\n            break\n    else:\n        print('YES')\n"
                }
            ]
        },
        "DEVARRAY": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "1 2\n1\n1\n2",
                    "output": "Yes\nNo",
                    "explanation": "In the first example, Devu can't apply any operation. So the final element in the array will be 1 itself."
                },
                {
                    "input": "2 4\n1 3\n1\n2\n3\n4",
                    "output": "Yes\nYes\nYes\nNo",
                    "explanation": "In the second example,\nDevu can replace 1 and 3 with any of the numbers among 1, 2, 3. Hence final element of the array could be 1, 2 or 3."
                }
            ],
            "problem_statement": "Read problems statements in Mandarin Chinese, Russian and Vietnamese as well.\nDevu has an array A consisting of N positive integers. He would like to perform following operation on array.\n\nPick some two elements a, b in the array (a could be same as b, but their corresponding indices in the array should not be same).\nRemove both the elements a and b and instead add a number x such that x lies between min(a, b) and max(a, b), both inclusive, (i.e. min(a, b) \u2264 x \u2264 max(a, b)).\n\n\nNow, as you know after applying the above operation N - 1 times, Devu will end up with a single number in the array. He is wondering whether it is possible to do the operations in such a way that he ends up a number t. \n\n\nHe asks your help in answering Q such queries, each of them will contain an integer t and you have to tell whether it is possible to end up t. \n\nInput\nThere is only one test case per test file.\nFirst line of the input contains two space separated integers N, Q denoting number of elements in A and number of queries for which Devu asks your help, respectively\nSecond line contains N space separated integers denoting the content of array A.\n\nEach of the next Q lines, will contain a single integer t corresponding to the query.\nOutput\nOutput Q lines, each containing \"Yes\" or \"No\" (both without quotes) corresponding to the answer of corresponding query.\nConstraints\n1 \u2264 N, Q \u2264 105\n0 \u2264 t \u2264 109\n\nSubtasks\n\nSubtask #1 : 30 points\n\n1 \u2264 Ai \u2264 2\n\n\nSubtask #2 : 70 points\n\n1 \u2264 Ai \u2264 109",
            "input_format": "",
            "output_format": "",
            "problem_name": "Devu and an Array",
            "user_tags": [
                "Basic Maths",
                "ad-hoc",
                "Observation"
            ],
            "computed_tags": [
                "Mathematics",
                "Algorithms",
                "Constructive"
            ],
            "problem_code_id": "DEVARRAY",
            "difficulty_level": "1126",
            "ai_solutions": [
                "def solve():\n    n, q = map(int, input().split())\n    a = list(map(int, input().split()))\n    min_a = min(a)\n    max_a = max(a)\n    for _ in range(q):\n        t = int(input())\n        if min_a <= t <= max_a:\n            print(\"Yes\")\n        else:\n            print(\"No\")\n\nsolve()",
                "def solve():\n    n, q = map(int, input().split())\n    a = list(map(int, input().split()))\n    min_a = min(a)\n    max_a = max(a)\n    queries = [int(input()) for _ in range(q)]\n    results = [\"Yes\" if min_a <= t <= max_a else \"No\" for t in queries]\n    print(\"\\n\".join(results))\n\nsolve()"
            ],
            "human_solutions": [
                {
                    "id": 32761197,
                    "submission_date": 1588746182,
                    "language": "PYTH 3",
                    "username": "srujana2000",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.52",
                    "memory": "19.6M",
                    "solution": 32761197,
                    "code": "n,k=map(int,input().split())\nn=list(map(int,input().split()))\na=max(n)\nb=min(n)\nfor i in range(k):\n    p=int(input())\n    if p<b or p>a:\n        print(\"No\")\n    else:\n        print(\"Yes\")"
                },
                {
                    "id": 32758945,
                    "submission_date": 1588742959,
                    "language": "PYTH 3",
                    "username": "manishreddy_l",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.51",
                    "memory": "19.6M",
                    "solution": 32758945,
                    "code": "n,k=map(int,input().split())\r\nn=list(map(int,input().split()))\r\na=max(n)\r\nb=min(n)\r\nfor i in range(k):\r\n    p=int(input())\r\n    if p<b or p>a:\r\n        print(\"No\")\r\n    else:\r\n        print(\"Yes\")"
                }
            ]
        },
        "CHEFNWRK": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "4\r\n1 1 \r\n2\r\n2 4\r\n1 1\r\n3 6\r\n3 4 2\r\n3 6\r\n3 4 3",
                    "output": "-1\r\n1\r\n2\r\n3",
                    "explanation": "Example case 1: Since the weight of the box higher than $K$, Chef can not carry that box home in any number of the round trip.\nExample case 2: Since the sum of weights of both boxes is less than $K$, Chef can carry them home in one round trip.\nExample case 3: In the first round trip, Chef can only pick up the box at position $1$. In the second round trip, he can pick up both remaining boxes at positions $2$ and $3$.\nExample case 4: Chef can only carry one box at a time, so three round trips are required."
                }
            ],
            "problem_statement": "Read problems statements in Hindi, Mandarin Chinese, Russian, Vietnamese, and Bengali as well.\nChef has $N$ small boxes arranged on a line from $1$ to $N$. For each valid $i$, the weight of the $i$-th box is $W_i$. Chef wants to bring them to his home, which is at the position $0$. He can hold any number of boxes at the same time; however, the total weight of the boxes he's holding must not exceed K at any time, and he can only pick the ith box if all the boxes between Chef's home and the ith box have been either moved or picked up in this trip.\nTherefore, Chef will pick up boxes and carry them home in one or more round trips. Find the smallest number of round trips he needs or determine that he cannot bring all boxes home.\nInput\n\nThe first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\nThe first line of each test case contains two space-separated integers $N$ and $K$.\nThe second line contains $N$ space-separated integers $W_1, W_2, \\ldots, W_N$.\n\nOutput\nFor each test case, print a single line containing one integer \u2015 the smallest number of round trips or $-1$ if it is impossible for Chef to bring all boxes home.\nConstraints\n\n$1 \\le T \\le 100$\n$1 \\le N, K \\le 10^3$\n$1 \\le W_i \\le 10^3$ for each valid $i$",
            "input_format": "",
            "output_format": "",
            "problem_name": "Chef and Work",
            "user_tags": [
                "Greedy",
                "ad-hoc",
                "Implementation"
            ],
            "computed_tags": [
                "Algorithms",
                "Constructive"
            ],
            "problem_code_id": "CHEFNWRK",
            "difficulty_level": "1185",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 1027867388,
                    "submission_date": 1698736020,
                    "language": "PYTH 3",
                    "username": "jaganhdp",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.04",
                    "memory": "8.5M",
                    "solution": 1027867388,
                    "code": "t=int(input())\r\nfor i in range(t):\r\n    n,k=map(int,input().split())\r\n    arr=list(map(int,input().split()))\r\n    summ=0\r\n    i=0\r\n    count=1\r\n    if max(arr)>k:\r\n        print(-1)\r\n        continue\r\n    while i<len(arr):\r\n        summ+=arr[i]\r\n        if summ>k:\r\n            count+=1\r\n            summ=arr[i]\r\n        i+=1\r\n    print(count)"
                },
                {
                    "id": 1025371381,
                    "submission_date": 1697080266,
                    "language": "PYTH 3",
                    "username": "sathwikka2003",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.08",
                    "memory": "9.5M",
                    "solution": 1025371381,
                    "code": "for _ in range(int(input())):\r\n    n, k = map(int,input().split())\r\n    w = list(map(int,input().split()))\r\n    l = 0\r\n    trips = 0\r\n    while len(w)>0:\r\n        if w[0]<=k:\r\n            l += w[0]\r\n            if l <= k:\r\n                w.pop(0)\r\n                continue\r\n            else:\r\n               trips += 1\r\n               l = 0\r\n               continue\r\n        else:\r\n            print(-1)\r\n            break\r\n    else:\r\n        trips +=1\r\n        print(trips)    \r\n        "
                }
            ]
        },
        "ANKTRAIN": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "3\n1\n5\n3",
                    "output": "4LB\n2MB\n6UB",
                    "explanation": ""
                }
            ],
            "problem_statement": "Read problems statements in Mandarin Chinese, Russian and Vietnamese as well.\nRahul and Rashi are off to the wedding of a close relative. This time they have to travel without their guardians. Rahul got very interested in the arrangement of seats inside the train coach.\nThe entire coach could be viewed as an arrangement of consecutive blocks of size 8.  \n\n\nBerth Number    Compartment\n\n 1 -  8               1  \n 9 - 16               2  \n17 - 24               3  \n... and so on\n\nEach of these size-8 blocks are further arranged as:\n\n\n 1LB,  2MB,  3UB,  4LB,  5MB,  6UB,  7SL,  8SU  \n 9LB, 10MB, ...\n ...   \n ...\n\nHere LB denotes lower berth, MB middle berth and UB upper berth.\nThe following berths are called Train-Partners:\n\n3UB   |  6UB  \n2MB   |  5MB  \n1LB   |  4LB  \n7SL   |  8SU  \n\nand the pattern is repeated for every set of 8 berths.\nRahul and Rashi are playing this game of finding the train partner of each berth. Can you write a program to do the same?\nInput\nThe first line of input contains a single integer T, denoting the number of test cases to follow.\nEach of the next T lines contain a single integer N, the berth number whose neighbor is to be found out.\nOutput\nThe output should contain exactly T lines each containing the berth of the neighbor of the corresponding seat.\nConstraints\nSubtasks\n\nSubtask #1 (50 points):\n\n1 \u2264 T \u2264 8\n1 \u2264 N \u2264 8\n\n\nSubtask #2 (50 points):\n\n1 \u2264 T \u2264 100\n1 \u2264 N \u2264 500",
            "input_format": "",
            "output_format": "",
            "problem_name": "Train Partner",
            "user_tags": [
                "Implementation"
            ],
            "computed_tags": [
                "Algorithms"
            ],
            "problem_code_id": "ANKTRAIN",
            "difficulty_level": "1187",
            "ai_solutions": [
                "T = int(input())\nfor _ in range(T):\n    N = int(input())\n    remainder = N % 8\n    if remainder == 1:\n        print(str(N+3) + \"LB\")\n    elif remainder == 2:\n        print(str(N+3) + \"MB\")\n    elif remainder == 3:\n        print(str(N+3) + \"UB\")\n    elif remainder == 4:\n        print(str(N-3) + \"LB\")\n    elif remainder == 5:\n        print(str(N-3) + \"MB\")\n    elif remainder == 6:\n        print(str(N-3) + \"UB\")\n    elif remainder == 7:\n        print(str(N+1) + \"SU\")\n    else:\n        print(str(N-1) + \"SL\")",
                "T = int(input())\nfor _ in range(T):\n    N = int(input())\n    berth = {1: \"LB\", 2: \"MB\", 3: \"UB\", 4: \"LB\", 5: \"MB\", 6: \"UB\", 7: \"SL\", 0: \"SU\"}\n    remainder = N % 8\n    if remainder in [1, 2, 3]:\n        print(str(N+3) + berth[remainder])\n    elif remainder in [4, 5, 6]:\n        print(str(N-3) + berth[remainder])\n    elif remainder == 7:\n        print(str(N+1) + berth[remainder])\n    else:\n        print(str(N-1) + berth[remainder])"
            ],
            "human_solutions": [
                {
                    "id": 39623859,
                    "submission_date": 1605443297,
                    "language": "PYTH 3",
                    "username": "nayan_abhi",
                    "user_rating_star": 4,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.02",
                    "memory": "17.5M",
                    "solution": 39623859,
                    "code": "a = int(input())\nfor i in range(a):\n    b = int(input())\n    if b%8==0:\n        print(str(b-1) + 'SL')\n    elif b%8==7:\n        print(str(b+1) + 'SU')\n    elif b%8==1:\n        print(str(b+3) + 'LB')\n    elif b%8==2:\n        print(str(b+3) + 'MB')\n    elif b%8==3:\n        print(str(b+3) + 'UB')\n    elif b%8==4:\n        print(str(b-3) + 'LB')\n    elif b%8==5:\n        print(str(b-3) + 'MB')\n    elif b%8==6:\n        print(str(b-3) + 'UB')"
                },
                {
                    "id": 39395774,
                    "submission_date": 1604777830,
                    "language": "PYTH 3",
                    "username": "sarthak_05",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.02",
                    "memory": "17.5M",
                    "solution": 39395774,
                    "code": "def get_train_partner(n):\n    res = n%8\n    if res==0:\n        return str(n-1)+\"SL\"\n    elif res==7:\n        return str(n+1)+\"SU\"\n    elif res==1:\n        return str(n+3)+\"LB\"\n    elif res==4:\n        return str(n-3)+\"LB\"\n    elif res==3:\n        return str(n+3)+\"UB\"\n    elif res==6:\n        return str(n-3)+\"UB\"\n    elif res==2:\n        return str(n+3)+\"MB\"\n    else:\n        return str(n-3)+\"MB\"\n\nfor i in range(int(input())):\n    n = int(input())\n    print(get_train_partner(n))"
                }
            ]
        },
        "CUTBOARD": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "4\n2 4\n3 3\n6 8\n7 5",
                    "output": "3\n4\n35\n24",
                    "explanation": "Example case 1:\n\nThe edges cut by Suzumo in one optimal solution are marked by red lines."
                }
            ],
            "problem_statement": "Read problem statement in Mandarin chinese and Vietnamese.\nSuzumo has a chessboard with $N$ rows and $M$ columns. In one step, he can choose two cells of the chessboard which share a common edge (that has not been cut yet) and cut this edge.\nFormally, the chessboard is split into two or more pieces if it is possible to partition its cells into two non-empty subsets $S_1$ and $S_2$ ($S_1\\cap S_2 = \\emptyset$, $|S_1|+|S_2|=NM$) such that there is no pair of cells $c_1, c_2$ ($c_1 \\in S_1, c_2 \\in S_2$) which share a common edge that has not been cut.\nSuzumo does not want the board to split into two or more pieces. Compute the maximum number of steps he can perform while satisfying this condition.\nInput\n\nThe first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows. \nThe first and only line of each test case contains two space-separated integers $N$ and $M$.\n\nOutput\nFor each test case, print a single line containing one integer \u2014 the maximum possible number of steps.\nConstraints\n\n$1 \\le T \\le 64$\n$1 \\le N, M \\le 8$",
            "input_format": "",
            "output_format": "",
            "problem_name": "Cut the Board",
            "user_tags": [
                "ad-hoc"
            ],
            "computed_tags": [
                "Algorithms",
                "Constructive"
            ],
            "problem_code_id": "CUTBOARD",
            "difficulty_level": "1081",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 40743538,
                    "submission_date": 1608963462,
                    "language": "PYTH 3",
                    "username": "milind09_01",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.01",
                    "memory": "17.5M",
                    "solution": 40743538,
                    "code": "for _ in range(int(input())):\r\n    n,m=map(int,input().split())\r\n    print((n-1)*(m-1))"
                },
                {
                    "id": 40580452,
                    "submission_date": 1608556902,
                    "language": "PYTH 3",
                    "username": "garethbale",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.01",
                    "memory": "17.5M",
                    "solution": 40580452,
                    "code": "for __ in range(int(input())):\n    x,y=map(int,input().split())\n    print((x-1)*(y-1))"
                }
            ]
        },
        "ANDOR": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "2\n1\n8",
                    "output": "0 1\n5 3",
                    "explanation": ""
                }
            ],
            "problem_statement": "Read problem statements in Hindi, Bengali, Mandarin Chinese, Russian, and Vietnamese as well.\nGiven an integer $x$, find two non-negative integers $a$ and $b$ such that $(a \\wedge b) + (a \\vee b) = x$, where $\\wedge$ is the bitwise AND operation and $\\vee$ is the bitwise OR operation.\nInput\n\nThe first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\nThe first and only line of each test case contains a single integer $x$.\n\nOutput\nIf there is no valid pair $(a, b)$, print a single line containing the integer $-1$. Otherwise, print a single line containing two space-separated integers $a$ and $b$.\nIf there are multiple solutions, you may print any one of them.\nConstraints\n\n$1 \\le T \\le 10^5$\n$1 \\le x \\le 10^{18}$\n\nSubtasks\nSubtask #1 (30 points):\n- $1 \\le T \\le 200$\n- $1 \\le x \\le 200$\nSubtask #2 (70 points): original constraints",
            "input_format": "",
            "output_format": "",
            "problem_name": "AND Plus OR",
            "user_tags": [
                "Basic Maths",
                "Bitwise Operation",
                "Observation"
            ],
            "computed_tags": [
                "Mathematics",
                "Bit Manipulation",
                "Algorithms"
            ],
            "problem_code_id": "ANDOR",
            "difficulty_level": "1151",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 1027944830,
                    "submission_date": 1698770275,
                    "language": "PYTH 3",
                    "username": "jack0",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.37",
                    "memory": "8.5M",
                    "solution": 1027944830,
                    "code": "T = int(input())\r\nfor _ in range(T):\r\n    X = int(input())\r\n    print(0,X)"
                },
                {
                    "id": 1024665053,
                    "submission_date": 1696699340,
                    "language": "PYTH 3",
                    "username": "joshnareddy",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.42",
                    "memory": "9.5M",
                    "solution": 1024665053,
                    "code": "goals = int(input())\r\nfor distractions in range(goals):\r\n    wife = int(input())\r\n    print(1, wife - 1)"
                }
            ]
        },
        "ANUUND": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "2\n2\n3 2\n3\n10 5 2",
                    "output": "2 3\n2 10 5",
                    "explanation": "Example case 1.A[0] ? A[1] is satisfied, 2 ? 3.\nExample case 2.A[0] ? A[1] is satisfied, 2 ? 10.A[1] ? A[2] is satisfied, 10 ? 5.Note: 5 10 2 is also valid answer."
                }
            ],
            "problem_statement": "Read problems statements in Mandarin Chinese and Russian as well.\nProblem description\nYou will be given a zero-indexed array A. You need to rearrange its elements in such a way that the following conditions are satisfied:\n\n\nA[i] \u2264 A[i+1] if i is even.\nA[i] \u2265 A[i+1] if i is odd.\nIn other words the following inequality should hold: A[0] \u2264 A[1] \u2265 A[2] \u2264 A[3] \u2265 A[4], and so on. Operations \u2264 and \u2265 should alter.\nInput\nThe first line contains a single integer T denoting the number of test cases. The first line of each test case contains an integer N, that is the size of the array A. The second line of each test case contains the elements of array A\nOutput\nFor each test case, output a single line containing N space separated integers, which are the elements of A arranged in the required order. If there are more than one valid arrangements, you can output any of them.\nConstraints\n1 \u2264 N \u2264 100000\nSum of N in one test file \u2264 600000\n1 \u2264 A[i] \u2264 10^9",
            "input_format": "",
            "output_format": "",
            "problem_name": "Ups and Downs",
            "user_tags": [
                "ad-hoc",
                "anudeep2011",
                "cook46",
                "easy",
                "sorting"
            ],
            "computed_tags": [],
            "problem_code_id": "ANUUND",
            "difficulty_level": "1198",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 34079069,
                    "submission_date": 1591719372,
                    "language": "PYTH 3",
                    "username": "kit_28",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.76",
                    "memory": "21M",
                    "solution": 34079069,
                    "code": "for _ in range(int(input())):\n    n=int(input())\n    l=list(map(int,input().split()))\n    i=0 ; j=len(l)-1\n    l=sorted(l)\n    while i < j:\n        print(l[i],end=\" \")\n        print(l[j],end=\" \")\n        i += 1; j -= 1\n    if n%2==1: print(l[int(n/2)])\n    print()\n"
                },
                {
                    "id": 32996840,
                    "submission_date": 1589179313,
                    "language": "PYTH 3",
                    "username": "gsn1993",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.70",
                    "memory": "21.1M",
                    "solution": 32996840,
                    "code": "t = int(input())\nwhile t>0:\n    n = int(input())\n    arr = list(map(int, input().split()))\n    arr.sort()\n    if n%2==0: m = n//2\n    else: m = n//2 + 1\n    i, j = 0, m\n    while i<m and j<n:\n        print(str(arr[i]) + \" \" + str(arr[j]), end = \" \")\n        i = i+1\n        j = j+1\n    while i<m:\n        print(str(arr[i]))\n        i = i+1\n    print()\n    t -= 1\n"
                }
            ]
        },
        "GIFTSRC": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "3\r\n5\r\nLLLUR\r\n7\r\nLLLRUUD\r\n8\r\nLRULLUDU",
                    "output": "0 1\r\n-1 1\r\n-2 2",
                    "explanation": "Example case 1: Chef's path is $(0,0) \\rightarrow (-1,0) \\rightarrow (-1,0) \\rightarrow (-1,0) \\rightarrow (-1,1) \\rightarrow (0,1)$."
                }
            ],
            "problem_statement": "Read problems statements in Mandarin Chinese,Vietnamese, and Bengali as well.\nToday is Chef's birthday and he is looking forward to his gift. As usual, the gift is hidden and Chef has to follow a sequence of $N$ instructions to reach it.\nInitially, Chef is standing in the cell $(0, 0)$ of a two-dimensional grid. The sequence of instructions is given as a string $S$. If we denote Chef's current cell by $(x, y)$, each character of $S$ corresponds to an instruction as follows:\n- 'L' means to go left, i.e. to the cell $(x-1, y)$\n- 'R' means to go right, i.e. to the cell $(x+1, y)$\n- 'U' means to go up, i.e. to the cell $(x, y+1)$\n- 'D' means to go down, i.e. to the cell $(x, y-1)$\nIn addition, Chef should never perform multiple consecutive moves along the same axis of the grid. If there are multiple consecutive instructions to move along the same axis (left/right or up/down), he should perform only the first of these moves.\nFind the cell $(x_g, y_g)$ which contains the hidden gift.\nInput\n\nThe first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\nThe first line of each test case contains a single integer $N$.\nThe second line contains a single string $S$ with length $N$.\n\nOutput\nFor each test case, print a single line containing two space-separated integers $x_g$ and $y_g$.\nConstraints\n\n$1 \\le T \\le 100$\n$1 \\le N \\le 1,000$\n$S$ contains only characters 'L', 'R', 'U' and 'D'",
            "input_format": "",
            "output_format": "",
            "problem_name": "Find Your Gift",
            "user_tags": [
                "Implementation"
            ],
            "computed_tags": [
                "Algorithms"
            ],
            "problem_code_id": "GIFTSRC",
            "difficulty_level": "1157",
            "ai_solutions": [
                "T = int(input())\nfor _ in range(T):\n    N = int(input())\n    S = input()\n    x, y = 0, 0\n    prev = ''\n    for i in S:\n        if (i == 'L' or i == 'R') and (prev == 'U' or prev == 'D' or prev == ''):\n            if i == 'L':\n                x -= 1\n            else:\n                x += 1\n            prev = i\n        elif (i == 'U' or i == 'D') and (prev == 'L' or prev == 'R' or prev == ''):\n            if i == 'U':\n                y += 1\n            else:\n                y -= 1\n            prev = i\n    print(x, y)",
                "T = int(input())\nfor _ in range(T):\n    N = int(input())\n    S = input()\n    x, y = 0, 0\n    prev = ''\n    for i in S:\n        if (i in ['L', 'R']) and (prev in ['U', 'D', '']):\n            x += 1 if i == 'R' else -1\n            prev = i\n        elif (i in ['U', 'D']) and (prev in ['L', 'R', '']):\n            y += 1 if i == 'U' else -1\n            prev = i\n    print(x, y)"
            ],
            "human_solutions": [
                {
                    "id": 1027679766,
                    "submission_date": 1698600895,
                    "language": "PYTH 3",
                    "username": "bhavanamuthyam",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.06",
                    "memory": "8.3M",
                    "solution": 1027679766,
                    "code": "for _ in range(int(input())):\r\n    n = int(input())\r\n    s = input()\r\n    pos = [0,0]\r\n    prev = ''\r\n    for l in s:\r\n        if l == 'R' or l == 'L':\r\n            if prev == 'R' or prev == 'L':\r\n                continue\r\n            elif l == 'R':\r\n                pos[0] += 1\r\n            else:\r\n                pos[0] -= 1\r\n        elif l == 'U' or l == 'D':\r\n            if prev == 'U' or prev == 'D':\r\n                continue\r\n            elif l == 'U':\r\n                pos[1] += 1\r\n            else:\r\n                pos[1] -= 1        \r\n        prev = l                \r\n    print(*pos)            \r\n            "
                },
                {
                    "id": 1026732352,
                    "submission_date": 1697923047,
                    "language": "PYTH 3",
                    "username": "hiren1407",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.05",
                    "memory": "9.2M",
                    "solution": 1026732352,
                    "code": "T=int(input())\r\nfor i in range(T):\r\n    N=int(input())\r\n    s=input()\r\n    x=0\r\n    y=0\r\n    last=\"Z\"\r\n    for i in range(N):\r\n        if s[i]==\"L\" and last!=\"L\" and last!=\"R\":\r\n            x-=1\r\n            last=\"L\"\r\n        elif s[i]==\"R\" and last!=\"R\" and last!=\"L\":\r\n            x+=1\r\n            last=\"R\"\r\n        elif s[i]==\"U\" and last!=\"U\" and last!=\"D\":\r\n            y+=1\r\n            last=\"U\"\r\n        elif s[i]==\"D\" and last!=\"D\" and last!=\"U\":\r\n            y-=1\r\n            last=\"D\"\r\n    print(x,y)\r\n            "
                }
            ]
        },
        "RPD": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "3\r\n2\r\n2 8\r\n3 \r\n8 2 8\r\n3\r\n9 10 11",
                    "output": "7\r\n10\r\n18",
                    "explanation": "Example case 1: The only two numbers Chef can choose are $2$ and $8$. Their product is $16$ and the sum of digits of $16$ is $7$.\nExample case 2: Chef can choose $8$ and $8$; their product is $64$. Note that it is allowed to choose two different elements with the same value.\nExample case 3: Chef can choose $9$ and $11$. Their product is $99$ and the sum of its digits is $18$. Note that choosing $10$ and $11$ will result in a larger product ($110$), but the sum of its digits is just $2$."
                }
            ],
            "problem_statement": "Read problem statements in Hindi, Bengali, Mandarin Chinese, Russian, and Vietnamese as well.\nChef is attending math classes. On each day, the teacher gives him homework. Yesterday, the teacher gave Chef a sequence of positive integers and asked him to find the maximum product of two different elements of this sequence. This homework was easy for Chef, since he knew that he should select the biggest two numbers.\nHowever, today, the homework is a little bit different. Again, Chef has a sequence of positive integers $A_1, A_2, \\ldots, A_N$, but he should find two different elements of this sequence such that the sum of digits (in base $10$) of their product is maximum possible.\nChef thought, mistakenly, that he can still select the two largest elements and compute the sum of digits of their product. Show him that he is wrong by finding the correct answer \u2015 the maximum possible sum of digits of a product of two different elements of the sequence $A$.\nInput\n\nThe first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\nThe first line of the input contains a single integer $N$.\nThe second line contains $N$ space-separated integers $A_1, A_2, \\ldots, A_N$.\n\nOutput\nFor each test case, print a single line containing one integer \u2015 the maximum sum of digits.\nConstraints\n\n$1 \\le T \\le 100$\n$2 \\le N \\le 100$\n$1 \\le A_i \\le 10^4$ for each valid $i$\n\nSubtasks\nSubtask #1 (100 points): original constraints",
            "input_format": "",
            "output_format": "",
            "problem_name": "Easy Math",
            "user_tags": [
                "Brute Force"
            ],
            "computed_tags": [
                "Algorithms"
            ],
            "problem_code_id": "RPD",
            "difficulty_level": "1133",
            "ai_solutions": [
                "def max_digit_sum(T, test_cases):\n    for _ in range(T):\n        N, A = test_cases[_]\n        A.sort()\n        max_product = A[-1]*A[-2]\n        max_sum = sum(int(digit) for digit in str(max_product))\n        for i in range(N-1):\n            for j in range(i+1, N):\n                product = A[i]*A[j]\n                digit_sum = sum(int(digit) for digit in str(product))\n                if digit_sum > max_sum:\n                    max_sum = digit_sum\n        print(max_sum)\n\nT = int(input())\ntest_cases = []\nfor _ in range(T):\n    N = int(input())\n    A = list(map(int, input().split()))\n    test_cases.append((N, A))\nmax_digit_sum(T, test_cases)",
                "def max_digit_sum(T, test_cases):\n    for _ in range(T):\n        N, A = test_cases[_]\n        max_sum = 0\n        for i in range(N-1):\n            for j in range(i+1, N):\n                product = A[i]*A[j]\n                digit_sum = sum(int(digit) for digit in str(product))\n                if digit_sum > max_sum:\n                    max_sum = digit_sum\n        print(max_sum)\n\nT = int(input())\ntest_cases = []\nfor _ in range(T):\n    N = int(input())\n    A = list(map(int, input().split()))\n    test_cases.append((N, A))\nmax_digit_sum(T, test_cases)"
            ],
            "human_solutions": [
                {
                    "id": 40465108,
                    "submission_date": 1608045002,
                    "language": "PYTH 3",
                    "username": "laasya_463",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "1.44",
                    "memory": "9.3M",
                    "solution": 40465108,
                    "code": "for _ in range(int(input())):\n    n=int(input())\n    l=list(map(int,input().split()))\n    a=[]\n    \n    for i in range(len(l)):\n        for j in range(len(l)):\n            if(i!=j):\n                p=str(l[i]*l[j])\n                li=list(map(int,p))\n                a.append(sum(li))\n    print(max(a))                \n        \n    \n    \n"
                },
                {
                    "id": 40388858,
                    "submission_date": 1607841414,
                    "language": "PYTH 3",
                    "username": "nancy_023",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.76",
                    "memory": "17.5M",
                    "solution": 40388858,
                    "code": "t = int(input())\nfor i in range(t):\n    n = int(input())\n    A = list(map(int, input().split(\" \")))\n    if(n==2):\n        p = A[0]*A[1]\n        d = list(map(int, list(str(p))))\n        print(sum(d))\n    else:\n        s = []\n        for j in range(n):\n            for k in range(j+1,n):\n                p = A[j]*A[k]\n                d = list(map(int, list(str(p))))\n                s.append(sum(d))\n        print(max(s))"
                }
            ]
        },
        "CLIPLX": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "2\n10 5\n1 5",
                    "output": "5\n0",
                    "explanation": "In first case $X=10$ and $Y=5$, so RCB needs $10$ points from remaining $5$ matches to qualify for playoffs. It is only possible if they win all their remaining $5$ matches.\nIn second case $X=1$ and $Y=5$, so RCB needs $1$ points from their remaining $5$ matches to qualify for playoffs. It can be done if they tie any one of their $5$ matches and lose the remaining $4$. So they need to win $0$ matches."
                }
            ],
            "problem_statement": "It's IPL time and as usual RCB are finding it tough to qualify for playoffs.  RCB needs a minimum of $X$ more points to qualify for playoffs in their remaining $Y$ matches. A win, tie and loss in a match will yield $2,1,0$ points respectively to a team.\nYou being a true RCB supporter want to find the minimum number of matches RCB needs to win to qualify for playoffs. It is guaranteed that RCB will qualify for playoffs if they win all their remaining $Y$ matches.\nInput:\n\nFirst line will contain $T$, number of testcases. Then the testcases follow. \nEach testcase contains of a single line of input, two space separated integers $X, Y$\n\nOutput:\nFor each testcase, output in a single line the minimum number of matches RCB must win to qualify for playoffs.\nConstraints :\n\n$1 \\leq T \\leq 10000$\n$1 \\leq X \\leq 100$\n$1 \\leq Y \\leq 100$\n$1 \\leq X \\leq 2\\cdot Y$",
            "input_format": "",
            "output_format": "",
            "problem_name": "IPL and RCB",
            "user_tags": [
                "Basic Maths"
            ],
            "computed_tags": [
                "Mathematics"
            ],
            "problem_code_id": "CLIPLX",
            "difficulty_level": "1167",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 30903246,
                    "submission_date": 1585598787,
                    "language": "PYTH 3",
                    "username": "lastprocoder",
                    "user_rating_star": 3,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.05",
                    "memory": "17.6M",
                    "solution": 30903246,
                    "code": "t=int(input())\nfor k in range(0,t):\n    x,y=map(int,input().split())\n    if x<=y:\n        print('0')\n    elif x%y==0:\n        print(y)\n    else :\n        print(x%y)\n        "
                },
                {
                    "id": 30894304,
                    "submission_date": 1585579918,
                    "language": "PYTH 3",
                    "username": "tushar_406",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.05",
                    "memory": "17.6M",
                    "solution": 30894304,
                    "code": "i=0;\nfor i in range(int(input())):\n    (x,y)=map(int,input().split())\n    z=x-y\n    if z>0:\n        print(z)\n    else:\n        print(0)\n       \n    \n    \n            \n    "
                }
            ]
        },
        "MOVIEWKN": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "2\r\n2\r\n1 2\r\n2 1\r\n4\r\n2 1 4 1\r\n2 4 1 4",
                    "output": "1\r\n2",
                    "explanation": "In the first example case, both films have the same value of L \u00d7 R, but the first film has a better rating.\nIn the second example case, the second and the fourth movies are equally good, but the second movie has a smaller index."
                }
            ],
            "problem_statement": "Read problems statements in Mandarin Chinese, Russian and Vietnamese as well.\nLittle Egor is a huge movie fan. He likes watching different kinds of movies: from drama movies to comedy movies, from teen movies to horror movies. He is planning to visit cinema this weekend, but he's not sure which movie he should watch.\nThere are n movies to watch during this weekend. Each movie can be characterized by two integers Li and Ri, denoting the length and the rating of the corresponding movie. Egor wants to watch exactly one movie with the maximal value of Li \u00d7 Ri. If there are several such movies, he would pick a one with the maximal Ri among them. If there is still a tie, he would pick the one with the minimal index among them.\nYour task is to help Egor to pick a movie to watch during this weekend.\nInput\nThe first line of the input contains an integer T denoting the number of test cases.\nThe first line of the test case description contains an integer n.\nThe second line of the test case description contains n integers L1, L2, ...,Ln. The following line contains n integers R1, R2, ..., Rn.\nOutput\nFor each test case, output a single integer i denoting the index of the movie that Egor should watch during this weekend. Note that we follow 1-based indexing.\nConstraints\n\n1 \u2264 T \u2264 5\n1 \u2264 n \u2264 100\n1 \u2264 Li, Ri \u2264 100",
            "input_format": "",
            "output_format": "",
            "problem_name": "Movie Weekend",
            "user_tags": [
                "Conditional Statements",
                "Brute Force"
            ],
            "computed_tags": [
                "Basic Programming Concepts",
                "Algorithms"
            ],
            "problem_code_id": "MOVIEWKN",
            "difficulty_level": "1175",
            "ai_solutions": [
                "T = int(input())\nfor _ in range(T):\n    n = int(input())\n    L = list(map(int, input().split()))\n    R = list(map(int, input().split()))\n    max_product = max_rating = max_index = -1\n    for i in range(n):\n        if L[i]*R[i] > max_product or (L[i]*R[i] == max_product and R[i] > max_rating):\n            max_product = L[i]*R[i]\n            max_rating = R[i]\n            max_index = i\n    print(max_index + 1)",
                "T = int(input())\nfor _ in range(T):\n    n = int(input())\n    L = list(map(int, input().split()))\n    R = list(map(int, input().split()))\n    movies = sorted([(L[i]*R[i], R[i], -i) for i in range(n)], reverse=True)\n    print(-movies[0][2] + 1)"
            ],
            "human_solutions": [
                {
                    "id": 30561675,
                    "submission_date": 1584551686,
                    "language": "PYTH 3",
                    "username": "abhishen",
                    "user_rating_star": 3,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.01",
                    "memory": "17.6M",
                    "solution": 30561675,
                    "code": "for i in range(int(input())):\r\n    a=int(input())\r\n    l=list(map(int,input().split()))\r\n    r =list(map(int,input().split()))\r\n\r\n    m=[]\r\n    \r\n\r\n    for j in range(a):\r\n        m.append(l[j]*r[j])\r\n\r\n    p=r.index(max(r))\r\n\r\n    if m.index(max(m))==p:\r\n        print(p+1)\r\n    else:\r\n        df=[]\r\n        for k in range(a):\r\n            if m[k] == max(m):\r\n                df.append([r[k],k+1])\r\n\r\n        df.sort()\r\n        for b in df:\r\n            if b[0]==df[-1][0]:\r\n                print(b[1])\r\n                break\r\n                \r\n    \r\n"
                },
                {
                    "id": 30515808,
                    "submission_date": 1584374202,
                    "language": "PYTH 3",
                    "username": "abhi__code",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.01",
                    "memory": "17.6M",
                    "solution": 30515808,
                    "code": "def movie_weekend(a, b):\r\n    l = []\r\n    k = []\r\n    for i in range(1, len(a)+1):\r\n        l.append(tuple([a[i-1], b[i-1], i]))\r\n\r\n    mul = list(map(lambda x: x[0]*x[1], l))\r\n    max_m = max(mul)\r\n    for i in range(len(mul)):\r\n        if mul[i]==max_m:\r\n            k.append(l[i])\r\n    if max(k, key=lambda x: x[1]) != min(k, key=lambda x: x[1]):\r\n        return max(k, key=lambda x: x[1])[2]\r\n    else:\r\n        return k[0][2]\r\n\r\nfor _ in range(int(input())):\r\n    n = input()\r\n    a, b = list(map(int, input().split())), list(map(int, input().split()))\r\n    print(movie_weekend(a, b))"
                }
            ]
        },
        "THREEFR": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "2\r\n1 2 1\r\n1 1 1",
                    "output": "yes\r\nno",
                    "explanation": "Example 1: One possible way to satisfy all conditions is: A has $10$ rupees, B has $9$ rupees and C has $11$ rupees. Therefore, we have $x = 1$, $y = -2$, $z = 1$.\nExample 2: There is no way for all conditions to be satisfied."
                }
            ],
            "problem_statement": "Read problems statements Mandarin , Bengali , Hindi , Russian and Vietnamese as well.\nThere are three friends; let's call them A, B, C. They made the following statements:\n- A: \"I have $x$ Rupees more than B.\"\n- B: \"I have $y$ rupees more than C.\"\n- C: \"I have $z$ rupees more than A.\"\nYou do not know the exact values of $x, y, z$. Instead, you are given their absolute values, i.e. $X = |x|$, $Y = |y|$ and $Z = |z|$. Note that $x$, $y$, $z$ may be negative; \"having $-r$ rupees more\" is the same as \"having $r$ rupees less\".\nFind out if there is some way to assign amounts of money to A, B, C such that all of their statements are true.\nInput\n\nThe first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\nThe first and only line of each test case contains three space-separated integers $X$, $Y$ and $Z$.\n\nOutput\nFor each test case, print a single line containing the string \"yes\" if the presented scenario is possible or \"no\" otherwise (without quotes).\nConstraints\n\n$1 \\le T \\le 1,000$\n$1 \\le X, Y, Z \\le 1,000$\n\nSubtasks\nSubtask #1 (30 points):\n- $1 \\le T \\le 30$\n- $1 \\le X, Y, Z \\le 3$\nSubtask #2 (70 points): original constraints",
            "input_format": "",
            "output_format": "",
            "problem_name": "Three Friends",
            "user_tags": [
                "Basic Maths",
                "Implementation"
            ],
            "computed_tags": [
                "Mathematics",
                "Algorithms"
            ],
            "problem_code_id": "THREEFR",
            "difficulty_level": "1074",
            "ai_solutions": [
                "T = int(input())\nfor _ in range(T):\n    X, Y, Z = map(int, input().split())\n    if max(X, Y, Z) != sum([X, Y, Z]) - max(X, Y, Z):\n        print(\"no\")\n    else:\n        print(\"yes\")",
                "T = int(input())\nfor _ in range(T):\n    amounts = sorted(list(map(int, input().split())))\n    if amounts[0] + amounts[1] == amounts[2]:\n        print(\"yes\")\n    else:\n        print(\"no\")"
            ],
            "human_solutions": [
                {
                    "id": 30550852,
                    "submission_date": 1584520919,
                    "language": "PYTH 3",
                    "username": "krishna_ajith",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.02",
                    "memory": "17.6M",
                    "solution": 30550852,
                    "code": "for _ in range(int(input())):\n    (a,b,c)=map(int,input().split())\n    if(a+b==c or b+c==a or c+a==b):\n        print(\"yes\")\n    else:\n        print(\"no\")"
                },
                {
                    "id": 30491366,
                    "submission_date": 1584332721,
                    "language": "PYTH 3",
                    "username": "ramesh_303",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.02",
                    "memory": "17.6M",
                    "solution": 30491366,
                    "code": "t=int(input())\r\nfor i in range(t):\r\n    x,y,z=map(int,input().split())\r\n    if(x+y+z==(2*max(x,y,z))):\r\n        print(\"yes\")\r\n    else:\r\n        print(\"no\")"
                }
            ]
        },
        "KOL15A": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "1\nab1231da\n",
                    "output": "7",
                    "explanation": "The digits in this string are 1, 2, 3 and 1. Hence, the sum of all of them is 7."
                }
            ],
            "problem_statement": "Given an alphanumeric string made up of digits and lower case Latin characters only, find the sum of all the digit characters in the string.\nInput\nThe first line of the input contains an integer T denoting the number of test cases. Then T test cases follow.\nEach test case is described with a single line containing a string S, the alphanumeric string.\n\nOutput\nFor each test case, output a single line containing the sum of all the digit characters in that string.\n\nConstraints\n1 \u2264 T \u2264 1000\n1 \u2264 |S| \u2264 1000, where |S| is the length of the string S.",
            "input_format": "",
            "output_format": "",
            "problem_name": "Processing a string",
            "user_tags": [
                "String",
                "Arithmetic",
                "ad-hoc"
            ],
            "computed_tags": [
                "Data Structures",
                "Mathematics",
                "Basic Maths",
                "Algorithms",
                "Constructive"
            ],
            "problem_code_id": "KOL15A",
            "difficulty_level": "1125",
            "ai_solutions": [
                "T = int(input())\nfor _ in range(T):\n    S = input()\n    print(sum(int(c) for c in S if c.isdigit()))",
                "T = int(input())\nfor _ in range(T):\n    S = input()\n    total = 0\n    for c in S:\n        if c.isdigit():\n            total += int(c)\n    print(total)"
            ],
            "human_solutions": [
                {
                    "id": 32339906,
                    "submission_date": 1587997841,
                    "language": "PYTH 3",
                    "username": "rohith_vaddi",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.16",
                    "memory": "17.6M",
                    "solution": 32339906,
                    "code": "t=int(input())\nwhile t>0:\n    t=t-1\n    c=0\n    n=input()\n    for i in n:\n        if i.isdigit()==True:\n            c=c+int(i)\n    print(c)"
                },
                {
                    "id": 32327002,
                    "submission_date": 1587967062,
                    "language": "PYTH 3",
                    "username": "warrior_coder",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.16",
                    "memory": "17.6M",
                    "solution": 32327002,
                    "code": "t = int(input())\r\nfor i in range(0,t):\r\n    s=input()\r\n    l = list(s)\r\n    sum = 0\r\n    for i in l:\r\n        if i.isdigit():\r\n            sum += int(i)\r\n    print(sum)\r\n"
                }
            ]
        },
        "MAXCOUNT": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "2\n5\n1 2 3 2 5\n6\n1 2 2 1 1 2",
                    "output": "2 2\n1 3",
                    "explanation": "In first case 2 occurs twice whereas all other elements occur only once. \nIn second case, both 1 and 2 occur 3 times but 1 is smaller than 2."
                }
            ],
            "problem_statement": "Given an array A of length N, your task is to find the element which repeats in A maximum number of times as well as the corresponding count. In case of ties, choose the smaller element first.\n\n\nInput\nFirst line of input contains an integer T, denoting the number of test cases. Then follows description of T cases. Each case begins with a single integer N, the length of A. Then follow N space separated integers in next line.  Assume that 1 \nOutput\nFor each test case, output two space separated integers V & C. V is the value which occurs maximum number of times and C is its count.",
            "input_format": "",
            "output_format": "",
            "problem_name": "Count of Maximum",
            "user_tags": [
                "easy",
                "feb12",
                "nikhil_adm"
            ],
            "computed_tags": [],
            "problem_code_id": "MAXCOUNT",
            "difficulty_level": "1180",
            "ai_solutions": [
                "from collections import Counter\n\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    A = list(map(int, input().split()))\n    count_dict = Counter(A)\n    max_count = max(count_dict.values())\n    max_elements = [k for k, v in count_dict.items() if v == max_count]\n    print(min(max_elements), max_count)",
                "T = int(input())\nfor _ in range(T):\n    N = int(input())\n    A = list(map(int, input().split()))\n    unique_elements = set(A)\n    max_count = 0\n    max_element = None\n    for element in unique_elements:\n        count = A.count(element)\n        if count > max_count or (count == max_count and element < max_element):\n            max_count = count\n            max_element = element\n    print(max_element, max_count)"
            ],
            "human_solutions": [
                {
                    "id": 30802630,
                    "submission_date": 1585397558,
                    "language": "PYTH 3",
                    "username": "shefali2810",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.03",
                    "memory": "17.6M",
                    "solution": 30802630,
                    "code": "for t in range(int(input())):\n\tn=int(input())\n\tl=list(map(int,input().split()))\n\tl.sort()\n\tc,v=0,0\n\tfor i in l:\n\t\tif l.count(i)>c:\n\t\t\tc=l.count(i)\n\t\t\tv=i\n\tprint(v,c)"
                },
                {
                    "id": 30384512,
                    "submission_date": 1584097761,
                    "language": "PYTH 3",
                    "username": "notsharwan",
                    "user_rating_star": 3,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.03",
                    "memory": "17.6M",
                    "solution": 30384512,
                    "code": "for _ in range(int(input())):\n    n=int(input())\n    l=list(map(int,input().split()))\n    l.sort()\n    \n    l.sort()\n    d=[]\n    for i in l:\n        d.append(l.count(i))\n    maxc=max(d)\n    for i in l:\n        if l.count(i)==maxc:\n            print(i,maxc)\n            break\n"
                }
            ]
        },
        "CHFTIRED": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "1\n5 7",
                    "output": "YES",
                    "explanation": "Example case 1: One possible strategy for Chef is:\n- choose $d = 10$, add $d-1=9$ to $a$ and $d=10$ to $b$; after this operation, $a = 14$ and $b = 17$\n- choose $d = 10$, add $d=10$ to $a$ and $d-1=9$ to $b$; afterwards, $a = 24$ and $b = 26$\n- choose $d = 9$, add $d=9$ to $a$ and $d-1=8$ to $b$; afterwards, $a = 33$ and $b = 34$\n- choose $d = 9$, add $d$ to $a$ and $d-1$ to $b$; finally, we have $a = b = 42$"
                }
            ],
            "problem_statement": "Read problems statements Hindi , Vietnamese , Mandarin Chinese , Russian and Bengali as well.\nOh, these difficult contests... In each contest, there are so many hard tasks Chef cannot solve. However, he knows that he can only become a successful coder if he works hard. Fortunately, he has a problem in mind for training.\nYou are given two positive integers $a$ and $b$. You may apply the following magical operation any number of times (including zero):\n- choose an arbitrary positive integer $d$\n- perform exactly one of the following actions:\n    - add $d$ to $a$, add $d-1$ to $b$\n    - add $d-1$ to $a$, add $d$ to $b$\nChef is asking you to find out if it is possible to obtain $a = b$. Help him!\nInput\n\nThe first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\nThe first and only line of each test case contains two space-separated integers $a$ and $b$. \n\nOutput\nFor each test case, print a single line containing the string \"YES\" if it is possible to obtain $a = b$ or \"NO\" if it is impossible.\nConstraints\n\n$1 \\le T \\le 1,000$\n$1 \\le a, b \\le 10^9$\n\nSubtasks\nSubtaks #1 (100 points): original constraints",
            "input_format": "",
            "output_format": "",
            "problem_name": "Chef and Difficult Contests",
            "user_tags": [
                "Basic Maths"
            ],
            "computed_tags": [
                "Mathematics"
            ],
            "problem_code_id": "CHFTIRED",
            "difficulty_level": "1130",
            "ai_solutions": [
                "T = int(input())\nfor _ in range(T):\n    a, b = map(int, input().split())\n    if abs(a - b) % 2 == 0:\n        print(\"YES\")\n    else:\n        print(\"NO\")",
                "def solve(a, b):\n    return \"YES\" if abs(a - b) % 2 == 0 else \"NO\"\n\nT = int(input())\nfor _ in range(T):\n    a, b = map(int, input().split())\n    print(solve(a, b))"
            ],
            "human_solutions": [
                {
                    "id": 34684557,
                    "submission_date": 1592995540,
                    "language": "PYTH 3",
                    "username": "yogita_dudeja",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.02",
                    "memory": "17.6M",
                    "solution": 34684557,
                    "code": "t=int(input())\nfor i in range(t):\n    a,b=map(int,input().split())\n    print(\"YES\")\n    \n"
                },
                {
                    "id": 34638567,
                    "submission_date": 1592824288,
                    "language": "PYTH 3",
                    "username": "dky2202",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.02",
                    "memory": "17.5M",
                    "solution": 34638567,
                    "code": "t = int(input())\n\nwhile t:\n    s = input()\n    print(\"YES\")\n    \n    t -= 1"
                }
            ]
        },
        "CHNUM": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "1\r\n5\r\n5 2 4 6 7",
                    "output": "5 5",
                    "explanation": "Example case 1: To maximise the total score, everyone has to belong to the same group with scores $[5, 2, 4, 6, 7]$. For this group, $X = 5+2+4+6+7 = 24$ and the total score is $24^2 = 576$. The size of the largest possible group, as well as the size of the smallest possible group, is $5$."
                }
            ],
            "problem_statement": "Read problem statements in Hindi, Bengali, Mandarin Chinese, Russian, and Vietnamese as well.\nRecently, Chef hosted a strange competition at the Byteland annual fair. There were $N$ participants in the competition (numbered $1$ through $N$); at the end of the competition, their scores were $A_1, A_2, \\ldots, A_N$. Since it was a strange competition, negative scores were allowed too.\nThe total score of the competition is calculated as follows:\n- Divide the participants into one or more non-empty groups (subsets); if there are $K$ groups, let's denote them by $G_1, G_2, \\ldots, G_K$. Each participant should be a member of exactly one group.\n- Sum up the scores of participants in each individual group. For each valid $i$, let's denote the sum of scores of participants in group $i$ by $X_i$.\n- The total score of the competition is the sum of squares of these summed up scores, i.e. $X_1^2 + X_2^2 + \\ldots + X_K^2$.\nChef wants to choose the groups in such a way that the total score is maximum possible. Since there may be many ways to form the groups that lead to the maximum total score, Chef wants to know just the size of the largest group and the size of the smallest group which could be formed while still maximising the total score. These sizes are independent - formally, they are the maximum and minimum size $s$ of a group such that there is a way to form groups which maximises the total score and contains a group with size $s$.\nInput\n\nThe first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\nThe first line of each test case contains a single integer $N$.\nThe second line contains $N$ space-separated integers $A_1, A_2, \\ldots, A_N$.\n\nOutput\nFor each test case, print a single line containing two space-separated integers - the size of the largest possible group and the size of the smallest possible group.\nConstraints\n\n$1 \\le T \\le 20$\n$1 \\le N \\le 10^5$\n$1 \\le |A_i| \\le 10^9$ for each valid $i$\nthe sum of $N$ over all test cases does not exceed $5 \\cdot 10^5$\n\nSubtasks\nSubtask #1 (100 points): original constraints",
            "input_format": "",
            "output_format": "",
            "problem_name": "Chef and Number Game",
            "user_tags": [
                "Basic Maths",
                "Observation"
            ],
            "computed_tags": [
                "Mathematics",
                "Algorithms"
            ],
            "problem_code_id": "CHNUM",
            "difficulty_level": "1188",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 35891097,
                    "submission_date": 1595511431,
                    "language": "PYTH 3",
                    "username": "abhishek122000",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.17",
                    "memory": "20.4M",
                    "solution": 35891097,
                    "code": "try:\n    t=int(input())\n    for i in range(t):\n        n=int(input())\n        l=list(map(int,input().split()))\n        m,k=0,0\n        for i in l:\n            if i>0:\n                m+=1\n            else:\n                k+=1\n        if(k==0 or m==0):\n            print(max(m,k),max(m,k))\n        else:\n            print(max(m,k),min(m,k))\nexcept:\n    pass\n"
                },
                {
                    "id": 35763182,
                    "submission_date": 1595102260,
                    "language": "PYTH 3",
                    "username": "psychopomp",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.15",
                    "memory": "20.4M",
                    "solution": 35763182,
                    "code": "t=int(input())\nfor _ in range(t):\n    n=int(input())\n    a=list(map(int,input().split()))\n    negative=0\n    positive=0\n    for i in a:\n        if i<0:\n            negative+=1\n        else:\n            positive+=1\n    if negative==0:\n        print(positive,positive)\n    elif positive==0:\n        print(negative,negative)\n    else:\n        print(max(positive,negative),min(positive,negative))\n            \n"
                }
            ]
        },
        "CK87MEDI": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "3\n2 1\n4 7\n4 3\n9 2 8 6\n5 2\n6 1 1 1 1",
                    "output": "7\n9\n1",
                    "explanation": "Test case $1$: A possible solution is to add element $9$ to the array. On sorting, the array becomes $[4, 7, 9]$. The element positioned at the center, after sorting, is $7$. It can be shown that the median of the array after inserting $1$ element cannot exceed $7$.\nTest case $2$: A possible solution is to add elements $10, 20, $ and $30$ to the array. On sorting, the array becomes $[2, 6, 8, 9, 10, 20, 30]$. The element positioned at the center, after sorting, is $9$. It can be shown that the median of the array after inserting $3$ elements cannot exceed $9$.\nTest case $3$: A possible solution is to add elements $2$ and $3$ to the array. On sorting, the array becomes $[1,1,1,1,2,3,6]$. The element positioned at the center, after sorting, is $1$. It can be shown that the median of the array after inserting $2$ elements cannot exceed $1$."
                }
            ],
            "problem_statement": "Read problems statements in Mandarin chinese, Russian and Vietnamese as well.\nEven though it was a little unexpected, Chef did it! He has finally opened a new restaurant!\nAs you all know, to make everything go well, Chef needs employees (co-chefs if you might say). Because Chef is a perfectionist, he planned to employ only chefs who are good at competitive progeamming. Hence, Chef asked for help from his friends Shahhoud and Said. Knowing that many people (such as Ahmad, Nour, Majd and Joud) will apply for the job, they decided to choose only the best appliers.\nAs the day of the employment came, people lined up in front of the restaurant applying for the job. Before accepting any appliers, Shahhoud and Said decided to make them answer a simple question, in order to determine which of them better deserves the job.\nGiven an array of N elements A1, A2, ..., AN, each applier was asked to insert any K integers he wants to this array. Eventually, each applier will be asked to write down the median among all the elements in his resulting array. Many appliers asked for your help to determine what is the greatest median they can get after inserting any K elements they want?\nNote that the median in an array is the element positioned at the center of the array after sorting it. E.g. the median in [2, 1, 5, 2, 4] is 2, and the median in [3, 3, 1, 3, 3] is 3.\n\u00a0\nInput\nThe first line of the input contains an integer T denoting the number of test cases.\nThe first line of each test case contains two space separated integers N and K denoting the array length, and the number of elements to be inserted.\nThe second line of each test case contains N space separated integers A1, A2, ..., AN denoting the elements of the array.\nOutput\nFor each test case output a single line, containing a single integer, indicating the greatest median the applier can obtain after inserting exactly K new elements into the given array.\nConstraints\n1 \u2264 T \u2264 100.\n0 \u2264 K \n0 \u2264 Ai \u2264 1000.\nN + K is guaranteed to be odd.",
            "input_format": "",
            "output_format": "",
            "problem_name": "Chef and Employment Test",
            "user_tags": [
                "Mathematics",
                "ad-hoc",
                "Sorting"
            ],
            "computed_tags": [
                "Algorithms",
                "Constructive"
            ],
            "problem_code_id": "CK87MEDI",
            "difficulty_level": "1142",
            "ai_solutions": [
                "def max_median(T, test_cases):\n    for _ in range(T):\n        N, K, arr = test_cases[_]\n        arr.sort()\n        print(arr[(N+K)//2])\n\nT = int(input())\ntest_cases = []\nfor _ in range(T):\n    N, K = map(int, input().split())\n    arr = list(map(int, input().split()))\n    test_cases.append((N, K, arr))\nmax_median(T, test_cases)"
            ],
            "human_solutions": [
                {
                    "id": 29031887,
                    "submission_date": 1579288798,
                    "language": "PYTH 3",
                    "username": "anusha119",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.02",
                    "memory": "17.6M",
                    "solution": 29031887,
                    "code": "for _ in range(int(input())):\n    n,k=list(map(int,input().split()))\n    l=list(map(int,input().split()))\n    l=sorted(l)\n    for i in range(k):\n        l.append(10001)\n    print(l[(len(l)//2)])"
                },
                {
                    "id": 28802311,
                    "submission_date": 1578461483,
                    "language": "PYTH 3",
                    "username": "deeware",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.02",
                    "memory": "17.6M",
                    "solution": 28802311,
                    "code": "T=int(input())\r\n\r\nfor k in range(T):\r\n    N,K=map(int,input().split())\r\n    L=list(map(int,input().split()))\r\n    L.sort()\r\n    m=max(L)\r\n    for i in range(K):\r\n        L.append(m)\r\n        m+=1\r\n\r\n    print(L[len(L)//2])"
                }
            ]
        },
        "VOTERS": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "5 6 5\n23\n30\n42\n57\n90\n21 \n23 \n35 \n57 \n90 \n92 \n21 \n23 \n30 \n57 \n90 ",
                    "output": "5\n21 \n23 \n30 \n57 \n90",
                    "explanation": ""
                }
            ],
            "problem_statement": "As you might remember, the collector of Siruseri had ordered\na complete revision of the Voters List. He knew that constructing\nthe list of voters is a difficult task, prone to errors. Some\nvoters may have been away on vacation, others may have moved\nduring the enrollment and so on. \n To be as accurate as possible, he entrusted the task to three different \nofficials. Each of them was to independently record the list of voters and \nsend it to the collector. In Siruseri, every one has a ID number and\nthe list would only list the ID numbers of the voters and not their names.\nThe officials were expected to arrange the ID numbers in ascending order\nin their lists. \n On receiving the lists, the Collector realised that there were\ndiscrepancies - the three lists were not identical.  He decided\nto go with the majority. That is, he decided to construct the\nfinal list including only those ID numbers that appeared in at\nleast 2 out of the 3 lists.  For example if the three lists\nwere\n\n23  30  42  57  90\n21  23  35  57  90  92\n21  23  30  57  90 \n\nthen the final list compiled by the collector would be:\n\n21  23  30  57  90\n\n The ID numbers 35, 42 and 92 which appeared in only one list\neach do not figure in the final list.\n Your task is to help the collector by writing a program that\nproduces the final list from the three given lists.\nInput format\nThe first line of the input contains 3 integers\nN1, N2 and\nN3.  N1 is the number of\nvoters in the first list, N2 is the number of\nvoters in the second list and N3 is the number of\nvoters in the third list.  The next N1 lines\n(lines 2,...,N1+1) contain one positive integer\neach and describe the first list in ascending order.  The following\n\nN2 lines (lines\nN1+2,...,N1+N2+1)\ndescribe the second list in ascending order and the final\nN3 lines (lines\n\nN1+N2+2,...,N1+N2+N3+1)\ndescribe the third list in ascending order.\nOutput format\nThe first line of the output should contain a single integer\nM indicating the number voters in the final list. The next\nM lines (lines 2,...,M+1) should contain one\npositive integer each, describing the list of voters in the final\nlist, in ascending order.\nTest data\nYou may assume that 1 \u2264\nN1,N2,N3\n\u2264 50000.",
            "input_format": "",
            "output_format": "",
            "problem_name": "Discrepancies in the Voters List",
            "user_tags": [
                "Hashmaps",
                "Implementation"
            ],
            "computed_tags": [
                "Data Structures",
                "Algorithms"
            ],
            "problem_code_id": "VOTERS",
            "difficulty_level": "1114",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 34545124,
                    "submission_date": 1592646207,
                    "language": "PYTH 3",
                    "username": "sanvi_2512",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.20",
                    "memory": "17.9M",
                    "solution": 34545124,
                    "code": "from collections import Counter\r\nn1,n2,n3=map(int,input().split())\r\np=0\r\nk,s=[],[]\r\nfor _ in range(n1+n2+n3):\r\n    l=int(input())\r\n    s.append(l)\r\nt=Counter(s)\r\nfor x,y in t.items():\r\n    if y>=2:\r\n        p+=1\r\n        k.append(x)\r\nk.sort()\r\nprint(p)\r\nfor item in k:\r\n    print(item)"
                },
                {
                    "id": 34497557,
                    "submission_date": 1592458795,
                    "language": "PYTH 3",
                    "username": "salvin",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.21",
                    "memory": "20.6M",
                    "solution": 34497557,
                    "code": "n1,n2,n3=map(int,input().split())\nl1=[]\nl2=[]\nl3=[]\nfor i in range(n1):\n    l1.append(int(input()))\nfor i in range(n2):\n    l2.append(int(input()))\nfor i in range(n3):\n    l3.append(int(input()))\na = set(l1)\nb = set(l2)\nc = set(l3)\ni1 = a & b\ni2 = b & c\ni3 = a & c\n\ni1= i1.union(i2)\nfr= list(i1.union(i3))\nfr.sort()\nprint(len(fr))\nfor i in fr:\n    print(i)\n    "
                }
            ]
        },
        "CHEFSTUD": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "4\n><\n*><*\n><><\n*><><><*",
                    "output": "0\n0\n1\n2",
                    "explanation": "Example case 1. The updated configuration will be . No students are talking to each other, so no one will be punished.\nExample case 2 and 3. These examples are already explained in the problem statement."
                }
            ],
            "problem_statement": "Read problems statements in Mandarin Chinese, Russian and Vietnamese as well.\nChef is instructor of the famous course \"Introduction to Algorithms\" in a famous univerisity. There are n students in his class. There is not enough space in the class room, so students sit in a long hallway in a linear fashion.\nOne day Chef was late to class. As a result, some of the students have formed pairs and are talking to each other, while the others are busy studying. This information is given to you by a string s of length n, consisting of characters '*', ', where '*' denotes that the student is studying, '>' denotes that the corresponding student is talking to the student to the right, and '\n\nFor example, consider a sample configuration of students - *>. Here students numbered 1 and 4 are busy studying, while the student 2 and 3 are talking to each other. In this example, >, student 1 and 2 are talking to each other, and 3 and 4 are also talking to each other. You are guaranteed that the given input is a valid configuration, i.e.  can not be a valid string s, as here student 1 is shown to be talking to left, but there is no student to the left. Same is the case for right. Similarly, >> is also not a valid configuration, as students 2 and 3 are talking to each other, so student 1 won't be able to talk to student 2.\nWhen the students see their teacher coming, those who were talking get afraid and immediately turn around, i.e. students talking to left have now turned to the right, and the one talking to right have turned to the left. When Chef sees two students facing each other, he will assume that they were talking. A student who is busy studying will continue doing so. Chef will call each pair of students who were talking and punish them. Can you find out how many pairs of students will get punished?\n\nFor example, in case *>, when students see Chef, their new configuration will be **. Chef sees that no students are talking to each other. So no one is punished. While in case >, the new configuration of students will be , Chef sees that student 2 and 3 are talking to each other and they will be punished.\nInput\nThe first line of the input contains an integer T denoting the number of the test cases.\nEach test case contains a string s denoting the activities of students before students see Chef entering the class.\nOutput\nFor each test case, output a single integer denoting the number of pairs of students that will be punished.\nConstraints\n\n1 \u2264 T \u2264 10\n1 \u2264 |s| \u2264 105\n\nSubtasks\nSubtask #1: (30 points)\n\n1 \u2264 T \u2264 10\n1 \u2264 |s| \u2264 105\nNo student is studying.\n\n\nSubtask #2: (70 points)\n\nOriginal Constraints.",
            "input_format": "",
            "output_format": "",
            "problem_name": "Chef and his Students",
            "user_tags": [
                "ad-hoc",
                "Implementation"
            ],
            "computed_tags": [
                "Algorithms",
                "Constructive"
            ],
            "problem_code_id": "CHEFSTUD",
            "difficulty_level": "1047",
            "ai_solutions": [
                "T = int(input())\nfor _ in range(T):\n    s = input()\n    print(s.count('<>'))",
                "def count_pairs(s):\n    return s.count('<>')\n\nT = int(input())\nfor _ in range(T):\n    s = input()\n    print(count_pairs(s))"
            ],
            "human_solutions": [
                {
                    "id": 37819632,
                    "submission_date": 1599908009,
                    "language": "PYTH 3",
                    "username": "nitisha620",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.02",
                    "memory": "17.6M",
                    "solution": 37819632,
                    "code": "for t in range(int(input())):\r\n    s = input()\r\n    print(s.count('<>'))"
                },
                {
                    "id": 37613616,
                    "submission_date": 1599504906,
                    "language": "PYTH 3",
                    "username": "alterego14",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.20",
                    "memory": "18M",
                    "solution": 37613616,
                    "code": "try:\n    t = int(input())\n    for _ in range(t):\n    \ts = input()\n    \tl = \"\"\n    \tfor i in s:\n    \t\tif i=='>':\n    \t\t\tl += '<'\n    \t\telif i=='<':\n    \t\t\tl += '>'\n    \t\telse:\n    \t\t\tl += i\n    \tprint(l.count(\"><\"))\nexcept:\n    pass"
                }
            ]
        },
        "ICL1902": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "2\n85\n114",
                    "output": "2\n4",
                    "explanation": "Test case 1 : Mr Sphere forms a square of side 9 using 81 Circles and then forms a square of side 2 using the remaining 4."
                }
            ],
            "problem_statement": "In the 2-D world of Flatland, the Circles were having their sports day and wanted to end it with a nice formation. So, they called upon Mr. Sphere from Spaceland for help. Mr Sphere decides to arrange the Circles in square formations. He starts with $N$ Circles and forms the largest possible square using these Circles. He then takes the remaining Circles and repeats the procedure. A square of side $S$ requires $S^2$ Circles to create.\nFind the number of squares he will be able to form at the end of the process.\nInput:\n\nFirst line will contain $T$, number of testcases. Then the testcases follow.\nEach testcase contains of a single integer $N$.\n\nOutput:\nFor each testcase, output a single integer denoting the number of squares.\nConstraints\n\n$1 \\leq T \\leq 1000$\n$1 \\leq N \\leq 1000$",
            "input_format": "",
            "output_format": "",
            "problem_name": "FlatLand",
            "user_tags": [
                "Inbuilt functions",
                "Brute Force",
                "Implementation"
            ],
            "computed_tags": [
                "Basic Programming Concepts",
                "Algorithms"
            ],
            "problem_code_id": "ICL1902",
            "difficulty_level": "1117",
            "ai_solutions": [
                "import math\ndef count_squares(T, test_cases):\n    for i in range(T):\n        N = test_cases[i]\n        squares = 0\n        while N > 0:\n            S = int(math.sqrt(N))\n            N -= S*S\n            squares += 1\n        print(squares)\n\nT = int(input())\ntest_cases = []\nfor _ in range(T):\n    test_cases.append(int(input()))\ncount_squares(T, test_cases)",
                "import math\ndef count_squares(T, test_cases):\n    for i in range(T):\n        N = test_cases[i]\n        squares = 0\n        while N > 0:\n            S = math.isqrt(N)\n            N -= S*S\n            squares += 1\n        print(squares)\n\nT = int(input())\ntest_cases = []\nfor _ in range(T):\n    test_cases.append(int(input()))\ncount_squares(T, test_cases)"
            ],
            "human_solutions": [
                {
                    "id": 32927150,
                    "submission_date": 1589040107,
                    "language": "PYTH 3",
                    "username": "sameer_kousik",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.02",
                    "memory": "17.5M",
                    "solution": 32927150,
                    "code": "import math\ndef call():\n    k = int(input())\n    coN=0\n    while(k>0):\n        t = math.floor(math.sqrt(k))\n        k-=t*t\n        coN+=1\n    print(coN)\nt = int(input())\nfor i in range(t):\n    call()"
                },
                {
                    "id": 32838454,
                    "submission_date": 1588871747,
                    "language": "PYTH 3",
                    "username": "supraja_02",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.02",
                    "memory": "17.6M",
                    "solution": 32838454,
                    "code": "import math\nfor t in range(int(input())):\n    n=int(input())\n    c=0\n    while(n!=0):\n        s=int(math.sqrt(n))\n        c+=1\n        n=n-(s*s)\n    print(c)\n        "
                }
            ]
        },
        "EID": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "2\n3\n1 4 2\n3\n1 3 3",
                    "output": "1\n0",
                    "explanation": "Example case 1: Chef gives the coin with value $1$ to his first child and the coin with value $2$ to the second child, so the answer is $2-1 = 1$.\nExample case 2: Chef gives each of his children a coin with value $3$, so the difference is $0$."
                }
            ],
            "problem_statement": "Read problems statements in Hindi,\nMandarin chinese\n, Russian and Vietnamese as well.\nDuring Eid, it's a tradition that each father gives his kids money which they can spend on entertainment.\nChef has $N$ coins; let's denote the value of coin $i$ by $v_i$. Since today is Eid, Chef is going to give one coin to each of his two children. He wants the absolute value of the difference between the values of coins given to the two children to be as small as possible, so that he would be as fair as possible. \nHelp Chef by telling him the minimum possible difference between the values of the coins given to the two children. Of course, Chef cannot give the same coin to both children.\nInput\n\nThe first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\nThe first line of each test case contains a single integer $N$.\nThe second line contains $N$ space-separated integers $v_1, v_2, \\dots, v_N$.\n\nOutput\nFor each test case, print a single line containing one integer \u2014 the minimum possible difference.\nConstraints\n\n$1 \\le T \\le 100$\n$2 \\le N \\le 10^5$\nthe sum of $N$ in all test cases does not exceed $5 \\cdot 10^5$\n$1 \\le v_i \\le 10^6$ for each valid $i$\n\nSubtasks\nSubtask #1 (30 points): the sum of $N$ in all test cases does not exceed $2,000$\nSubtask #2 (70 points): original constraints",
            "input_format": "",
            "output_format": "",
            "problem_name": "Chef and Eid",
            "user_tags": [
                "Greedy",
                "Sorting"
            ],
            "computed_tags": [
                "Algorithms"
            ],
            "problem_code_id": "EID",
            "difficulty_level": "1135",
            "ai_solutions": [
                "T = int(input())\nfor _ in range(T):\n    N = int(input())\n    coins = list(map(int, input().split()))\n    coins.sort()\n    min_diff = float('inf')\n    for i in range(1, N):\n        min_diff = min(min_diff, coins[i] - coins[i-1])\n    print(min_diff)",
                "T = int(input())\nfor _ in range(T):\n    N = int(input())\n    coins = sorted(map(int, input().split()))\n    min_diff = min(b-a for a, b in zip(coins, coins[1:]))\n    print(min_diff)"
            ],
            "human_solutions": [
                {
                    "id": 32279554,
                    "submission_date": 1587834992,
                    "language": "PYTH 3",
                    "username": "appy_vma_06",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.36",
                    "memory": "19.9M",
                    "solution": 32279554,
                    "code": "for i in range(int(input())):\n    n=int(input())\n    l=list(map(int,input().split()))\n    l.sort()\n    m=10000000000\n    for i in range(len(l)-1):\n        if abs(l[i]-l[i+1])<m:\n            m=abs(l[i]-l[i+1])\n    print(m)\n            "
                },
                {
                    "id": 32128791,
                    "submission_date": 1587501530,
                    "language": "PYTH 3",
                    "username": "bhavya8844",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.36",
                    "memory": "19M",
                    "solution": 32128791,
                    "code": "for t in range(int(input())):\n    N=int(input())\n    l=list(map(int,input().split()))\n    l.sort()\n    l1=[]\n    for i in range(N-1):\n        l1.append(l[i+1]-l[i])\n    print(min(l1))\n"
                }
            ]
        },
        "PERFCONT": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "6\r\n3 100\r\n10 1 100\r\n3 100\r\n11 1 100\r\n3 100\r\n10 1 10\r\n3 100\r\n10 1 50\r\n4 100\r\n50 50 50 50\r\n4 100\r\n1 1 1 1",
                    "output": "yes\r\nno\r\nno\r\nyes\r\nno\r\nno",
                    "explanation": "Example case 1.: The problems are of hard, hard and cakewalk difficulty. There is 1 cakewalk and 2 hard problems, so the contest is balanced.\nExample case 2.: The second problem is hard and the third is cakewalk. There is 1 cakewalk and 1 hard problem, so the contest is not balanced.\nExample case 3.: All the three problems are hard. So the contest is not balanced.\nExample case 4.: The problems are of hard, hard, cakewalk difficulty. The contest is balanced.\nExample case 5.: All the problems are cakewalk. The contest is not balanced.\nExample case 6.: All the problems are hard. The contest is not balanced."
                }
            ],
            "problem_statement": "Read problems statements in mandarin chinese, russian and vietnamese as well.\nChef wants to organize a contest. Predicting difficulty levels of the problems can be a daunting task. Chef wants his contests to be balanced in terms of difficulty levels of the problems.\nAssume a contest had total P participants. A problem that was solved by at least half of the participants (i.e. P / 2 (integer division)) is said to be cakewalk difficulty. A problem solved by at max P / 10 (integer division) participants is categorized to be a hard difficulty.\nChef wants the contest to be balanced. According to him, a balanced contest must have exactly 1 cakewalk and exactly 2 hard problems. You are given the description of N problems and the number of participants solving those problems. Can you tell whether the contest was balanced or not?\nInput\nThe first line of the input contains an integer T denoting the number of test cases.\nThe first line of each test case contains two space separated integers, N, P denoting the number of problems, number of participants respectively.\nThe second line contains N space separated integers, i-th of which denotes number of participants solving the i-th problem.\nOutput\nFor each test case, output \"yes\" or \"no\" (without quotes) denoting whether the contest is balanced or not.\nConstraints\n\n1 \u2264 T, N \u2264 500 \n1 \u2264 P \u2264 108 \n1 \u2264 Number of participants solving a problem \u2264 P\n\nSubtasks\n\nSubtask #1 (40 points): P is a multiple of 10\nSubtask #2 (60 points): Original constraints",
            "input_format": "",
            "output_format": "",
            "problem_name": "A Balanced Contest",
            "user_tags": [
                "Implementation"
            ],
            "computed_tags": [
                "Algorithms"
            ],
            "problem_code_id": "PERFCONT",
            "difficulty_level": "1184",
            "ai_solutions": [
                "T = int(input())\nfor _ in range(T):\n    N, P = map(int, input().split())\n    A = list(map(int, input().split()))\n    cakewalk = hard = 0\n    for i in A:\n        if i >= P//2:\n            cakewalk += 1\n        elif i <= P//10:\n            hard += 1\n    if cakewalk == 1 and hard == 2:\n        print(\"yes\")\n    else:\n        print(\"no\")",
                "def is_contest_balanced(T, test_cases):\n    for t in range(T):\n        N, P, A = test_cases[t]\n        cakewalk = len([i for i in A if i >= P//2])\n        hard = len([i for i in A if i <= P//10])\n        if cakewalk == 1 and hard == 2:\n            print(\"yes\")\n        else:\n            print(\"no\")\n\nT = int(input())\ntest_cases = []\nfor _ in range(T):\n    N, P = map(int, input().split())\n    A = list(map(int, input().split()))\n    test_cases.append((N, P, A))\nis_contest_balanced(T, test_cases)"
            ],
            "human_solutions": [
                {
                    "id": 34682335,
                    "submission_date": 1592987019,
                    "language": "PYTH 3",
                    "username": "palomishah",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.06",
                    "memory": "17.6M",
                    "solution": 34682335,
                    "code": "for tc in range(int(input())):\n    n,p=map(int,input().split())\n    a=list(map(int,input().split()))\n    cakewalk,hard=0,0\n    for i in range(n):\n        if p//2<=a[i]:\n            cakewalk+=1 \n        if p//10>=a[i]:\n            hard+=1 \n    if cakewalk==1 and hard==2:\n        print(\"yes\")\n    else:\n        print(\"no\")"
                },
                {
                    "id": 34561472,
                    "submission_date": 1592725669,
                    "language": "PYTH 3",
                    "username": "amrutha_1610",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.04",
                    "memory": "17.6M",
                    "solution": 34561472,
                    "code": "s = int(input())\nfor tc in range(s):\n    l1=list(map(int,input().split(' ')))\n    n,p = l1\n    l2 = list(map(int,input().split(' ')))\n    k1=p//2\n    k2=p//10\n    c=0\n    h=0\n    for i in l2:\n        if i>=k1:\n            c=c+1\n        elif i<=k2:\n            h=h+1\n    if c==1 and h ==2:\n        print('yes')\n    else:\n        print('no')\n"
                }
            ]
        },
        "CHEFSTEP": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "1\n5 3\n12 13 18 20 27216",
                    "output": "10101",
                    "explanation": "The first distance can be traversed in $4$ steps.  \nThe second distance cannot be traversed.  \nThe third distance can be traversed in $6$ steps.  \nThe fourth distance cannot be traversed.  \nThe fifth distance can be traversed in $9072$ steps."
                }
            ],
            "problem_statement": "Read problem statements in Hindi, Bengali, Mandarin Chinese, Russian, and Vietnamese as well.\nIn order to establish dominance amongst his friends, Chef has decided that he will only walk in large steps of length exactly $K$ feet. However, this has presented many problems in Chef\u2019s life because there are certain distances that he cannot traverse. Eg. If his step length is $5$ feet, he cannot travel a distance of $12$ feet. Chef has a strict travel plan that he follows on most days, but now he is worried that some of those distances may become impossible to travel. Given $N$ distances, tell Chef which ones he cannot travel.\nInput:\n\nThe first line will contain a single integer $T$, the number of test cases.\nThe first line of each test case will contain two space separated integers - $N$, the number of distances, and $K$, Chef\u2019s step length.\nThe second line of each test case will contain $N$ space separated integers, the $i^{th}$ of which represents $D_i$, the distance of the $i^{th}$ path.\n\nOutput:\nFor each testcase, output a string consisting of $N$ characters. The $i^{th}$ character should be $1$ if the distance is traversable, and $0$ if not. \nConstraints\n\n$1 \\leq T \\leq 1000$\n$1 \\leq N \\leq 1000$\n$1 \\leq K \\leq 10^9$\n$1 \\leq D_i \\leq 10^9$\n\nSubtasks\n\n100 points : No additional constraints.",
            "input_format": "",
            "output_format": "",
            "problem_name": "Chef and Steps",
            "user_tags": [
                "Basic Maths"
            ],
            "computed_tags": [
                "Mathematics"
            ],
            "problem_code_id": "CHEFSTEP",
            "difficulty_level": "1110",
            "ai_solutions": [
                "T = int(input())\nfor _ in range(T):\n    N, K = map(int, input().split())\n    D = list(map(int, input().split()))\n    result = ''\n    for i in range(N):\n        if D[i] % K == 0:\n            result += '1'\n        else:\n            result += '0'\n    print(result)",
                "def check_traversable(T, test_cases):\n    for t in range(T):\n        N, K, D = test_cases[t]\n        result = ['1' if d % K == 0 else '0' for d in D]\n        print(''.join(result))\n\nT = int(input())\ntest_cases = []\nfor _ in range(T):\n    N, K = map(int, input().split())\n    D = list(map(int, input().split()))\n    test_cases.append((N, K, D))\n\ncheck_traversable(T, test_cases)"
            ],
            "human_solutions": [
                {
                    "id": 1027703616,
                    "submission_date": 1698642483,
                    "language": "PYTH 3",
                    "username": "wessly95",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.23",
                    "memory": "8.8M",
                    "solution": 1027703616,
                    "code": "for _ in range(int(input())):\r\n    n,k = map(int,input().split())\r\n    array = list(map(int,input().split()))\r\n    array_converter = list()\r\n    for element in array:\r\n        if element%k == 0:\r\n            array_converter.append(\"1\")\r\n        else:\r\n            array_converter.append(\"0\")\r\n    print(''.join(array_converter))\r\n    "
                },
                {
                    "id": 1027517627,
                    "submission_date": 1698482819,
                    "language": "PYTH 3",
                    "username": "lar_here",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.27",
                    "memory": "8.7M",
                    "solution": 1027517627,
                    "code": "for t in range(int(input())) :\r\n    n,k=map(int,input().split())\r\n    a=list(map(int,input().split()))\r\n    s=\"\"\r\n#    print(a)\r\n    for i in a :\r\n#        print(s)\r\n        if i%k==0:\r\n            s=s+'1'\r\n        else:\r\n            s=s+'0'\r\n    print(s)   "
                }
            ]
        },
        "CNDLOVE": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "1  \n2  \n5 2",
                    "output": "YES",
                    "explanation": "Sammy gets 4 candies from the first pack.\nSimmy gets 1 candy from the first pack and 2 from the second one.\nSo in total, Sammy has 4, and Simmy has 3. Since Sammy has strictly more candies than Simmy, Sammy is happy. And since the difference is not more then 1, Simmy is also happy. Thus both of them are happy."
                }
            ],
            "problem_statement": "Sammy and Simmy love candies and frequently visit the local candy shop. Sammy and Simmy have bought $N$ candy packs. Packet $i$ contains $A_{i}$ candies. Sammy being the elder one is happy only if she has strictly more candies than Simmy. However Simmy, the more sensible one, is happy only if the difference between their number of candies is not more than $1$.\nThe shopkeeper, being a generous lady, agrees to help Sammy and Simmy by distributing the candies among them in a way that makes both of them happy. The shopkeeper can open the packs and distribute the candies even within a single pack to different people.\nInput:\n\nThe first line will contain $T$, the number of testcases.\nThe first line of every test case will contain $N$, the number of candy packs.\nThe next line has $N$ integers, the $i_{th}$ integer denoting $A_{i}$, \n   the number of candies in the $i_{th}$ pack.\n\nOutput:\nOutput \"YES\" if its possible for the shopkeeper to make both the sisters happy otherwise output \"NO\".  \nConstraints\n\n$1 \\leq T \\leq 10^3$\n$1 \\leq N \\leq 10^3$\n$1 \\leq A_{i} \\leq 100$",
            "input_format": "",
            "output_format": "",
            "problem_name": "Candy Love",
            "user_tags": [
                "Basic Maths",
                "Observation"
            ],
            "computed_tags": [
                "Mathematics",
                "Algorithms"
            ],
            "problem_code_id": "CNDLOVE",
            "difficulty_level": "1054",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 33437226,
                    "submission_date": 1590842953,
                    "language": "PYTH 3",
                    "username": "sk0827",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.16",
                    "memory": "17.7M",
                    "solution": 33437226,
                    "code": "t = int(input())\nfor i in range(0, t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    if(sum(a)%2==1):\n        print(\"YES\")\n    else:\n        print(\"NO\")"
                },
                {
                    "id": 33401392,
                    "submission_date": 1590680469,
                    "language": "PYTH 3",
                    "username": "sankha1999",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.20",
                    "memory": "17.7M",
                    "solution": 33401392,
                    "code": "t=int(input())\nfor i in range(t):\n    n=int(input())\n    l=[int(j) for j in input().split()][:n]\n    if sum(l)%2==0:\n        print(\"NO\")\n    else:\n        print(\"YES\")"
                }
            ]
        },
        "SIMDISH": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "5\neggs sugar flour salt\nsugar eggs milk flour\naa ab ac ad\nac ad ae af\ncookies sugar grass lemon\nlemon meat chili wood\none two three four\none two three four\ngibberish jibberish lalalalala popopopopo\njibberisz gibberisz popopopopu lalalalalu",
                    "output": "similar\nsimilar\ndissimilar\nsimilar\ndissimilar",
                    "explanation": "Test case 1. The first dish consists of ingredients: eggs, sugar, flour, salt, while the second dish consists of: sugar, eggs, milk, flour. Three of four ingredients are present in both dishes (eggs, sugar, flour) so the two dishes are similar.\nTest case 2. This example shows that strings in the input don't necessarily represent real food.\nThe answer is again \"similar\", because two ingredients are present in both dishes (\"ac\" and \"ad\").\nTest case 3. The only common ingredient is lemon, so the answer is \"dissimilar\".\nRemember that at least two ingredients should be present in both dishes."
                }
            ],
            "problem_statement": "Read problems statements in Mandarin Chinese, Russian and Vietnamese as well.\nChef has just found a recipe book, where every dish consists of exactly four ingredients.\nHe is going to choose some two dishes and prepare them for dinner.\nOf course, he likes diversity and wants to know whether the two dishes are similar.\nTwo dishes are called similar if at least half of their ingredients are the same.\nIn other words, at least two of four ingredients of the first dish should also be present in the second dish.\nThe order of ingredients doesn't matter.\nYour task is to examine T pairs of dishes.\nFor each pair, check if the two dishes are similar and print \"similar\" or \"dissimilar\" accordingly.\nInput\nThe first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows.\n\nThe first line of each test case contains four distinct strings, denoting ingredients needed for the first dish.\nEach ingredient is represented by a string of length between 2 and 10 inclusive, consisting of lowercase English letters.\n\nThe second line of each test case describes the second dish in the same format.\nOutput\nFor each test case, output a single line containing the answer \u2014 \"similar\" if at least half of the ingredients are same, and \"dissimilar\" otherwise (without the quotes).\nConstraints\n\n1 \u2264\u00a0T \u2264 200\nThe length of each string will be between 2 and 10 inclusive.",
            "input_format": "",
            "output_format": "",
            "problem_name": "Similar Dishes",
            "user_tags": [
                "Implementation"
            ],
            "computed_tags": [
                "Algorithms"
            ],
            "problem_code_id": "SIMDISH",
            "difficulty_level": "1142",
            "ai_solutions": [
                "T = int(input())\nfor _ in range(T):\n    dish1 = set(input().split())\n    dish2 = set(input().split())\n    if len(dish1.intersection(dish2)) >= 2:\n        print(\"similar\")\n    else:\n        print(\"dissimilar\")",
                "T = int(input())\nfor _ in range(T):\n    dish1 = input().split()\n    dish2 = input().split()\n    common = [ingredient for ingredient in dish1 if ingredient in dish2]\n    if len(common) >= 2:\n        print(\"similar\")\n    else:\n        print(\"dissimilar\")"
            ],
            "human_solutions": [
                {
                    "id": 33332812,
                    "submission_date": 1590406366,
                    "language": "PYTH 3",
                    "username": "m19pa1a0495",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.02",
                    "memory": "17.6M",
                    "solution": 33332812,
                    "code": "for i in range(int(input())):\n    l1=list(input().split())\n    l2=list(input().split())\n    a=0\n    for i in l1:\n        if i in l2:\n            a+=1\n    if a>=2:\n        print(\"similar\")\n    else:\n        print(\"dissimilar\")"
                },
                {
                    "id": 33239329,
                    "submission_date": 1590213400,
                    "language": "PYTH 3",
                    "username": "chaitanyavarm_",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.01",
                    "memory": "17.6M",
                    "solution": 33239329,
                    "code": "for i in range(int(input())):\n    s=list(map(str,input().split()))\n    a=list(map(str,input().split()))\n    l=max(len(a),len(s))\n    c=0\n    for i in range(l):\n        if(s[i] in a):\n            c+=1\n    if(c>=l//2):\n        print('similar')\n    else:\n        print('dissimilar')"
                }
            ]
        },
        "DIVIDING": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "5\n7 4 1 1 2",
                    "output": "YES",
                    "explanation": ""
                },
                {
                    "input": "5\n1 1 1 1 1",
                    "output": "NO",
                    "explanation": ""
                }
            ],
            "problem_statement": "Read problems statements in Mandarin Chinese and Russian as well.\n\nAre you fond of collecting some kind of stuff? Mike is crazy about collecting stamps. He is an active member of Stamp Collecting \u0421ommunity(SCC). \n\n\nSCC consists of N members which are fond of philately. A few days ago Mike argued with the others from SCC. Mike told them that all stamps of the members could be divided in such a way that i'th member would get i postage stamps. Now Mike wants to know if he was right. The next SCC meeting is tomorrow. Mike still has no answer.\n\n\nSo, help Mike! There are N members in the SCC, i'th member has Ci stamps in his collection. Your task is to determine if it is possible to redistribute C1 + C2 + ... + Cn stamps among the members of SCC thus that i'th member would get i stamps.\n\nInput\nThe first line contains one integer N, denoting the number of members of SCC.\nThe second line contains N integers Ci, denoting the numbers of the stamps in the collection of i'th member.\nOutput\nThe first line should contain YES, if we can obtain the required division, otherwise NO.\n\nConstraints\n1 \u2264 N \u2264 100 000;\n1 \u2264  Ci \u2264 109.",
            "input_format": "",
            "output_format": "",
            "problem_name": "Dividing Stamps",
            "user_tags": [
                "Arithmetic"
            ],
            "computed_tags": [
                "Mathematics",
                "Basic Maths"
            ],
            "problem_code_id": "DIVIDING",
            "difficulty_level": "1109",
            "ai_solutions": [
                "def can_divide_stamps(n, stamps):\n    total_stamps = sum(stamps)\n    required_stamps = n * (n + 1) // 2\n    if total_stamps == required_stamps:\n        return \"YES\"\n    else:\n        return \"NO\"\n\nn = int(input())\nstamps = list(map(int, input().split()))\nprint(can_divide_stamps(n, stamps))",
                "def can_divide_stamps(n, stamps):\n    total_stamps = 0\n    for stamp in stamps:\n        total_stamps += stamp\n    required_stamps = n * (n + 1) // 2\n    if total_stamps == required_stamps:\n        return \"YES\"\n    else:\n        return \"NO\"\n\nn = int(input())\nstamps = list(map(int, input().split()))\nprint(can_divide_stamps(n, stamps))"
            ],
            "human_solutions": [
                {
                    "id": 40195851,
                    "submission_date": 1607405970,
                    "language": "PYTH 3",
                    "username": "lee_463",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.03",
                    "memory": "19.2M",
                    "solution": 40195851,
                    "code": "n = int(input())\narr = list(map(int, input().split()))\n\nans = sum(arr)\n\nif(ans == (n*(n+1)) / 2):\n    print(\"YES\", end = \"\")\nelse:\n    print(\"NO\", end = \"\")"
                },
                {
                    "id": 39921133,
                    "submission_date": 1606735586,
                    "language": "PYTH 3",
                    "username": "pristine4042",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.05",
                    "memory": "17.8M",
                    "solution": 39921133,
                    "code": "n=int(input())\r\nlst=list(map(int,input().split()))\r\nmain=list(lst)\r\nsum_stamps=0\r\nmen=0\r\nif len(main)==n :\r\n    for i in lst:\r\n        sum_stamps+=i\r\n    dig=n\r\n    while dig>=0:\r\n        men=men+dig\r\n        dig=dig-1\r\n    if men == sum_stamps :\r\n        print(\"YES\")\r\n    else:\r\n        print(\"NO\")\r\n            \r\n\r\n\r\n"
                }
            ]
        },
        "BIT2A": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "2\n4\n1 2 4 4\n5\n1 2 2 2 2",
                    "output": "3 2 0 0\n4 0 0 0 0",
                    "explanation": "The explanation for test case 1 of sample input :\nThe first element in the new list is 3 since the first element in the previous list was 1, and there are three elements which are strictly greater than 1, that is 2, 4 and 4.\nThe second element in the new list is 2 since the second element in the previous list was 2, and there are two elements which are strictly greater than 2, that is 4 and 4.\nThe third and fourth element in the new list is 0  since third and fourth element in the previous list was  4 and there are no elements which are strictly greater than them."
                }
            ],
            "problem_statement": "You are given a $sorted$ list $A$ of size  $N$.You have to make a new list $B$ such that $B[i]$ is equal to the number of elements $strictly$  $greater$ than $A[i]$ in the list $A$.\nPrint the $new$ $list$.\nInput\nThe first line consists of  $T$, denoting the number of test cases.\nFirst line of each test case consists of one integer denoting $N$, where $N$ is the size of the list given to you.\nSecond line of each test case contains the list given to you   containing $N$ elements.\nOutput\nFor each test case print the list in a single line and the elements of the list should be separated by  $space$.\nPrint the answer to $each$ test case in a $new$ $line$.\nConstraints\n   $1 \\le T \\le 100$ , where $T$ is the number of test cases. \n $1 \\le N \\le 100$, where $N$ is the number of elements in the list.\n$1 \\le A[i] \\le 1000000$ ,where $A[i]$ is the  $ith$ element in  the list given to you.\n\nSubtasks\n$15$ $points$: All the elements in the list given to you are distinct.\n$35$ $points$: Original constraints: Elements can be repeated in the list.",
            "input_format": "",
            "output_format": "",
            "problem_name": "A - Books",
            "user_tags": [
                "Sorting",
                "Brute Force"
            ],
            "computed_tags": [
                "Algorithms"
            ],
            "problem_code_id": "BIT2A",
            "difficulty_level": "1175",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 30800014,
                    "submission_date": 1585390472,
                    "language": "PYTH 3",
                    "username": "varsha__789",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.03",
                    "memory": "17.6M",
                    "solution": 30800014,
                    "code": "t=int(input())\nwhile(t):\n    n=int(input())\n    l=list(map(int,input().split()))\n    b=[]\n    l.sort()\n    c=0\n    for i in range(len(l)):\n        c=0\n        for j in range(i+1,len(l)):\n            if l[j]>l[i]:\n                b.append(n-j)\n                c=1\n                break\n        if c==0:\n            b.append(0)\n    for i in range(n-1):\n        print(b[i],end=\" \")\n    print(b[n-1])\n    t-=1\n"
                },
                {
                    "id": 30729703,
                    "submission_date": 1585139245,
                    "language": "PYTH 3",
                    "username": "sakshi2020",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.09",
                    "memory": "17.6M",
                    "solution": 30729703,
                    "code": "try:\n    Test_Case=int(input())\n    for i in range(Test_Case):\n        N=int(input())\n        list1=list(map(int,input().split(\" \")))\n        list2=[]\n        if(len(list1)==N):\n                for k in range(len(list1)):\n                    c=0\n                    for j in range(k+1,len(list1)):\n                        if(list1[k]<list1[j]):\n                            c=c+1\n                        else:\n                            continue\n                            \n                    list2.append(c)\n        for l in range(len(list2)):\n            print(list2[l],end=\" \")\n                \nexcept:\n    pass\n"
                }
            ]
        }
    },
    "1*": {
        "ICL1801": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "3\n1 1\n3\n2 3\n4 4 4\n4 4 4\n2 3\n4 3 4\n4 4 4",
                    "output": "Cyborg\nDraw\nCyborg",
                    "explanation": "In the first test case, Cyborg wins by selecting the only number present in the matrix.\nIn the second test case, both Cyborg and Geno will end up with a sum of 12, irrespective of how they chose the numbers. Hence, it results in a draw.\nIn the third test case, when with the player play optimally, Cyborg will end up with sum of 12 while Geno will end up with sum of 11. So, Cyborg wins the game."
                }
            ],
            "problem_statement": "Problem Statement\n2 players, Cyborg and Geno are playing a game on a matrix. In each turn, the player choses a number from the matrix which is not selected yet and adds the number to his sum. In the end, the player with the largest sum wins the game.\nAssuming both players play optimally and Cyborg starts the game, predict who will be the winner of the game. Assume that the initial sum is 0 for both the players.\nInput section\nThe first line contains T, the number of test cases. The description of T test cases follows.\nEach test case begin with 2 integers, N and M, denoting the number of rows and columns in the matrix. The next N lines contains M space separated integers denoting the numbers present in the matrix.\nOutput section\nFor each testcase, output \"Cyborg\", \"Geno\" or \"Draw\" based on the outcome of the game.\nInput constraints\n1 \u2264 T \u2264 20\n1 \u2264 N, M \u2264 50\n0 \u2264 A[i][j] \u2264 100, where A[i][j] denotes the element of the matrix in ith row and jth column.",
            "input_format": "",
            "output_format": "",
            "problem_name": "Matrix Game",
            "user_tags": [
                "cakewalk",
                "greedy",
                "icl2018",
                "likecs",
                "likecs"
            ],
            "computed_tags": [],
            "problem_code_id": "ICL1801",
            "difficulty_level": "1279",
            "ai_solutions": [
                "T = int(input())\nfor _ in range(T):\n    N, M = map(int, input().split())\n    matrix = []\n    for _ in range(N):\n        matrix.extend(list(map(int, input().split())))\n    matrix.sort(reverse=True)\n    cyborg, geno = 0, 0\n    for i in range(len(matrix)):\n        if i % 2 == 0:\n            cyborg += matrix[i]\n        else:\n            geno += matrix[i]\n    if cyborg > geno:\n        print(\"Cyborg\")\n    elif geno > cyborg:\n        print(\"Geno\")\n    else:\n        print(\"Draw\")",
                "T = int(input())\nfor _ in range(T):\n    N, M = map(int, input().split())\n    matrix = [int(x) for _ in range(N) for x in input().split()]\n    matrix.sort(reverse=True)\n    cyborg = sum(matrix[i] for i in range(len(matrix)) if i % 2 == 0)\n    geno = sum(matrix[i] for i in range(len(matrix)) if i % 2 != 0)\n    print(\"Cyborg\" if cyborg > geno else \"Geno\" if geno > cyborg else \"Draw\")"
            ],
            "human_solutions": [
                {
                    "id": 65743887,
                    "submission_date": 1653924884,
                    "language": "PYTH 3",
                    "username": "mrudula31",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.03",
                    "memory": "9M",
                    "solution": 65743887,
                    "code": "for _ in range(int(input())):\r\n    n,m=map(int,input().split())\r\n    arr=[]\r\n    for i in range(n):\r\n        st=input().split()\r\n        for j in range(m):\r\n            val=int(st[j])\r\n            arr.append(val)\r\n    arr.sort(reverse=True)\r\n    cy=0\r\n    ge=0\r\n    for i in range(n*m):\r\n        if i%2==0:\r\n            cy+=arr[i]\r\n        else:\r\n            ge+=arr[i]\r\n    if cy==ge:\r\n        print(\"Draw\")\r\n    elif cy>ge:\r\n        print(\"Cyborg\")\r\n    else:\r\n        print(\"Geno\")\r\n"
                },
                {
                    "id": 65564080,
                    "submission_date": 1653578354,
                    "language": "PYTH 3",
                    "username": "vvsbhuvan",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.03",
                    "memory": "9.2M",
                    "solution": 65564080,
                    "code": "n=int(input())\nfor i in range(n):\n    m,k=map(int,input().split())\n    s=[]\n    for i in range(m):\n        a=list(map(int,input().split()))\n        s.extend(a)\n    s.sort()\n    c=[]\n    g=[]\n    for i in range(len(s)):\n        if(i%2==0):\n            c.append(s[-1-i])\n        else:\n            g.append(s[-1-i])\n    if sum(c)>sum(g):\n        print(\"Cyborg\")\n    elif(sum(c)==sum(g)):\n        print(\"Draw\")\n    else:\n        print(\"Geno\")"
                }
            ]
        },
        "CRICSCR": {
            "constraints": "$1 \\leq N \\leq 10^6$\n$0 \\leq Ri \\leq 10^7$\n$0 \\leq Wi \\leq 10$",
            "subtasks": "30 points : $1 \\leq N \\leq 10^4$\n70 points : $Original  Constraints$",
            "sample_test_cases": [
                {
                    "input": "3\n1 1\n4 1\n7 6",
                    "output": "YES",
                    "explanation": ""
                },
                {
                    "input": "3\n1 1\n9 1\n7 6",
                    "output": "NO",
                    "explanation": ""
                }
            ],
            "problem_statement": "Teja likes cricket very much and likes to watch it all the time, but he is bored of watching the\nmatches alone and asks his friend to give him company. But his friend doesn\u2019t know how to read\ncricket scores so Teja decided to teach him. To make him understand better Teja gave him a list of\nscores of an innings of a match. The scores are ordered in the increasing order of time at which it\nwas recorded.\nIn the version of Cricket Teja follows, runs can't be taken away from the batting team and a batsmen is not allowed to bat once he is dismissed, also the innings gets over when the 10th wicket falls or when the required number of overs are completed and no more scores are recorded once an innings get over.\nNow Teja wants his friend to find out if its a valid score card or not. Since his friend\nis busy watching football he asks for your help to answer Teja.",
            "input_format": "First line cointains an integer  N  denoting the number of scores recorded. \nNext n line contain two integers Ri and Wi, Ri is the runs scored and Wi is the number of wickets\nlost.",
            "output_format": "print \u201cYES\u201d if it is valid else print \u201cNO\u201d without quotes.",
            "problem_name": "Cricket Score",
            "user_tags": [
                "aswinashok44",
                "cakewalk",
                "locapr18"
            ],
            "computed_tags": [],
            "problem_code_id": "CRICSCR",
            "difficulty_level": "1335",
            "ai_solutions": [
                "def is_valid_scorecard(n, scores):\n    for i in range(1, n):\n        if scores[i][0] < scores[i-1][0] or scores[i][1] < scores[i-1][1] or scores[i][1] > 10:\n            return \"NO\"\n    return \"YES\"\n\nn = int(input().strip())\nscores = []\nfor _ in range(n):\n    r, w = map(int, input().strip().split())\n    scores.append((r, w))\n\nprint(is_valid_scorecard(n, scores))",
                "def is_valid_scorecard(n, scores):\n    runs, wickets = zip(*scores)\n    if runs != tuple(sorted(runs)) or wickets != tuple(sorted(wickets)) or max(wickets) > 10:\n        return \"NO\"\n    return \"YES\"\n\nn = int(input().strip())\nscores = []\nfor _ in range(n):\n    r, w = map(int, input().strip().split())\n    scores.append((r, w))\n\nprint(is_valid_scorecard(n, scores))"
            ],
            "human_solutions": [
                {
                    "id": 62921521,
                    "submission_date": 1649953055,
                    "language": "PYTH 3",
                    "username": "vishal_mg_28",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "1.98",
                    "memory": "109.7M",
                    "solution": 62921521,
                    "code": "n=int(input())\nfg=0\nl=[]\nfor _ in range(n):\n    a,b=map(int,input().split())\n    l.append((a,b))\nfor i in range(1,n):\n    if l[i][0]<l[i-1][0]:\n        fg=1\n        break\n    elif l[i-1][1]>l[i][1]:\n        fg=1\n        break\n    elif l[i-1][1]==10 and l[i][1]==10 and l[i-1][0]!=l[i][0]:\n        fg=1\n        break\nif fg==0:\n    print(\"YES\")\nelse:\n    print(\"NO\")"
                },
                {
                    "id": 61751498,
                    "submission_date": 1648777815,
                    "language": "PYTH 3",
                    "username": "amitv_123",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "1.81",
                    "memory": "55.3M",
                    "solution": 61751498,
                    "code": "n=int(input())\nr=[]\nw=[]\nfor i in range(n):\n    a,b=map(int,input().split())\n    r.append(a)\n    w.append(b)\n    \nans=0\nif n==1 and w[i]<=10:\n    print(\"YES\")\nelse:\n    for i in range(n-1):\n        if(r[i]<=r[i+1] and w[i]<=w[i+1]):\n            if(w[i]==10 and w[i]==w[i+1]):\n                ans=0\n            else:\n                ans=1\n        else:\n            ans=0\n            break\n    if ans==0:\n        print(\"NO\")\n    else:\n        print(\"YES\")"
                }
            ]
        },
        "GARDENSQ": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "3\n2 2\naa\naA\n3 3\naba\nbab\naba\n4 4\naabb\naabb\nbbaa\nbbaa",
                    "output": "0\n1\n4",
                    "explanation": "In the first case the only avaliable square does not conform to the definition in the problem statement because 'a' and 'A' describes different colors.\nIn the second case, you can select the 4 a's at the corners of the garden.\nIn the third case, you can only make four squares, from the four 2x2 segments    that are of the same color."
                }
            ],
            "problem_statement": "Chef has just finished the construction of his new garden. He has sown the garden with patches of the most beautiful carpet grass he could find. He has filled it with patches of different color and now he wants to evaluate how elegant his garden is.\nChef's garden looks like a rectangular grid of cells with N rows and M columns. So there are N x M cells in total.   In each cell Chef planted grass of some color.\nThe elegance of the garden is defined by the number of squares, composed of at least four  garden cells, with edges parallel to the sides of the garden, that have four corner cells of the same color.\nGiven the description of Chef's garden, calculate how many such squares exist.\nInput format\nThe first line contains the number T, the number of test cases. In the following lines,  T test cases follow (without any newlines between them.)\nThe first line of each test case contains N and M, separated by a single space.\nEach of the next N lines contains M characters without any spaces between them, and without any leading or trailing spaces.\nEach character describes the color of the corresponding cell in the garden and belongs to the set of lowercase and uppercase lettes of the English alphabet.\nOne letter in lowercase and uppercase describes different colors.\nOutput format\nFor each test case, print the number of squares that conform to the definition in the    problem statement.\nConstraints\n1 \u2264 T \u2264 50\n1 \u2264 N, M \u2264 50",
            "input_format": "",
            "output_format": "",
            "problem_name": "Garden Squares",
            "user_tags": [
                "Greedy",
                "ad-hoc",
                "Brute Force"
            ],
            "computed_tags": [
                "Algorithms",
                "Constructive"
            ],
            "problem_code_id": "GARDENSQ",
            "difficulty_level": "1246",
            "ai_solutions": [
                "def count_squares(garden, n, m):\n    count = 0\n    for size in range(1, min(n, m)):\n        for i in range(n - size):\n            for j in range(m - size):\n                if garden[i][j] == garden[i + size][j] == garden[i][j + size] == garden[i + size][j + size]:\n                    count += 1\n    return count\n\nT = int(input())\nfor _ in range(T):\n    N, M = map(int, input().split())\n    garden = [list(input()) for _ in range(N)]\n    print(count_squares(garden, N, M))",
                "def count_squares(garden, n, m):\n    count = 0\n    for i in range(n):\n        for j in range(m):\n            size = 1\n            while i + size < n and j + size < m:\n                if garden[i][j] == garden[i + size][j] == garden[i][j + size] == garden[i + size][j + size]:\n                    count += 1\n                size += 1\n    return count\n\nT = int(input())\nfor _ in range(T):\n    N, M = map(int, input().split())\n    garden = [list(input()) for _ in range(N)]\n    print(count_squares(garden, N, M))"
            ],
            "human_solutions": [
                {
                    "id": 61957675,
                    "submission_date": 1649007721,
                    "language": "PYTH 3",
                    "username": "raj_483",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.25",
                    "memory": "9.1M",
                    "solution": 61957675,
                    "code": "def solve(A, N, M):\n    ans = 0\n    for i in range(0, N-1):\n        for j in range(0, M-1):\n            delta, ch = 1, A[i][j]\n            while (i + delta) < N and (j + delta) < M:\n                if A[i][j + delta] == ch and A[i + delta][j] == ch and A[i + delta][j + delta] == ch:\n                    ans += 1\n                delta += 1\n    print(ans)\n\nif __name__ == '__main__':\n    T = (int)(input())\n    for _ in range(T):\n        N, M = map(int, input().split())\n        A = []\n        for i in range(N):\n            row = input()\n            A.append(row)\n        solve(A, N, M)\n"
                },
                {
                    "id": 61802118,
                    "submission_date": 1648897551,
                    "language": "PYTH 3",
                    "username": "abhinaya01",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.27",
                    "memory": "9M",
                    "solution": 61802118,
                    "code": "def solve(A, N, M):\r\n    ans = 0\r\n    for i in range(0, N-1):\r\n        for j in range(0, M-1):\r\n            delta, ch = 1, A[i][j]\r\n            while (i + delta) < N and (j + delta) < M:\r\n                if A[i][j + delta] == ch and A[i + delta][j] == ch and A[i + delta][j + delta] == ch:\r\n                    ans += 1\r\n                delta += 1\r\n    print(ans)\r\n\r\nif __name__ == '__main__':\r\n    T = (int)(input())\r\n    for _ in range(T):\r\n        N, M = map(int, input().split())\r\n        A = []\r\n        for i in range(N):\r\n            row = input()\r\n            A.append(row)\r\n        solve(A, N, M)"
                }
            ]
        },
        "HELPVOLD": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "3\n4 2 1",
                    "output": "10",
                    "explanation": "Lord Voldemort arrives at room 3 and Harry is in room 1.\n\nTotal energy consumed = 1*2 + 2*4 = 10."
                }
            ],
            "problem_statement": "The story of Harry Potter begins when Lord Voldemort arrives at his house at Privet Drive. Harry's house has N rooms placed in one line. Each room has its own energy level and no two rooms have exactly same energy. Lord Voldemort arrives at the room which has lowest energy while Harry is at the room having highest energy.\n\n\nLord Voldemort has to reach Harry's room. Voldemort can travel from a room having energy X to any other room having energy Y such that |X-Y| is minimum and that room hasn't been visited before. The energy required for moving from room having energy X to room having energy Y is X*Y.\n\n\nSince Lord Voldemort is busy practicing Avada Kedavra to kill Harry, so he asks you to find the energy required to reach Harry's room.\n\n\nInput\nThe first line of input contains 1 integer N denoting the number of rooms.\nThe second line contains N space separated integers denoting energy levels of each room.\n\n\nOutput\nPrint the required energy.\n\nConstraints\n2 \u2264 N \u2264 1000\n1 \u2264 Ei \u2264 10000",
            "input_format": "",
            "output_format": "",
            "problem_name": "Help Voldemort",
            "user_tags": [
                "aloochaat1998"
            ],
            "computed_tags": [],
            "problem_code_id": "HELPVOLD",
            "difficulty_level": "1302",
            "ai_solutions": [
                "def energy_required(n, energy_levels):\n    energy_levels.sort()\n    energy = 0\n    for i in range(1, n):\n        energy += energy_levels[i-1] * energy_levels[i]\n    return energy\n\nn = int(input())\nenergy_levels = list(map(int, input().split()))\nprint(energy_required(n, energy_levels))",
                "def energy_required(n, energy_levels):\n    energy_levels.sort()\n    energy = 0\n    for i in range(n-1):\n        energy += energy_levels[i] * energy_levels[i+1]\n    return energy\n\nn = int(input())\nenergy_levels = list(map(int, input().split()))\nprint(energy_required(n, energy_levels))"
            ],
            "human_solutions": [
                {
                    "id": 61928729,
                    "submission_date": 1648981451,
                    "language": "PYTH 3",
                    "username": "koushik0329",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.02",
                    "memory": "9.3M",
                    "solution": 61928729,
                    "code": "n=int(input())\nl=list(map(int,input().split()))[:n]\nle=len(l)\nl.sort()\na=0\nb=1 \nm=[]\nwhile(1):\n    m.append(l[a]*l[b])\n    a+=1 \n    b+=1 \n    if(b==le):\n        break\nprint(sum(m))\n"
                },
                {
                    "id": 61184893,
                    "submission_date": 1648056254,
                    "language": "PYTH 3",
                    "username": "anushkabisen",
                    "user_rating_star": 3,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.02",
                    "memory": "9.3M",
                    "solution": 61184893,
                    "code": "# # # t=int(input())\n# # # for i in range(t):\n# # #     n=int(input())\n# # #     a=[]\n# # #     b=[]\n# # #     for j in range(n):\n# # #         x,y =map(int,input().split())\n# # #         a.append(x)\n# # #         b.append(y)\n# # #     print(len(set(a))+len(set(b)))\n# # t=int(input())\n# # for i in range(t):\n# #     n=int(input())\n# #     N=list(map(int,input().split()))\n# #     x=float(sum(N)/n)\n# #     if x>=4 and min(N)>2 and 5 in N:\n# #         print(\"YES\")\n# #     else:\n# #         print(\"NO\")\n\n# t =int(input())\n# for i in range(t):\n#     s=input()\n#     l=s.split(' ')\n#     if len(l)==1:\n#         print(s.casefold().capitalize())\n#     elif len(l)==2:\n#         print(l[0][0].capitalize()+'. '+l[1].casefold().capitalize())\n#     else:\n#         print(l[0][0].capitalize()+'. '+l[1][0].capitalize()+'. '+l[2].casefold().capitalize())\n# t=int(input())\n# for i in range(t):\n#     n=int(input())\n#     l=list(map(int,input().split()))\n#     l.sort()\n#     a,b=l[0],l[len(l)-1]\n#     d=0\n#     for j in range(1,len(l)-1):\n#         if (b-l[j])+(l[j]-a) >d:\n#             d=(b-l[j])+(l[j]-a)\n#     print(d+b-a)\nn=int(input())\nl=list(map(int,input().split()))\nl.sort()\nans =0\nfor j in range(len(l)-1):\n    ans = ans +l[j]*l[j+1]\nprint(ans)"
                }
            ]
        },
        "MIME2": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "5 6\nhtml text/html\nhtm text/html\npng image/png\nsvg image/svg+xml\ntxt text/plain\nindex.html\nthis.file.has.lots.of.dots.txt\nnodotsatall\nvirus.exe\ndont.let.the.png.fool.you\ncase.matters.TXT",
                    "output": "text/html\ntext/plain\nunknown\nunknown\nunknown\nunknown",
                    "explanation": ""
                }
            ],
            "problem_statement": "Many internet protocols these days include the option of associating a\nmedia type with the content being sent.\nThe type is usually inferred from the file extension.\nYou are to write a program that facilitates the lookup of media types for\na number of files.\nYou will be given a table of media type associations that associate a certain\nfile extension with a certain media type.\nYou will then be given a number of file names, and tasked to determine the correct\nmedia type for each file.\nA file extension is defined as the part of the file name after the final period.\nIf a file name has no periods, then it has no extension and the media type cannot\nbe determined.\nIf the file extension is not present in the table, then the media type cannot be\ndetermined.\nIn such cases you will print \"unknown\" as the media type.\nIf the file extension does appear in the table (case matters), then print the associated\nmedia type.\nInput\nInput begins with 2 integers N and Q on a line.\nN is the number of media type associations, and Q is the number of file names.\nFollowing this are N lines, each containing a file extension and a media type, separated by a space.\nFinally, Q lines, each containing the name of a file.\nN and Q will be no greater than 100 each.\nFile extensions will consist only of alphanumeric characters, will have length at most 10, and will be distinct.\nMedia types will have length at most 50, and will contain only alphanumeric characters and punctuation.\nFile names will consist only of alphanumeric characters and periods and have length at most 50.\nOutput\nFor each of the Q file names, print on a line the media type of the file.\nIf there is no matching entry, print \"unknown\" (quotes for clarity).",
            "input_format": "",
            "output_format": "",
            "problem_name": "Internet Media Types",
            "user_tags": [
                "String",
                "Maps",
                "Hashmaps",
                "Implementation"
            ],
            "computed_tags": [
                "Data Structures",
                "Algorithms"
            ],
            "problem_code_id": "MIME2",
            "difficulty_level": "1362",
            "ai_solutions": [
                "N, Q = map(int, input().split())\nmedia_types = {}\nfor _ in range(N):\n    ext, media = input().split()\n    media_types[ext] = media\nfor _ in range(Q):\n    file_name = input().strip()\n    if '.' in file_name:\n        ext = file_name.split('.')[-1]\n        print(media_types.get(ext, \"unknown\"))\n    else:\n        print(\"unknown\")"
            ],
            "human_solutions": [
                {
                    "id": 29834296,
                    "submission_date": 1582341117,
                    "language": "PYTH 3",
                    "username": "pratapsurya513",
                    "user_rating_star": 3,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.01",
                    "memory": "17.6M",
                    "solution": 29834296,
                    "code": "x,y=map(int,input().split())\r\na={}\r\nfor i in range(x):\r\n    p,q=input().split()\r\n    a[p]=q\r\nfor i in range(y):\r\n    f=input().strip()\r\n    if \".\" in f:\r\n        print(a.get(f.split(\".\")[-1],\"unknown\"))\r\n    else:\r\n        print(\"unknown\")\r\n    \r\n    \r\n"
                },
                {
                    "id": 28154557,
                    "submission_date": 1575831900,
                    "language": "PYTH 3",
                    "username": "condition",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.01",
                    "memory": "17.6M",
                    "solution": 28154557,
                    "code": "N,Q = map(int,input().split())\n\ntypes={}\n\nfor _ in range(N):\n    K,V=input().split()\n    types[K]=V\n\nfor _ in range(Q):\n    fileName = input().strip()\n    I = fileName.rfind('.')\n    if(I != -1):\n        extension = fileName[I+1:]\n        if(extension in types.keys()):\n            print(types[extension])\n        else:\n            print('unknown')\n    else:\n        print('unknown')"
                }
            ]
        },
        "UWCOI20B": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "3\n4\n3 5 3 4\n2\n5 7\n1\n4",
                    "output": "3\n0\n0",
                    "explanation": "This section uses 1-indexing.\nIn the first sample, the buttons are: $[3, 5, 3, 4]$\n$A[1] +  A[4] = 3 + 4 = 7$ which is odd.\n$A[2] +  A[4] = 5 + 4 = 9$ which is odd.\n$A[3] +  A[4] = 3 + 4 = 7$ which is odd.\nIn total, there are 3 pairs with an odd sum, so the answer is 3.\nIn the second sample, the buttons are: $[5, 7]$. There are no odd pairs, so the answer is $0$.\nIn the third sample, the buttons are: $[4]$. There are no pairs at all, so the answer is $0$."
                }
            ],
            "problem_statement": "Using his tip-top physique, Kim has now climbed up the mountain where the base is located. Kim has found the door to the (supposedly) super secret base. Well, it is super secret, but obviously no match for Kim's talents. \nThe door is guarded by a row of $N$ buttons. Every button has a single number $A_i$ written on it. Surprisingly, more than one button can have the same number on it. Kim recognises this as Soum's VerySafe door, for which you need to press two buttons to enter the password. More importantly, the sum of the two numbers on the buttons you press must be odd. Kim can obviously break through this door easily, but he also wants to know how many different pairs of buttons he can pick in order to break through the door.\nCan you help Kim find the number of different pairs of buttons he can press to break through the door? \nNote: Two pairs are considered different if any of the buttons pressed in the pair is different (by position of the button pressed). Two pairs are not considered different if they're the same position of buttons, pressed in a different order. \nPlease refer to the samples for more details.\nInput:\n\nThe first line contains a single integer $T$, representing the number of testcases. $2T$ lines follow, 2 for each testcase.\nFor each testcase, the first line contains a single integer $N$, the number of buttons.\nThe second line of each testcase contains $N$ space-separated integers, $A_1, A_2, \\ldots, A_N$, representing the numbers written on each button.\n\nOutput:\nPrint a single number, $K$, representing the number of pairs of buttons in $A$ which have an odd sum.\nSubtasks\nFor all subtasks,  $1 \\leq T \\leq 10$, $1 \\leq N \\leq 100000$, and $1 \\leq A_i \\leq 100000$ for all $A_i$.\nSubtask 1 [15 points] : $N \\leq 2$, There are at most 2 buttons\nSubtask 2 [45 points] : $N \\leq 1000$, There are at most 1000 buttons\nSubtask 3 [40 points] : No additional constraints.",
            "input_format": "",
            "output_format": "",
            "problem_name": "Button Pairs",
            "user_tags": [
                "Basic Maths"
            ],
            "computed_tags": [
                "Mathematics"
            ],
            "problem_code_id": "UWCOI20B",
            "difficulty_level": "1309",
            "ai_solutions": [
                "T = int(input())\nfor _ in range(T):\n    N = int(input())\n    A = list(map(int, input().split()))\n    odd = sum(1 for a in A if a % 2 == 1)\n    even = N - odd\n    print(odd * even)",
                "T = int(input())\nfor _ in range(T):\n    N = int(input())\n    A = list(map(int, input().split()))\n    odd = len([a for a in A if a % 2 == 1])\n    even = len([a for a in A if a % 2 == 0])\n    print(odd * even)"
            ],
            "human_solutions": [
                {
                    "id": 1027623145,
                    "submission_date": 1698567976,
                    "language": "PYTH 3",
                    "username": "kwaidan",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.15",
                    "memory": "21.3M",
                    "solution": 1027623145,
                    "code": "for _ in range(int(input())):\r\n    N = int(input())\r\n    A = list(map(int, input().split()))\r\n    odd_count = 0\r\n    even_count = 0\r\n\r\n    for num in A:\r\n        if num % 2 == 0:\r\n            even_count += 1\r\n        else:\r\n            odd_count += 1\r\n\r\n    res = even_count * odd_count\r\n    print(res)\r\n"
                },
                {
                    "id": 1025326599,
                    "submission_date": 1697041659,
                    "language": "PYTH 3",
                    "username": "rjlk_929",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.18",
                    "memory": "22.3M",
                    "solution": 1025326599,
                    "code": "\r\n#2 4 6 8 3 3\r\n\r\nfor i in range(int(input())):\r\n    n=int(input())\r\n    l=list(map(int,input().split()))\r\n    oddcount=0\r\n    evencount=0\r\n    for i in l:\r\n        if i%2==1:oddcount+=1\r\n        else:evencount+=1\r\n    print(oddcount*evencount)"
                }
            ]
        },
        "PAIRING": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "2\n4 5\n0 1\n1 2\n2 3\n1 3\n3 0\n4 3\n0 1\n2 3\n2 1",
                    "output": "1 4\n2",
                    "explanation": ""
                }
            ],
            "problem_statement": "The Chef's latest idea is that some cooks might work better in pairs. So, he is going to experiment by pairing up some of his employees to see if the quality of the food prepared in his kitchen increases. However, only some pairs of employees are compatible. Two employees that are not compatible cannot be paired together.\n\n\n\nFor each pair of compatible employees, the Chef has assigned a number estimating how well the overall quality of the food might increase. Of course, each employee can only be paired with at most one other employee. Furthermore, it is ok to not pair some employees. So, your goal is to help the Chef decide how to pair the employees to maximize the total amount that the overall quality of food increases.\n\n\nInput\n\nThe first line contains a single integer denoting the number of test cases (at most 50). Each test case begins with two integers n and m. Here, n is the number of employees (between 2 and 1000) and m is the number of compatible pairs of employees (between 1 and 10,000). The employees are numbered from 0 to n-1. The next m lines describe a pair of compatible employees, one per line. The i'th such line contains two distinct integers ui,vi between 0 and n-1. Strangely enough, the Chef estimates that picking the i'th pair ui,vi will increase the quality of food prepared in his kitchen by exactly 2i.\n\n\n\nNo pair of employees will be given more than once in the input. That is, for distinct indices i and j, we do not have both ui = uj and vi = vj, nor do we have both ui = vj and vi = uj.\n\n\nOutput\n\nThe output for each test case consists of the indices of the pairs of employees that are used in a maximum total value pairing (the indices are between 0 and m-1). These indices should be given in increasing order with a single space between consecutive numbers. If there is more than one possible output, then any will do.",
            "input_format": "",
            "output_format": "",
            "problem_name": "Pairing Chefs",
            "user_tags": [
                "Basic Maths",
                "Greedy"
            ],
            "computed_tags": [
                "Mathematics",
                "Algorithms"
            ],
            "problem_code_id": "PAIRING",
            "difficulty_level": "1317",
            "ai_solutions": [
                "def max_pairing(n, m, pairs):\n    used = [False]*n\n    pairs.sort(key=lambda x: x[2], reverse=True)\n    result = []\n    for i in range(m):\n        if not used[pairs[i][0]] and not used[pairs[i][1]]:\n            used[pairs[i][0]] = used[pairs[i][1]] = True\n            result.append(pairs[i][2])\n    result.sort()\n    return result\n\nt = int(input().strip())\nfor _ in range(t):\n    n, m = map(int, input().strip().split())\n    pairs = []\n    for i in range(m):\n        u, v = map(int, input().strip().split())\n        pairs.append((u, v, i))\n    result = max_pairing(n, m, pairs)\n    print(' '.join(map(str, result)))",
                "def max_pairing(n, m, pairs):\n    used = [0]*n\n    pairs = sorted(pairs, key=lambda x: x[2], reverse=True)\n    result = []\n    for u, v, i in pairs:\n        if not used[u] and not used[v]:\n            used[u] = used[v] = 1\n            result.append(i)\n    result.sort()\n    return result\n\nt = int(input().strip())\nfor _ in range(t):\n    n, m = map(int, input().strip().split())\n    pairs = []\n    for i in range(m):\n        u, v = map(int, input().strip().split())\n        pairs.append((u, v, i))\n    result = max_pairing(n, m, pairs)\n    print(' '.join(map(str, result)))"
            ],
            "human_solutions": [
                {
                    "id": 32437234,
                    "submission_date": 1588217364,
                    "language": "PYTH 3",
                    "username": "pratijain",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "3.63",
                    "memory": "17.7M",
                    "solution": 32437234,
                    "code": "t = int(input())\r\n\r\nfor j in range(t):\r\n\r\n    n, m = map(int, input().split())\r\n\r\n    nlist = [i for i in range(n)]\r\n    mlist = []\r\n\r\n    for i in range(m):\r\n        mlist.append(tuple(map(int, input().split())))\r\n\r\n    mlist2 = mlist.copy()\r\n\r\n    mlist.reverse()\r\n\r\n    mselected = []\r\n\r\n    for (x,y) in mlist:\r\n        if x in nlist and y in nlist:\r\n            nlist.remove(x)\r\n            nlist.remove(y)\r\n            mselected.append(mlist2.index((x,y)))\r\n\r\n\r\n    p = ''\r\n    for i in mselected:\r\n        p = str(i) + ' ' + p\r\n\r\n    print(p)"
                },
                {
                    "id": 30891069,
                    "submission_date": 1585574087,
                    "language": "PYTH 3",
                    "username": "kaspern",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "2.53",
                    "memory": "17.6M",
                    "solution": 30891069,
                    "code": "T = int(input())\nfor i in range(T):\n    n, m = map(int, input().split())\n    l=[]\n    q=[]\n    p=[]\n    for i in range(m):\n        k,x=map(int,input().split())\n        l.append([k,x])\n    for i in reversed(range(m)):\n        if l[i][0] not in q and l[i][1] not in q:\n            q.append(l[i][0])\n            q.append(l[i][1])\n            p.append(i)\n    p.sort()\n    for i in range(len(p)):\n        print(p[i],end=' ')\n    print()"
                }
            ]
        },
        "PROC18B": {
            "constraints": "$1 \\leq \\text{T} \\leq 10$ \n$2 \\leq \\text{N} \\leq 10^4$\n$0 \\leq \\mathbf{a_i} \\leq 10^9$",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "2\n2\n9 3\n3\n3 2 9",
                    "output": "6.00000000\n4.00000000",
                    "explanation": "In test 1, Tanish mixes flasks 1 and 2. In test 2, he first mixes flasks 1 and 3 to get a flask of concentration 6 and then mixes this flask with flask 2 to get a flask of poison concentration 4."
                }
            ],
            "problem_statement": "Tanish is the president of the chemistry club at his school. He considers everyone who doesn't like chemistry as his enemy. After years of research, he has invented a lethal poison, which he named success. Now Tanish plans to kill all his enemies with his success. Success is extremely deadly and is untraceable in small concentrations.\nTanish has $\\text{N}$ flasks lying on the shelf of his lab. All of these flasks contain the same volume of poison solution. The concentration of poison in the $\\text{ith}$ flask is $\\mathbf{a_i}$. In one move - Tanish picks up any two flasks, pours half of the contents of each of these flasks into a third initially empty flask, discards the two flasks and places the third flask (which now has the same volume of solution as all other flasks) on the shelf. He performs N-1 such moves to end up with only one flask of poison on the shelf. He wishes to perform these moves such that the concentration of poison in this flask is the minimum possible. What is the minimum concentration of poison that he can achieve?\nNote\nThe concentration is given in the unit ppb i.e. parts per billion.\\\n1 gram poison in $10^9$ ml solution is 1 ppb.\\\nConcentration in ppb = (Number of grams of poison / Volume of solution in ml) x $10^9$",
            "input_format": "First line of the input contains a single integer $\\text{T}$ - the number of test cases. \\\nFor each test case,\n- The first line contains a single integer $\\text{N}$, the number of bottles. \n- The second line contains N space-separated integers, the concentrations.",
            "output_format": "For each test case, print one line containing the lowest final concentration. The output will be accepted if the absolute error is $\\leq 10^{-6}$.",
            "problem_name": "Kill them with your success",
            "user_tags": [
                "Greedy",
                "Sorting"
            ],
            "computed_tags": [
                "Algorithms"
            ],
            "problem_code_id": "PROC18B",
            "difficulty_level": "1367",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 35298499,
                    "submission_date": 1594134169,
                    "language": "PYTH 3",
                    "username": "rk1309",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.07",
                    "memory": "17.9M",
                    "solution": 35298499,
                    "code": "for _ in range(int(input())):\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    a.sort(reverse = True)\n    k = (a[0] + a[1])/2\n    for i in range(2,n):\n        k = (k + a[i])/2\n    print(k)"
                },
                {
                    "id": 30612189,
                    "submission_date": 1584797861,
                    "language": "PYTH 3",
                    "username": "imsurajj19",
                    "user_rating_star": 3,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.08",
                    "memory": "18M",
                    "solution": 30612189,
                    "code": "def poison(n,concentration):\n    \n    concentration=sorted(concentration)\n    for i in range(n-1,0,-1):\n        replaced=(concentration[i]+concentration[i-1])/2\n        concentration.pop()\n        concentration.pop()\n        concentration.append(replaced)\n        \n    return concentration[0]\n\n\n\nt=int(input())\nfor i in range(t):\n    n=int(input())\n    concentration=[int(x) for x in input().split()]\n    ans=poison(n,concentration)\n    print('%.6f'%ans)"
                }
            ]
        },
        "SUBANAGR": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "3\nhope\nelephant\npath",
                    "output": "hp",
                    "explanation": "In the first test case the longest string appears to be two characters long. String 'hp' satisfies the requirements as it's an anagram of 'hp' which is a subsequence of 'hope' and an anagram of 'ph' which is a subsequence of both 'elephant' and 'path'. Note that string 'ph' also satisfies the requirements, but 'hp' is lexicographically smaller."
                },
                {
                    "input": "2\nwall\nstep",
                    "output": "no such string",
                    "explanation": "In this test case there is no such string."
                }
            ],
            "problem_statement": "Let's start from some definitions.\n\n\nStrings A and B are called anagrams if it's possible to rearrange the letters of string A using all the original letters exactly once and achieve string B; in other words A and B are permutations of each other. For example, remote and meteor are anagrams, race and race are anagrams as well, while seat and tease aren't anagrams as tease contains an extra 'e'.\n\n\nString A is called a subsequence of string B if A can be obtained from B by removing some (possibly none) characters. For example, cat is a subsequence of scratch, rage is a subsequence of rage, and tame is not a subsequence of steam.\n\n\nString A is lexicographically smaller than string B of the same length if at the first position where A and B differ A contains a letter which is earlier in the alphabet than the corresponding letter in B.\n\n\nRecently, Ann received a set of strings consisting of small Latin letters a..z. 'What can I do with them?' -- she asked herself. 'What if I try to find the longest string which is a subsequence of every string from the set?'. Ann spent a lot of time trying to solve the problem... but all her attempts happened to be unsuccessful. She then decided to allow the sought string to be an anagram of some subsequence of every string from the set. This problem seemed to be easier to Ann, but she was too tired to solve it, so Ann asked for your help.\n\n\nSo your task is, given a set of strings, to find the longest non-empty string which satisfies Ann. Moreover, if there are many such strings, choose the lexicographically smallest one.\n\n\nInput\nThe first line of the input file contains one integer N -- the number of strings in the set (1 \u2264 N \u2264 100). Each of the next N lines contains a non-empty string consisting only of small Latin letters a..z representing a string from the set. None of the strings contain more than 100 letters.\n\n\nOutput\nOutput the longest non-empty string satisfying Ann. If there are several such strings, output the lexicographically smallest one. If there are no such strings, output 'no such string' (quotes for clarity).",
            "input_format": "",
            "output_format": "",
            "problem_name": "Subanagrams",
            "user_tags": [
                "Frequency Arrays",
                "String",
                "Greedy"
            ],
            "computed_tags": [
                "Data Structures",
                "Arrays",
                "Algorithms"
            ],
            "problem_code_id": "SUBANAGR",
            "difficulty_level": "1239",
            "ai_solutions": [
                "def find_longest_string(n, strings):\n    common_letters = set(strings[0])\n    for s in strings[1:]:\n        common_letters &= set(s)\n    if not common_letters:\n        return 'no such string'\n    counts = [min(s.count(c) for s in strings) for c in common_letters]\n    result = ''.join([c * v for c, v in zip(common_letters, counts)])\n    return ''.join(sorted(result))\n\nn = int(input().strip())\nstrings = [input().strip() for _ in range(n)]\nprint(find_longest_string(n, strings))"
            ],
            "human_solutions": [
                {
                    "id": 36067802,
                    "submission_date": 1595872699,
                    "language": "PYTH 3",
                    "username": "nightcruiser",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.02",
                    "memory": "17.6M",
                    "solution": 36067802,
                    "code": "n=int(input())\na=[[0]*26]*n\nm=[1000000000]*26\nfor i in range(n):\n    a[i]=input()\nfor i in range(26):\n    for j in range(n):\n        x=chr(97+i)\n        m[i]=min(a[j].count(chr(97+i)),m[i])\nans=\"\"\nfor i in range(26):\n    ans+=m[i]*chr(ord('a')+i)\nif(len(ans)):\n    print(ans)\nelse:\n    print('no such string')"
                },
                {
                    "id": 34243643,
                    "submission_date": 1591957615,
                    "language": "PYTH 3",
                    "username": "manimala123",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.02",
                    "memory": "17.3M",
                    "solution": 34243643,
                    "code": "from collections import Counter\r\nl=[]\r\nfor _ in range(int(input())):\r\n    s=input().strip()\r\n    l.append(s)\r\ns=Counter(l[0])\r\nfor i in range(1,len(l)):\r\n    s=s&Counter(l[i])\r\ns=list(s.elements())\r\nif(len(s)!=0):\r\n    print(*sorted(s),sep='')\r\nelse:\r\n    print(\"no such string\")\r\n    \r\n            "
                }
            ]
        },
        "SAD": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "2 3\n9 8 8\n2 6 11",
                    "output": "8",
                    "explanation": "Example 1: The first row contains 9, 8, 8. Observe that both 8 are the minimum. Considering the first 8, look at the corresponding column (containing 8 and 6). Here, 8 is the largest element in that column. So it will be chosen."
                },
                {
                    "input": "3 3\n9 8 11\n2 6 34\n5 9 11",
                    "output": "GUESS",
                    "explanation": "Example 2: There is no value in the matrix that is smallest in its row but largest in its column."
                },
                {
                    "input": "2 2\n10 10\n10 10",
                    "output": "10",
                    "explanation": "Example 3: The required gift in matrix is not determined uniquely, but the required cost is determined uniquely."
                }
            ],
            "problem_statement": "Our Chef is very happy that his son was selected for training in one of the finest culinary schools of the world.\nSo he and his wife decide to buy a gift for the kid as a token of appreciation.\nUnfortunately, the Chef hasn't been doing good business lately, and is in no mood on splurging money.\nOn the other hand, the boy's mother wants to buy something big and expensive.\nTo settle the matter like reasonable parents, they play a game.\n\n\nThey spend the whole day thinking of various gifts and write them down in a huge matrix.\nEach cell of the matrix contains the gift's cost.\nThen they decide that the mother will choose a row number r while the father will choose a column number c,\nthe item from the corresponding cell will be gifted to the kid in a couple of days. \n\n\nThe boy observes all of this secretly.\nHe is smart enough to understand that his parents will ultimately choose a gift whose cost is smallest in its row,\nbut largest in its column.\nIf no such gift exists, then our little chef has no option but to keep guessing.\nAs the matrix is huge, he turns to you for help.\n\n\nHe knows that sometimes the gift is not determined uniquely even if a gift exists whose cost is smallest in its row,\nbut largest in its column.\nHowever, since the boy is so smart, he realizes that the gift's cost is determined uniquely.\nYour task is to tell him the gift's cost which is smallest in its row,\nbut largest in its column, or to tell him no such gift exists.\n\nInput\nFirst line contains two integers R and C, the number of rows and columns in the matrix respectively. Then follow R lines, each containing C space separated integers - the costs of different gifts.\n\nOutput\n Print a single integer - a value in the matrix that is smallest in its row but highest in its column. If no such value exists, then print \"GUESS\" (without quotes of course) \nConstraints\n 1 R, C\n All gift costs are positive and less than 100000000 (10^8)",
            "input_format": "",
            "output_format": "",
            "problem_name": "Gift Rift",
            "user_tags": [
                "Searching",
                "Implementation"
            ],
            "computed_tags": [
                "Algorithms"
            ],
            "problem_code_id": "SAD",
            "difficulty_level": "1306",
            "ai_solutions": [
                "R, C = map(int, input().split())\nmatrix = [list(map(int, input().split())) for _ in range(R)]\n\nmin_rows = [min(row) for row in matrix]\nmax_cols = [max(col) for col in zip(*matrix)]\n\nfor r in range(R):\n    for c in range(C):\n        if matrix[r][c] == min_rows[r] == max_cols[c]:\n            print(matrix[r][c])\n            exit(0)\nprint(\"GUESS\")"
            ],
            "human_solutions": [
                {
                    "id": 29266808,
                    "submission_date": 1580459370,
                    "language": "PYTH 3",
                    "username": "ap9810",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.02",
                    "memory": "17.5M",
                    "solution": 29266808,
                    "code": "r, c=map(int, input().strip().split())\nmain=[]\nrow=[]\ncol=[]\nfor j in range(r):\n    a=list(map(int, input().strip().split()))    \n    main.append(a)\n    row.append(min(a))\ncount=0\nfor i in range(c):\n    max=0\n    for k in range(r):\n        if(max<main[k][i]):\n            max=main[k][i]\n    col.append(max)\nfor i in range(r):\n    n=row[i]\n    for j in range(c):\n        if(main[i][j]==n and col[j]==n):\n            count=1\n            break\n    if(count==1):\n        print(n)\n        break\nif(count==0):\n    print(\"GUESS\")"
                },
                {
                    "id": 28648189,
                    "submission_date": 1578082460,
                    "language": "PYTH 3",
                    "username": "condition",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.02",
                    "memory": "17.6M",
                    "solution": 28648189,
                    "code": "R,C = map(int,input().split())\nMAT = []\nfor r in range(R):\n    MAT.append(list(map(int,input().split())))\n\ncolMax = []\n\nfor c in range(C):\n    maxi=-1\n    for r in range(R):\n        if MAT[r][c]>maxi:\n            maxi=MAT[r][c]\n    colMax.append(maxi)\n\nrowMin = []\nfor r in range(R):\n    mini=MAT[r][0]\n    for c in range(1,C):\n        if MAT[r][c]<mini:\n            mini=MAT[r][c]\n    rowMin.append(mini)\n\nnoGuess=False\nelement=-1\nfor i in rowMin:\n    if i in colMax:\n        element=i\n        noGuess=True\n        break\n\nif(noGuess):\n    print(element)\nelse:\n    print(\"GUESS\")"
                }
            ]
        },
        "COMMUTE": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "3\n2\n0 4 7\n0 6 5\n2\n0 1 2\n6 2 10\n2\n1 2 3\n0 2 3",
                    "output": "11\n8\n5",
                    "explanation": ""
                }
            ],
            "problem_statement": "The Chef commutes to work every day using the city's underground metro. The schedule for the trains has recently been changed and he wants to know how long it will take to travel from the station nearest to his house and the station nearest to his restaurant.\n\n\n\nThe Chef doesn't want to change the route he took before, so he simply has to find out how long it will take to reach his restaurant along his usual route. This route is given by a sequence of stations s0, s1, ..., sn where s0 is the station where the Chef enters the metro and sn is the station where the Chef exits the metro.\n\n\n\nTrains are scheduled to run between every two consecutive stations si-1 and si. Such a schedule is specified by three integers xi, li, and fi. This means that the first train on this line starts operating at time xi. The time it takes this train to travel from si-1 and si is exactly li units. Finally, a train departs from station si-1 every fi minutes following the previous train. That is, a train departs at time xi, xi+fi, xi+2fi, and so on.\n\n\n\n\nThe Chef is very experienced at navigating the metro so the time it takes him to transfer between trains at a given station  is essentially zero. Thus, if the Chef arrives at a station, say si, the moment that the train from si to si+1 is scheduled to depart, he skillfully hops on this next train. However, if the Chef arrives when no train to si+1 is scheduled to depart, he must wait until the scheduled departure time.\n\n\n\nHelp the Chef figure out how long it will take him to travel from station s0 to station sn. You may assume that the Chef is already at station s0 at time 0.\n\n\nInput\n\nThe first line consists of a single integer denoting the number of test cases (at most 50). Each test case begins with a line containing a single integer n between 1 and 1000 indicating the number of lines the Chef must traverse (so there are n+1 stations s0, s1, ..., sn). The next n lines describe the train schedules between stations, one per line. The i'th such line gives the values xi, li, and fi for the train that travels between stations si-1 and si.\n\n\n\nThe xi values will be between 0 and 1000 and the li and fi values will be between 1 and 1000.\n\n\nOutput\n\nFor each test case you are to output a single integer denoting the minimum time t for which the Chef can reach station sn using the given route. Remember, the Chef starts at s0 at time 0.",
            "input_format": "",
            "output_format": "",
            "problem_name": "The Morning Commute",
            "user_tags": [
                "Greedy",
                "Implementation"
            ],
            "computed_tags": [
                "Algorithms"
            ],
            "problem_code_id": "COMMUTE",
            "difficulty_level": "1268",
            "ai_solutions": [
                "def min_time_to_reach_destination(T, test_cases):\n    for _ in range(T):\n        n = test_cases[_][0]\n        schedules = test_cases[_][1]\n        time = 0\n        for i in range(n):\n            x, l, f = schedules[i]\n            if time <= x:\n                time = x + l\n            else:\n                if time % f == 0:\n                    time += l\n                else:\n                    time += (f - (time % f)) + l\n        print(time)\n\nT = int(input())\ntest_cases = []\nfor _ in range(T):\n    n = int(input())\n    schedules = []\n    for _ in range(n):\n        x, l, f = map(int, input().split())\n        schedules.append((x, l, f))\n    test_cases.append((n, schedules))\n\nmin_time_to_reach_destination(T, test_cases)"
            ],
            "human_solutions": [
                {
                    "id": 34687094,
                    "submission_date": 1593004485,
                    "language": "PYTH 3",
                    "username": "sanvi_2512",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "4.30",
                    "memory": "17.6M",
                    "solution": 34687094,
                    "code": "for _ in range(int(input())):\r\n    n=int(input())\r\n    s=0\r\n    for i in range(n):\r\n        x,l,f=map(int,input().split())\r\n        while s>x:\r\n            x+=f\r\n        s=x+l\r\n    print(s)\r\n                "
                },
                {
                    "id": 33148097,
                    "submission_date": 1589793087,
                    "language": "PYTH 3",
                    "username": "tanmay_garg",
                    "user_rating_star": 3,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "3.72",
                    "memory": "17.6M",
                    "solution": 33148097,
                    "code": "# http://climatecanchange.com/\nfrom itertools import count\n\nfor i in range(int(input())):\n    k = int(input())\n    chef_time = 0\n    \n    for station in range(k):\n        x, l, f = map(int, input().split())\n        if station == 0:\n            chef_time += x + l\n        else:\n            for c in count(x, f):\n                if c >= chef_time:\n                    chef_time = c + l\n                    break\n            \n    print(chef_time)"
                }
            ]
        },
        "TIDRICE": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "3\n4\ntilak +\ntilak +\ntilak -\ntilak +\n3\nratna +\nshashi -\nratna -\n3\nbhavani -\nbhavani +\nbhavani -",
                    "output": "1\n-2\n-1",
                    "explanation": "Case 1 : Initially score = 0. Updation of scores in the order of user tilak's votes is as follows,\n( + ): +1 is added to the final score. This is the 1st vote by this user, so no previous vote to nullify. score = 1\n( + ):  0 should be added ( -1 to nullify previous (+) vote, +1 to count the current (+) vote ). score = 1\n( - ) : -2 should be added ( -1 to nullify previous (+) vote, -1 to count the current (-) vote ). score = -1\n( + ): +2 should be added ( +1 to nullify previous (-) vote, +1 to count the current (+) vote ). score = 1"
                }
            ],
            "problem_statement": "Did you know that there are over 40,000 varieties of Rice in the world ? There are so many dishes that can be prepared with Rice too. A famous chef from Mumbai, Tid Gusto prepared a new dish and named it 'Tid Rice'. He posted the recipe in his newly designed blog for community voting, where a user can plus (+) or minus (-) the recipe. The final score is just the sum of all votes, where (+) and (-) are treated as +1 and -1 respectively. But, being just a chef ( and not a codechef ) he forgot to take care of multiple votes by the same user.\n\nA user might have voted multiple times and Tid is worried that the final score shown is not the correct one. Luckily, he found the user logs, which had all the N votes in the order they arrived.  Remember that, if a user votes more than once, the user's previous vote is first nullified before the latest vote is counted ( see explanation for more clarity ). Given these records in order ( and being a codechef yourself :) ), calculate the correct final score.\n\nInput\nFirst line contains T ( number of testcases, around 20 ). T cases follow. Each test case starts with N ( total number of votes, 1 \nOutput\nFor each test case, output the correct final score in a new line",
            "input_format": "",
            "output_format": "",
            "problem_name": "Popular Rice Recipe",
            "user_tags": [
                "anil_adm",
                "cook10",
                "easy"
            ],
            "computed_tags": [],
            "problem_code_id": "TIDRICE",
            "difficulty_level": "1247",
            "ai_solutions": [
                "def correct_score(T, votes):\n    for _ in range(T):\n        N = votes[_][0]\n        vote_list = votes[_][1]\n        vote_dict = {}\n        for vote in vote_list:\n            user, vote_type = vote.split()\n            vote_dict[user] = 1 if vote_type == '+' else -1\n        print(sum(vote_dict.values()))\n\nT = int(input())\nvotes = []\nfor _ in range(T):\n    N = int(input())\n    vote_list = [input() for _ in range(N)]\n    votes.append((N, vote_list))\ncorrect_score(T, votes)",
                "def correct_score(T, votes):\n    for _ in range(T):\n        N = votes[_][0]\n        vote_list = votes[_][1]\n        vote_dict = {}\n        for vote in vote_list:\n            user, vote_type = vote.split()\n            vote_dict[user] = vote_type\n        print(sum(1 if vote_type == '+' else -1 for vote_type in vote_dict.values()))\n\nT = int(input())\nvotes = []\nfor _ in range(T):\n    N = int(input())\n    vote_list = [input() for _ in range(N)]\n    votes.append((N, vote_list))\ncorrect_score(T, votes)"
            ],
            "human_solutions": [
                {
                    "id": 36774884,
                    "submission_date": 1597502820,
                    "language": "PYTH 3",
                    "username": "animefabhargav",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.02",
                    "memory": "17.6M",
                    "solution": 36774884,
                    "code": "for _ in range(int(input())):\n    n=int(input())\n    d={}\n    for i in range(n):\n        name,vote=input().split()\n        d[name]=vote\n    c=0\n    for name in d:\n        if d[name]=='+':\n            c+=1\n        else:\n            c-=1 \n    \n    print(c)"
                },
                {
                    "id": 33206722,
                    "submission_date": 1590053237,
                    "language": "PYTH 3",
                    "username": "sibu08",
                    "user_rating_star": 3,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.02",
                    "memory": "17.5M",
                    "solution": 33206722,
                    "code": "try:\n    for _ in range(int(input())):\n        d = {}\n        for _ in range(int(input())):\n            string = input().split()\n            if string[1] == '+':\n                d[string[0]] = 1\n            else:\n                d[string[0]] = -1\n        print(sum(d.values()))\nexcept EOFError:\n    pass"
                }
            ]
        },
        "DRGNBOOL": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "2\n2 3\n10 1\n20 2\n5 2\n5 2\n18 1\n5 5\n73 87\n69 13\n36 36\n77 46\n43 93\n49 46\n74 93\n78 87\n99 13\n59 36",
                    "output": "8\n89",
                    "explanation": "Case 1.\nThe warriors are I1 = (I, 10, 1), I2 = (I, 20, 2), F1 = (F, 5, 2), F2 = (F, 5, 2), F3 = (F, 18, 1). Without the SoChef help the battle can proceed as follows.\n\nI2 fights with F1, F1 dies, I2 becomes (I, 15, 2).\nI2 fights with F2, F2 dies, I2 becomes (I, 10, 2).\nI1 fights with F3, I1 dies, F3 becomes (F, 8, 1).\n\n\nSo if SoChef will give 8 additional units of chakra to I1 the Soints will win the battle and even one Soint (I2) will left alive. Hence the answer is 8."
                }
            ],
            "problem_statement": "In the world of DragonBool there are fierce warriors called Soints. Also there are even fiercer warriors called Sofloats \u2013 the mortal enemies of Soints.\n\n\nThe power of each warrior is determined by the amount of chakra he possesses which is some positive integer. Warriors with zero level of chakra are dead warriors :) When the fight between Soint with power CI and Sofloat with power CF occurs the warrior with lower power will die and the winner will lose the amount of chakra that his enemy have possessed before the fight. So three cases are possible:\n\nCI > CF. Then Sofloat will die while the new power of Soint will be CI \u2013 CF.\nCI CF. Then Soint will die while the new power of Sofloat will be CF \u2013 CI.\nCI = CF. In this special case both warriors die.\n\n\nEach warrior (Soint or Sofloat) has his level of skills which is denoted by some positive integer. The fight between two warriors can occur only when these warriors are Soint and Sofloat of the same level. In particual, friendly fights are not allowed, i.e., a Soint cannot fight with another Soint and the same holds for Sofloats.\n\n\nLets follow the following convention to denote the warriors. A Soint of level L and power C will be denoted as (I, C, L), while Sofloat of level L and power C will be denoted as (F, C, L). Consider some examples. If A = (I, 50, 1) fights with B = (F, 20, 1), B dies and A becomes (I, 30, 1). On the other hand, (I, 50, 1) cannot fight with (F, 20, 2) as they have different levels.\n\n\nThere is a battle between Soints and Sofloats. There are N Soints and M Sofloats in all. The battle will consist of series of fights. As was mentioned above in each fight one Soint and one Sofloat of the same level take part and after the fight the warrior with lower power will die (or both will die if they have the same power). The battle proceeds as long as there exists at least one pair of warriors who can fight. The distribution of warriors by levels satisfies the following condition: for every Soint of level L there exists at least one Sofloat of the same level L and vice-versa. So if for some level L we have at least one warrior of this level then there is at least one Soint of level L and at least one Sofloat of level L.\n\n\nThere is a powerful wizard, whose name is SoChef, on the side of Soints. He can increase the amount of chakra of each Soint by any number. SoChef wants the army of Soints to win this battle. But increasing amount of chakra of any Soint by one costs him a lot of his magic power. Hence he wants to minimize the total amount of additional chakra he should give to Soints in order for them to win. Note, however, that the win here means that all Sofloats should be dead irregardless of whether any Soint is alive. Also note that the battle can proceed by different scenarios and the SoChef need to distribute additional chakra among the Soints in such a way that they will win for any possible battle scenario. Help SoChef and find the minimal amount of additional chakra he should give to Soints in order for them to win.\n\nInput\n\nThe first line of the input contains an integer T, the number of test cases. T test cases follow. The first line of each test case contains two space separated integers N and M. Here N is the number of Soints  participating in the battle and M is the number of Sofloats  for the same. Each of the next N lines contains two space separated integers  Ci and  Li, the amount of chakra and level of i-th Soint correspondingly. The next M lines describe power and level of Sofloats participating in the battle in the same format.\n\nOutput\n\nFor each test case output a single integer on a single line, the minimum amount of chakra SoChef should give to Soints in order for them to win the battle.\n\nConstraints\nEach integer in the input file is positive and does not exceed 100. That is\n1 \u2264 T \u2264 1001 \u2264 N \u2264 1001 \u2264 M \u2264 1001 \u2264 Ci \u2264 1001 \u2264 Li \u2264 100For every Soint of level L there exists at least one Sofloat of the same level L and vice-versa.\nIt is guaranteed that each official test file will satisfy all these constraints. You DON'T need to verify them in your program.",
            "input_format": "",
            "output_format": "",
            "problem_name": "Fierce Battles",
            "user_tags": [
                "Implementation"
            ],
            "computed_tags": [
                "Algorithms"
            ],
            "problem_code_id": "DRGNBOOL",
            "difficulty_level": "1271",
            "ai_solutions": [
                "T = int(input())\nfor _ in range(T):\n    N, M = map(int, input().split())\n    soints = [0]*101\n    sofloats = [0]*101\n    for _ in range(N):\n        C, L = map(int, input().split())\n        soints[L] += C\n    for _ in range(M):\n        C, L = map(int, input().split())\n        sofloats[L] += C\n    ans = 0\n    for i in range(101):\n        if sofloats[i] > soints[i]:\n            ans += sofloats[i] - soints[i]\n    print(ans)",
                "def solve():\n    N, M = map(int, input().split())\n    soints = [0]*101\n    sofloats = [0]*101\n    for _ in range(N):\n        C, L = map(int, input().split())\n        soints[L] += C\n    for _ in range(M):\n        C, L = map(int, input().split())\n        sofloats[L] += C\n    ans = 0\n    for i in range(101):\n        if sofloats[i] > soints[i]:\n            ans += sofloats[i] - soints[i]\n    print(ans)\n\nT = int(input())\nfor _ in range(T):\n    solve()"
            ],
            "human_solutions": [
                {
                    "id": 31901289,
                    "submission_date": 1586951520,
                    "language": "PYTH 3",
                    "username": "aarushi1",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.05",
                    "memory": "17.6M",
                    "solution": 31901289,
                    "code": "t = int(input())\nfor i in range(0,t):\n\tn,m = map(int, input().split())\n\tsoi = {}\n\tsof = {}\n\tfor j in range (0,n):\n\t\tc, l = map(int, input().split())\n\t\tif not (l in soi.keys()):\t\t\n\t\t\tsoi[l]  = c\t\n\t\telse:\n\t\t\tsoi[l] += c \n\n\tfor j in range (0,m):\n\t\tc, l = map(int, input().split())\n\t\tif not (l in sof.keys()):\t\t\n\t\t\tsof[l] = c\n\t\telse:\n\t\t\tsof[l] += c\n\tsum=0\n\tfor i in soi.keys():\n\t\tif soi[i] < sof[i]:\n\t\t\tsum += sof[i] - soi[i]\n\t\n\tprint(sum)"
                },
                {
                    "id": 30568534,
                    "submission_date": 1584600870,
                    "language": "PYTH 3",
                    "username": "smit_r",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.05",
                    "memory": "17.5M",
                    "solution": 30568534,
                    "code": "\nt = int(input())\nwhile t:\n    n,m = map(int, input().split())\n    soints = {}\n    sofloats = {}\n    while n:\n        c,l = map(int, input().split())\n        if l in soints.keys():\n            soints[l] += c\n        else:\n            soints[l] = c\n        n -= 1\n    while m:\n        c,l = map(int, input().split())\n        if l in sofloats.keys():\n            sofloats[l] += c\n        else:\n            sofloats[l] = c\n        m -= 1\n    c = 0\n    for l in soints.keys():\n        if sofloats[l]>=soints[l]:\n            c += sofloats[l]-soints[l]\n    print(c)\n    t -= 1\n"
                }
            ]
        },
        "GRANAMA": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "3\nalex axle\nparadise diapers\nalice bob",
                    "output": "YES\nNO\nYES",
                    "explanation": "Example case 1: Chef declared them as granama recipes. They are actually granama because the sets of ingredients and the number of times each ingredient has been used are equal. The Chef got it right!\nExample case 2: Chef declared them as granama recipes because both sets of ingredients are equal. But they are NOT granama since ingredient 'a' has been used twice in the first recipe but only once in the second. The Chef was incorrect!\nExample case 3: Chef declare them as not granama. They are not granama as the sets of ingredients are different. Hence, the Chef was right!"
                }
            ],
            "problem_statement": "Chef has learned a new technique for comparing two recipes. A recipe contains a list of ingredients in increasing order of the times they will be processed. An ingredient is represented by a letter 'a'-'z'. The i-th letter in a recipe denotes the i-th ingredient. An ingredient can be used multiple times in a recipe.\nThe technique is as follows. Compare two recipes by comparing their respective lists. If the sets of ingredients used in both recipes are equal and each ingredient is used the same number of times in both of them (processing order does not matter), they are declared as granama recipes. (\"granama\" is the Chef-ian word for \"similar\".)\nChef took two recipes he invented yesterday. He wanted to compare them using the technique. Unfortunately, Chef forgot to keep track of the number of times each ingredient has been used in a recipe. He only compared the ingredients but NOT their frequencies. More precisely, Chef considers two recipes as granama if there are no ingredients which are used in one recipe and not used in the other recipe.\nYour task is to report whether Chef has correctly classified the two recipes (as granama or not granama) although he forgot to keep track of the frequencies.\nInput\nThe first line of the input contains a single integer T denoting the number of test cases. The description for T test cases follows. Each test case consists of a single line containing two space-separated strings R and S denoting the two recipes.\nOutput\nFor each test case, output a single line containing \"YES\" (quotes for clarity) if Chef correctly classified the two recipes as granama or not granama. Otherwise, output a single line containing \"NO\" (quotes for clarity) if Chef declared two recipes as granama when they actually are not.\nConstraints\n\n1 \u2264 T \u2264 1001 \u2264 |R|, |S| \u2264 1000",
            "input_format": "",
            "output_format": "",
            "problem_name": "Granama Recipes",
            "user_tags": [
                "Frequency Arrays",
                "String",
                "Implementation"
            ],
            "computed_tags": [
                "Data Structures",
                "Arrays",
                "Algorithms"
            ],
            "problem_code_id": "GRANAMA",
            "difficulty_level": "1337",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 34285542,
                    "submission_date": 1592026112,
                    "language": "PYTH 3",
                    "username": "udesh620",
                    "user_rating_star": 3,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.03",
                    "memory": "17.3M",
                    "solution": 34285542,
                    "code": "from collections import Counter\r\nfor _ in range(int(input())):\r\n\tR,S=input().split()\r\n\tB=True\r\n\tdr=Counter(list(R))\r\n\tds=Counter(list(S))\r\n\tif set(list(R))==set(list(S)):\r\n\t\tfor i in set(R):\r\n\t\t\tif dr[i]!=ds[i]:\r\n\t\t\t\tB=False\r\n\t\t\t\tbreak\r\n\tif B:\r\n\t\tprint('YES')\r\n\telse:\r\n\t\tprint('NO')"
                },
                {
                    "id": 33022485,
                    "submission_date": 1589214986,
                    "language": "PYTH 3",
                    "username": "nav_debug",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.05",
                    "memory": "17.6M",
                    "solution": 33022485,
                    "code": "T = int(input())\r\nfor i in range(T):\r\n  r, s = input().split()\r\n  r = list(r)\r\n  s = list(s)\r\n  r.sort()\r\n  s.sort()\r\n  if set(r) == set(s):\r\n    t = \"YES\"\r\n  else:\r\n    t = \"NO\"\r\n  if r == s and len(r) == len(s):\r\n    c = \"YES\"    \r\n  else:\r\n    c = \"NO\"\r\n  if t == c:\r\n    print(\"YES\")\r\n  else:\r\n    print(\"NO\")"
                }
            ]
        },
        "XORNEY": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "4\n1 4\n2 6\n3 3\n2 3",
                    "output": "Even\nEven\nOdd\nOdd",
                    "explanation": "Test case -1 -> XOR (1,2,3,4) =4\nTest case -2 -> XOR (2,3,4,5,6) =6\nTest case -3 -> XOR (3) =3\nTest case -4 -> XOR (2,3) =1"
                }
            ],
            "problem_statement": "\"I have only one rule, never submit partially correct code\" -Barney Stinson\nThe religious act which Barney and his friends hold most sacred, XORING the natural numbers in the given range. This time Barney is a bit busy with picking up some girls, so he asked you to help him. He gave you two numbers $L$ and $R$, you have to find if XOR of all the numbers in range L to R (L,R both inclusive) is odd or even.\nWarning!! Large Input-Output. Please use Fast IO.\nInput:\n\nThe first line will contain $T$, number of testcases. \nEach testcase contains a single line of input, two integers $L, R$. \n\nOutput:\nFor each testcase, in the new line print \"Odd\" if the XOR in the range is odd, else print \"Even\".\nConstraints\n\n$1 \\leq T \\leq 10^6$\n$1 \\leq L \\leq  R \\leq 10$$18$",
            "input_format": "",
            "output_format": "",
            "problem_name": "XOR! Wait for it",
            "user_tags": [
                "Bit Manipulation",
                "Observation"
            ],
            "computed_tags": [
                "Mathematics",
                "Algorithms"
            ],
            "problem_code_id": "XORNEY",
            "difficulty_level": "1389",
            "ai_solutions": [
                "def xor_even_odd(T, test_cases):\n    for _ in range(T):\n        L, R = test_cases[_]\n        xor = 0\n        for i in range(L, R + 1):\n            xor ^= i\n        if xor % 2 == 0:\n            print(\"Even\")\n        else:\n            print(\"Odd\")\n\nT = int(input())\ntest_cases = []\nfor _ in range(T):\n    L, R = map(int, input().split())\n    test_cases.append((L, R))\n\nxor_even_odd(T, test_cases)"
            ],
            "human_solutions": [
                {
                    "id": 39790111,
                    "submission_date": 1606137612,
                    "language": "PYTH 3",
                    "username": "heartfilia_620",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "3.67",
                    "memory": "17.5M",
                    "solution": 39790111,
                    "code": "from operator import xor\ndef find_xor(n):\n    m=n%4\n    if m==0:\n        return n\n    elif m==1:\n        return 1\n    elif m==2:\n        return n+1\n    elif m==3:\n        return 0;\nt=int(input())\nfor _ in range(t):\n    l,r=map(int,input().split())\n    t=xor(find_xor(l-1),find_xor(r))\n    if t%2==0:\n        print(\"Even\")\n    else:\n        print(\"Odd\")\n    \n"
                },
                {
                    "id": 39319760,
                    "submission_date": 1604587745,
                    "language": "PYTH 3",
                    "username": "psychopomp",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.90",
                    "memory": "17.7M",
                    "solution": 39319760,
                    "code": "import sys\nfrom sys import stdin,stdout\ndef get_int():return int(stdin.readline().strip())\ndef get_ints():return map(int,stdin.readline().strip().split())\ndef op(c):return stdout.write(c+\"\\n\") \nt=get_int()\nfor _ in range(t):\n    l,r=get_ints()\n    n=(r-l)//2\n    if (r % 2 != 0 or l % 2 != 0): \n        n += 1 \n    if n%2==0:\n        op(\"Even\")\n    else:\n        op(\"Odd\")\n    \n"
                }
            ]
        },
        "CHEFSETC": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "3\r\n1 2 0 3\r\n1 2 4 -1\r\n1 2 3 4",
                    "output": "Yes\r\nYes\r\nNo",
                    "explanation": "Example case 1. We can choose subset {0} \nExample case 2. We can choose subset {-1, 1}"
                }
            ],
            "problem_statement": "Read problems statements in Mandarin Chinese, Russian and Vietnamese as well.\nChef likes problems which using some math. Now he asks you to solve next one. You have 4 integers, Chef wondering is there non-empty subset which has sum equals 0.\nInput\nThe first line of input contains T - number of test cases. \nEach of the next T lines containing four pairwise distinct integer numbers - a, b, c, d.\nOutput\nFor each test case output \"Yes\", if possible to get 0 by choosing non-empty subset of {a, b, c, d} with sum equal 0, or \"No\" in another case.\nConstraints\n\n1 \u2264 T \u2264 103\n-106 \u2264 a, b, c, d \u2264 106",
            "input_format": "",
            "output_format": "",
            "problem_name": "Chef and Subset",
            "user_tags": [
                "Bitmasking",
                "Brute Force"
            ],
            "computed_tags": [
                "Mathematics",
                "Bit Manipulation",
                "Algorithms"
            ],
            "problem_code_id": "CHEFSETC",
            "difficulty_level": "1243",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 33309057,
                    "submission_date": 1590342410,
                    "language": "PYTH 3",
                    "username": "chandrau820",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.03",
                    "memory": "17.6M",
                    "solution": 33309057,
                    "code": "t=int(input())\r\nfor _ in range(t):\r\n    li=list(map(int,input().split()))\r\n    l=len(li)\r\n    fl=0\r\n    f=1<<l\r\n    \r\n    for i in range(1,f):\r\n        s=0\r\n        for j in range(0,l):\r\n            k=1<<j\r\n            if((i&k)!=0):\r\n                s+=li[j]\r\n        if(s==0):\r\n            fl=1\r\n            break\r\n    if(fl==1):\r\n        print('Yes')\r\n    else:\r\n        print('No')"
                },
                {
                    "id": 33193100,
                    "submission_date": 1589979619,
                    "language": "PYTH 3",
                    "username": "rishi767723882",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.02",
                    "memory": "17.6M",
                    "solution": 33193100,
                    "code": "n=16\ndef validate(l):\n    for i in range(n):\n        flag=False\n        x=0\n        for j in range(4):\n            if(i&(1<<j) !=0):\n                x+=l[j]\n                flag=True\n        if(flag and x==0):\n            return(\"Yes\")\n    return (\"No\")\n            \n        \n        \nt=int(input())\nwhile(t):\n    l=list(map(int,input().split()))\n    print(validate(l))\n    \n    t-=1\n            \n    \n"
                }
            ]
        },
        "REACTION": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "2\r\n3 3\r\n1 2 1\r\n2 3 2\r\n1 2 1\r\n3 4\r\n0 0 0 0\r\n0 0 0 0\r\n0 0 4 0",
                    "output": "Stable\r\nUnstable",
                    "explanation": "Example case 1: Each cell of the grid is stable, so the grid is stable.\nExample case 2: The cell in row $3$ and column $3$ is unstable since the number of cells adjacent to this cell is $3$."
                }
            ],
            "problem_statement": "Read problems statements in Hindi, Mandarin Chinese, Russian, Vietnamese and Bengali as well.\nYou are given a grid with $R$ rows (numbered $1$ through $R$) and $C$ columns (numbered $1$ through $C$). A cell in row $r$ and column $c$ is denoted by $(r, c)$. Two cells in the grid are adjacent if they have a common side. For each valid $i$ and $j$, there is a value $a_{i, j}$ written in cell $a_{i, j}$.\nA cell in the grid is stable if the number of cells in the grid which are adjacent to this cell is strictly greater than the value written in this cell. The whole grid is stable if all cells in the grid are stable.\nCan you determine whether the grid is stable?\nInput\n\nThe first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\nThe first line of each test case contains two space-separated integers $R$ and $C$.\n$R$ lines follow. For each $i$ ($1 \\le i \\le R$), the $i$-th of these lines contains $C$ space-separated integers $a_{i, 1}, a_{i, 2}, \\ldots, a_{i, C}$.\n\nOutput\nFor each test case, print a single line containing the string \"Stable\" if the grid is stable or \"Unstable\" if it is unstable (without quotes).\nConstraints\n\n$1 \\le T \\le 3,000$\n$3 \\le R, C \\le 10$\n$0 \\le a_{i, j} \\le 4$ for each valid $i, j$",
            "input_format": "",
            "output_format": "",
            "problem_name": "Chain Reaction",
            "user_tags": [
                "Implementation"
            ],
            "computed_tags": [
                "Algorithms"
            ],
            "problem_code_id": "REACTION",
            "difficulty_level": "1341",
            "ai_solutions": [
                "T = int(input())\nfor _ in range(T):\n    R, C = map(int, input().split())\n    grid = [list(map(int, input().split())) for _ in range(R)]\n    for i in range(R):\n        for j in range(C):\n            if (i == 0 or i == R-1) and (j == 0 or j == C-1):\n                if grid[i][j] > 2:\n                    print(\"Unstable\")\n                    break\n            elif i == 0 or i == R-1 or j == 0 or j == C-1:\n                if grid[i][j] > 3:\n                    print(\"Unstable\")\n                    break\n            elif grid[i][j] > 4:\n                print(\"Unstable\")\n                break\n        else:\n            continue\n        break\n    else:\n        print(\"Stable\")",
                "T = int(input())\nfor _ in range(T):\n    R, C = map(int, input().split())\n    grid = [list(map(int, input().split())) for _ in range(R)]\n    stable = \"Stable\"\n    for i in range(R):\n        for j in range(C):\n            if (i == 0 or i == R-1) and (j == 0 or j == C-1):\n                if grid[i][j] > 2:\n                    stable = \"Unstable\"\n                    break\n            elif i == 0 or i == R-1 or j == 0 or j == C-1:\n                if grid[i][j] > 3:\n                    stable = \"Unstable\"\n                    break\n            elif grid[i][j] > 4:\n                stable = \"Unstable\"\n                break\n        if stable == \"Unstable\":\n            break\n    print(stable)"
            ],
            "human_solutions": [
                {
                    "id": 34740299,
                    "submission_date": 1593228939,
                    "language": "PYTH 3",
                    "username": "coder_1010",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.11",
                    "memory": "17.6M",
                    "solution": 34740299,
                    "code": "for _ in range(int(input())):\n    r , c = map(int,input().split())\n    arr = []\n    for i in range(r):\n        arr.append(list(map(int,input().split())))\n    ans = \"Stable\"\n    for i in range(r):\n        for j in range(c):\n            if ((i == 0 or i == r-1) and (j == 0 or j == c-1)) :\n                if arr[i][j] > 1 :\n                    ans = \"Unstable\"\n                    break\n            elif i==0 or i==r-1 or j==0 or j==c-1 :\n                if arr[i][j] > 2 :\n                    ans = \"Unstable\"\n                    break\n            else :\n                if arr[i][j] > 3 :\n                    ans = \"Unstable\"\n                    break\n            if ans == \"Unstable\":\n                break\n    print(ans)\n   \n    \n"
                },
                {
                    "id": 34709643,
                    "submission_date": 1593086246,
                    "language": "PYTH 3",
                    "username": "jeevana15",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.10",
                    "memory": "17.6M",
                    "solution": 34709643,
                    "code": "\n\nfor _ in range(int(input())):\n    r,c = map(int, input().split())\n    flag = 0\n\n    for i in range(r):\n        lst = list(map(int,input().split()))\n        if flag == 1:\n            continue\n        else:\n            for j in range(c):\n                if i == 0 or i == r-1:\n                    if j == 0 or j == c-1:\n                        if lst[j] >= 2:\n                            flag = 1\n                    elif lst[j] >= 3:\n                        flag = 1\n                elif j == 0 or j == c-1:\n                    if lst[j] >= 3:\n                        flag = 1\n                else:\n                    if lst[j] >= 4:\n                        flag = 1\n\n    if flag == 1:\n        print(\"Unstable\")\n    else:\n        print(\"Stable\")\n\n\n\n\n\n\n\n\n"
                }
            ]
        },
        "CAMPON": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "1\n3\n10 5\n14 4\n31 1\n2\n9 2\n15 7",
                    "output": "Go Sleep\nGo Camp",
                    "explanation": "Example case 1:\n- By the end of day $9$, Jafar will not have any problem solved.\n- By the end of day $15$, Jafar will have $9$ problems solved, which is enough to go to the camp, since he needs at least $7$ problems."
                }
            ],
            "problem_statement": "Read problems statements in Hindi, Mandarin Chinese, Russian, Vietnamese and Bengali as well.\nThe Petrozavodsk camp takes place in about one month. Jafar wants to participate in the camp, but guess what? His coach is Yalalovichik.\nYalalovichik is a legendary coach, famous in the history of competitive programming. However, he is only willing to send to the camp students who solve really hard problems on Timus. He started a marathon at the beginning of December. Initially, he said that people who solve 200 or more problems by the 31-st of December may go to the camp. Jafar made a schedule for the next month. For each day, he knows how many problems he is going to solve.\nThe problem is that Yalalovichik is a really moody coach \u2014 he may wake up tomorrow and change his decision about the deadline and the number of problems that must be solved by this deadline to qualify for the camp. Jafar has $Q$ such scenarios. Now he wants to know: in each scenario, if he does not change his problem solving schedule, will he go to the camp or not?\nInput\n\nThe first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\nThe first line of each test case contains a single integer $D$ - the number of days in Jafar's schedule.\n$D$ lines follow. For each $i$ ($1 \\le i \\le D$), the $i$-th of these lines contains two space-separated integers $d_i$ and $p_i$ denoting that Jafar will solve $p_i$ problems on day $d_i$.\nThe next line contains a single integer $Q$ denoting the number of scenarios Jafar considers.\n$Q$ lines follow. For each $i$ ($1 \\le i \\le Q$), the $i$-th of these lines contains two space-separated integers $dead_i$ and $req_i$ denoting a scenario where Yalaovichik decides that students who solve $req_i$ problems by day $dead_i$ (inclusive) will go to the camp.\n\nOutput\nFor each scenario, print a single line containing the string \"Go Camp\" if Jafar is going to the camp or \"Go Sleep\" otherwise (without quotes).\nConstraints\n\n$1 \\le T \\le 100$\n$1 \\le D \\le 31$\n$1 \\le d_i \\le 31$ for each valid $i$\n$1 \\le p_i \\le 100$ for each valid $i$\n$d_1, d_2, \\ldots, d_D$ are pairwise distinct\n$1 \\le Q \\le 100$\n$1 \\le dead_i \\le 31$ for each valid $i$\n$1 \\le req_i \\le 5,000$ for each valid $i$",
            "input_format": "",
            "output_format": "",
            "problem_name": "Camp Or Not",
            "user_tags": [
                "Implementation"
            ],
            "computed_tags": [
                "Algorithms"
            ],
            "problem_code_id": "CAMPON",
            "difficulty_level": "1350",
            "ai_solutions": [
                "T = int(input())\nfor _ in range(T):\n    D = int(input())\n    dp = [0]*32\n    for _ in range(D):\n        d, p = map(int, input().split())\n        dp[d] = p\n    for i in range(1, 32):\n        dp[i] += dp[i-1]\n    Q = int(input())\n    for _ in range(Q):\n        dead, req = map(int, input().split())\n        if dp[dead] >= req:\n            print(\"Go Camp\")\n        else:\n            print(\"Go Sleep\")",
                "def solve():\n    D = int(input())\n    dp = [0]*32\n    for _ in range(D):\n        d, p = map(int, input().split())\n        dp[d] = p\n    for i in range(1, 32):\n        dp[i] += dp[i-1]\n    Q = int(input())\n    for _ in range(Q):\n        dead, req = map(int, input().split())\n        if dp[dead] >= req:\n            print(\"Go Camp\")\n        else:\n            print(\"Go Sleep\")\n\nT = int(input())\nfor _ in range(T):\n    solve()"
            ],
            "human_solutions": [
                {
                    "id": 34920649,
                    "submission_date": 1593660173,
                    "language": "PYTH 3",
                    "username": "manishreddy_l",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.09",
                    "memory": "17.6M",
                    "solution": 34920649,
                    "code": "for _ in range(int(input())):\n    t=int(input())\n    p=[]\n    for i in range(t):\n        a,b=map(int,input().split())\n        p.append([a,b])\n    p=sorted(p)\n    for j in range(t-1):\n        p[j+1][1]+=p[j][1]\n    q=int(input())\n    for m in range(q):\n        flag=0\n        dead1,req1=map(int,input().split())\n        for k in p:\n            if k[0]<=dead1:\n                if req1<=k[1]:\n                    flag=1\n        if flag==1:\n            print('Go Camp')\n        else:\n            print('Go Sleep')"
                },
                {
                    "id": 34838730,
                    "submission_date": 1593335878,
                    "language": "PYTH 3",
                    "username": "kanchan_singh",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.07",
                    "memory": "17.6M",
                    "solution": 34838730,
                    "code": "for t in range(int(input())):\n    c=[0]*31\n    for i in range(int(input())):\n        d,p=map(int,input().split())\n        c[d-1]=p\n    for i in range(int(input())):\n        dead,req=map(int,input().split())\n        s=c[0:dead]\n        if sum(s)<req:\n            print(\"Go Sleep\")\n        else:\n            print(\"Go Camp\")"
                }
            ]
        },
        "LCOLLIS": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "2\n4 3\n111\n100\n110\n000\n2 2\n10\n01",
                    "output": "4\n0",
                    "explanation": "Example Case 1. All three boys like the first girl, so there are (1, 2, 1), (1, 3, 1), (2, 3, 1) collisions with her. Boys 1 and 3 both like the second girl so this is one more collision. Only one boy likes the third girl, so there are no collisions with her and thus we have 4 collisions total.\nExample Case 2. For each girl there is only one boy who likes her, so there are no collisions at all."
                }
            ],
            "problem_statement": "Read problems statements in Mandarin Chinese, Russian and Vietnamese as well.\nOnce N boys and M girls attended a party. You are given a matrix A of N rows and M columns where Aij is 1 if the i-th boy likes the j-th girl, otherwise it will be 0. Note that it is not necessary that if a boy x likes girl y, then girl y should like boy x.\nYou know that if there are two different boys x and y, who both like girl z, then there will be a collision.\nCan you calculate the number of different collisions at this party? Note that order of boys in the collision doesn't matter.\nInput\nThe first line contains a single integer T denoting the number of test cases. Then T test cases follow.\nThe first line of each test case contains two space separated integers N, M denoting the number of boys and girls, respectively.\nEach of the following N lines contain M characters, each of them is either '0' or '1'.\nOutput\nFor each test case output a single line containing an integer corresponding to the number of collisions at the party.\nConstraints\n\n1 \u2264 T \u2264 100\n1 \u2264 N, M \u2264 10",
            "input_format": "",
            "output_format": "",
            "problem_name": "Collisions",
            "user_tags": [
                "Brute Force",
                "Implementation"
            ],
            "computed_tags": [
                "Algorithms"
            ],
            "problem_code_id": "LCOLLIS",
            "difficulty_level": "1352",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 32854756,
                    "submission_date": 1588917529,
                    "language": "PYTH 3",
                    "username": "yogeshwarreddy",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.02",
                    "memory": "17.6M",
                    "solution": 32854756,
                    "code": "t=int(input())\nfor _ in range(t):\n    n,m=map(int,input().split())\n    c=[0]*m\n    for i in range(n):\n        x=input()\n        for k in range(m):\n            if x[k]=='1':\n                c[k]+=1\n    sum1=0\n    for i in range(m):\n        if c[i]>1:\n            sum1+=(c[i]*(c[i]-1)//2)\n    print(sum1)"
                },
                {
                    "id": 32851814,
                    "submission_date": 1588911511,
                    "language": "PYTH 3",
                    "username": "kamma_sairam",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.01",
                    "memory": "17.6M",
                    "solution": 32851814,
                    "code": "t=int(input())\nfor i in range(t):\n    n,m=[int(x) for x in input().split()]\n    l=[0]*m\n    for x in range(n):\n        z=input()\n        for y in range(m):\n            if z[y]=='1':\n                l[y]+=1 \n    a=0\n    #print(l)\n    for x in range(m):\n        if (l[x]>1):\n         a=a+((l[x]*(l[x]-1))//2)\n         #print(a)\n    print(a)    "
                }
            ]
        },
        "DAILY": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "1 3\n100101110000001011000001111110010011110010010111000101\n001010000000101111100000000000000111101010101111111010\n011110011110000001010100101110001011111010001001111010",
                    "output": "85",
                    "explanation": "In the first test case, any of the free places can be sold."
                },
                {
                    "input": "6 3\n100101110000001011000001111110010011110010010111000101\n001010000000101111100000000000000111101010101111111010\n011110011110000001010100101110001011111010001001111010",
                    "output": "1",
                    "explanation": "In the second test case, the only free compartment in the train is compartment 3 in the first car (places 9, 10, 11, 12, 49 and 50 are all free)."
                },
                {
                    "input": "3 2\n000000000000000000000000000000000000000000000000000000\n000000000000000000000000000000000000000000000000000000",
                    "output": "360",
                    "explanation": "In the third test case, the train is still absolutely free; as there are 20 ways to sell 3 tickets in an empty compartment, the answer is 2 * 9 * 20 = 360."
                }
            ],
            "problem_statement": "A daily train consists of N cars. Let's consider one particular car. It has 54 places numbered consecutively from 1 to 54, some of which are already booked and some are still free. The places are numbered in the following fashion:\n\nThe car is separated into 9 compartments of 6 places each, as shown in the picture. So, the 1st compartment consists of places 1, 2, 3, 4, 53 and 54, the 2nd compartment consists of places 5, 6, 7, 8, 51 and 52, and so on.\n\n\nA group of X friends wants to buy tickets for free places, all of which are in one compartment (it's much funnier to travel together). You are given the information about free and booked places in each of the N cars. Find the number of ways to sell the friends exactly X tickets in one compartment (note that the order in which the tickets are sold doesn't matter).\n\n\nInput\nThe first line of the input contains two integers X and N (1 \u2264 X \u2264 6, 1 \u2264 N \u2264 10) separated by a single space. Each of the following N lines contains the information about one car which is a string of length 54 consisting of '0' and '1'. The i-th character (numbered from 1) is '0' if place i in the corresponding car is free, and is '1' if place i is already booked.\n\n\nOutput\nOutput just one integer -- the requested number of ways.",
            "input_format": "",
            "output_format": "",
            "problem_name": "Daily Train",
            "user_tags": [
                "String",
                "Combinatorics",
                "Implementation"
            ],
            "computed_tags": [
                "Data Structures",
                "Mathematics",
                "Algorithms"
            ],
            "problem_code_id": "DAILY",
            "difficulty_level": "1222",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 32427641,
                    "submission_date": 1588170910,
                    "language": "PYTH 3",
                    "username": "shanu_26",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.02",
                    "memory": "17.6M",
                    "solution": 32427641,
                    "code": "import math\nX,N=map(int,input().split())\nempty_spaces=0\nfor i in range(N):\n    car=list(map(int,input()))\n    car.insert(0,-1)\n    for j in range(9):\n        empty_in_comp=0\n        for k in range(1,5):\n            if(car[j*4+k]==0):\n                empty_in_comp+=1\n        for k in range(2):\n            if(car[54-2*j-k]==0):\n                empty_in_comp+=1\n        if(empty_in_comp>=X):\n            empty_spaces+=math.factorial(empty_in_comp)/math.factorial(empty_in_comp-X)/math.factorial(X)\nprint(int(empty_spaces))"
                },
                {
                    "id": 30700527,
                    "submission_date": 1585028036,
                    "language": "PYTH 3",
                    "username": "mickey9620",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.02",
                    "memory": "17.6M",
                    "solution": 30700527,
                    "code": "import math\r\nn,m = map(int,input().split())\r\nl = []\r\nans = 0\r\n\r\nfor i in range(m):\r\n    t = 0\r\n    s = str(input())\r\n    for j in range(0,36,4):\r\n        a = s[j:j+4]\r\n        a+=s[53-t]\r\n        a+=s[53-t-1]\r\n        l.append(a)\r\n        t+=2\r\n\r\n    for x in range(9*i,9*i+9):\r\n        s = l[x]\r\n        c = s.count(\"0\")\r\n        if c>=n:\r\n            cnt = math.factorial(c)//(math.factorial(n)*math.factorial(c-n))\r\n            ans+=cnt\r\n        \r\n\r\nprint(ans)\r\n        \r\n    "
                }
            ]
        },
        "EATTWICE": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "2\n3 6\n5 7\n1 9\n2 5\n3 7\n5 8\n2 5\n5 10",
                    "output": "16\n15",
                    "explanation": "Example case 1: The optimal solution is to try dishes $1$ and $2$.\nExample case 2: The optimal solution is to try dishes $2$ and $3$."
                }
            ],
            "problem_statement": "Read problems statements in Hindi, Mandarin Chinese, Russian, Vietnamese, and Bengali as well.\nHasan has recently heard about Chef's restaurant, which serves the tastiest dishes. The restaurant has published a list of $N$ dishes (numbered $1$ through $N$) that will be served in the next $M$ days. For each valid $i$, the $i$-th dish will be served only on the $D_i$-th day. Hasan has investigated their tastiness and he knows that for each valid $i$, the $i$-th dish has tastiness $V_i$.\nHasan's budget is only large enough to try two dishes. He wants to choose these two dishes in such a way that their total (summed up) tastiness is as large as possible. However, he cannot try 2 dishes on the same day.\nHelp Hasan and calculate the maximum possible total tastiness of the dishes he should try.\nInput\n\nThe first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\nThe first line of each test case contains two space-separated integers $N$ and $M$.\n$N$ lines follow. For each valid $i$, the $i$-th of these lines contains two space-separated integers $D_i$ and $V_i$.\n\nOutput\nFor each test case, print a single line containing one integer \u2014 the maximum total tastiness.\nConstraints\n\n$1 \\le T \\le 1,000$\n$2 \\le N, M \\le 10^5$\n$1 \\le D_i \\le M$ for each valid $i$\n$1 \\le V_i \\le 10^9$ for each valid $i$\nthere are at least two dishes that are served on different days\nthe sum of $N$ over all test cases does not exceed $10^6$\nthe sum of $M$ over all test cases does not exceed $10^6$",
            "input_format": "",
            "output_format": "",
            "problem_name": "Eat Twice",
            "user_tags": [
                "Greedy",
                "Implementation"
            ],
            "computed_tags": [
                "Algorithms"
            ],
            "problem_code_id": "EATTWICE",
            "difficulty_level": "1370",
            "ai_solutions": [
                "def max_tastiness(T, test_cases):\n    for _ in range(T):\n        N, M, dishes = test_cases[_]\n        days = [0]*(M+1)\n        for i in range(N):\n            D, V = dishes[i]\n            days[D] = max(days[D], V)\n        days.sort()\n        print(days[-1] + days[-2])\n\nT = int(input())\ntest_cases = []\nfor _ in range(T):\n    N, M = map(int, input().split())\n    dishes = [list(map(int, input().split())) for _ in range(N)]\n    test_cases.append((N, M, dishes))\nmax_tastiness(T, test_cases)",
                "def max_tastiness(T, test_cases):\n    for _ in range(T):\n        N, M, dishes = test_cases[_]\n        days = [0]*(M+1)\n        for i in range(N):\n            D, V = dishes[i]\n            days[D] = max(days[D], V)\n        max1 = max(days)\n        days.remove(max1)\n        max2 = max(days)\n        print(max1 + max2)\n\nT = int(input())\ntest_cases = []\nfor _ in range(T):\n    N, M = map(int, input().split())\n    dishes = [list(map(int, input().split())) for _ in range(N)]\n    test_cases.append((N, M, dishes))\nmax_tastiness(T, test_cases)"
            ],
            "human_solutions": [
                {
                    "id": 34467107,
                    "submission_date": 1592316064,
                    "language": "PYTH 3",
                    "username": "d_coder17",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "1.98",
                    "memory": "17.6M",
                    "solution": 34467107,
                    "code": "try:\n    for i in range(int(input())):\n        n,m = map(int,input().split())\n        l = {}\n        for j in range(0,n):\n            d,v =  map(int,input().split())\n            if(d in l.keys()):\n                g = l[d]\n                if(g<v):\n                    l[d] = v \n            else:\n                l[d] = v\n        f = sorted(l.values()) \n        s = f[-1]+f[-2]\n        print(s)\nexcept EOFError as e:\n    pass\n"
                },
                {
                    "id": 33405134,
                    "submission_date": 1590694064,
                    "language": "PYTH 3",
                    "username": "msd7at",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "1.82",
                    "memory": "17.6M",
                    "solution": 33405134,
                    "code": "t=int(input())\r\nfor q in range(t):\r\n  n,m=map(int,input().split())\r\n  l=[0]*(m+1)\r\n  for i in range(n):\r\n    d,v=map(int,input().split())\r\n    if l[d]<v:\r\n        l[d]=v\r\n  l.sort(reverse=True)\r\n  print(l[0]+l[1])\r\n        \r\n    \r\n        \r\n    \r\n  "
                }
            ]
        },
        "ADASTAIR": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "1\r\n4 3\r\n2 4 8 16",
                    "output": "3",
                    "explanation": ""
                }
            ],
            "problem_statement": "Read problems statements in Hindi, Spanish, Mandarin chinese, Russian, Vietnamese and Bengali as well.\nThere is a big staircase with $N$ steps (numbered $1$ through $N$) in ChefLand. Let's denote the height of the top of step $i$ by $h_i$. Chef Ada is currently under the staircase at height $0$ and she wants to reach the top of the staircase (the top of the last step). However, she can only jump from height $h_i$ to the top of a step at height $h_f$ if $h_f-h_i \\le K$. To help Ada, we are going to construct some intermediate steps; each of them may be constructed between any two steps, or before the first step, and have any height. What is the minimum number of steps that need to be added to the staircase so that Ada could reach the top?\nInput\n\nThe first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\nThe first line of each test case contains two space-separated integers $N$ and $K$.\nThe second line contains $N$ space-seperated integers $h_1, h_2, \\dots, h_N$.\n\nOutput\nFor each test case, print a single line containing one integer \u2014 the minimum required number of steps.\nConstraints\n\n$1 \\le T \\le 64$\n$1 \\le N \\le 128$\n$1 \\le K \\le 1,024$\n$1 \\le h_i \\le 1,024$ for each valid $i$\n$h_i \\lt h_{i+1}$ for each valid $i$",
            "input_format": "",
            "output_format": "",
            "problem_name": "Ada and the Staircase",
            "user_tags": [
                "Basic Maths",
                "Implementation"
            ],
            "computed_tags": [
                "Mathematics",
                "Algorithms"
            ],
            "problem_code_id": "ADASTAIR",
            "difficulty_level": "1320",
            "ai_solutions": [
                "T = int(input())\nfor _ in range(T):\n    N, K = map(int, input().split())\n    h = list(map(int, input().split()))\n    steps = 0\n    for i in range(1, N):\n        steps += (h[i] - h[i-1] - 1) // K\n    print(steps)",
                "def min_steps(T, test_cases):\n    for _ in range(T):\n        N, K, h = test_cases[_]\n        steps = 0\n        for i in range(1, N):\n            steps += (h[i] - h[i-1] - 1) // K\n        print(steps)\n\nT = int(input())\ntest_cases = []\nfor _ in range(T):\n    N, K = map(int, input().split())\n    h = list(map(int, input().split()))\n    test_cases.append((N, K, h))\nmin_steps(T, test_cases)"
            ],
            "human_solutions": [
                {
                    "id": 39220911,
                    "submission_date": 1604156941,
                    "language": "PYTH 3",
                    "username": "shreya0610",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.01",
                    "memory": "17.5M",
                    "solution": 39220911,
                    "code": "t=int(input())\nfor i in range(t):\n    n,k=map(int,input().split())\n    s=list(map(int,input().split()))\n    curr=0\n    count=0\n    for i in range(n):\n        count += (s[i]-curr-1)//k\n        curr=s[i]\n    print(count)"
                },
                {
                    "id": 39182799,
                    "submission_date": 1603982511,
                    "language": "PYTH 3",
                    "username": "shyam_vikram11",
                    "user_rating_star": 3,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.01",
                    "memory": "17.5M",
                    "solution": 39182799,
                    "code": "t=int(input())\r\nfor i in range(t):\r\n    n,k=map(int,input().split())\r\n    s=list(map(int,input().split()))\r\n    curr=0\r\n    count=0\r\n    for i in range(n):\r\n        count += (s[i]-curr-1)//k\r\n        curr=s[i]\r\n    print(count)"
                }
            ]
        },
        "VILLINE": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "3\n1 0\n0 5 5\n0 6 5\n0 -8 20",
                    "output": "20",
                    "explanation": ""
                }
            ],
            "problem_statement": "WW3 is near and Gru wants to recruit minions for his team. Gru went to the planet of minions to recruit minions, he saw that there are two villages separated by a river. He cannot recruit minions from both villages because then his team will have internal conflicts. \nGru is now in a dilemma about which village to recruit as he wants to have the strongest possible team.\nYou are given coordinates of houses on the planet. Each house has exactly one minion and his power is given. The planet of minion is considered as a 2-D plane and the river is denoted by a straight line ( $y=mx+c$ ). \n$Note:$ None of the houses are situated on the river.\nInput:\n\nFirst-line will contain $N$, number of houses. \nSecond-line will contain two integers, $m$ and $c$ denoting the river.\nNext $N$ lines will have exactly 3 integers $X[i], Y[i], P[i]$ denoting the coordinates of houses and the power of minion in that house \n\nOutput:\n\nPrint the maximum power of the team which Gru can recruit.\n\nConstraints\n\n$1 \\leq N \\leq 10^5$\n$-10^4 \\leq m,c \\leq 10^4$\n$-10^4 \\leq X[i], Y[i] \\leq 10^4$\n$ 1 \\leq P[i] \\leq 10^4$",
            "input_format": "",
            "output_format": "",
            "problem_name": "Recruit Villagers",
            "user_tags": [
                "Geometry"
            ],
            "computed_tags": [
                "Mathematics"
            ],
            "problem_code_id": "VILLINE",
            "difficulty_level": "1270",
            "ai_solutions": [
                "N = int(input())\nm, c = map(int, input().split())\nvillage1, village2 = 0, 0\nfor _ in range(N):\n    x, y, p = map(int, input().split())\n    if y > m * x + c:\n        village1 += p\n    else:\n        village2 += p\nprint(max(village1, village2))",
                "def max_power(N, m, c, houses):\n    village1, village2 = 0, 0\n    for house in houses:\n        x, y, p = house\n        if y > m * x + c:\n            village1 += p\n        else:\n            village2 += p\n    return max(village1, village2)\n\nN = int(input())\nm, c = map(int, input().split())\nhouses = [list(map(int, input().split())) for _ in range(N)]\nprint(max_power(N, m, c, houses))"
            ],
            "human_solutions": [
                {
                    "id": 1026877561,
                    "submission_date": 1698065675,
                    "language": "PYTH 3",
                    "username": "codingcat34",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.19",
                    "memory": "8.5M",
                    "solution": 1026877561,
                    "code": "n = int(input())\r\na = input().split()\r\nm = int(a[0])\r\nc = int(a[1])\r\n\r\nt1 = 0\r\nt2 = 0\r\nfor _ in range(n):\r\n    b = [int(s) for s in input().split()]\r\n    x = b[0]\r\n    y = b[1]\r\n    p = b[2]\r\n    if y > m*x + c:\r\n        t1 = t1 + p\r\n    else:\r\n        t2 = t2 + p\r\nprint(max(t1,t2))"
                },
                {
                    "id": 1026636932,
                    "submission_date": 1697861956,
                    "language": "PYTH 3",
                    "username": "charan_49",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.18",
                    "memory": "8.5M",
                    "solution": 1026636932,
                    "code": "ll=int(input())\r\nl=list(map(int,input().split()))\r\nc=0\r\nc1=0\r\nfor i in range(ll):\r\n    x=list(map(int,input().split()))\r\n    if l[0]*x[0]+l[1]-x[1]>0:\r\n            c=c+x[2]\r\n    elif l[0]*x[0]+l[1]-x[1]<0:\r\n            c1=c1+x[2]\r\nif c>c1:\r\n        print(c)\r\nelse:\r\n        print(c1)"
                }
            ]
        },
        "KINGSHIP": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "2\n2\n5 10\n4\n15 10 7 13",
                    "output": "50\n266",
                    "explanation": ""
                }
            ],
            "problem_statement": "Read problems statements in Mandarin Chinese and Russian as well.\nChef is the new king of the country Chefland. As first and most important responsibility he wants to reconstruct the road system of Chefland. There are N (1 to N) cities in the country and each city i has a population Pi. Chef wants to build some bi-directional roads connecting different cities such that each city is connected to every other city (by a direct road or through some other intermediate city) and starting from any city one can visit every other city in the country through these roads. Cost of building a road between two cities u and v is Pu x Pv. Cost to build the road system is the sum of cost of every individual road that would be built. \nHelp king Chef to find the minimum cost to build the new road system in Chefland such that every city is connected to each other.\nInput\nThe first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. \nFirst line contains an integer N denoting the number of cities in the country. Second line contains N space separated integers Pi, the population of i-th city.\nOutput\nFor each test case, print a single integer, the minimum cost to build the new road system on separate line.\nConstraints\n1 \u2264 T \u2264 10\n1 \u2264 N \u2264 105\n1 \u2264 Pi \u2264 106",
            "input_format": "",
            "output_format": "",
            "problem_name": "Chef and Kingship",
            "user_tags": [
                "Sorting"
            ],
            "computed_tags": [
                "Algorithms"
            ],
            "problem_code_id": "KINGSHIP",
            "difficulty_level": "1386",
            "ai_solutions": [
                "T = int(input())\nfor _ in range(T):\n    N = int(input())\n    P = list(map(int, input().split()))\n    P.sort()\n    print(sum(P[i]*P[0] for i in range(1, N)))",
                "T = int(input())\nfor _ in range(T):\n    N = int(input())\n    P = sorted(map(int, input().split()))\n    print(sum(P[i]*P[0] for i in range(1, N)))"
            ],
            "human_solutions": [
                {
                    "id": 37026358,
                    "submission_date": 1597942789,
                    "language": "PYTH 3",
                    "username": "ayan_codechef",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.31",
                    "memory": "22.1M",
                    "solution": 37026358,
                    "code": "t=int(input())\nfor k in range(t):\n    n=int(input())\n    p=list(map(int, input().split()))[:n]\n    x=min(p)\n    sum=0\n    for i in p:\n        y=i*x\n        sum=sum+y\n    new_sum=sum-(x*x)\n    print(new_sum)\n        \n    "
                },
                {
                    "id": 36100027,
                    "submission_date": 1596041379,
                    "language": "PYTH 3",
                    "username": "shikharsingh",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.49",
                    "memory": "19.1M",
                    "solution": 36100027,
                    "code": "#two options to solve this questions, first one is to assume the cities are nodes and form every possible vector\n#edge as roads between the cities and find the MST of that graph\n#Other approach is that the cost will be minimum if the minimum element of the cost is multiplied with every other one and added\n\ntest = int(input())\nfor _ in range(test):\n    cities = int(input())\n    array = sorted(list(map(int, input().split())))\n    multiply = array[0]\n    total=sum(array[1:])\n    print(total*multiply)"
                }
            ]
        },
        "HELPLIRA": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "2\n0 0 0 100 100 0\n1 1 1 5 5 1",
                    "output": "2 1",
                    "explanation": ""
                }
            ],
            "problem_statement": "Read problems statements in Mandarin Chinese here\nProblem Statement\nLira is a little girl form Bytenicut, a small and cozy village located in the country of Byteland.\n\u00a0As the village is located on a somewhat hidden and isolated area, little Lira is a bit lonely and she needs to invent new games that she can play for herself.\n However, Lira is also very clever, so, she already invented a new game. \nShe has many stones with her, which she will display on groups of three stones on the ground on a triangle like shape and then, she will select two triangles, one with the smallest area and one with the largest area as the most beautiful ones.\nWhile it's easy for Lira to \"estimate\" the areas of the triangles by their relative sizes, it's harder for her to actually calculate these areas.\nBut, it turns out, that Lira is also friends with YOU, an exceptional Mathematics student, and she knew that you would know exactly how to do such verification.\nLira also numbered the triangles from 1 to N, and now she wants to know the indices of the triangles with the smallest and largest area respectively.\nIt is now up to you, to help Lira and calculate the areas of the triangles and output their numbers.\nInput\nThe first line of the input file contains an integer, N, denoting the number of triangles on the given input file.\nThen N lines follow, each line containing six space-separated integers, denoting the coordinates x1, y1, x2, y2, x3, y3\nOutput\nYou should output two space separated integers, the indexes of the triangles with the smallest and largest area, respectively.\nIf there are multiple triangles with the same area, then the last index should be printed.\nConstraints\n2 \u2264 N \u2264 100\n-1000 \u2264  xi, yi \u2264 1000",
            "input_format": "",
            "output_format": "",
            "problem_name": "Helping Lira",
            "user_tags": [
                "Basic Maths",
                "Geometry"
            ],
            "computed_tags": [
                "Mathematics"
            ],
            "problem_code_id": "HELPLIRA",
            "difficulty_level": "1270",
            "ai_solutions": [
                "def calculate_area(x1, y1, x2, y2, x3, y3):\n    return abs((x1*(y2-y3) + x2*(y3-y1) + x3*(y1-y2))/2)\n\nN = int(input())\nareas = []\nfor i in range(N):\n    x1, y1, x2, y2, x3, y3 = map(int, input().split())\n    areas.append(calculate_area(x1, y1, x2, y2, x3, y3))\n\nmin_area = min(areas)\nmax_area = max(areas)\n\nprint(areas.index(min_area) + 1, areas.index(max_area) + 1)",
                "def calculate_area(x1, y1, x2, y2, x3, y3):\n    return abs((x1*(y2-y3) + x2*(y3-y1) + x3*(y1-y2))/2)\n\nN = int(input())\nareas = []\nfor i in range(N):\n    x1, y1, x2, y2, x3, y3 = map(int, input().split())\n    areas.append(calculate_area(x1, y1, x2, y2, x3, y3))\n\nmin_area = max_area = areas[0]\nmin_index = max_index = 1\n\nfor i in range(1, N):\n    if areas[i] <= min_area:\n        min_area = areas[i]\n        min_index = i + 1\n    if areas[i] >= max_area:\n        max_area = areas[i]\n        max_index = i + 1\n\nprint(min_index, max_index)"
            ],
            "human_solutions": [
                {
                    "id": 34684032,
                    "submission_date": 1592993460,
                    "language": "PYTH 3",
                    "username": "nishtha_28",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.02",
                    "memory": "17.5M",
                    "solution": 34684032,
                    "code": "\ntry:\n    def area():\n    \tn=int(input())\n    \tb=[]\n    \tfor i in range(n):\n    \t\tx1,y1,x2,y2,x3,y3=map(int,input().split())\n    \t\tm=abs(0.5 * (((x2-x1)*(y3-y1))-((x3-x1)*(y2-y1))))\n    \t\tb.append(m)\n    \tp=[i for i, j in enumerate(b) if j == max(b)]\n    \tq=[i for i, j in enumerate(b) if j == min(b)]\n    \tprint(q[-1]+1,p[-1]+1)\n    area()\nexcept:\n    pass\n\n"
                },
                {
                    "id": 33100610,
                    "submission_date": 1589553056,
                    "language": "PYTH 3",
                    "username": "aman_ravan02",
                    "user_rating_star": 3,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.02",
                    "memory": "17.6M",
                    "solution": 33100610,
                    "code": "n=int(input())\r\nz=[]\r\nfor i in range(n):\r\n    x1,y1,x2,y2,x3,y3=map(int,input().split())\r\n    a=abs((x1*(y2-y3)+x2*(y3-y1)+x3*(y1-y2))/2)\r\n    z.append(a)\r\nx,y=[],[]\r\ne=max(z)\r\nf=min(z)\r\nfor i in range(len(z)):\r\n    if(z[i]==e):\r\n        x.append(i+1)\r\n    if(z[i]==f):\r\n        y.append(i+1)\r\nprint(y[-1],x[-1])"
                }
            ]
        },
        "CHCUBE": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "2\r\nblue yellow green orange black green\r\ngreen yellow green orange black green",
                    "output": "NO\r\nYES",
                    "explanation": "Example case 1.\nThere are no three sides with the same color.\n\nExample case 2.\nIn this test case, the front, bottom and left sides are green (see picture)."
                }
            ],
            "problem_statement": "Read problems statements in Mandarin Chinese  and Russian.\nOne day, Chef found a cube which has each of its sides painted in some color out of black, blue, red, green, yellow and orange.\nNow he asks you to check if he can choose three sides such that they are pairwise adjacent and painted in the same color.\nInput\n\nThe first line of the input contains an integer T denoting the number of test cases.\nA single line of each test case contains six words denoting the colors of painted sides in the order: front, back, left, right, top and bottom, respectively.\n\nOutput\nFor each test case, output a single line containing the word \"YES\" or \"NO\" (without quotes) corresponding to the answer of the problem.\nConstraints\n\n1 \u2264 T \u2264  50000 \nEach color will be from the list {\"black\", \"blue\", \"red\", \"green\", \"yellow\", \"orange\"}\n\nSubtasks\nSubtask 1: (25 points)\n\n1 \u2264 T \u2264  12000 \nFor each test case there will be at most three different colors\n\n\u00a0\nSubtask 2: (75 points)\n\nOriginal constraints",
            "input_format": "",
            "output_format": "",
            "problem_name": "Chef and Cube",
            "user_tags": [
                "Case work",
                "Implementation"
            ],
            "computed_tags": [
                "Special",
                "Algorithms"
            ],
            "problem_code_id": "CHCUBE",
            "difficulty_level": "1320",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 47290551,
                    "submission_date": 1622525796,
                    "language": "PYTH 3",
                    "username": "codetilldawn07",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.28",
                    "memory": "17.5M",
                    "solution": 47290551,
                    "code": "def check(s1,s2,s3):\n    if(s1==s2 and s2==s3 and s3==s1):\n        return True\n    else:\n        return False\nfor _ in range(int(input())):\n    f,b,l,r,t,bo = input().split()\n    if(check(f, t, l) or check(f, t, r) or check(f,bo, l) or check(f,bo, r) or check(b, t, l) or check(b, t, r) or check(b, bo, l) or check(b, bo, r)):\n        print(\"YES\")\n    else:\n        print(\"NO\")"
                },
                {
                    "id": 39795158,
                    "submission_date": 1606146513,
                    "language": "PYTH 3",
                    "username": "vittal_161",
                    "user_rating_star": 3,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.30",
                    "memory": "17.5M",
                    "solution": 39795158,
                    "code": "from collections import *\nfor u in range(int(input())):\n    l=input().split()\n    C=l\n    if C[0]==C[2]==C[4] or C[0]==C[2]==C[5] or C[0]==C[3]==C[4] or C[0]==C[3]==C[5] or C[1]==C[2]==C[4] or C[1]==C[2]==C[5] or C[1]==C[3]==C[4] or C[1]==C[3]==C[5]:  \n        print('YES')\n    else:\n        print('NO')        "
                }
            ]
        },
        "NUMCOMP": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "2\r\n3 4 5\r\n-3 2 4",
                    "output": "2\r\n1",
                    "explanation": "Example case 1: $a^n = 243$ and $b^n = 1024$.\nExample case 2: $a^n = 81$ and $b^n = 16$."
                }
            ],
            "problem_statement": "Read problems statements in Mandarin chinese, Russian  and Vietnamese as well.\nDanya gave integers $a$, $b$ and $n$ to Archi. Archi wants to compare $a^n$ and $b^n$. Help Archi with this task.\nInput\n\nThe first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\nThe first and only line of each test case contains three space-separated integers $a$, $b$ and $n$.\n\nOutput\nFor each test case, print a single line containing one integer: $1$ if $a^n > b^n$, $2$ if $a^n < b^n$ or $0$ if $a^n = b^n$.\nConstraints\n\n$1 \\le T \\le 1,000$\n$|a|, |b| \\le 10^9$\n$1 \\le n \\le 10^9$",
            "input_format": "",
            "output_format": "",
            "problem_name": "Archi and Comparsion",
            "user_tags": [
                "Conditional Statements",
                "Basic Maths"
            ],
            "computed_tags": [
                "Basic Programming Concepts",
                "Mathematics"
            ],
            "problem_code_id": "NUMCOMP",
            "difficulty_level": "1320",
            "ai_solutions": [
                "T = int(input())\nfor _ in range(T):\n    a, b, n = map(int, input().split())\n    if a**n > b**n:\n        print(1)\n    elif a**n < b**n:\n        print(2)\n    else:\n        print(0)"
            ],
            "human_solutions": [
                {
                    "id": 29288873,
                    "submission_date": 1580582327,
                    "language": "PYTH 3",
                    "username": "tozo1234",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.02",
                    "memory": "17.6M",
                    "solution": 29288873,
                    "code": "for i in range(int(input())):\r\n\ta,b,n=map(int,input().split())\r\n\tif n%2 ==0:\r\n\t\ta=abs(a)\r\n\t\tb=abs(b)\r\n\t\tif a>b:\r\n\t\t\tprint(1)\r\n\t\telif a<b:\r\n\t\t\tprint(2)\r\n\t\telse:\r\n\t\t\tprint(0)\r\n\telse:\r\n\t\tif a < b:\r\n\t\t\tprint(2)\r\n\t\telif a > b:\r\n\t\t\tprint(1)\r\n\t\telse:\r\n\t\t\tprint(0)"
                },
                {
                    "id": 29012520,
                    "submission_date": 1579176875,
                    "language": "PYTH 3",
                    "username": "glaxmisainath",
                    "user_rating_star": 3,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.01",
                    "memory": "17.6M",
                    "solution": 29012520,
                    "code": "t=int(input())\nfor i in range(t):\n    a,b,n=list(map(int,input().split()))\n    if (n%2)==0:\n        if abs(a)>abs(b):\n            print(1)\n        elif abs(a)<abs(b):\n            print(2)\n        else:\n            print(0)\n            \n    else:\n        if a>b:\n            print(1)\n        elif a<b:\n            print(2)\n        else:\n            print(0)    \n      \n\n        "
                }
            ]
        },
        "LIKECS01": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "4\nlikecs\nvenivedivici\nbhuvan\ncodechef",
                    "output": "no\nyes\nno\nyes",
                    "explanation": "In test case 2, one of the possible equal subsequence is \"vi\" and \"vi\". (one at position {0, 3} and other at {4, 7}, assuming 0-based indexing).\nIn test case 4, one of the possible equal subsequence is \"ce\" and \"ce\". (one at position {0, 3} and other at {4, 6}, assuming 0-based indexing)."
                }
            ],
            "problem_statement": "Read problems statements Mandarin chinese, in Russian and Vietnamese as well.\nChef Tobby is playing a rapid fire with Bhuvan. He gives Bhuvan a string S and each time, Bhuvan has to guess whether there exists 2 equal subsequences in the string or not.\nBhuvan got a perfect score in the game with Chef Tobby. However, Chef Tobby has now asked Bhuvan to write a program that will do this automatically given a string S. Bhuvan is an intelligent man but he does not know how to write a code. Can you help him?\nFind two different subsequences such that they are equal in their value, more formally, find two sequences of indices (a1, a2, ..., ak-1, ak) and (b1, b2, ..., bk-1, bk) such that:\n\n\n1\u2264 ai, bi \u2264 |S|\nai i+1 for all valid i\nbi i+1 for all valid i\nSai = Sbi for all valid i\nthere exist at least one i such that ai is not equal to bi\n\nInput section\nThe first line contains T, the number of test cases.\nEach of the next T lines contain one string S each.\nInput will only consist of lowercase english characters\n\n\nOutput section\nFor each test case, output \"yes\" or \"no\" (without quotes) as the solution to the problem.\nInput constraints\n\n1 \u2264 T \u2264 1000\n1 \u2264 length of S \u2264 100",
            "input_format": "",
            "output_format": "",
            "problem_name": "Subsequence Equality",
            "user_tags": [
                "Observation",
                "Brute Force"
            ],
            "computed_tags": [
                "Algorithms"
            ],
            "problem_code_id": "LIKECS01",
            "difficulty_level": "1363",
            "ai_solutions": [
                "def find_subsequence(T, strings):\n    for _ in range(T):\n        S = strings[_]\n        if len(S) != len(set(S)):\n            print(\"yes\")\n        else:\n            print(\"no\")\n\nT = int(input())\nstrings = []\nfor _ in range(T):\n    strings.append(input())\nfind_subsequence(T, strings)",
                "def find_subsequence(T, strings):\n    for _ in range(T):\n        S = strings[_]\n        if any(S.count(char) > 1 for char in S):\n            print(\"yes\")\n        else:\n            print(\"no\")\n\nT = int(input())\nstrings = []\nfor _ in range(T):\n    strings.append(input())\nfind_subsequence(T, strings)"
            ],
            "human_solutions": [
                {
                    "id": 34503409,
                    "submission_date": 1592479759,
                    "language": "PYTH 3",
                    "username": "rakshita18",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.02",
                    "memory": "17.6M",
                    "solution": 34503409,
                    "code": "for _ in range(int(input())):\n    s = str(input())\n    l = ''\n    for i in s:\n        if i not in l:\n            l = l + i\n    if len(s) == len(l):\n        print('no')\n    else:\n        print('yes')"
                },
                {
                    "id": 34105880,
                    "submission_date": 1591768897,
                    "language": "PYTH 3",
                    "username": "nihar_gupta657",
                    "user_rating_star": 3,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.01",
                    "memory": "17.6M",
                    "solution": 34105880,
                    "code": "for _ in range(int(input())):\n    s=input()\n    a=[]\n    for i in s:\n        a.append(i)\n    aa=set(a)\n    if len(aa)==len(a):\n        print('no')\n    else:\n        print('yes')"
                }
            ]
        },
        "BESTBATS": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "2\n1 2 3 4 5 6 7 8 9 10 11\n3\n2 5 1 2 4 1 6 5 2 2 1\n6",
                    "output": "1\n6",
                    "explanation": "Case 1 : Maximum possible sum of scores = 11 + 10 + 9 = 30 and can be achieved only by selecting the last 3 players. Only one possible way.\nCase 2 : Maximum possible sum of scores = 6 + 5 + 5 + 4 + 2 + 2 = 24 and considering the players as p1 p2 p3 ... p11 in that order, the ones with maximum possible sum of scores is as follows\n{p1, p2, p4, p5, p7, p8 }\n{p10, p2, p4, p5, p7, p8 }\n{p1, p2, p10, p5, p7, p8 }\n{p9, p2, p4, p5, p7, p8 }\n{p1, p2, p9, p5, p7, p8 }\n{p10, p2, p9, p5, p7, p8 }"
                }
            ],
            "problem_statement": "A cricket team consists of 11 players and some are good at batting, others are good at bowling and some of them are good at both batting and bowling. The batting coach wants to select exactly K players having maximum possible sum of scores. Given the batting score of each of the 11 players, find the number of ways in which we can select exactly K players such that the sum of their scores is the maximum possible. Two ways are different if there is a player who is selected in one of them is not in the other. See explanation of sample cases for more clarity.\n\n\nInput\nFirst line contains T, number of test cases ( 1 \u2264 T \u2264 100 ). T cases follow, each having 2 lines. First line of each case contains scores of 11 players ( 1 \u2264 score \u2264 100 ) and the second line contains K (1 \u2264 K \u2264 11)\n\n\nOutput\nFor each test case, output the answer in a new line.",
            "input_format": "",
            "output_format": "",
            "problem_name": "Top Batsmen",
            "user_tags": [
                "anil_adm",
                "cook21",
                "easy"
            ],
            "computed_tags": [],
            "problem_code_id": "BESTBATS",
            "difficulty_level": "1228",
            "ai_solutions": [
                "from collections import Counter\nfrom math import factorial as f\n\ndef nCr(n, r):\n    return f(n) // (f(r) * f(n - r))\n\nT = int(input())\nfor _ in range(T):\n    scores = list(map(int, input().split()))\n    K = int(input())\n    scores.sort(reverse=True)\n    max_sum_scores = scores[:K]\n    max_score = max_sum_scores[-1]\n    total_max_score = scores.count(max_score)\n    selected_max_score = max_sum_scores.count(max_score)\n    print(nCr(total_max_score, selected_max_score))",
                "from collections import Counter\nfrom math import comb\n\nT = int(input())\nfor _ in range(T):\n    scores = list(map(int, input().split()))\n    K = int(input())\n    scores.sort(reverse=True)\n    max_sum_scores = scores[:K]\n    max_score = max_sum_scores[-1]\n    total_max_score = scores.count(max_score)\n    selected_max_score = max_sum_scores.count(max_score)\n    print(comb(total_max_score, selected_max_score))"
            ],
            "human_solutions": [
                {
                    "id": 37055738,
                    "submission_date": 1598107230,
                    "language": "PYTH 3",
                    "username": "ayan_codechef",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.02",
                    "memory": "17.6M",
                    "solution": 37055738,
                    "code": "from itertools import combinations\nfor _ in range(int(input())):\n    a=[int(x) for x in input().split()]\n    k=int(input())\n    a.sort(reverse=True)\n    s=0\n    for i in range(k):\n        s+=a[i]\n    z=list(combinations(a,k))\n    c=0\n    for i in z:\n        if sum(i)==s:\n            c+=1\n    print(c)\n            \n    "
                },
                {
                    "id": 35388118,
                    "submission_date": 1594282534,
                    "language": "PYTH 3",
                    "username": "jsuhani_123",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.02",
                    "memory": "17.6M",
                    "solution": 35388118,
                    "code": "\ntry:\n    from itertools import combinations\n    for _ in range(int(input())):\n        scores = list(map(int, input().split()))\n        k = int(input())\n        s = combinations(scores, k)\n        res = []\n        for i in s:\n            res.append(sum(i))\n        print(res.count(max(res)))\nexcept EOFError:\n    pass\n\n    \n"
                }
            ]
        },
        "CHEFLR": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "4\nlrl\nrll\nr\nlllr",
                    "output": "10\n14\n4\n13",
                    "explanation": "See the example in the statement for better understanding the samples."
                }
            ],
            "problem_statement": "Read problems statements in Mandarin Chinese  and Russian.\nChef has a nice complete binary tree in his garden. Complete means that each node has exactly two sons, so the tree is infinite. Yesterday he had enumerated the nodes of the tree in such a way: \nLet's call the nodes' level a number of nodes that occur on the way to this node from the root, including this node. This way, only the root has the level equal to 1, while only its two sons has the level equal to 2.\nThen, let's take all the nodes with the odd level and enumerate them with consecutive odd numbers, starting from the smallest levels and the leftmost nodes, going to the rightmost nodes and the highest levels.\nThen, let's take all the nodes with the even level and enumerate them with consecutive even numbers, starting from the smallest levels and the leftmost nodes, going to the rightmost nodes and the highest levels.\nFor the better understanding there is an example: \n\n\n                             1\n                        /           \\\n                  2                   4\n                /   \\                /       \\\n             3       5           7        9\n            / \\      /  \\          /  \\       /  \\\n           6  8 10 12      14 16   18 20 \n\nHere you can see the visualization of the process. For example, in odd levels, the root was enumerated first, then, there were enumerated roots' left sons' sons and roots' right sons' sons.\nYou are given the string of symbols, let's call it S. Each symbol is either l or r. Naturally, this sequence denotes some path from the root, where l means going to the left son and r means going to the right son.\nPlease, help Chef to determine the number of the last node in this path.\nInput\nThe first line contains single integer T number of test cases.\nEach of next T lines contain a string S consisting only of the symbols l and r.\n\nOutput\nPer each line output the number of the last node in the path, described by S, modulo 109+7.\nConstraints\n1 \u2264 |T| \u2264 5\n1 \u2264 |S| \u2264 10^5\nRemember that the tree is infinite, so each path described by appropriate S is a correct one.",
            "input_format": "",
            "output_format": "",
            "problem_name": "Chef and Left-Right",
            "user_tags": [
                "Arithmetic",
                "ad-hoc"
            ],
            "computed_tags": [
                "Mathematics",
                "Basic Maths",
                "Algorithms",
                "Constructive"
            ],
            "problem_code_id": "CHEFLR",
            "difficulty_level": "1394",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 39720131,
                    "submission_date": 1605888171,
                    "language": "PYTH 3",
                    "username": "vittal_161",
                    "user_rating_star": 3,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.10",
                    "memory": "17.6M",
                    "solution": 39720131,
                    "code": "MOD=10**9+7\nfor _ in range(int(input())):\n    s=input()\n    ind=1\n    level=1\n    for i in range(len(s)):\n        if s[i]=='l':\n            if level%2==1:\n                ind=ind*2\n            else:\n                ind=ind*2-1\n        if s[i]=='r':\n            if level%2==1:\n                ind=ind*2+2\n            else:\n                ind=ind*2+1\n        level+=1\n        ind%=MOD\n    print(ind)\n"
                },
                {
                    "id": 30586493,
                    "submission_date": 1584691495,
                    "language": "PYTH 3",
                    "username": "navjeet8877",
                    "user_rating_star": 3,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.09",
                    "memory": "18.1M",
                    "solution": 30586493,
                    "code": "mod = 1000000007\r\nfor _ in range(int(input())):\r\n    string = list(input().strip())\r\n    idx = 1\r\n    lev = 1\r\n    for i in (string):\r\n        if i == 'l':\r\n            if lev % 2 == 1:\r\n                idx = (idx * 2)\r\n            else:\r\n                idx = (idx * 2 - 1)\r\n        else:\r\n            if lev % 2 == 1:\r\n                idx = (idx * 2 + 2)\r\n            else:\r\n                idx = (idx * 2 + 1)\r\n        lev += 1\r\n        idx = idx % mod\r\n    print(idx)"
                }
            ]
        },
        "BFRIEND": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "2\r\n3 1 5 2\r\n6 7 8\r\n1 1 2 1000000000\r\n1000000000",
                    "output": "8\r\n2999999997",
                    "explanation": "Example case 1: In the optimal solution, Bob goes to his friend at floor $6$, changes there and goes to meet Alice. The total time is $(6-5)$ to reach his friend plus $2$ to change plus $(6-1)$ to reach Alice, which is $1+2+5 = 8$ minutes."
                }
            ],
            "problem_statement": "Read problem statements in Hindi, Bengali, Mandarin Chinese, Russian, and Vietnamese as well.\nAlice just invited Bob to come over for dinner at her place. Bob is not dressed properly and he does not wish to take any chances, so he wants to rush to an apartment of one of his $N$ friends, change there and meet Alice for the dinner.\nAlice and Bob's friends live in a skyscraper with many floors. Alice lives on the $a$-th floor, the apartments of Bob's friends are located on the floors $F_1, F_2, \\ldots, F_N$ and Bob is initially at the $b$-th floor. It takes exactly $1$ minute to go one floor up or down from each floor.\nBob needs exactly $c$ minutes to change in any of his friends' apartments. Find the minimum time he needs to go to one of his friends' apartments, change and get to Alice's apartment.\nInput\n\nThe first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\nThe first line of each test case contains four space-separated integers $N$, $a$, $b$ and $c$.\nThe second line contains $N$ space-separated integers $F_1, F_2, \\ldots, F_N$.\n\nOutput\nPrint a single line containing one integer \u2015 the minimum time Bob needs.\nConstraints\n\n$1 \\le T \\le 10$\n$1 \\le N \\le 10^5$\n$1 \\le a, b, c \\le 10^9$\n$1 \\le F_i \\le 10^9$ for each valid $i$\n\nSubtasks\nSubtask #1 (100 points): original constraints",
            "input_format": "",
            "output_format": "",
            "problem_name": "Bob and His Friends",
            "user_tags": [
                "Brute Force"
            ],
            "computed_tags": [
                "Algorithms"
            ],
            "problem_code_id": "BFRIEND",
            "difficulty_level": "1332",
            "ai_solutions": [
                "T = int(input())\nfor _ in range(T):\n    N, a, b, c = map(int, input().split())\n    F = list(map(int, input().split()))\n    min_time = float('inf')\n    for i in range(N):\n        time = abs(F[i] - b) + abs(a - F[i]) + c\n        if time < min_time:\n            min_time = time\n    print(min_time)",
                "T = int(input())\nfor _ in range(T):\n    N, a, b, c = map(int, input().split())\n    F = list(map(int, input().split()))\n    times = [abs(f - b) + abs(a - f) + c for f in F]\n    print(min(times))"
            ],
            "human_solutions": [
                {
                    "id": 1027297561,
                    "submission_date": 1698325309,
                    "language": "PYTH 3",
                    "username": "himanshu_116",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.20",
                    "memory": "28.5M",
                    "solution": 1027297561,
                    "code": "\r\nfor _ in range(int(input())):\r\n    n, a, b, c = map(int, input().split())\r\n    l = list(map(int, input().split()))\r\n    d = []\r\n    for i in l:\r\n        d.append(abs(i-b) + c + abs(i-a))\r\n    print(min(d))\r\n    \r\n    \r\n    "
                },
                {
                    "id": 1016566581,
                    "submission_date": 1693163909,
                    "language": "PYTH 3",
                    "username": "sharmishtha04",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.38",
                    "memory": "27.4M",
                    "solution": 1016566581,
                    "code": "T = int(input())\r\nfor i in range(T):\r\n    N, a, b, c = map(int, input().split())\r\n    F = list(map(int, input().split()))\r\n    F.sort()\r\n    l = []\r\n    for i in range(len(F)):\r\n        s = 0\r\n        s += abs(F[i]-b)\r\n        s += c\r\n        s += abs(F[i]-a)\r\n        l.append(s)\r\n    print(min(l))"
                }
            ]
        },
        "PCJ18A": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "3\n5 100\n11 22 33 44 55\n5 50\n10 20 30 40 50\n5 45\n12 24 36 48 60",
                    "output": "NO\nYES\nYES",
                    "explanation": ""
                }
            ],
            "problem_statement": "Today Chef wants to evaluate the dishes of his $N$ students. He asks each one to cook a dish and present it to him.\nChef loves his secret ingredient, and only likes dishes with at least $X$ grams of it.\nGiven $N$, $X$ and the amount of secret ingredient used by each student $A_i$, find out whether Chef will like at least one dish. \nInput:\n\nFirst line will contain $T$, number of testcases. Then the testcases follow. \nThe first line of each testcase contains two integers $N$ \n (number of students) and $X$ (minimum amount of secret ingredient that a dish must contain for Chef to like it).\nThe next line contains $N$ space separated integers, $A_i$ denoting the amount of secret ingredient used by the students in their dishes.\n\nOutput:\nFor each testcase, print a single string \"YES\" if Chef likes at least one dish. Otherwise, print \"NO\". (Without quotes).\nConstraints:\n\n$1 \\leq T \\leq 100$\n$1 \\leq N \\leq 1000$\n$1 \\leq X \\leq 1000000$\n$1 \\leq A_i \\leq 1000000$",
            "input_format": "",
            "output_format": "",
            "problem_name": "Chef and Secret Ingredient",
            "user_tags": [
                "Brute Force",
                "Implementation"
            ],
            "computed_tags": [
                "Algorithms"
            ],
            "problem_code_id": "PCJ18A",
            "difficulty_level": "1244",
            "ai_solutions": [
                "T = int(input())\nfor _ in range(T):\n    N, X = map(int, input().split())\n    A = list(map(int, input().split()))\n    if any(a >= X for a in A):\n        print(\"YES\")\n    else:\n        print(\"NO\")",
                "T = int(input())\nfor _ in range(T):\n    N, X = map(int, input().split())\n    A = list(map(int, input().split()))\n    print(\"YES\" if max(A) >= X else \"NO\")"
            ],
            "human_solutions": [
                {
                    "id": 33402601,
                    "submission_date": 1590683750,
                    "language": "PYTH 3",
                    "username": "chandu_409",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.01",
                    "memory": "17.7M",
                    "solution": 33402601,
                    "code": "for i in range(int(input())):\r\n    a,b=map(int,input().split())\r\n    l=list(map(int,input().split()))\r\n    c=max(l)\r\n    if c>=b:\r\n        print(\"YES\")\r\n    else:\r\n        print(\"NO\")\r\n"
                },
                {
                    "id": 33373341,
                    "submission_date": 1590571779,
                    "language": "PYTH 3",
                    "username": "manishreddy_l",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.03",
                    "memory": "17.7M",
                    "solution": 33373341,
                    "code": "for _ in range(int(input())):\r\n    n,k=map(int,input().split())\r\n    lst=list(map(int,input().split()))\r\n    flag=0\r\n    for i in range(n):\r\n        if lst[i]>=k:\r\n            flag=1\r\n            break\r\n    if flag==1:\r\n        print(\"YES\")\r\n    else:\r\n        print(\"NO\")\r\n    \r\n"
                }
            ]
        },
        "SPOON": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "3\n3 6\nabDefb\nbSpoon\nNIKHil\n6 6\naaaaaa\nssssss\nxuisdP\noooooo\nioowoo\nbdylan\n6 5\nbdfhj\ncacac\nopqrs\nddddd\nindia\nyucky",
                    "output": "There is a spoon!\nThere is a spoon!\nThere is indeed no spoon!",
                    "explanation": "In the first test case, \"Spoon\" occurs in the second row. In the second test case, \"spOon\" occurs in the last column."
                }
            ],
            "problem_statement": "Chef recently saw the movie Matrix. He loved the movie overall but he didn't agree with some things in it. Particularly he didn't agree with the bald boy when he declared - There is no spoon. Being a chef, he understands the importance of the spoon and realizes that the universe can't survive without it. Furthermore, he is sure there is a spoon; he saw it in his kitchen this morning. So he has set out to prove the bald boy is wrong and find a spoon in the matrix. He has even obtained a digital map already. Can you help him?\n\nFormally you're given a matrix of lowercase and uppercase Latin letters. Your job is to find out if the word \"Spoon\" occurs somewhere in the matrix or not. A word is said to be occurred in the matrix if it is presented in some row from left to right or in some column from top to bottom. Note that match performed has to be case insensitive. \n\n\nInput\nThe first line of input contains a positive integer T, the number of test cases. After that T test cases follow. The first line of each test case contains two space separated integers R and C, the number of rows and the number of columns of the matrix M respectively. Thereafter R lines follow each containing C characters, the actual digital map itself.\n\n\nOutput\nFor each test case print one line. If a \"Spoon\" is found in Matrix, output \"There is a spoon!\" else output \"There is indeed no spoon!\" (Quotes only for clarity).\n\n\nConstraints\n\n1 \u2264 T \u2264 100\n\n\n1 \u2264 R, C \u2264 100",
            "input_format": "",
            "output_format": "",
            "problem_name": "Spoon in Matrix",
            "user_tags": [
                "2D Arrays",
                "Brute Force",
                "Implementation"
            ],
            "computed_tags": [
                "Data Structures",
                "Arrays",
                "Algorithms"
            ],
            "problem_code_id": "SPOON",
            "difficulty_level": "1303",
            "ai_solutions": [
                "T = int(input())\nfor _ in range(T):\n    R, C = map(int, input().split())\n    matrix = [input().lower() for _ in range(R)]\n    found = False\n    for row in matrix:\n        if 'spoon' in row:\n            found = True\n            break\n    if not found:\n        for col in range(C):\n            if 'spoon' in ''.join([matrix[row][col] for row in range(R)]):\n                found = True\n                break\n    print(\"There is a spoon!\" if found else \"There is indeed no spoon!\")",
                "T = int(input())\nfor _ in range(T):\n    R, C = map(int, input().split())\n    matrix = [input().lower() for _ in range(R)]\n    transposed_matrix = [''.join([matrix[row][col] for row in range(R)]) for col in range(C)]\n    found = any('spoon' in row for row in matrix + transposed_matrix)\n    print(\"There is a spoon!\" if found else \"There is indeed no spoon!\")"
            ],
            "human_solutions": [
                {
                    "id": 34451813,
                    "submission_date": 1592243469,
                    "language": "PYTH 3",
                    "username": "fliker138",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.04",
                    "memory": "17.8M",
                    "solution": 34451813,
                    "code": "for _ in range(int(input())):\n    n,m=map(int,input().split(\" \"))\n    l=[]\n    temp=\"\"\n    temp2=\"\"\n    find=False\n    for i in range(n):\n        word=input()\n        word=word.lower()\n        #print(word,len(word))\n        temp=temp+\" \"+word\n        temp2=temp2+word\n    if(temp.find(\"spoon\")!=-1):\n        find=True\n    if(n>4):\n        for i in range(m):\n            w=temp2[i::m]\n            if(w.find(\"spoon\")!=-1):\n                find=True\n    if(find==True):\n        print(\"There is a spoon!\")\n    else:\n        print(\"There is indeed no spoon!\")\n        \n    "
                },
                {
                    "id": 33410749,
                    "submission_date": 1590739640,
                    "language": "PYTH 3",
                    "username": "kavyasri_2138",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.20",
                    "memory": "17.8M",
                    "solution": 33410749,
                    "code": "for j in range(int(input())):\n    r,c=map(int,input().split())\n    x=[]\n    for i in range(r):\n        d=input().lower()\n        x.append(d)\n    a=0\n    am=0\n    for i in x:\n        a=i.count(\"spoon\")\n        if(a!=0):\n            print(\"There is a spoon!\")\n            am=1\n            break\n    if(am!=1):\n        sum=\"\"\n        for k in range(c):\n            for i in x:\n                sum+=i[k]\n            if(sum.count(\"spoon\")!=0):\n                print(\"There is a spoon!\")\n                break\n        else:\n            print(\"There is indeed no spoon!\")"
                }
            ]
        },
        "CATFEED": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "7\n3 9\n1 2 3 1 2 3 1 2 3\n3 9\n1 2 3 3 2 1 1 2 3\n3 5\n2 3 1 1 2\n3 6\n2 1 1 3 2 3\n2 8\n1 2 1 2 1 2 1 1\n5 3\n5 3 1\n4 5\n1 2 3 1 4",
                    "output": "YES\nYES\nYES\nNO\nNO\nYES\nNO",
                    "explanation": "Example case 4: Cat $1$ will eat twice before cat $3$ eats even once, so the order is unfair.\nExample case 5: The order is unfair because cat $1$ will eat its fifth can before cat $2$ eats its fourth can.\nExample case 7: The order is unfair because cat $1$ will eat twice before cat $4$ eats even once."
                }
            ],
            "problem_statement": "Read problem statements in Hindi, Bengali, Mandarin Chinese, Russian, and Vietnamese as well.\nChef owns $N$ cats (numbered $1$ through $N$) and he wants to feed them. There are $M$ identical cans of cat food; each can must be used to feed exactly one cat and Chef can only feed one cat at a time. Chef wrote down the order in which he wants to feed the cats: a sequence $A_1, A_2, \\ldots, A_M$.\nAn order of feeding cats is fair if there is no moment where Chef feeds a cat that has already been fed strictly more times than some other cat. Help Chef \u2014 tell him if the order in which he wants to feed the cats is fair.\nInput\n\nThe first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\nThe first line of each test case contains two space-separated integers $N$ and $M$. \nThe second line contains $M$ space-separated integers $A_1, A_2, \\ldots, A_M$.\n\nOutput\nFor each test case, print a single line containing the string \"YES\" if the order is fair or \"NO\" if it is unfair.\nConstraints\n\n$1 \\le T \\le 100$\n$2 \\le N \\le 100$\n$1 \\le M \\le 10^3$\n\nSubtasks\nSubtask #1 (100 points): original constraints",
            "input_format": "",
            "output_format": "",
            "problem_name": "Chef Feeds Cats",
            "user_tags": [
                "ad-hoc",
                "Brute Force",
                "Implementation"
            ],
            "computed_tags": [
                "Algorithms",
                "Constructive"
            ],
            "problem_code_id": "CATFEED",
            "difficulty_level": "1343",
            "ai_solutions": [
                "def is_fair_order(T, test_cases):\n    for _ in range(T):\n        N, M, A = test_cases[_]\n        counter = [0]*N\n        for cat in A:\n            counter[cat-1] += 1\n            if max(counter) > min(counter) + 1:\n                print(\"NO\")\n                break\n        else:\n            print(\"YES\")\n\nT = int(input())\ntest_cases = []\nfor _ in range(T):\n    N, M = map(int, input().split())\n    A = list(map(int, input().split()))\n    test_cases.append((N, M, A))\nis_fair_order(T, test_cases)"
            ],
            "human_solutions": [
                {
                    "id": 33346666,
                    "submission_date": 1590447370,
                    "language": "PYTH 3",
                    "username": "fira7s",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.15",
                    "memory": "17.6M",
                    "solution": 33346666,
                    "code": "for _ in range(int(input())):\n    n,m=map(int, input().split())\n    l=list(map(int, input().split()));h=[]\n    for i in range(n):\n        h.append(0)\n    h[l[0]-1]=1\n    for i in range(1,m):\n        h[l[i] - 1] += 1\n        if h[l[i]-1]==min(h)+2:\n            print(\"NO\")\n            break\n\n    else:\n        print('YES')\n"
                },
                {
                    "id": 33194858,
                    "submission_date": 1589985511,
                    "language": "PYTH 3",
                    "username": "vimal_28",
                    "user_rating_star": 3,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.57",
                    "memory": "17.7M",
                    "solution": 33194858,
                    "code": "def chk(a,k,n):\n    for i in range(1,k):\n        if a[i] in a[:i] and a[:i].count(a[i])>i//n:\n            return \"NO\"\n    return \"YES\"\nfor _ in range(int(input())):\n    n,k=map(int,input().split())\n    a=list(map(int,input().split()[:k]))\n    print(chk(a,k,n))\n        "
                }
            ]
        },
        "MAKPERM": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "2\r\n4\r\n1 2 3 3\r\n3\r\n2 6 2",
                    "output": "1\r\n2",
                    "explanation": "Example case 1: One possible way is to change the last element to $4$. This creates the sequence $1, 2, 3, 4$, which is a permutation.\nExample case 2: We can change the first element to $1$ and the second element to $3$, creating the permutation $1, 3, 2$."
                }
            ],
            "problem_statement": "Read problems statements Bengali , Mandarin chinese , Russian and Vietnamese as well.\nYou are given an integer sequence $A$ with length $N$. In one move, you are allowed to choose one element of this sequence and change it to an arbitrary integer. Compute the minimum number of moves needed to make the sequence a permutation of the integers $1$ through $N$.\nInput\n\nThe first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\nThe first line of each test case contains a single integer $N$.\nThe second line contains $N$ space-separated integers $A_1, A_2, \\dots, A_N$.\n\nOutput\nFor each test case, print a single line containing one integer \u2014 the minimum required number of moves.\nConstraints\n\n$1 \\le T \\le 100$\n$1 \\le N \\le 10^5$\nthe sum of $N$ for all test cases does not exceed $2 \\cdot 10^5$\n$1 \\le A_i \\le 10^9$ for each valid $i$",
            "input_format": "",
            "output_format": "",
            "problem_name": "Make a Permutation",
            "user_tags": [
                "Frequency Arrays",
                "Implementation"
            ],
            "computed_tags": [
                "Data Structures",
                "Arrays",
                "Algorithms"
            ],
            "problem_code_id": "MAKPERM",
            "difficulty_level": "1357",
            "ai_solutions": [
                "def min_moves(T, test_cases):\n    for _ in range(T):\n        N, A = test_cases[_]\n        print(N - len(set([i for i in A if i <= N])))\n\nT = int(input().strip())\ntest_cases = []\nfor _ in range(T):\n    N = int(input().strip())\n    A = list(map(int, input().strip().split()))\n    test_cases.append((N, A))\n\nmin_moves(T, test_cases)",
                "def min_moves(T, test_cases):\n    for _ in range(T):\n        N, A = test_cases[_]\n        unique_nums = set()\n        for i in A:\n            if i <= N:\n                unique_nums.add(i)\n        print(N - len(unique_nums))\n\nT = int(input().strip())\ntest_cases = []\nfor _ in range(T):\n    N = int(input().strip())\n    A = list(map(int, input().strip().split()))\n    test_cases.append((N, A))\n\nmin_moves(T, test_cases)"
            ],
            "human_solutions": [
                {
                    "id": 29829062,
                    "submission_date": 1582293337,
                    "language": "PYTH 3",
                    "username": "pratapsurya513",
                    "user_rating_star": 3,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.07",
                    "memory": "18.8M",
                    "solution": 29829062,
                    "code": "for i in range(int(input())):\r\n    x=int(input())\r\n    a=list(map(int,input().split()))\r\n    b=set(a)\r\n    b=list(b)\r\n    b.sort()\r\n    l=0\r\n    for j in range(len(b)):\r\n        if b[j]>x:\r\n            break\r\n        else:\r\n            l=l+1\r\n    print(x-l)\r\n"
                },
                {
                    "id": 28580814,
                    "submission_date": 1577772899,
                    "language": "PYTH 3",
                    "username": "shounak_bandop",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.05",
                    "memory": "17.7M",
                    "solution": 28580814,
                    "code": "def solve():\r\n    n = int(input())\r\n    b = [0] * (n + 1)\r\n    a = list(map(int, input().split()))\r\n    free_slot = 1\r\n    ans = 0\r\n    for x in a:\r\n        if 1 <= x <= n:\r\n            if b[x]:\r\n                ans += 1\r\n            else:\r\n                b[x] = 1\r\n        else:\r\n            ans += 1\r\n        pass\r\n    return ans\r\n    pass\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    t = int(input())\r\n    for _ in range(t):\r\n        print(solve())\r\n    pass\r\n"
                }
            ]
        },
        "CHEFRP": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "2\r\n2\r\n2 2\r\n1\r\n6",
                    "output": "4\r\n2",
                    "explanation": "In Example 1, she need to pick up all items.\nIn Example 2, since there is only one type of ingredient, picking two items is enough."
                }
            ],
            "problem_statement": "Read problems statements in Mandarin Chinese  and Russian.\nRupsa recently started to intern under Chef. He gave her N type of ingredients of varying quantity  A1, A2, ..., AN respectively to store it. But as she is lazy to arrange them she puts them all in a storage box.\nChef comes up with a new recipe and decides to prepare it. He asks Rupsa to get two units of each type ingredient for the dish. But when she went to retrieve the ingredients, she realizes that she can only pick one item at a time from the box and can know its type only after she has picked it out. The picked item is not put back in the bag.\nShe, being lazy, wants to know the maximum number of times she would need to pick items from the box in the worst case so that it is guaranteed that she gets at least two units of each type of ingredient. If it is impossible to pick items in such a way, print -1.\nInput\n\nThe first line of the input contains an integer T denoting the number of test cases.\nThe first line of each test case contains a single integer N denoting the number of different type of ingredients.\nThe second line contains N space-separated integers A1, A2, ..., AN denoting the quantity of each ingredient.\n\nOutput\n\nFor each test case, output a single line containing an integer denoting the answer corresponding to that test case.\n\nConstraints\n\n1 \u2264 T \u2264 10\n1 \u2264 N \u2264 105\n1 \u2264 Ai \u2264 104\n\nSub tasks\n\nSubtask #1: 1 \u2264 N \u2264 1000 (30 points)\nSubtask #2: original constraints (70 points)",
            "input_format": "",
            "output_format": "",
            "problem_name": "Chef and new recipe",
            "user_tags": [
                "Basic Maths",
                "ad-hoc"
            ],
            "computed_tags": [
                "Mathematics",
                "Algorithms",
                "Constructive"
            ],
            "problem_code_id": "CHEFRP",
            "difficulty_level": "1310",
            "ai_solutions": [
                "T = int(input())\nfor _ in range(T):\n    N = int(input())\n    A = list(map(int, input().split()))\n    A.sort()\n    if A[0] < 2:\n        print(-1)\n    else:\n        print(2*N)",
                "T = int(input())\nfor _ in range(T):\n    N = int(input())\n    A = list(map(int, input().split()))\n    if min(A) < 2:\n        print(-1)\n    else:\n        print(2*N)"
            ],
            "human_solutions": [
                {
                    "id": 36134326,
                    "submission_date": 1596206770,
                    "language": "PYTH 3",
                    "username": "abhi084",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.20",
                    "memory": "18.9M",
                    "solution": 36134326,
                    "code": "for _ in range(int(input())):\n    n=int(input())\n    l=list(map(int,input().split()))\n    flag=0\n    for i in range(len(l)):\n        if l[i]<2:\n            flag=1\n            break\n    if flag==1:\n        print(-1)\n        continue\n    s=sum(l)-min(l)+2\n    if len(l)==1:\n        print(2)\n    else:\n        print(s)"
                },
                {
                    "id": 34476063,
                    "submission_date": 1592372064,
                    "language": "PYTH 3",
                    "username": "vittal_161",
                    "user_rating_star": 3,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.16",
                    "memory": "18.9M",
                    "solution": 34476063,
                    "code": "for _ in range(int(input())):\n\tn = int(input())\n\titems = list(map(int,input().split()))\n\tif min(items) < 2:\n\t\ttotal = -1\n\telse:\n\t\ttotal = sum(items) - min(items) + 2\n\tprint(total)\n"
                }
            ]
        },
        "TAVISUAL": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "1\n5 2 3\n1 4\n3 5\n1 5",
                    "output": "1",
                    "explanation": "The row of cups at the beginning of the game and after each flip is shown below. Here '-' means an empty cup and 'B' is the cup that hides the ball, the segment of flip is marked bold.\n\n-B---\n--B--\n----B\nB----"
                }
            ],
            "problem_statement": "At the end of a busy day, The Chef and his assistants play a game together. The game is not just for fun but also used to decide who will have to clean the kitchen. The Chef is a Game Master, so his concern is how to manage the game but not how to win the game like his assistants do.\n\n\nThe game requires players to find the only ball under one of the N cups after their positions are changed in a special way. At the beginning of the game, The Chef places N cups in a row and put a ball under the C-th cup from the left (the cups are numbered from 1 to N). All players can see the initial position of the ball. Then Chef performs Q flip operations. Each flip operation is defined by two integers L and R such that 1 \u2264 L \u2264 R \u2264 N and consists in reversing the segment [L, R] of cups. Namely, Chef swaps L-th and R-th cups, (L+1)-th and (R\u22121)-th cups, and so on. After performing all the operations Chef asks his assistants to choose a cup that they think the ball is under it. Who can guess the position of the ball will win the game, and of course, the others will have to clean the kitchen.\n\n\nThe Chef doesn't want to check all the N cups at the end of the game. He notes down the value of C and the pairs (L, R) and asked you, the mastered programmer, to determine the cup that contains the ball.\n\nInput\n\nThe first line of the input contains a single integer T, denoting the number of test cases. The description of T test cases follows. The first line of each test case contains three space-separated integers N, C and Q, denoting the total number of cups, the initial position of the ball and the number of flip operations Chef will perform. Each of the following Q lines contains two space-separated integers L and R, denoting the ends of the segment of the current flip operation.\n\nOutput\n\nFor each test case output on a separate line the final position of the ball.\n\nConstraints\n1 \u2264 T \u2264 10\n1 \u2264 N \u2264 100000 (105)\n1 \u2264 C \u2264 N\n1 \u2264 Q \u2264 10000 (104)\n1 \u2264 L \u2264 R \u2264 N",
            "input_format": "",
            "output_format": "",
            "problem_name": "The Ball And Cups",
            "user_tags": [
                "Range Queries"
            ],
            "computed_tags": [
                "Algorithms",
                "Queries"
            ],
            "problem_code_id": "TAVISUAL",
            "difficulty_level": "1306",
            "ai_solutions": [
                "T = int(input())\nfor _ in range(T):\n    N, C, Q = map(int, input().split())\n    for _ in range(Q):\n        L, R = map(int, input().split())\n        if L <= C <= R:\n            C = L + R - C\n    print(C)",
                "def find_ball(T, test_cases):\n    for i in range(T):\n        N, C, Q, operations = test_cases[i]\n        for j in range(Q):\n            L, R = operations[j]\n            if L <= C <= R:\n                C = L + R - C\n        print(C)\n\nT = int(input())\ntest_cases = []\nfor _ in range(T):\n    N, C, Q = map(int, input().split())\n    operations = [list(map(int, input().split())) for _ in range(Q)]\n    test_cases.append((N, C, Q, operations))\n\nfind_ball(T, test_cases)"
            ],
            "human_solutions": [
                {
                    "id": 30693802,
                    "submission_date": 1584980871,
                    "language": "PYTH 3",
                    "username": "shiny2324",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.18",
                    "memory": "17.6M",
                    "solution": 30693802,
                    "code": "t=int(input())\nfor x in range(t):\n    n,c,q=map(int,input().split())\n    for y in range(q):\n        l,r=map(int,input().split())\n        \n        if c>=l and c<=r :\n            c=c-r+1\n            c=l-r+2-c\n            c=c+r-1\n            \n    print(c)"
                },
                {
                    "id": 30215709,
                    "submission_date": 1583747584,
                    "language": "PYTH 3",
                    "username": "navjeet8877",
                    "user_rating_star": 3,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.18",
                    "memory": "17.6M",
                    "solution": 30215709,
                    "code": "for _ in range(int(input())):\r\n    N, C, Q = map(int,input().split())\r\n    for i in range(Q):\r\n        L, R = map(int,input().split())\r\n        if C <= R and C >= L:\r\n            C = L + R - C\r\n    print(C)"
                }
            ]
        },
        "ATTIC": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "4\n####\n##.#..#\n##..#.#\n##.#....#",
                    "output": "0\n2\n1\n2",
                    "explanation": "For the first example, they do not need to learn any jump size. They are able to cross the entire passage by \"jumping\" lengths 1-1-1.\n\n\nFor the second example case, they get stuck at the first '.', and take one day learning to jump length 2. When they come back the next day, they get stuck at '..' and take one day to learn to jump length 3.\n\n\nFor the third example case, they get stuck first at '..', and they take one day to learn to jump length 3. On the second day, they are able to jump both length 3 as well as length 2 required to cross the passage.\n\n\nFor the last test case they need to stop and learn jumping two times. At first they need to jump a length 2 and then a length 5."
                }
            ],
            "problem_statement": "Digory Kirke and Polly Plummer are two kids living next door to each other. The attics of the two houses are connected to each other through a passage. Digory's Uncle Andrew has been secretly doing strange things in the attic of his house, and he always ensures that the room is locked. Being curious, Digory suspects that there is another route into the attic through Polly's house, and being curious as kids always are, they wish to find out what it is that Uncle Andrew is secretly up to.\n\n\nSo they start from Polly's house, and walk along the passageway to Digory's. Unfortunately, along the way, they suddenly find that some of the floorboards are missing, and that taking a step forward would have them plummet to their deaths below.\n\n\nDejected, but determined, they return to Polly's house, and decide to practice long-jumping in the yard before they re-attempt the crossing of the passage. It takes them exactly one day to master long-jumping a certain length. Also, once they have mastered jumping a particular length L, they are able to jump any amount less than equal to L as well.\n\n\nThe next day they return to their mission, but somehow find that there is another place further up the passage, that requires them to jump even more than they had practiced for. So they go back and repeat the process.\n\n\nNote the following:\n\n At each point, they are able to sense only how much they need to jump at that point, and have no idea of the further reaches of the passage till they reach there. That is, they are able to only see how far ahead is the next floorboard. \n The amount they choose to practice for their jump is exactly the amount they need to get across that particular part of the passage. That is, if they can currently jump upto a length L0, and they require to jump a length L1(> L0) at that point, they will practice jumping length L1 that day. \n They start by being able to \"jump\" a length of 1. \n\n\nFind how many days it will take them to cross the passageway. In the input, the passageway is described as a string P of '#'s and '.'s. A '#' represents a floorboard, while a '.' represents the absence of a floorboard. The string, when read from left to right, describes the passage from Polly's house to Digory's, and not vice-versa.\n\nInput\n\nThe first line consists of a single integer T, the number of testcases.\nEach of the next T lines consist of the string P for that case.\n\nOutput\n\nFor each case, output the number of days it takes them to cross the passage.\n\nConstraints\n 1  \u2264 T  \u2264 1,000,000  (106)\n 1  \u2264 |P|  \u2264 1,000,000 (106)\n The total length of P will be \u2264 5,000,000 (5 * 106)across all test-cases of a test-file \n P will consist of only the characters # and . \n The first and the last characters of P will be #. \n\nAppendix\n\nIrrelevant to the problem description, if you're curious about what Uncle Andrew was up to, he was experimenting on Magic Rings that could facilitate travel between worlds. One such world, as some of you might have heard of, was Narnia.",
            "input_format": "",
            "output_format": "",
            "problem_name": "Attic Crossing",
            "user_tags": [
                "String"
            ],
            "computed_tags": [
                "Data Structures"
            ],
            "problem_code_id": "ATTIC",
            "difficulty_level": "1295",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 34321501,
                    "submission_date": 1592063939,
                    "language": "PYTH 3",
                    "username": "chef_rohan",
                    "user_rating_star": 3,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.73",
                    "memory": "18.5M",
                    "solution": 34321501,
                    "code": "#attic cross\r\nfrom sys import stdin,stdout\r\ninp = stdin.readline\r\n\r\nt=int(inp())\r\n\r\nwhile(t):\r\n  t-=1\r\n  s=inp()\r\n  e=0;d=0;k=0\r\n  if s.count('.')==0:\r\n      print(0)\r\n  else:\r\n      for i in s:\r\n        if(i=='.'):\r\n          e+=1\r\n          \r\n        else:\r\n          if(e>d):  k+=1;d=e\r\n          e=0\r\n      print(k)"
                },
                {
                    "id": 33572664,
                    "submission_date": 1591110860,
                    "language": "PYTH 3",
                    "username": "yashyash225",
                    "user_rating_star": 3,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "4.81",
                    "memory": "22.8M",
                    "solution": 33572664,
                    "code": "t=int(input())\n\nfor x in range(t):\n    s=input()\n    l=[]\n    count=0\n    for i in s:\n        if i=='.':\n            count+=1\n        else:\n            if count!=0:\n                l.append(count)\n            count=0\n    if count!=0:\n        l.append(count)\n    if len(l)==0:\n        print('0')\n    else:\n        sum=1\n        max=l[0]\n        for i in range(1,len(l)):\n            if max<l[i]:\n                sum+=1\n                max=l[i]\n        print(sum)\n\n    "
                }
            ]
        },
        "MAX2": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "5\n10100",
                    "output": "2",
                    "explanation": ""
                }
            ],
            "problem_statement": "Given a binary number (of $N$ bits) $X$. Find the highest power of 2 that divides this number.\nNote: If the binary number is \"100\" then the highest power of 2 that divides it is 2 (as $2^2$ = 4)Input:\nThe first line contains N the number of bits in the number\nThe next line contains a binary number of N bits\n\nOutput:\nThe first and only line contains the max power of 2 that divides the given number\n\nConstraints:\n $1 \\leq N \\leq10^5$\n $1\\leq X$",
            "input_format": "",
            "output_format": "",
            "problem_name": "Max power",
            "user_tags": [
                "String",
                "Binary"
            ],
            "computed_tags": [
                "Data Structures",
                "Mathematics",
                "Number System"
            ],
            "problem_code_id": "MAX2",
            "difficulty_level": "1282",
            "ai_solutions": [
                "def max_power_of_two(N, X):\n    binary_num = int(X, 2)\n    power = 0\n    while binary_num % 2 == 0:\n        binary_num /= 2\n        power += 1\n    return power\n\nN = int(input().strip())\nX = input().strip()\nprint(max_power_of_two(N, X))",
                "def max_power_of_two(N, X):\n    return len(X) - len(X.rstrip('0'))\n\nN = int(input().strip())\nX = input().strip()\nprint(max_power_of_two(N, X))"
            ],
            "human_solutions": [
                {
                    "id": 33427087,
                    "submission_date": 1590809896,
                    "language": "PYTH 3",
                    "username": "manishreddy_l",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.02",
                    "memory": "17.6M",
                    "solution": 33427087,
                    "code": "n = int(input())\ns = input()\nl = list(s)\nx=[]\na = 0\nl.reverse()\nfor i in range(n):\n    if(l[i]=='1'):\n        a=i\n        break\nprint(a)"
                },
                {
                    "id": 33412150,
                    "submission_date": 1590744710,
                    "language": "PYTH 3",
                    "username": "vallepu123",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.02",
                    "memory": "17.6M",
                    "solution": 33412150,
                    "code": "n = int(input())\r\ns = input()\r\nprint(s[::-1].find('1'))"
                }
            ]
        },
        "DRAGNXOR": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "3\n3 5 4\n5 0 1\n4 3 7",
                    "output": "7\n16\n14",
                    "explanation": "Case 1: 5 and 4 as 3-bit binary strings are (101)2 and (100)2 respectively. After shuffling, xor can be maximum for (110)2 ^ (001)2 = (111)2 = 7\nCase 2: Maximum Possible result can be for (00000)2 ^ (10000)2 = (10000)2 = 16\nCase 3: Maximum Possible result can be for (0011)2 ^ (1101)2 = (1110)2 = 14"
                }
            ],
            "problem_statement": "Did you ever hear about 'Dragon Food' ? Its used to refer to the chocolates bought for your loved ones :). Po offers dragon food to master Shifu, who is a famous cook in the valley of food. In return, Shifu hands over the dragon scroll to Po, which is said to hold the ingredients of the secret recipe. To open the dragon scroll, one has to solve the following puzzle. \n1. Consider a N-bit integer A. We call an integer A' as shuffle-A, if A' can be obtained by shuffling the bits of A in its binary representation. For eg. if N = 5 and A = 6 = (00110)2,  A' can be any 5-bit integer having exactly two 1s in it i.e., any of (00011)2, (00101)2, (00110)2, (01010)2, ...., (11000)2.\n2. Given two N-bit integers A and B, find the maximum possible value of (A' xor B') where A' is a shuffle-A, B' is a shuffle-B and xor is the bit-wise xor operator.\nGiven N, A and B, please help Po in opening the dragon scroll.Notes\n1. xor operator takes two bit strings of equal length and performs the logical XOR operation on each pair of corresponding bits. The result in each position is 1 if only the first bit is 1 OR only the second bit is 1, but will be 0 if both are 1 or both are 0. For eg: 5 (0101) xor 3(0011) = 6(0110). In most languages it is represented using ^ symbol. 5 ^ 3 = 6.\n2. If the integer actually needs less than N bits to represent in binary, append sufficient number of leading 0 bits. For eg. as shown in the problem statement for N = 5, A = 6 = (00110)2\nInput\nFirst line contains an integer T ( number of test cases, around 100 ). T cases follow, each having N A B in a single line, separated by a space. ( 1 N )\n\n\nOutput\nFor each case, output the maximum possible value of (shuffle-A xor shuffle-B) in a separate line.",
            "input_format": "",
            "output_format": "",
            "problem_name": "Open the Dragon Scroll",
            "user_tags": [
                "Bitwise Operation"
            ],
            "computed_tags": [
                "Mathematics",
                "Bit Manipulation"
            ],
            "problem_code_id": "DRAGNXOR",
            "difficulty_level": "1257",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 31545692,
                    "submission_date": 1586423742,
                    "language": "PYTH 3",
                    "username": "justsuyash",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.03",
                    "memory": "17.5M",
                    "solution": 31545692,
                    "code": "for tc in range(int(input())):\n    \n    z,n1,n2 = map(int,input().split(' '))\n    \n    n1 = bin(n1)\n    n2 = bin(n2)\n    \n    c1 = n1.count('1')\n    c2 = n2.count('1')\n    \n    ones =  c1+c2\n    \n    nums = abs(z - ones)\n    \n    sumi = 0 \n    for i in range(nums,z):\n        sumi = sumi + 2**i\n        \n        \n    print(sumi)"
                },
                {
                    "id": 30922215,
                    "submission_date": 1585665791,
                    "language": "PYTH 3",
                    "username": "aarushi1",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.02",
                    "memory": "17.6M",
                    "solution": 30922215,
                    "code": "for t in range(int(input())):\n    n,a,b=map(int,input().split())\n    a = bin(a)\n    b = bin(b)\n    ones = a.count('1') + b.count('1')\n    num = 0\n    l = abs(n - ones)\n    for i in range(l, n):\n        num += 2**i\n    print(num)"
                }
            ]
        },
        "APPROX": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "3\n0\n6\n20",
                    "output": "3\n3.141592\n3.14159265301190260407",
                    "explanation": "Example case 1. Here K = 0 so we don't need to output any digits after the decimal point. The decimal point itself also should not be output.\nExample case 2. Note that here we truncate (not round) the actual value of 103993/33102 to 6 digits after the decimal point. As you see from example case 3 rounded value here differs from truncated one.\nExample case 3. This example is only to show that this approximation of ? is also far from perfect :)"
                }
            ],
            "problem_statement": "Chef has recently learnt some new facts about the famous number \u03c0. For example, he was surprised that ordinary fractions are sometimes used to represent this number approximately. For example, 22/7, 355/113 or even 103993/33102.\nSoon, by calculating the value of 22/7 and 355/113 on paper Chef became quite disappointed because these values are not precise enough. For example, 22/7 differs in the third digit after the decimal point. So, these values are definitely should not be used for serious calculations.\nHowever, Chef doesn't know anything about 103993/33102. This fraction is quite inconvenient to calculate on paper. Chef is curious how precise this value is. So he asks you to help him and to calculate the first K digits after the decimal point of such an approximation of \u03c0. He consider this ordinary fraction as infinite decimal fraction so formally he asks you to calculate this approximation truncated to the first K digits after the decimal point.\nInput\nThe first line of the input contains an integer T, denoting the number of test cases. The description of T test cases follows. The only line of each test case contains a single integer K.\nOutput\nFor each test case output a single line containing the value of 103993/33102 truncated to the first K digits after the decimal point. Note that for K = 0 you should output just \"3\" without decimal point (quotes are for clarity).\nConstraints\n0 \u2264 K \u2264 106\n1 \u2264 T \u2264 2000\nThe sum of K over the input does not exceed 106",
            "input_format": "",
            "output_format": "",
            "problem_name": "Approximately",
            "user_tags": [
                "Basic Maths",
                "Implementation"
            ],
            "computed_tags": [
                "Mathematics",
                "Algorithms"
            ],
            "problem_code_id": "APPROX",
            "difficulty_level": "1310",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 33088927,
                    "submission_date": 1589511696,
                    "language": "PYTH 3",
                    "username": "devesh_iitism",
                    "user_rating_star": 4,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.46",
                    "memory": "22.7M",
                    "solution": 33088927,
                    "code": "from decimal import *\r\nt=int(input())\r\nwhile t>0:\r\n    t-=1\r\n    K=int(input())\r\n    if K==0:\r\n        print(3)\r\n    else:\r\n        ans='3.'\r\n        y=33102\r\n        x=103993%y\r\n\r\n        for i in range(K):\r\n            x*=10\r\n            ans+=str(x//y)\r\n            x=x%y\r\n        print(ans)"
                },
                {
                    "id": 32323321,
                    "submission_date": 1587934794,
                    "language": "PYTH 3",
                    "username": "aman_ravan02",
                    "user_rating_star": 3,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.37",
                    "memory": "25.8M",
                    "solution": 32323321,
                    "code": "for aman in range(int(input())):\r\n    k = int(input())\r\n    if (k == 0):\r\n        print(\"3\")\r\n        continue\r\n    else:\r\n        arr = []\r\n        arr.append(\"3.\")\r\n        r = 103993 % 33102\r\n        for i in range(k):\r\n            r *= 10\r\n            arr.append(r // 33102)\r\n            r = r % 33102\r\n        print(''.join(map(str, arr)))"
                }
            ]
        },
        "CHEFLUCK": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "5\n7\n4\n11\n1\n15",
                    "output": "7\n0\n7\n-1\n7",
                    "explanation": "For the last test case, N = 15, the smallest lucky lucky number is\n444444477777777. The count of digit 4 is 7."
                }
            ],
            "problem_statement": "Every great chef knows that lucky numbers are positive integers whose decimal representations contain only the lucky digits 4 and 7. For example, numbers 47, 744, 4 are lucky and 5, 17, 467 are not.   \n\nOur chef has recently returned from the Lucky country. He observed that every restaurant in the Lucky country had a lucky number as its name. \nHe believes that having a lucky number as a restaurant name can indeed turn out to be very lucky.   \n\nOur chef believes that it is possible to make a lucky number having N digits even luckier. Any number following the rules below is called Lucky lucky number -   \n\n 1. The number contains only digits 4 and 7. \n 2. Count of digit 4 in the number should be divisible by 7. \n 3. Count of digit 7 in the number should be divisible by 4.  \n\nHelp our chef to compute the count of digit 4 in the smallest Lucky lucky number having N digits. \n\n\nInput\n\nFirst line contains T, number of test cases. Each of the next T lines contains a number N, the number of digits in the Lucky lucky number to be formed.  \n\n1\nOutput\n\nIf it is not possible to form a Lucky lucky number having N digits, output -1.\nOtherwise, output the count of digit 4 in the smallest Lucky lucky number having N digits.",
            "input_format": "",
            "output_format": "",
            "problem_name": "Lucky lucky number",
            "user_tags": [
                "easy",
                "isha_adm",
                "may12"
            ],
            "computed_tags": [],
            "problem_code_id": "CHEFLUCK",
            "difficulty_level": "1302",
            "ai_solutions": [
                "T = int(input())\nfor _ in range(T):\n    N = int(input())\n    for x in range(0, N+1, 7):\n        if (N - x) % 4 == 0:\n            print(x)\n            break\n    else:\n        print(-1)",
                "def find_lucky_lucky_number(T, test_cases):\n    results = []\n    for N in test_cases:\n        for x in range(0, N+1, 7):\n            if (N - x) % 4 == 0:\n                results.append(x)\n                break\n        else:\n            results.append(-1)\n    return results\n\nT = int(input())\ntest_cases = [int(input()) for _ in range(T)]\nprint('\\n'.join(map(str, find_lucky_lucky_number(T, test_cases))))"
            ],
            "human_solutions": [
                {
                    "id": 32812409,
                    "submission_date": 1588838303,
                    "language": "PYTH 3",
                    "username": "sharmaji27",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.02",
                    "memory": "17.6M",
                    "solution": 32812409,
                    "code": "for _ in range(int(input())):\n    n = int(input())\n    f=0\n    a=n\n    \n    while n%7!=0:\n        n-=4\n    ans= a-n\n\n    if(ans%4==0 and n>=0):\n        print(n)\n    else:\n        print(-1)"
                },
                {
                    "id": 25360385,
                    "submission_date": 1563630770,
                    "language": "PYTH 3",
                    "username": "sumashreya",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.02",
                    "memory": "17.6M",
                    "solution": 25360385,
                    "code": "for _ in range(int(input())):\n    n = int(input())\n    flag = 0\n    for x in range(7):\n        if (n-x*4) < 0:\n            break\n        if (n-x*4) % 7 == 0:\n            flag = 1\n            print(n-x*4)\n            break\n    if flag == 0:\n        print(-1)\n"
                }
            ]
        },
        "SINS": {
            "constraints": "$1 \\leq T \\leq 100000$\n$0 \\leq X,Y \\leq 10^9$",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "3\n5 3\n10 10\n4 8",
                    "output": "2\n20\n8\n",
                    "explanation": "Denoting Meliodas as $M$, Ban as $B$.\nTestcase 1:\n$M$=5, $B$=3\nBan eates 3 chocolates of Meliodas.\n$M$=2, $B$=3\nMeliodas eats 2 chocolates of Ban.\n$M$=2, $B$=1\nBan eates 1 chocolate of Meliodas.\n$M$=1, $B$=1\nSince they have the same no of candies, they stop quarreling.\nTotal candies left: 2  \nTestcase 2:\n$M$=10, $B$=10\nSince both of them had the same candies to begin with, there was no point in fighting.\nTotal candies left: 20  \nTestcase 3:\n$M$=4, $B$=8\nMeliodas eats 4 chocolates of Ban.\n$M$=4, $B$=4\nSince they have the same no of candies, they stop quarreling.\nTotal candies left: 8"
                }
            ],
            "problem_statement": "Meliodas and Ban are fighting over chocolates. Meliodas has $X$ chocolates, while Ban has $Y$. Whoever has lesser number of chocolates eats as many chocolates as he has from the other's collection. This eatfest war continues till either they have the same number of chocolates, or atleast one of them is left with no chocolates.\nCan you help Elizabeth predict the total no of chocolates they'll be left with at the end of their war?",
            "input_format": "First line will contain $T$, number of testcases. Then the testcases follow. \nEach testcase contains of a single line of input, which contains two integers $X, Y$, the no of chocolates Meliodas and Ban have, respectively.",
            "output_format": "For each testcase, output in a single line the no of chocolates that remain after Ban and Meliodas stop fighting.",
            "problem_name": "The Deadly Sin",
            "user_tags": [
                "Modular Arithmetic",
                "Basic Maths",
                "GCD",
                "Recursion",
                "Implementation"
            ],
            "computed_tags": [
                "Mathematics",
                "Number Theory",
                "Algorithms"
            ],
            "problem_code_id": "SINS",
            "difficulty_level": "1372",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 34878193,
                    "submission_date": 1593497302,
                    "language": "PYTH 3",
                    "username": "saurabh1705",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.67",
                    "memory": "17.6M",
                    "solution": 34878193,
                    "code": "for _ in range(int(input())):\n    m, b = map(int, input().split())\n    while m != 0:\n        m, b = b%m, m\n    print(2*b)"
                },
                {
                    "id": 34835224,
                    "submission_date": 1593328402,
                    "language": "PYTH 3",
                    "username": "divya_1306",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.61",
                    "memory": "17.6M",
                    "solution": 34835224,
                    "code": "import math\n\nt = int(input())\n\nwhile t:\n    m, b = map(int, input().split())\n    \n    if m == b or (m == 0 or b == 0):\n        print(m + b)\n    else:\n        print(2 * (math.gcd(m,b)))\n    \n    t -= 1"
                }
            ]
        },
        "ACBALL": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "1\nWBWB\nWBBB",
                    "output": "BWBW",
                    "explanation": "Example case 1. As we know, Hamming Distance(WBWB, BWBW) + Hamming Distance(WBBB, BWBW) = 4 + 3 = 7.\nYou can try any other value for string Z, it will never exceed 6."
                }
            ],
            "problem_statement": "Read problems statements in Mandarin Chinese , Russian and Vietnamese as well.\nAkhil has many balls of white and black colors. One day, he was playing with them. During the play, he arranged the balls into two rows both consisting of N number of balls. These two rows of balls are given to you in the form of strings X, Y. Both these string consist of 'W' and 'B', where 'W' denotes a white colored ball and 'B' a black colored.\n\nOther than these two rows of balls, Akhil has an infinite supply of extra balls of each color. he wants to create another row of N balls, Z in such a way that the sum of hamming distance between X and Z, and hamming distance between Y and Z is maximized.\nHamming Distance between two strings X and Y is defined as the number of positions where the color of balls in row X differs from the row Y ball at that position. e.g. hamming distance between \"WBB\", \"BWB\" is 2, as at position 1 and 2, corresponding colors in the two strings differ.\n.\nAs there can be multiple such arrangements of row Z, Akhil wants you to find the lexicographically smallest arrangement which will maximize the above value. \n\nInput\nThe first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows:\nFirst line of each test case will contain a string X denoting the arrangement of balls in first row\nSecond line will contain the string Y denoting the arrangement of balls in second row.\n\nOutput\nFor each test case, output a single line containing the string of length N denoting the arrangement of colors of the balls belonging to row Z.\n\nConstraints\n1 \u2264 T \u2264 3\n\nSubtasks\nSubtask #1 (10 points) : 1 \u2264 N \u2264 16\nSubtask #2 (20 points) : 1 \u2264 N \u2264 103\nSubtask #3 (70 points) : 1 \u2264 N \u2264 105",
            "input_format": "",
            "output_format": "",
            "problem_name": "Akhil And Colored Balls",
            "user_tags": [
                "String",
                "Hamming Distance",
                "Greedy",
                "ad-hoc"
            ],
            "computed_tags": [
                "Data Structures",
                "Mathematics",
                "Error Detection",
                "Algorithms",
                "Constructive"
            ],
            "problem_code_id": "ACBALL",
            "difficulty_level": "1329",
            "ai_solutions": [
                "T = int(input())\nfor _ in range(T):\n    X = input()\n    Y = input()\n    Z = ''\n    for i in range(len(X)):\n        if X[i] == Y[i]:\n            if X[i] == 'B':\n                Z += 'W'\n            else:\n                Z += 'B'\n        else:\n            Z += 'B'\n    print(Z)",
                "T = int(input())\nfor _ in range(T):\n    X = input()\n    Y = input()\n    Z = ['B' if X[i] != Y[i] else 'W' if X[i] == 'B' else 'B' for i in range(len(X))]\n    print(''.join(Z))"
            ],
            "human_solutions": [
                {
                    "id": 32911507,
                    "submission_date": 1589019088,
                    "language": "PYTH 3",
                    "username": "vallepu123",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.09",
                    "memory": "18M",
                    "solution": 32911507,
                    "code": "t=int(input())\r\nfor i in range(t):\r\n    x=input()\r\n    y=input()\r\n    z=''\r\n    for i in range(len(x)):\r\n        if x[i]==y[i]:\r\n            if x[i]=='W':\r\n                z+='B'\r\n            else:\r\n                z+='W'\r\n        else:\r\n            z+='B'\r\n    print(z)"
                },
                {
                    "id": 32908488,
                    "submission_date": 1589015074,
                    "language": "PYTH 3",
                    "username": "rajpravali",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.04",
                    "memory": "18M",
                    "solution": 32908488,
                    "code": "for _ in range(int(input())):\n    X = input()\n    Y = input()\n    \n    Z = ''.join('W' if x == 'B' and y == 'B' else 'B' for x, y in zip(X, Y))\n    print(Z)"
                }
            ]
        },
        "EID2": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "5\r\n5 7 10 10 20 50\r\n5 5 5 20 10 20\r\n10 1 17 5 10 15\r\n3 6 3 8 10 9\r\n8 5 5 50 10 10",
                    "output": "FAIR\r\nNOT FAIR\r\nNOT FAIR\r\nNOT FAIR\r\nFAIR",
                    "explanation": "Example case 2: All children have same age which is 5, but second child got less money than the other children, so it's not fair.\nExample case 3: First child is older than second child but he got less money than him, so it's not fair.\nExample case 4: First and third children have same age, but didn't get same amount of money,  so it's not fair."
                }
            ],
            "problem_statement": "Read problem statements in Hindi, Bengali, Mandarin Chinese, Russian, and Vietnamese as well.\nEidi gifts are a tradition in which children receive money from elder relatives during the Eid celebration.\nChef has three children (numbered $1, 2, 3$) and he wants to give them Eidi gifts. The oldest child, Chefu, thinks that a distribution of money is fair only if an older child always receives more money than a younger child; if two children have the same age, they should receive the same amounts of money.\nFor each valid $i$, the $i$-th child is $A_i$ years old and it received $C_i$ units of money. Determine whether this distribution of money is fair.\nInput\n\nThe first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\nThe first and only line of each test case contains six space-separated integers $A_1$, $A_2$, $A_3$, $C_1$, $C_2$ and $C_3$.\n\nOutput\nFor each test case, print a single line containing the string \"FAIR\" if the distribution is fair or \"NOT FAIR\" otherwise.\nConstraints\n\n$1 \\le T \\le 1,000$\n$1 \\le A_1, A_2, A_3 \\le 17$\n$1 \\le C_1, C_2, C_3 \\le 100$\n\nSubtasks\nSubtask #1 (100 points): original constraints",
            "input_format": "",
            "output_format": "",
            "problem_name": "Eidi Gift",
            "user_tags": [
                "Implementation"
            ],
            "computed_tags": [
                "Algorithms"
            ],
            "problem_code_id": "EID2",
            "difficulty_level": "1378",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 33606434,
                    "submission_date": 1591215914,
                    "language": "PYTH 3",
                    "username": "jainskand",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.02",
                    "memory": "17.6M",
                    "solution": 33606434,
                    "code": "for _ in range(int(input())):\n\tli = [int(i) for i in input().split()]\n\tli1 = [(li[i],li[i+3]) for i in range(3)]\n\tli1.sort()\n\tfor i in range(2):\n\t\ta= li1[i][0]-li1[i+1][0]\n\t\tb =li1[i][1]-li1[i+1][1]\n\t\tif (a>0 and b>0) or (a==0 and b==0) or (a<0 and b<0):\n\t\t\tcontinue\n\t\tprint(\"NOT FAIR\")\n\t\tbreak\n\telse:\n\t\tprint(\"FAIR\")"
                },
                {
                    "id": 33485576,
                    "submission_date": 1590853525,
                    "language": "PYTH 3",
                    "username": "rajpravali",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.02",
                    "memory": "17.6M",
                    "solution": 33485576,
                    "code": "t= int(input())\nfor _ in range(t):\n    a1,a2,a3,c1,c2,c3= map(int,input().split())\n    count=3\n    if((a1>a2 and c1>c2) or (a2>a1 and c2>c1) or (a2==a1 and c2==c1)):\n        count-=1\n    if((a2>a3 and c2>c3) or (a3>a2 and c3>c2) or (a3==a2 and c3==c2)):\n        count-=1\n    if((a1>a3 and c1>c3) or (a3>a1 and c3>c1) or (a3==a1 and c3==c1)):\n        count-=1\n        \n    if count==0 :\n        print(\"FAIR\")\n    else:\n        print(\"NOT FAIR\")"
                }
            ]
        },
        "COOMILK": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "4\r\n7\r\ncookie milk milk cookie milk cookie milk\r\n5\r\ncookie cookie milk milk milk\r\n4\r\nmilk milk milk milk\r\n1\r\ncookie",
                    "output": "YES\r\nNO\r\nYES\r\nNO",
                    "explanation": "Test case 1. Limak is in the kitchen for 7 minutes.\nHe eats three cookies and after each of them he indeed drinks milk in the next minute.\nThe answer is \"YES\".\nTest case 2. Limak is in the kitchen for 5 minutes.\nIn the first minute he eats a cookie and in the second minute he eats a cookie again, instead of drinking milk.\nThe answer is \"NO\".\nTest case 3. Here Limak doesn't eat any cookies.\nThe answer is \"YES\" because the condition is satisfied (there is no situation when Limak eats a cookie but doesn't drink milk in the next minute).\nTest case 4. Limak eats a cookie and doesn't drink milk in the next minute so the answer is \"NO\"."
                }
            ],
            "problem_statement": "Read problems statements in Mandarin Chinese, Russian and Vietnamese as well.\nLimak is a little polar bear, who loves eating cookies and drinking milk.\nFor this reason he often visits Chef's kitchen.\nLimak is going to spend N minutes in the kitchen.\nEach minute he either eats a cookie or drinks milk.\nCookies are very sweet and thus Limak's parents have instructed him, that after eating a cookie, he has to drink milk in the next minute.\nYou are given whether he ate a cookie or drank milk in each of the N minutes. Your task is to check if Limak followed his parents' instructions. That is, you need to verify whether after each eaten cookie he drinks milk in the next minute.\nPrint \"YES\" or \"NO\" for each test case accordingly.\nInput\nThe first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows.\nThe first line of each test case contains an integer N denoting the number of minutes.\nThe second line of a test case contains N space-separated strings S1, S2, ..., SN.\nThe string Si is either \"cookie\" (if Limak eats a cookie in the i-th minute) or \"milk\" (otherwise).\nOutput\nFor each test case, output a single line containing the answer \u2014 \"YES\" if Limak followed his parents' instructions, and \"NO\" otherwise, both without the quotes.\nConstraints\n\n1 \u2264 T \u2264 50\n1 \u2264 N \u2264 50\n Each Si is either \"cookie\" or \"milk\" (without the quotes).\n\nSubtasks\n\nSubtask #1 (40 points) N = 2\nSubtask #2 (60 points) Original constraints",
            "input_format": "",
            "output_format": "",
            "problem_name": "Bear and Milky Cookies",
            "user_tags": [
                "Implementation"
            ],
            "computed_tags": [
                "Algorithms"
            ],
            "problem_code_id": "COOMILK",
            "difficulty_level": "1244",
            "ai_solutions": [
                "T = int(input())\nfor _ in range(T):\n    N = int(input())\n    S = list(input().split())\n    flag = 0\n    for i in range(N-1):\n        if S[i] == 'cookie' and S[i+1] != 'milk':\n            flag = 1\n            break\n    if S[-1] == 'cookie':\n        flag = 1\n    if flag == 0:\n        print('YES')\n    else:\n        print('NO')"
            ],
            "human_solutions": [
                {
                    "id": 35206948,
                    "submission_date": 1594027946,
                    "language": "PYTH 3",
                    "username": "venkatsai9951",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.02",
                    "memory": "17.6M",
                    "solution": 35206948,
                    "code": "for _ in range(int(input())):\n   n=int(input())\n   a=[]\n   a=list(map(str,input().split()))\n   s=0\n   if a[n-1]=='cookie':\n       print('NO')\n   else:\n       for i in range(n-1):\n           if a[i]=='cookie' and a[i+1]=='cookie':\n               print(\"NO\")\n               s=1\n               break\n       if s==0:\n            print('YES')\n        "
                },
                {
                    "id": 34916531,
                    "submission_date": 1593626070,
                    "language": "PYTH 3",
                    "username": "ashsemwal404",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.02",
                    "memory": "17.5M",
                    "solution": 34916531,
                    "code": "for _ in range(int(input())):\r\n   n=int(input())\r\n   a=[]\r\n   a=list(map(str,input().split()))\r\n   s=0\r\n   if a[n-1]=='cookie':\r\n       print('NO')\r\n   else:\r\n       for i in range(n-1):\r\n           if a[i]=='cookie' and a[i+1]=='cookie':\r\n               print(\"NO\")\r\n               s=1\r\n               break\r\n       if s==0:\r\n            print('YES')"
                }
            ]
        },
        "FBMT": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "2\n4\nab\nbc\nbc\nab\n3\nxxx\nyyy\nyyy",
                    "output": "Draw\nyyy",
                    "explanation": ""
                }
            ],
            "problem_statement": "Read problems statements in Mandarin chinese, Russian and Vietnamese as well.\nYou are given a score log of a football match between two teams. Every time when one of the teams scored a goal, the name of that team was written in the score log on a separate line.\nAt the end of the match, the team that scored strictly more goals than the other team wins the match. If both teams scored an equal number of goals, the match ends in a tie. Determine the name of the winning team or that the match ended in a tie.\nInput\n\nThe first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows.\nThe first line of each test case contains a single integer n denoting the number of records in the score log (the total number of goals scored during the match).\nEach of the following n lines contains a string s denoting the name of the team that scored a goal.\n\nOutput\nFor each test case, print a single line containing one string \u2014 the name of the winning team or \"Draw\" (without quotes) in case of a tie.\nConstraints\n\n1 \u2264 T \u2264 105\n0 \u2264 n \u2264 105\n1 \u2264 |s| \u2264 20\ns consists only of lowercase English letters\nsum of n over all test cases \u2264 105\nfor each test case, there are at most two different team names",
            "input_format": "",
            "output_format": "",
            "problem_name": "Football Match",
            "user_tags": [
                "String",
                "Brute Force",
                "Implementation"
            ],
            "computed_tags": [
                "Data Structures",
                "Algorithms"
            ],
            "problem_code_id": "FBMT",
            "difficulty_level": "1379",
            "ai_solutions": [
                "from collections import Counter\n\nT = int(input().strip())\nfor _ in range(T):\n    n = int(input().strip())\n    goals = [input().strip() for _ in range(n)]\n    goal_count = Counter(goals)\n    max_goals = max(goal_count.values())\n    winners = [team for team, goals in goal_count.items() if goals == max_goals]\n    if len(winners) > 1:\n        print(\"Draw\")\n    else:\n        print(winners[0])",
                "T = int(input().strip())\nfor _ in range(T):\n    n = int(input().strip())\n    team1, team2 = None, None\n    score1, score2 = 0, 0\n    for _ in range(n):\n        team = input().strip()\n        if team1 is None:\n            team1 = team\n            score1 += 1\n        elif team1 == team:\n            score1 += 1\n        elif team2 is None:\n            team2 = team\n            score2 += 1\n        else:\n            score2 += 1\n    if score1 > score2:\n        print(team1)\n    elif score2 > score1:\n        print(team2)\n    else:\n        print(\"Draw\")"
            ],
            "human_solutions": [
                {
                    "id": 33593197,
                    "submission_date": 1591188208,
                    "language": "PYTH 3",
                    "username": "nihar_gupta657",
                    "user_rating_star": 3,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.10",
                    "memory": "17.6M",
                    "solution": 33593197,
                    "code": "for _ in range(int(input())):\n    n=int(input())\n    if n==0:\n        print('Draw')\n    else:\n        k=[1,0]\n        f=input()\n        se=''\n        for i in range(n-1):\n            s=input()\n            if s ==f:\n                k[0]+=1 \n            else:\n                se=s\n                k[1]+=1\n        if k[0]>k[1]:\n            print(f)\n        elif k[0]<k[1]:\n            print(se)\n        else:\n            print('Draw')"
                },
                {
                    "id": 33564889,
                    "submission_date": 1591088464,
                    "language": "PYTH 3",
                    "username": "n00b2312",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.10",
                    "memory": "17.6M",
                    "solution": 33564889,
                    "code": "for _ in range(int(input())):\n    n=int(input())\n    if n==0:\n        print('Draw')\n        continue\n    teamA=input()\n    teamB=''\n    a=1\n    b=0\n    for i in range(n-1): \n        s=input()\n        if s==teamA:\n            a=a+1 \n        else:\n            teamB=s \n            b=b+1 \n    if a==b:\n        print('Draw')\n    elif a>b:\n        print(teamA)\n    elif a<b:\n        print(teamB)\n        "
                }
            ]
        },
        "RECNDNOS": {
            "constraints": "$1 \\le T \\le 10^3$\n$1 \\le N \\le 10^3$\n$1 \\le A_i \\le 10^3$\nSum of $N$ over all test cases doesn't exceed $10^4$",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "3\n5\n1 2 2 1 2\n6\n1 1 1 1 1 1\n8\n1 2 2 2 3 4 2 1",
                    "output": "1\n1\n2",
                    "explanation": "Test case 1: \nFor both type 1 and type 2, Chef can pick at most two dishes. In the case of multiple answers, we pick the smallest one. Hence the answer will be $1$.\nTest case 2: \nThere are only dishes of type 1. So the answer is $1$.\nTest case 3: \nFor type 1, Chef can choose at most two dishes. For type 2, he can choose three dishes. For type 3 and type 4, Chef can choose the only dish available. Hence the maximum is in type 2 and so the answer is $2$."
                }
            ],
            "problem_statement": "Chef has $N$ dishes of different types arranged in a row: $A_1, A_2, \\ldots, A_N$, where $A_i$ denotes the type of the $i^{th}$ dish. He wants to choose as many dishes as possible from the given list but while satisfying two conditions: \n\nHe can choose only one type of dish.   \nNo two chosen dishes should be adjacent to each other. \n\nChef wants to know which type of dish he should choose from, so that he can pick the maximum number of dishes.\nExample: \nGiven $N$=$9$ and $A$=$[1, 2, 2, 1, 2, 1, 1, 1, 1]$. \nFor type 1, Chef can choose at most four dishes. One of the ways to choose four dishes of type 1 is $A_1$, $A_4$, $A_7$ and $A_9$. \nFor type 2, Chef can choose at most two dishes. One way is to choose $A_3$ and $A_5$.\nSo in this case, Chef should go for type 1, in which he can pick more dishes.",
            "input_format": "The first line contains $T$, the number of test cases. Then the test cases follow.\nFor each test case, the first line contains a single integer $N$.\nThe second line contains $N$ integers $A_1, A_2, \\ldots, A_N$.",
            "output_format": "For each test case, print a single line containing one integer \u2015 the type of the dish that Chef should choose from. If there are multiple answers, print the smallest one.",
            "problem_name": "Chef and Numbers",
            "user_tags": [
                "Greedy",
                "Observation",
                "Brute Force"
            ],
            "computed_tags": [
                "Algorithms"
            ],
            "problem_code_id": "RECNDNOS",
            "difficulty_level": "1396",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 1027886324,
                    "submission_date": 1698745297,
                    "language": "PYTH 3",
                    "username": "ap21110011471",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.01",
                    "memory": "8.6M",
                    "solution": 1027886324,
                    "code": "from collections import Counter\r\n\r\nfor t in range(int(input())):\r\n    n=int(input())\r\n    a=list(map(int,input().split()))\r\n    \r\n    i=0\r\n    \r\n    while i<len(a)-1:\r\n        \r\n        if a[i]==a[i+1]:\r\n            del a[i+1]\r\n            \r\n        i+=1\r\n        \r\n    cod=Counter(a)\r\n\r\n    typ=-1\r\n    val=-1\r\n    \r\n    for k,v in cod.items():\r\n        if v>val:\r\n            typ=k\r\n            val=v\r\n        elif v==val and k<typ:\r\n            typ=k\r\n            \r\n    print(typ)\r\n"
                },
                {
                    "id": 1027338540,
                    "submission_date": 1698339879,
                    "language": "PYTH 3",
                    "username": "kumbha_sruthi",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.01",
                    "memory": "8.9M",
                    "solution": 1027338540,
                    "code": "s=int(input())\r\nfor _ in range(s):\r\n    r=int(input())\r\n    u=list(map(int,input().split()))\r\n    k=dict()\r\n    p=0\r\n    for c in u:\r\n        if(c not in k):\r\n            k[c]=1\r\n            p=c\r\n        else:\r\n            if(c!=p):\r\n                k[c]=k[c]+1\r\n                p=c\r\n            else:\r\n                p=0\r\n    z=sorted(k.items(),key=lambda s:(-s[1],s[0]))\r\n    print(z[0][0])\r\n    "
                }
            ]
        },
        "POPGATES": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "3\r\n5 3\r\nH T T H T\r\n7 4\r\nH H T T T H H\r\n6 1\r\nT H T H T T",
                    "output": "1\r\n2\r\n2",
                    "explanation": ""
                }
            ],
            "problem_statement": "Read problem statements in Hindi, Bengali, Mandarin Chinese, Russian, and Vietnamese as well.\nYou are Dastan, the great Prince of Persia!\nAfter searching long for the mysterious 'Sands of Time', you have finally arrived at the gates of the city that hosts the ancient temple of the gods. However, the gate is locked and it can only be opened with a secret code, which you need to obtain by solving the following puzzle:\nThere is a table in front of you, with $N$ coins placed in a row and numbered $1$ through $N$ from left to right. For each coin, you know whether it is initially showing heads or tails. You have to perform exactly $K$ operations. In one operation, you should remove the rightmost coin present on the table, and if this coin was showing heads right before it was removed, then you should also flip all the remaining coins. (If a coin was showing heads, then after it is flipped, it is showing tails, and vice versa.)\nThe code needed to enter the temple is the number of coins which, after these $K$ operations are performed, have not been removed and are showing heads. Can you find this number? The fate of Persia lies in your hands...\nInput\n\nThe first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\nThe first line of each test case contains two space-separated integers $N$ and $K$.\nThe second line contains $N$ space-separated characters. For each valid $i$, the $i$-th of these characters is 'H' if the $i$-th coin is initially showing heads or 'T' if it is showing tails.\n\nOutput\nFor each test case, print a single line containing one integer \u2015 the number of coins that are showing heads after $K$ operations.\nConstraints\n\n$1 \\le T \\le 200$\n$1 \\le K \\lt N \\le 100$\n\nSubtasks\nSubtask #1 (100 points): original constraints",
            "input_format": "",
            "output_format": "",
            "problem_name": "At the Gates",
            "user_tags": [
                "ad-hoc",
                "Observation",
                "Implementation"
            ],
            "computed_tags": [
                "Algorithms",
                "Constructive"
            ],
            "problem_code_id": "POPGATES",
            "difficulty_level": "1275",
            "ai_solutions": [
                "T = int(input())\nfor _ in range(T):\n    N, K = map(int, input().split())\n    coins = list(input().split())\n    for i in range(K):\n        if coins.pop() == 'H':\n            coins = ['H' if c == 'T' else 'T' for c in coins]\n    print(coins.count('H'))"
            ],
            "human_solutions": [
                {
                    "id": 1027028467,
                    "submission_date": 1698209020,
                    "language": "PYTH 3",
                    "username": "upanisha10",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.05",
                    "memory": "8.5M",
                    "solution": 1027028467,
                    "code": "for i in range(int(input())):\r\n    n,k = map(int,input().split())\r\n    arr = list(map(str,input().split()))\r\n    head_cnt = 0\r\n    while k:\r\n        t = arr.pop()\r\n        if t == \"H\":\r\n            for i in range(len(arr)):\r\n                if arr[i] == \"T\":\r\n                    arr[i] = \"H\"\r\n                else:\r\n                    arr[i] = \"T\"\r\n        k-=1\r\n    for i in range(len(arr)):\r\n        if arr[i] == \"H\":\r\n            head_cnt += 1 \r\n    print(head_cnt)"
                },
                {
                    "id": 1025934653,
                    "submission_date": 1697452640,
                    "language": "PYTH 3",
                    "username": "srgec_19547",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.07",
                    "memory": "9.5M",
                    "solution": 1025934653,
                    "code": "for i in range(int(input())):\r\n    m,n = map(int,input().split())\r\n    a = input().split()\r\n    for i in range(n):\r\n        coin = a.pop()\r\n        if coin == 'H':\r\n            for j in range(len(a)):\r\n                if a[j] == 'H' : a[j] = 'T'\r\n                else: a[j] = 'H'\r\n    print(a.count('H'))"
                }
            ]
        },
        "DEVUGRAP": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "2\r\n2 2\r\n3 5\r\n3 7\r\n10 16 18",
                    "output": "2\r\n8",
                    "explanation": "For the first test case, add or remove 1 grape in each of the bucket.\n\n\nFor the second test case, remove three grapes in the first bucket, remove two grapes from the second bucket and add three grapes in the third bucket."
                }
            ],
            "problem_statement": "Read problems statements in Mandarin Chinese  and Russian.\n\nGrapes of Coderpur are very famous. Devu went to the market and saw that there were N people selling grapes. He didn\u2019t like it because things were not very structured. So, he gave a task to Dhinwa to make things better. If Dhinwa successfully completes the task, Devu will be happy.\n\n \nDevu wants to change the number of grapes in a bucket of zero or more sellers in such a way that the GCD  of all the number of grapes is divisible by K. Dhinwa can add or remove any number of grapes from each of the buckets. Adding or removing a grape will be counted as an operation. Also after the operation, none of the seller\u2019s bucket should be empty.\n\n\nHelp Dhinwa in finding the minimum number of operations needed to make Devu happy. \n\nInput\n\nFirst line of input contains an integer T denoting the number of test cases.  \nFor each test case, first line will contain an integer N denoting the number of buckets and integer K. \n Next line contains N space separated integers denoting the number of grapes in each of the bucket. \n\nOutput\nFor each test case, print a single integer representing the answer of that test case.\nConstraints\n\nSubtask #1: 10 points\n\n1 \u2264 T  \u2264 10, 1 \u2264 N ,K \u2264 10,  1 \u2264 number of grapes in a bucket \u2264 10\n\n\nSubtask #2: 10 points\n\n1 \u2264 T  \u2264 10, 1 \u2264 N,K  \u2264 100,  1 \u2264 number of grapes in a bucket  \u2264 100\n\n\nSubtask #3: 80 points\n\n1 \u2264 T  \u2264 10, 1 \u2264 N  \u2264 105,  1 \u2264 K \u2264  109,  1 number of grapes in a bucket \u2264 109",
            "input_format": "",
            "output_format": "",
            "problem_name": "Devu and Grapes",
            "user_tags": [
                "Basic Maths",
                "Greedy"
            ],
            "computed_tags": [
                "Mathematics",
                "Algorithms"
            ],
            "problem_code_id": "DEVUGRAP",
            "difficulty_level": "1343",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 37927692,
                    "submission_date": 1600111545,
                    "language": "PYTH 3",
                    "username": "saisudeep226",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.46",
                    "memory": "20.9M",
                    "solution": 37927692,
                    "code": "n=int(input())\r\n\r\nfor i in range(n) :\r\n\tN,k=map(int,input().split())\r\n\r\n\tbucks=list(map(int,input().split(' ',N-1)))\r\n\tans=0\r\n\tmid=int(k/2)\r\n\tfor j in bucks :\r\n\t\tx=j%k\r\n\t\ty=k-x\r\n\t\tif j>=k:\r\n\t\t\tans=ans+min(x,y)\r\n\t\telse:\r\n\t\t\tans=ans+y\r\n\r\n\tprint(ans)\t"
                },
                {
                    "id": 37496135,
                    "submission_date": 1599323331,
                    "language": "PYTH 3",
                    "username": "srisai_525",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.47",
                    "memory": "20.9M",
                    "solution": 37496135,
                    "code": "for _ in range(int(input())):\n    N,K = map(int,input().split())\n    G = list(map(int,input().split()))\n    ans = 0\n    for i in G:\n        Rem = i%K\n        if i < K:\n            ans += (K-Rem)\n        else:\n            ans += min(Rem,K-Rem)\n    print(ans)"
                }
            ]
        },
        "XENRANK": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "1\n1 2",
                    "output": "8",
                    "explanation": ""
                }
            ],
            "problem_statement": "Read problems statements in Mandarin Chinese, Russian and Vietnamese as well.\nXenny reverse-engineered all the binaries released by the International Security Agency (ISA)\nduring summer vacation just to pass time. As a reward, the ISA gave him infinite ByteCoins.\nOut of sheer boredom and a sense of purposelessness in life, Xenny decided to arrange the Coins on a 2-Dimensional Euclidean Plane.\nThe boredom was so strong that he arranged these coins in a specific pattern, as opposed to the usual, monotonous way of storing coins in a Piggy Bank.\nOn each integer co-ordinate (x, y) where x \u2265 0 and y \u2265 0, a single coin was placed. And each coin was assigned a rank. The following pattern was followed in the arrangement:\nLet's denote the co-ordinates of the kth coin by (xk, yk) and its rank by Rk.\n\nFor any 2 coins i, j:\n\n\nif (xi + yi) j + yj) or ( (xi + yi) == (xj + yj) and xi j)\n\n\nthen Ri j. We sort all the coins by this comparison.\n\n\nThe index of the coin (C) in this sorted list of coins (1-indexed) is its rank.\n\nEach query is as follows: Given (U, V). Among the coins that are lying on or inside the rectangle with\nits diagonal end-points being (0, 0) and (U, V),\nwhich is the coin that has the maximum rank?\nInput\n\nThe first line contains an integer, T - the number of testcases.\n\nEach testcase contains 2 space-separated integers: U, V.\n\nOutput\nFor each testcase, print the rank of the maximum ranked coin, on a new line.\nConstraints\n\n  Subtask 1: (40 points)\n  \n1 \u2264 T \u2264 100\n1 \u2264 U, V \u2264 100\n\n\n  Subtask 2: (60 points)\n  \n1 \u2264 T \u2264 100\n1 \u2264 U, V \u2264 109",
            "input_format": "",
            "output_format": "",
            "problem_name": "Xenny and Coin Rankings",
            "user_tags": [
                "Basic Maths",
                "ad-hoc"
            ],
            "computed_tags": [
                "Mathematics",
                "Algorithms",
                "Constructive"
            ],
            "problem_code_id": "XENRANK",
            "difficulty_level": "1370",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 56257240,
                    "submission_date": 1641939195,
                    "language": "PYTH 3",
                    "username": "dscdsc",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.02",
                    "memory": "9.2M",
                    "solution": 56257240,
                    "code": "t = int(input())\n\nfor i in range(t):\n    u, v = map(int, input().split())\n    x = u + v \n    print((x * (x + 1) // 2) + u + 1)"
                },
                {
                    "id": 48242131,
                    "submission_date": 1624775974,
                    "language": "PYTH 3",
                    "username": "vinayak_2003",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.02",
                    "memory": "17.5M",
                    "solution": 48242131,
                    "code": "t=int(input())\nfor i in range(t):\n\tu,v=map(int,input().split())\n\tx=u+v\n\tprint((x*(x+1)//2)+u+1)"
                }
            ]
        },
        "TICKETS5": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "2\r\nABABAB\r\nABC",
                    "output": "YES\r\nNO",
                    "explanation": ""
                }
            ],
            "problem_statement": "Read problems statements in Mandarin Chinese  and Russian.\nEvery day, Mike goes to his job by a bus, where he buys a ticket. On the ticket, there is a letter-code that can be represented as a string of upper-case Latin letters.\nMike believes that the day will be successful in case exactly two different letters in the code alternate.  Otherwise, he believes that the day will be unlucky. Please see note section for formal definition of alternating code.\nYou are given a ticket code. Please determine, whether the day will be successful for Mike or not. Print \"YES\" or \"NO\" (without quotes) corresponding to the situation.\nInput\nThe first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows.\nThe first and only line of each test case contains a single string S denoting the letter code on the ticket.\nOutput\nFor each test case, output a single line containing \"YES\" (without quotes) in case the day will be successful and \"NO\" otherwise.\nNote\nTwo letters x, y where x != y are said to be alternating in a code, if code is of form \"xyxyxy...\".\nConstraints\n\n\n1 \u2264 T \u2264 100\nS consists only of upper-case Latin letters\n\nSubtask 1 (50 points):\n\n|S| = 2\n\nSubtask 2 (50 points):\n\n2 \u2264 |S| \u2264 100",
            "input_format": "",
            "output_format": "",
            "problem_name": "Tickets",
            "user_tags": [
                "Implementation"
            ],
            "computed_tags": [
                "Algorithms"
            ],
            "problem_code_id": "TICKETS5",
            "difficulty_level": "1332",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 37686219,
                    "submission_date": 1599649120,
                    "language": "PYTH 3",
                    "username": "ujwalavg_123",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.02",
                    "memory": "17.5M",
                    "solution": 37686219,
                    "code": "n=int(input())\nwhile n>0:\n    n-=1\n    r=input()\n    l=len(r)\n    x=r[0]\n    y=r[1]\n    flag=1\n    if x!=y:\n        for i in range(l):\n            if i%2==0 and r[i]==x:\n                flag=1\n            elif i&1 and r[i]==y:\n                flag=1\n            else:\n                flag=0\n                break\n    else:\n        flag=0\n    if flag==1:\n        print(\"YES\")\n    else:\n        print(\"NO\")"
                },
                {
                    "id": 37389843,
                    "submission_date": 1599112718,
                    "language": "PYTH 3",
                    "username": "saikumar32767",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.02",
                    "memory": "17.6M",
                    "solution": 37389843,
                    "code": "def luck(S):\r\n    if S[0] == S[1]:\r\n        return \"NO\"\r\n    for i in range(2,len(S)):\r\n        if S[i] != S[i-2]:\r\n            return \"NO\"\r\n    return \"YES\"\r\nfor _ in range(int(input())):\r\n    S = input()\r\n    print(luck(S))"
                }
            ]
        },
        "MSTEP": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "2\n2\n1 3\n2 4\n3\n1 7 9\n2 4 8\n3 6 5",
                    "output": "4\n12",
                    "explanation": "Example case 1. Explained in the statement.\n\nExample case 2.\nThis is the sequence of cells visited: \n(1,1) to (2,1) to (3,1) to (2,2) to (3,3) to (3,2) to (1,2) to (2,3) to (1,3).\n\n\nWarning: Large input files, use scanf instead of cin in C/C++."
                }
            ],
            "problem_statement": "Read problems statements in Mandarin and Russian. Translations in Vietnamese to be uploaded soon.\n\nYou have a matrix of size N * N with rows numbered through 1 to N from top to bottom and columns through 1 to N from left to right. It contains all values from 1 to N2, i.e. each value from 1 to N2 occurs exactly once in the matrix.\n\n\nNow, you start from the cell containing value 1, and from there visit the cell with value 2, and then from there visit the cell with value 3, and so on till you have visited cell containing the number N2. In a single step, you can move from a cell to one of its adjacent cells. Two cells are said to be adjacent to each other if they share an edge between them.\n\n\nFind out minimum number of steps required.\n\n\nFor example, if matrix is \n\n1 3\n2 4\n \n\nYou start from cell containing value 1 (i.e. (1,1)) and you want to visit cell with value 2 (i.e. (2,1)). Now, from cell (2,1) you have to visit cell (1,2), which can be done is 2 steps (First we go from (2, 1) to (1, 1) and then to (1, 2), total 2 steps). Finally you move to cell where value 4 is present in 1 step. So, total number of steps required is 4.\n\n\nInput\n\nThe first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows.\nThe first line of each test case contains a single integer N denoting the size of matrix. Each of the next N lines contain N integers denoting the values in the rows of the matrix.\n\nOutput\n\nFor each test case, output in a single line the required answer.\n\nConstraints\n\n1 \u2264 T \u2264 5\n1 \u2264 N \u2264 500\n\nSubtasks\n\n Subtask 1 (30 points) : 1 \u2264 N \u2264 20\n Subtask 2 (70 points) : Original constraints",
            "input_format": "",
            "output_format": "",
            "problem_name": "Count Steps in Matrix",
            "user_tags": [
                "cakewalk",
                "darkshadows",
                "sept15"
            ],
            "computed_tags": [],
            "problem_code_id": "MSTEP",
            "difficulty_level": "1293",
            "ai_solutions": [
                "def solve():\n    T = int(input())\n    for _ in range(T):\n        N = int(input())\n        pos = [None]*(N*N+1)\n        for i in range(1, N+1):\n            row = list(map(int, input().split()))\n            for j in range(1, N+1):\n                pos[row[j-1]] = (i, j)\n        steps = 0\n        for i in range(2, N*N+1):\n            steps += abs(pos[i][0]-pos[i-1][0]) + abs(pos[i][1]-pos[i-1][1])\n        print(steps)\n\nsolve()",
                "def solve():\n    T = int(input())\n    for _ in range(T):\n        N = int(input())\n        pos = {}\n        for i in range(N):\n            row = list(map(int, input().split()))\n            for j in range(N):\n                pos[row[j]] = (i, j)\n        steps = 0\n        for i in range(2, N*N+1):\n            steps += abs(pos[i][0]-pos[i-1][0]) + abs(pos[i][1]-pos[i-1][1])\n        print(steps)\n\nsolve()"
            ],
            "human_solutions": [
                {
                    "id": 36779272,
                    "submission_date": 1597509262,
                    "language": "PYTH 3",
                    "username": "animefabhargav",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "1.43",
                    "memory": "39.1M",
                    "solution": 36779272,
                    "code": "for _ in range(int(input())):\n    n=int(input())\n    d={}\n    a=[]\n    for i in range(n):\n        a.append([int(x) for x in input().split()])\n        for j in range(n):\n            d[a[i][j]]=[i,j]\n    \n    c=0\n    for i in range(2,n*n+1):\n        c+=abs(d[i-1][0]-d[i][0])+abs(d[i-1][1]-d[i][1])\n    \n    print(c)\n            "
                },
                {
                    "id": 32724205,
                    "submission_date": 1588678890,
                    "language": "PYTH 3",
                    "username": "vvkefv_234",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "1.10",
                    "memory": "23.6M",
                    "solution": 32724205,
                    "code": "for i in range(int(input())):\r\n    n=int(input())\r\n    arr=[]\r\n    for i in range(n):\r\n        t=[int(i) for i in input().split()]\r\n        arr.append(t)\r\n    x=[0]*(n**2)\r\n    y=[0]*(n**2)   \r\n    for i in range(n):\r\n        for j in range(n):\r\n            x[arr[i][j]-1]=i+1\r\n            y[arr[i][j]-1]=j+1\r\n    s=0 \r\n    for i in range(n**2-1):\r\n        s+=abs(x[i]-x[i+1])+abs(y[i]-y[i+1])\r\n    print(s)            \r\n"
                }
            ]
        },
        "DISTCODE": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "2\nINBY\nBYBY",
                    "output": "3\n2",
                    "explanation": "Example case 1. The codes are IN, NB and BY.\nExample case 2. The codes are BY and YB."
                }
            ],
            "problem_statement": "Read problems statements in Mandarin Chinese , Russian and Vietnamese as well.\nSergey recently learned about country codes - two letter strings, denoting countries. For example, BY stands for Belarus and IN stands for India. Mesmerized by this new discovery, Sergey now looks for country codes everywhere!\nSergey has recently found a string S consisting of uppercase Latin letters. He wants to find the number of different country codes that appear in S as contiguous substrings. For the purpose of this problem, consider that every 2-letter uppercase string is a valid country code.\nInput\nThe first line of input contains an integer T denoting the number of test cases. The description of T test cases follows.\nThe first and only line of each test case contains a string S, consisting of uppercase Latin letters.\nOutput\nFor each test case, output a single line containing the number of different country codes appearing in the given string.\nConstraints\n\n\n1 \u2264 T \u2264 100\nSubtask 1 (35 points): 2 \u2264 |S| \u2264 3\nSubtask 2 (65 points): 2 \u2264 |S| \u2264 104",
            "input_format": "",
            "output_format": "",
            "problem_name": "Distinct Codes",
            "user_tags": [
                "2D Arrays",
                "Frequency Arrays",
                "String"
            ],
            "computed_tags": [
                "Data Structures",
                "Arrays"
            ],
            "problem_code_id": "DISTCODE",
            "difficulty_level": "1234",
            "ai_solutions": [
                "T = int(input())\nfor _ in range(T):\n    S = input()\n    codes = set()\n    for i in range(len(S)-1):\n        codes.add(S[i:i+2])\n    print(len(codes))",
                "T = int(input())\nfor _ in range(T):\n    S = input()\n    codes = {S[i:i+2] for i in range(len(S)-1)}\n    print(len(codes))"
            ],
            "human_solutions": [
                {
                    "id": 33062927,
                    "submission_date": 1589380966,
                    "language": "PYTH 3",
                    "username": "warrior_coder",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "1.60",
                    "memory": "17.6M",
                    "solution": 33062927,
                    "code": "t= int(input())\nfor x in range(t):\n    s=input()\n    lst=[]\n    count = 0\n    for i in range(len(s)-1):\n        if s[i:i+2] in lst:\n            pass\n        else:\n            lst.append(s[i:i+2])\n            count+=1\n    print(count)"
                },
                {
                    "id": 32425363,
                    "submission_date": 1588164869,
                    "language": "PYTH 3",
                    "username": "harshva89",
                    "user_rating_star": 3,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "1.59",
                    "memory": "17.6M",
                    "solution": 32425363,
                    "code": "t=int(input())\nwhile(t>0):\n    s=input()\n    a=[]\n    for x in range(len(s)-1):\n        if s[x:x+2] not in a:\n            a.append(s[x:x+2])\n    print(len(a))\n    t-=1"
                }
            ]
        },
        "CHBLLNS": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "2\n3 3 3\n1\n3 3 3\n2",
                    "output": "1\n4",
                    "explanation": "Example case 2. In the worst-case scenario first three balloons will be of the three different colors and only after fourth balloon Chef will have two balloons of the same color. So, Chef might need to fetch 4 balloons"
                }
            ],
            "problem_statement": "Read problems statements in Mandarin Chinese, Russian and Vietnamese as well.\nToday a plane was hijacked by a maniac. All the passengers of the flight are taken as hostage. Chef is also one of them.\nHe invited one of the passengers to play a game with him. If he loses the game, he will release all the passengers, otherwise he will kill all of them. A high risk affair it is.\n\n\nChef volunteered for this tough task. He was blindfolded by Hijacker. Hijacker brought a big black bag from his pockets. The contents of the bag is not visible. He tells Chef that the bag contains R red, G green and B blue colored balloons.\n\n\nHijacker now asked Chef to take out some balloons from the box such that there are at least K balloons of the same color and hand him over. If the taken out balloons does not contain at least K balloons of the same color, then the hijacker will shoot everybody. Chef is very scared and wants to leave this game as soon as possible, so he will draw the minimum number of balloons so as to save the passengers. Can you please help scared Chef to find out the minimum number of balloons he should take out.\n\nInput\nThe first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. \nThe first line of each test case contains a three space-separated integers R, G and B. \nThe second line contains only one integer K.\nOutput\nFor each test case, output a single line containing one integer - the minimum number of balloons Chef need to take out from the bag.\nConstraints\n\n1 \u2264 T \u2264 1000\n1 \u2264 R, G, B \u2264 109\n1 \u2264 K \u2264 max{R, G, B}\n\nSubtasks\n\nSubtask 1 (44 points): 1 \u2264 R, G, B \u2264 10\nSubtask 2 (56 points):  No additional constraints",
            "input_format": "",
            "output_format": "",
            "problem_name": "Chef and Ballons",
            "user_tags": [
                "Group Theory"
            ],
            "computed_tags": [
                "Mathematics"
            ],
            "problem_code_id": "CHBLLNS",
            "difficulty_level": "1399",
            "ai_solutions": [
                "T = int(input())\nfor _ in range(T):\n    R, G, B = map(int, input().split())\n    K = int(input())\n    min_balloons = min(R, G, B, K-1)\n    print(min_balloons*3 + 1)",
                "def min_balloons(T, test_cases):\n    for _ in range(T):\n        R, G, B, K = test_cases[_]\n        min_balloons = min(R, G, B, K-1)\n        print(min_balloons*3 + 1)\n\nT = int(input())\ntest_cases = []\nfor _ in range(T):\n    R, G, B = map(int, input().split())\n    K = int(input())\n    test_cases.append((R, G, B, K))\nmin_balloons(T, test_cases)"
            ],
            "human_solutions": [
                {
                    "id": 58886360,
                    "submission_date": 1645620868,
                    "language": "PYTH 3",
                    "username": "thor1234",
                    "user_rating_star": 3,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.03",
                    "memory": "9M",
                    "solution": 58886360,
                    "code": "t = int(input())\nfor _ in range(t):\n    r, g , b = map(int, input().split())\n    k = int(input())\n    \n    print(min(k-1, r) + min(k-1, g) + min(k-1, b) + 1) "
                },
                {
                    "id": 49419969,
                    "submission_date": 1628016024,
                    "language": "PYTH 3",
                    "username": "codetilldawn07",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.02",
                    "memory": "17.6M",
                    "solution": 49419969,
                    "code": "for _ in range(int(input())):\n    r,g,b=map(int,input().split())\n    k=int(input())\n    print(min(r,k-1)+min(g,k-1)+min(b,k-1)+1)"
                }
            ]
        },
        "J7": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "2\n20 14\n20 16",
                    "output": "3.00\n4.15",
                    "explanation": "First case: the dimensions of the largest box may be 3, 1 and 1.\nSecond case: the dimensions of the largest box may be 7/3, 4/3 and 4/3."
                }
            ],
            "problem_statement": "Johnny needs to make a rectangular box for his physics class project. He has bought P cm of wire and S cm2 of special paper. He would like to use all the wire (for the 12 edges) and paper (for the 6 sides) to make the box.\nWhat is the largest volume of the box that Johnny can make?\nInput\nThe first line contains t, the number of test cases (about 10). Then t test cases follow.\n\nEach test case contains two integers P and S in a line (1 \u2264 P \u2264 40000, 1 \u2264 S \u2264 20000). You may assume that there always exists an optimal solution for the given input cases.\n\nOutput\nFor each test case, print a real number that is the largest volume of the box that Johnny can make, rounded to two decimal places.",
            "input_format": "",
            "output_format": "",
            "problem_name": "The Best Box",
            "user_tags": [
                "Geometry",
                "Differentiation"
            ],
            "computed_tags": [
                "Mathematics",
                "Calculus"
            ],
            "problem_code_id": "J7",
            "difficulty_level": "1314",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 32380250,
                    "submission_date": 1588058859,
                    "language": "PYTH 3",
                    "username": "shivatejakura",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.02",
                    "memory": "17.6M",
                    "solution": 32380250,
                    "code": "from math import sqrt\nfor i in range(int(input())):\n    P,A=map(int,input().split())\n    l = (P - sqrt(P * P - 24 * A)) / 12; \n    V = l * (A / 2.0 - l * (P / 4.0 - l)); \n    print(\"%.2f\"%(V))"
                },
                {
                    "id": 32316155,
                    "submission_date": 1587912593,
                    "language": "PYTH 3",
                    "username": "pknayak",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.01",
                    "memory": "17.6M",
                    "solution": 32316155,
                    "code": "for _ in range(int(input())):\r\n    p,s=map(int,input().split())\r\n    b=(p-(p**2-24*s)**(0.5))/12\r\n    l=p/4-2*b\r\n    print(\"%.2f\"%(l*b*b))\r\n"
                }
            ]
        },
        "AMMEAT": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "1\n4 7\n1 2 3 4",
                    "output": "2",
                    "explanation": "If he takes 3rd and 4th plates, then we may eat P3 + P4 = 7 meatballs in Las Vegas. This is the only way for eating at least M = 7 meatballs with 2 plates."
                }
            ],
            "problem_statement": "Andrew likes meatballs very much.\nHe has N plates of meatballs, here the ith plate contains Pi meatballs. You need to find the minimal number of plates Andrew needs to take to his trip to Las Vegas, if he wants to eat there at least M meatballs. Note that each plate is already packed, i.e. he cannot change the amount of meatballs on any plate.\nInput\nThe first line of the input contains an integer T, denoting the number of test cases. The description of T test cases follows. The first line of each test case contains two space-separated integers N and M. The second line contains N space-separated integers P1, P2, ..., PN.\nOutput\n\nFor each test case, output an integer, denoting the minimum number of plates. If it's impossible to take at least M meatballs, print -1.\n\nConstraints\n1 \u2264 T \u2264 7777\n1 \u2264 N \u2264 7\n1 \u2264 M, Pi \u2264 1018",
            "input_format": "",
            "output_format": "",
            "problem_name": "Andrew and the Meatballs",
            "user_tags": [
                "1D Arrays",
                "ad-hoc",
                "Sorting"
            ],
            "computed_tags": [
                "Data Structures",
                "Arrays",
                "Algorithms",
                "Constructive"
            ],
            "problem_code_id": "AMMEAT",
            "difficulty_level": "1275",
            "ai_solutions": [
                "import heapq\n\ndef min_plates(T, test_cases):\n    for _ in range(T):\n        N, M, P = test_cases[_]\n        P = [-1*i for i in P]\n        heapq.heapify(P)\n        count = 0\n        while M > 0 and P:\n            M += heapq.heappop(P)\n            count += 1\n        if M > 0:\n            print(-1)\n        else:\n            print(count)\n\nT = int(input())\ntest_cases = []\nfor _ in range(T):\n    N, M = map(int, input().split())\n    P = list(map(int, input().split()))\n    test_cases.append((N, M, P))\nmin_plates(T, test_cases)",
                "def min_plates(T, test_cases):\n    for _ in range(T):\n        N, M, P = test_cases[_]\n        P.sort(reverse=True)\n        count = 0\n        for i in P:\n            if M <= 0:\n                break\n            M -= i\n            count += 1\n        if M > 0:\n            print(-1)\n        else:\n            print(count)\n\nT = int(input())\ntest_cases = []\nfor _ in range(T):\n    N, M = map(int, input().split())\n    P = list(map(int, input().split()))\n    test_cases.append((N, M, P))\nmin_plates(T, test_cases)"
            ],
            "human_solutions": [
                {
                    "id": 38989835,
                    "submission_date": 1603002616,
                    "language": "PYTH 3",
                    "username": "ayan_codechef",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.07",
                    "memory": "17.5M",
                    "solution": 38989835,
                    "code": "t=int(input())\nfor _ in range(t):\n  n,m=map(int,input().split())\n  p=list(map(int,input().split()))\n  if sum(p)<m:\n    print(-1)\n  else:\n    p.sort(reverse=True)\n    count=0\n    res=0\n    for i in p:\n      count+=i\n      res+=1\n      if count>=m:\n        print(res)\n        break\n        "
                },
                {
                    "id": 38342073,
                    "submission_date": 1601485338,
                    "language": "PYTH 3",
                    "username": "khushi_somani",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.08",
                    "memory": "17.5M",
                    "solution": 38342073,
                    "code": "for _ in range(int(input())):\n    n,m=map(int,input().split())\n    l=list(map(int,input().split()))\n    a=0\n    count=0\n    l.sort()\n    for i in range(len(l)):\n        a+=l[n-i-1]\n        count+=1\n        if a>=m:\n            break \n    if a>=m:\n        print(count)\n    else:\n        print(-1)\n            \n    \n            "
                }
            ]
        },
        "CHEFEQ": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "1\r\n4\r\n1 2 3 4",
                    "output": "3",
                    "explanation": "In test case 1, if you decide to convert all the piles to contain either of 1, 2, 3, or 4 coins you will have to change the other 3 piles. For any other choice you will have to alter more than 3 (i.e. 4) piles."
                }
            ],
            "problem_statement": "Read problems statements in Mandarin Chinese  and Russian.\nChef has a box full of infinite number of identical coins. One day while playing, he made N piles each containing equal number of coins. Chef suddenly remembered an important task and left the room for sometime. While he was away, his newly hired assistant came across the piles and mixed them up while playing.\nWhen Chef returned home, he was angry to see that all of his piles didn't contain equal number of coins as he very strongly believes in the policy of equality for all, may it be people or piles of coins. \n In order to calm down the Chef, the assistant proposes to make all the piles equal. Chef agrees to give this task to him, but as a punishment gives him only two type of operations that he can perform.\n\nPick some coins from any pile and put them back in Chef's coin box.\nPick some coins from the Chef's coin box and put them on any one pile.\n\nThe assistant wants to do this task as fast as possible. So he wants to know the minimum number of operations needed to make all the piles equal.\nInput\n\nThe first line of the input contains an integer T denoting the number of test cases.\nThe first line of each test case contains a single integer N denoting the number of piles.\nThe second line contains N space-separated integers A1, A2, ..., AN denoting the number of coins in each pile.\n\nOutput\n\nFor each test case, output a single line containing an integer corresponding to the minimum number of operations assistant needs to do.\n\nConstraints\n\n1 \u2264 T \u2264 10\n1 \u2264 N \u2264 105\n1 \u2264 Ai \u2264 105\n\nSub tasks\n\nSubtask #1: 1 \u2264 N \u2264 1000 (30 points)\nSubtask #2: original constraints (70 points)",
            "input_format": "",
            "output_format": "",
            "problem_name": "Chef and Equality",
            "user_tags": [
                "Frequency Arrays"
            ],
            "computed_tags": [
                "Data Structures",
                "Arrays"
            ],
            "problem_code_id": "CHEFEQ",
            "difficulty_level": "1386",
            "ai_solutions": [
                "def min_operations(T, test_cases):\n    for _ in range(T):\n        N, piles = test_cases[_]\n        piles_count = [0]*(max(piles)+1)\n        for pile in piles:\n            piles_count[pile] += 1\n        print(N - max(piles_count))\n\nT = int(input())\ntest_cases = []\nfor _ in range(T):\n    N = int(input())\n    piles = list(map(int, input().split()))\n    test_cases.append((N, piles))\nmin_operations(T, test_cases)",
                "def min_operations(T, test_cases):\n    for _ in range(T):\n        N, piles = test_cases[_]\n        unique_piles = set(piles)\n        max_count = max(piles.count(pile) for pile in unique_piles)\n        print(N - max_count)\n\nT = int(input())\ntest_cases = []\nfor _ in range(T):\n    N = int(input())\n    piles = list(map(int, input().split()))\n    test_cases.append((N, piles))\nmin_operations(T, test_cases)"
            ],
            "human_solutions": [
                {
                    "id": 30563538,
                    "submission_date": 1584557194,
                    "language": "PYTH 3",
                    "username": "msd5299",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.31",
                    "memory": "24.9M",
                    "solution": 30563538,
                    "code": "T=int(input())\nfor i in range(T):\n        n=int(input())\n        l=list(map(int,input().split()))\n        s=dict()\n        for e in l:\n                if(e in s):\n                        s[e]=s[e]+1\n                else:\n                        s[e]=1\n        l1=s.values()\n        print(n-max(l1))\n        \n\n"
                },
                {
                    "id": 28836911,
                    "submission_date": 1578551452,
                    "language": "PYTH 3",
                    "username": "appmnit",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.42",
                    "memory": "19M",
                    "solution": 28836911,
                    "code": "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int,input().split()))\n    d = {}\n    for i in l:\n        try:\n            d[i]+=1\n        except:\n            d.setdefault(i,1)\n    m = 0\n    for i in d.values():\n        if m<i:\n            m = i\n    print(n-m)"
                }
            ]
        },
        "BUGCAL": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "2\r\n12 9\r\n25 25",
                    "output": "11\r\n40",
                    "explanation": ""
                }
            ],
            "problem_statement": "Read problems statements in Mandarin chinese, Russian and Vietnamese as well.\n\u00a0\nTrans bought a calculator at creatnx's store. Unfortunately, it is fake. It has many bugs. One of them is adding two numbers without carrying. Example expression: 12 + 9 will have result 11 in his calculator. Given an expression in the form a + b, please output result from that calculator.\n\u00a0\nInput\nThe first line contains an integer T denote the number of test cases. Each test case contains two integers a, b in a single line.\n\u00a0\nOutput\nEach test case, print answer in a single line.\n\u00a0\nConstraints\n\n1 \u2264 T \u2264 100\n1 \u2264 a, b \u2264 109\n\n\nSubtasks:\n\nSubtask #1 (30 points): 1 \u2264 a, b \u2264 9\nSubtask #2 (70 points): original constrains",
            "input_format": "",
            "output_format": "",
            "problem_name": "Buggy Calculator",
            "user_tags": [
                "Implementation"
            ],
            "computed_tags": [
                "Algorithms"
            ],
            "problem_code_id": "BUGCAL",
            "difficulty_level": "1363",
            "ai_solutions": [
                "def add_without_carry(a, b):\n    result = 0\n    multiplier = 1\n    while a > 0 or b > 0:\n        result += ((a % 10 + b % 10) % 10) * multiplier\n        a //= 10\n        b //= 10\n        multiplier *= 10\n    return result\n\nT = int(input())\nfor _ in range(T):\n    a, b = map(int, input().split())\n    print(add_without_carry(a, b))"
            ],
            "human_solutions": [
                {
                    "id": 32468748,
                    "submission_date": 1588313886,
                    "language": "PYTH 3",
                    "username": "swathi_1299",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.02",
                    "memory": "17.5M",
                    "solution": 32468748,
                    "code": "for _ in range(int(input())):\n    a,b=map(list,input().split())\n    if len(a)<len(b):\n        for i in range(len(b)-len(a)):\n            a.insert(0,0)\n    elif len(a)>len(b):\n        for i in range(len(a)-len(b)):\n            b.insert(0,0)\n    s=''\n    for i in range(len(a)):\n        s+=str(int(a[i])+int(b[i]))[-1]\n    print(int(s))"
                },
                {
                    "id": 32468185,
                    "submission_date": 1588312509,
                    "language": "PYTH 3",
                    "username": "vallepu123",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.02",
                    "memory": "17.6M",
                    "solution": 32468185,
                    "code": "try:\r\n    t=int(input())\r\n    for i in range(t):\r\n        a,b=map(int,input().split())\r\n        i=10\r\n        temp=0\r\n        tot=a+b\r\n        while(a or b):\r\n            if(a%10)+(b%10)>9:\r\n                temp+=i\r\n            a=a//10\r\n            b=b//10\r\n            i=i*10\r\n        print(tot-temp)    \r\nexcept:\r\n    EOFError"
                }
            ]
        },
        "CHEFCH": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "2\n---+-+-+++\n-------",
                    "output": "2\n3",
                    "explanation": "Example case 1.\nWe can change symbol 2 from '-' to '+' and symbol 9 from '+' to '-' and receive '-+-+-+-+-+'. \nExample case 2.\nWe can change symbols 2, 4 and 6 from '-' to '+' and receive '-+-+-+-'."
                }
            ],
            "problem_statement": "Read problems statements in Mandarin Chinese  and Russian.\nChef had a hard day and want to play little bit. The game is called \"Chain\". Chef has the sequence of symbols. Each symbol is either '-' or '+'. The sequence is called Chain if each two neighboring symbols of sequence are either '-+' or '+-'. \n For example sequence '-+-+-+' is a Chain but sequence '-+-+--+' is not. \n\n Help Chef to calculate the minimum number of symbols he need to replace (ex. '-' to '+' or '+' to '-') to receive a Chain sequence. \nInput\nFirst line contains single integer T denoting the number of test cases. \nLine of each test case contains the string S consisting of symbols '-' and '+'. \n\nOutput\nFor each test case, in a single line print single interger - the minimal number of symbols Chef needs to replace to receive a Chain. \n\nConstraints\n1 \u2264 T \u2264 7\n1 \u2264 |S| \u2264 10^5\n\nSubtasks\nSubtask 1 \u2264 |S| \u2264 10, 1 \u2264 T \u2264 7 Points: 20 \nSubtask 1 \u2264 |S| \u2264 1000, 1 \u2264 T \u2264 7 Points: 30 \nSubtask 1 \u2264 |S| \u2264 10^5, 1 \u2264 T \u2264 7Points: 50",
            "input_format": "",
            "output_format": "",
            "problem_name": "Chef and Chain",
            "user_tags": [
                "String",
                "Brute Force"
            ],
            "computed_tags": [
                "Data Structures",
                "Algorithms"
            ],
            "problem_code_id": "CHEFCH",
            "difficulty_level": "1332",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 33191065,
                    "submission_date": 1589973407,
                    "language": "PYTH 3",
                    "username": "shri_24",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.02",
                    "memory": "17.6M",
                    "solution": 33191065,
                    "code": "try:\n    t=int(input())\n    while t!=0:\n        s=input()\n        c1=0\n        c2=0\n        for i in range(0,len(s),1):\n            if i%2==0:\n                if s[i]==\"-\":\n                    c2+=1\n                else:\n                    c1+=1\n            else:\n                if s[i]==\"+\":\n                    c2+=1\n                else:\n                    c1+=1\n        if c1>=c2:\n            print(c2)\n        else:\n            print(c1)\n        t=t-1\nexcept:\n    pass\n"
                },
                {
                    "id": 32555599,
                    "submission_date": 1588421542,
                    "language": "PYTH 3",
                    "username": "anjali_ag",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.02",
                    "memory": "17.6M",
                    "solution": 32555599,
                    "code": "for _ in range(int(input())):\n    s=list(input())\n    n=len(s)\n    c1=0\n    c2=0\n    if(n%2==0):\n        s1=\"-+\"*(n//2)\n        s2=\"+-\"*(n//2)\n    else:\n        s1=\"-+\"*(n//2)\n        s1+=\"-\"\n        s2=\"+-\"*(n//2)\n        s2+=\"+\"\n    s1=list(s1)\n    s2=list(s2)\n    for i in range(n):\n        if(s[i]!=s1[i]):\n            c1+=1\n        if(s[i]!=s2[i]):\n            c2+=1\n    print(min(c1,c2))\n        "
                }
            ]
        },
        "XORAGN": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "1\n2\n1 2",
                    "output": "6",
                    "explanation": "Example case 1: The sequence $B$ is ${A_1 + A_1, A_1 + A_2, A_2 + A_1, A_2 + A_2} = {2, 3, 3, 4}$. The XOR of its elements is $B_1 \\oplus B_2 \\oplus B_3 \\oplus B_4 = 6$."
                }
            ],
            "problem_statement": "Read problems statements in Mandarin chinese, Russian and Vietnamese as well.\nChef recently discovered a function $XOR()$, which computes the XOR of all elements of a sequence:\n$$XOR(a_{1..n}) = a_1 \\oplus a_2 \\oplus \\dots \\oplus a_n\\,.$$\nChef has a sequence $A$ with size $N$. He generated a new sequence $B$ with size $N^2$ using the following formula:\n$$B_{iN+j+1} = (A_{i+1} + A_{j+1}) \\quad \\forall\\; 0 \\le i, j \\lt N\\,.$$\nCompute the value of $XOR(B)$.\nInput\n\nThe first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\nThe first line of each test case contains a single integer $N$.\nThe second line contains $N$ space-separated integers $A_1, A_2, \\dots, A_N$.\n\nOutput\nFor each test case, print a single line containing one integer \u2014 the answer to the problem.\nConstraints\n\n$1 \\le T \\le 100$\n$1 \\le N \\le 10^5$\n$2^0 \\le A_i \\lt 2^{30}$ for each valid $i$\n\nSubtasks\nSubtask #1 (30 points):\n- $1 \\le N \\le 500$ \n- $2^0 \\le A_i \\lt 2^{10}$ for each valid $i$\nSubtask #2 (70 points): $1 \\le N \\le 10^5$",
            "input_format": "",
            "output_format": "",
            "problem_name": "Xor Again",
            "user_tags": [
                "Bit Manipulation",
                "ad-hoc"
            ],
            "computed_tags": [
                "Mathematics",
                "Algorithms",
                "Constructive"
            ],
            "problem_code_id": "XORAGN",
            "difficulty_level": "1334",
            "ai_solutions": [
                "def xor_sequence(T, test_cases):\n    for _ in range(T):\n        N = test_cases[_][0]\n        A = test_cases[_][1]\n        B = [0] * (N * N)\n        for i in range(N):\n            for j in range(N):\n                B[i * N + j] = A[i] + A[j]\n        xor_B = 0\n        for b in B:\n            xor_B ^= b\n        print(xor_B)\n\nT = int(input().strip())\ntest_cases = []\nfor _ in range(T):\n    N = int(input().strip())\n    A = list(map(int, input().strip().split()))\n    test_cases.append((N, A))\nxor_sequence(T, test_cases)",
                "def xor_sequence(T, test_cases):\n    for _ in range(T):\n        N = test_cases[_][0]\n        A = test_cases[_][1]\n        xor_B = 0\n        for i in range(N):\n            for j in range(N):\n                xor_B ^= A[i] + A[j]\n        print(xor_B)\n\nT = int(input().strip())\ntest_cases = []\nfor _ in range(T):\n    N = int(input().strip())\n    A = list(map(int, input().strip().split()))\n    test_cases.append((N, A))\nxor_sequence(T, test_cases)"
            ],
            "human_solutions": [
                {
                    "id": 33767853,
                    "submission_date": 1591420766,
                    "language": "PYTH 3",
                    "username": "indrajeet_80",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.48",
                    "memory": "20.6M",
                    "solution": 33767853,
                    "code": "t=int(input())\nfor i in range(t):\n    n=int(input())\n    a=list(map(int,input().split()))\n    x=0\n    for j in range(len(a)):\n        x=x^(2*a[j])\n    print(x)    \n"
                },
                {
                    "id": 33667603,
                    "submission_date": 1591356838,
                    "language": "PYTH 3",
                    "username": "jyothsna765",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.46",
                    "memory": "20.6M",
                    "solution": 33667603,
                    "code": "n=int(input())\nfor i in range(n):\n    s=int(input())\n    l=list(map(int,input().split()))\n    sum1=0\n    for i in l:\n        sum1^=(i+i)\n    print(sum1)\n\n"
                }
            ]
        },
        "PINS": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "1\r\n1",
                    "output": "1 1",
                    "explanation": "Example case 1: A PIN containing only one number would fail to inform the CID, since when it's input in reverse, the ATM detects the same PIN as the correct one. Therefore, Reziba can always get robbed \u2014 the probability is $1 = 1/1$."
                }
            ],
            "problem_statement": "Read problems statements in Mandarin chinese, Russian and Vietnamese as well.\nChef's company wants to make ATM PINs for its users, so that they could use the PINs for withdrawing their hard-earned money. One of these users is Reziba, who lives in an area where a lot of robberies take place when people try to withdraw their money. \nChef plans to include a safety feature in the PINs: if someone inputs the reverse of their own PIN in an ATM machine, the Crime Investigation Department (CID) are immediately informed and stop the robbery. However, even though this was implemented by Chef, some people could still continue to get robbed. The reason is that CID is only informed if the reverse of a PIN is different from that PIN (so that there wouldn't be false reports of robberies).\nYou know that a PIN consists of $N$ decimal digits. Find the probability that Reziba could get robbed. Specifically, it can be proven that this probability can be written as a fraction $P/Q$, where $P \\ge 0$ and $Q \\gt 0$ are coprime integers; you should compute $P$ and $Q$.\nInput\n\nThe first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\nThe first and only line of each test case contains a single integer $N$ denoting the length of each PIN. \n\nOutput\nFor each test case, print a single line containing two space-separated integers \u2014 the numerator $P$ and denominator $Q$ of the probability.\nConstraints\n\n$1 \\le T \\le 100$\n$1 \\le N \\le 10^5$\n\nSubtasks\nSubtask #1 (10 points): $N \\le 18$\nSubtask #2 (20 points): $N \\le 36$\nSubtask #3 (70 points): original constraints",
            "input_format": "",
            "output_format": "",
            "problem_name": "Strike or Spare",
            "user_tags": [
                "Combinatorics",
                "Observation"
            ],
            "computed_tags": [
                "Mathematics",
                "Algorithms"
            ],
            "problem_code_id": "PINS",
            "difficulty_level": "1320",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 34871823,
                    "submission_date": 1593447358,
                    "language": "PYTH 3",
                    "username": "sana_786",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "3.78",
                    "memory": "17.6M",
                    "solution": 34871823,
                    "code": "try:\n    m=int(input())\n    for i in range(m):\n        n = int(input())\n        print(1, 10 ** (n // 2))\nexcept:\n    pass"
                },
                {
                    "id": 34858665,
                    "submission_date": 1593405917,
                    "language": "PYTH 3",
                    "username": "noore4",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "3.79",
                    "memory": "17.6M",
                    "solution": 34858665,
                    "code": "for i in range(int(input())):\n    n = int(input())\n    print(1, 10 ** (n // 2))\n"
                }
            ]
        },
        "CHFCHK": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "1\r\n2\r\n2 3",
                    "output": "2",
                    "explanation": "Example case 1: The sequence of coordinates on which Chef Chick would jump starts with $(0, 2, 3, 4, 6, \\ldots)$. A longest jump is e.g. from $4$ to $6$, with length $2$."
                }
            ],
            "problem_statement": "Read problems statements in Hindi, Mandarin Chinese, Russian, Vietnamese, and Bengali as well.\nChef Chick loves to jump a lot. Once, it realised that it was on an infinitely long road, and decided to travel along this road by jumping.\nLet's view the road as the $x$-axis in a 1D coordinate system. Initially, Chef Chick is at the coordinate $x=0$, and it wants to move only in the positive $x$-direction. Moreover, Chef Chick has $N$ favourite integers $a_1, a_2, \\ldots, a_N$, and it wants to jump on the coordinates that are multiples of these favourite numbers \u2014 when its current position is $x$, it jumps to the smallest coordinate $y \\gt x$ such that $y$ is an integer multiple of at least one of the values $a_1, a_2, \\ldots, a_N$; the length of such a jump is $y-x$.\nThis way, Chef Chick keeps jumping along the road forever in the positive $x$-direction. You need to find the length of the longest jump it will make, i.e. the largest integer $d$ such that Chef Chick makes at least one jump with length $d$ and never makes any jump with a greater length. It can be proved that such an integer always exists.\nInput\n\nThe first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\nThe first line of each test case contains a single integer $N$.\nThe second line contains $N$ space-separated integers $a_1, a_2, \\ldots, a_N$.\n\nOutput\nFor each test case, print a single line containing one integer \u2014 the length of the longest jump that Chick will make.\nConstraints\n\n$1 \\le T \\le 100$\n$1 \\le N \\le 100$\n$1 \\le a_i \\le 10^5$ for each valid $i$\n$a_1, a_2, \\ldots, a_N$ are pairwise distinct",
            "input_format": "",
            "output_format": "",
            "problem_name": "Chef Chick",
            "user_tags": [
                "Observation"
            ],
            "computed_tags": [
                "Algorithms"
            ],
            "problem_code_id": "CHFCHK",
            "difficulty_level": "1295",
            "ai_solutions": [
                "T = int(input())\nfor _ in range(T):\n    N = int(input())\n    a = list(map(int, input().split()))\n    print(min(a))",
                "def longest_jump(T, test_cases):\n    for i in range(T):\n        N = test_cases[i][0]\n        a = test_cases[i][1]\n        print(min(a))\n\nT = int(input())\ntest_cases = []\nfor _ in range(T):\n    N = int(input())\n    a = list(map(int, input().split()))\n    test_cases.append((N, a))\n\nlongest_jump(T, test_cases)"
            ],
            "human_solutions": [
                {
                    "id": 1027395175,
                    "submission_date": 1698396073,
                    "language": "PYTH 3",
                    "username": "kwaidan",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.01",
                    "memory": "8.4M",
                    "solution": 1027395175,
                    "code": "import math\r\nfor _ in range(int(input())):\r\n    N = int(input())\r\n    A = list(map(int, input().split()))\r\n    print(min(A))"
                },
                {
                    "id": 1024121186,
                    "submission_date": 1696407952,
                    "language": "PYTH 3",
                    "username": "vani_6",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.04",
                    "memory": "9.2M",
                    "solution": 1024121186,
                    "code": "t=int(input())\r\nfor i in range(t):\r\n    n=int(input())\r\n    a=list(map(int,input().split()))\r\n    print(min(a))"
                }
            ]
        },
        "RD19": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "2\r\n2\r\n2 3\r\n2\r\n2 4",
                    "output": "0\r\n-1",
                    "explanation": "Example case 1: The GCD is already equal to $1$, so the answer is $0$.\nExample case 2: It is impossible to make the GCD equal to $1$, so the answer is $-1$."
                }
            ],
            "problem_statement": "Read problems statements in Mandarin chinese, Russian and Vietnamese as well.\nThe greatest common divisor (GCD) of a sequence is the greatest positive integer which divides each element of this sequence.\nYou are given a sequence $A$ of positive integers with size $N$. You are allowed to delete up to $N-1$ elements from this sequence. (I.e., you may delete any number of elements, including zero, as long as the resulting sequence is non-empty.) \nPlease find the minimum number of elements which have to be deleted so that the GCD of the resulting sequence would be equal to $1$, or determine that it is impossible.\nInput\n\nThe first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows. \nThe first line of each test case contains a single integer $N$.\nThe second line contains $N$ space-separated integers $A_1, A_2, \\dots, A_N$.\n\nOutput\nFor each test case, print a single line containing one integer \u2014 the minimum number of elements to delete, or $-1$ if it is impossible to make the GCD equal to $1$.\nConstraints\n\n$1 \\le T \\le 100$\n$2 \\le N \\le 1,000$\n$1 \\le A_i \\le 50,000$ for each valid $i$\n\nSubtasks\nSubtask #1 (20 points): $2 \\le N \\le 3$\nSubtask #2 (80 points): original constraints",
            "input_format": "",
            "output_format": "",
            "problem_name": "Minimum Deletions",
            "user_tags": [
                "Basic Maths",
                "Observation"
            ],
            "computed_tags": [
                "Mathematics",
                "Algorithms"
            ],
            "problem_code_id": "RD19",
            "difficulty_level": "1267",
            "ai_solutions": [
                "from math import gcd\nfrom functools import reduce\n\ndef solve():\n    T = int(input())\n    for _ in range(T):\n        N = int(input())\n        A = list(map(int, input().split()))\n        if reduce(gcd, A) == 1:\n            print(0)\n        else:\n            print(-1)\n\nsolve()",
                "from math import gcd\n\ndef solve():\n    T = int(input())\n    for _ in range(T):\n        N = int(input())\n        A = list(map(int, input().split()))\n        min_deletions = -1\n        for i in range(N):\n            for j in range(i+1, N):\n                if gcd(A[i], A[j]) == 1:\n                    min_deletions = 0\n                    break\n            if min_deletions == 0:\n                break\n        print(min_deletions)\n\nsolve()"
            ],
            "human_solutions": [
                {
                    "id": 34462768,
                    "submission_date": 1592302896,
                    "language": "PYTH 3",
                    "username": "achugoud595",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.06",
                    "memory": "17.7M",
                    "solution": 34462768,
                    "code": "def gcd(m, n):\n    r = m%n\n    while r!= 0:\n        m = n\n        n = r\n        r = m%n\n    return n\n\n\nfor _ in range(int(input())):\n    n = int(input())\n    s = list(map(int, input().split()))\n    x = gcd(s[0], s[1])\n    for i in range(n-2):\n        x = gcd(s[n-i-1], x)\n    if x == 1:\n        print(0)\n    else:\n        print(-1)"
                },
                {
                    "id": 34440246,
                    "submission_date": 1592221336,
                    "language": "PYTH 3",
                    "username": "shirisha_99",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.05",
                    "memory": "17.7M",
                    "solution": 34440246,
                    "code": "from math import gcd\r\nfor i in range(int(input())):\r\n    n=int(input())\r\n    l=list(map(int,input().split()))\r\n    a=gcd(l[0],l[1])\r\n    for i in range(len(l)):\r\n       gcd1=gcd(a,l[i])\r\n    if(gcd1==1):\r\n       print(0)\r\n    else:\r\n       print(-1)"
                }
            ]
        },
        "CBARG": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "3\n2\n1 1\n5\n1 2 3 4 5\n3\n1 3 2",
                    "output": "1\n5\n3",
                    "explanation": "Example case 1. Initially, there was no memory allocated. For running first test file, there was a memory allocation of 1 MBs. There was no allocation/ deallocation for running your program on second test file. \nExample case 2. On running on each test file, there was a further allocation of 1 MBs from previous one. So, there are total 5 MBs of memory allocated while running the program.\nExample case 3. Initially, there was no memory allocated. For running first test file, there was a memory allocation of 1 MBs. For running second test file, there was a further memory allocation of 2 MBs to have 3 MBs of memory needed, then in the last file, there was a deallocation of 1 MB of memory so as to get 2 MBs of memory needed for running the program. So, overall, there was 1 + 2 = 3 MBs of memory ever allocated in the program. Note that we are only counting allocated memory, not allocated + unallocated."
                }
            ],
            "problem_statement": "Read problems statements in Mandarin Chinese  and Russian.\nRecently Chef has decided to make some changes in our beloved Codechef. As you know, each problem at Codechef has its memory and time limits. To make problems even more challenging, he decided to measure allocated memory in a different way. Now judge program will be calculating not the maximum memory usage during the execution of all test files, but all the memory ever allocated by the solution program. But as Chef is not that good in algorithms, so he asks you to write a program that will calculate total memory usage of a solution.\nSo, you are given N numbers M1, , ,MN representing the measurements of consumed memory (in MBs) for N test files. In other terms, it means that on i-th test file, program took Mi MBs of memory. Initially, there is no memory allocated for your program. Before running your program on each test file, if the currently allocated memory is more than memory needed for the current test file, then there will be a deallocation of the memory to fit the current program. Also, if there is less than needed memory available, then allocation of memory will happen so as to fit the current program. e.g. Let us say that our program took 10 MBs on current test file. So, assuming if there was 12 MBs memory allocated before running the program on current test file, then there will happen a deallocation of 2 MBs. Assuming if there was 8 MBs memory allocated before running the program on current test file, then there will happen a allocation of 2 MBs.\n\n\nCalculate the total memory allocated for running the solution program on all the N test files. Please see third sample for more clarity.\nInput\nFirst line of input contains a single integer T denoting the  number of test cases. First line of each test case contains a single integer N denoting the number of measurements. Second line of each test case contains N space separated integers, where ith integer denotes the consumption of memory for ith i-th test file.\nOutput\nFor each test case, print total memory allocated for running the solution program.\nConstraints\n\n1 \u2264 T \u2264 105\n1 \u2264 N \u2264 105\n1 \u2264 Mi \u2264 109\n sum of N over all test cases does not exceed 105\n\nSubtasks\nSubtask 1 (30 points):\n\n1 \u2264 T \u2264 100\n1 \u2264 N \u2264 100\n1 \u2264 Mi \u2264 100\n\nSubtask 3 (70 points): \nOriginal constraints.",
            "input_format": "",
            "output_format": "",
            "problem_name": "Chef and Memory Limit",
            "user_tags": [
                "1D Arrays",
                "Implementation"
            ],
            "computed_tags": [
                "Data Structures",
                "Arrays",
                "Algorithms"
            ],
            "problem_code_id": "CBARG",
            "difficulty_level": "1255",
            "ai_solutions": [
                "def total_memory_allocated(T, test_cases):\n    for _ in range(T):\n        N = test_cases[_][0]\n        memory = test_cases[_][1]\n        total_memory = memory[0]\n        current_memory = memory[0]\n        for i in range(1, N):\n            if memory[i] > current_memory:\n                total_memory += memory[i] - current_memory\n                current_memory = memory[i]\n        print(total_memory)\n\nT = int(input())\ntest_cases = []\nfor _ in range(T):\n    N = int(input())\n    memory = list(map(int, input().split()))\n    test_cases.append((N, memory))\ntotal_memory_allocated(T, test_cases)",
                "def total_memory_allocated(T, test_cases):\n    for _ in range(T):\n        N = test_cases[_][0]\n        memory = test_cases[_][1]\n        total_memory = 0\n        current_memory = 0\n        for i in range(N):\n            if memory[i] > current_memory:\n                total_memory += memory[i] - current_memory\n            current_memory = max(current_memory, memory[i])\n        print(total_memory)\n\nT = int(input())\ntest_cases = []\nfor _ in range(T):\n    N = int(input())\n    memory = list(map(int, input().split()))\n    test_cases.append((N, memory))\ntotal_memory_allocated(T, test_cases)"
            ],
            "human_solutions": [
                {
                    "id": 33608489,
                    "submission_date": 1591240449,
                    "language": "PYTH 3",
                    "username": "udesh620",
                    "user_rating_star": 3,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.71",
                    "memory": "17.9M",
                    "solution": 33608489,
                    "code": "for _ in range(int(input())):\r\n\tN=int(input())\r\n\tA=list(map(int,input().split()))\r\n\ts=A[0]\r\n\tfor i in range(N-1):\r\n\t\tif A[i+1]>A[i]:\r\n\t\t\ts+=A[i+1]-A[i]\r\n\tprint(s)"
                },
                {
                    "id": 30926999,
                    "submission_date": 1585677616,
                    "language": "PYTH 3",
                    "username": "upriser1409",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.73",
                    "memory": "17.9M",
                    "solution": 30926999,
                    "code": "for _ in range(int(input())):\n    n=int(input())\n    m=list(map(int,input().split()))\n    a=0\n    c=0\n    for i in range(n):\n        b=m[i]-c\n        if b>=0:\n            a+=b\n            c+=b\n        else:\n            c+=b\n    print(a)\n"
                }
            ]
        },
        "CHEFRECP": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "3\r\n6\r\n1 1 4 2 2 2\r\n8\r\n1 1 4 3 4 7 7 7\r\n8\r\n1 7 7 3 3 4 4 4",
                    "output": "YES\r\nNO\r\nNO",
                    "explanation": "Example case 1: For each ingredient type, its ingredient jar is used only once and the quantities of all ingredients are pairwise distinct. Hence, this recipe could have been prepared by Chef. \nExample case 2: The jar of ingredient $4$ is used twice in the recipe, so it was not prepared by Chef."
                }
            ],
            "problem_statement": "Read problems statements in Hindi, Mandarin Chinese, Russian, Vietnamese, and Bengali as well.\nIn Chefland, types of ingredients are represented by integers and recipes are represented by sequences of ingredients that are used when cooking. One day, Chef found a recipe represented by a sequence $A_1, A_2, \\ldots, A_N$ at his front door and he is wondering if this recipe was prepared by him.\nChef is a very picky person. He uses one ingredient jar for each type of ingredient and when he stops using a jar, he does not want to use it again later while preparing the same recipe, so ingredients of each type (which is used in his recipe) always appear as a contiguous subsequence. Chef is innovative, too, so he makes sure that in each of his recipes, the quantity of each ingredient (i.e. the number of occurrences of this type of ingredient) is unique \u2015 distinct from the quantities of all other ingredients.\nDetermine whether Chef could have prepared the given recipe.\nInput\n\nThe first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\nThe first line of each test case contains a single integer $N$.\nThe second line contains $N$ space-separated integers $A_1, A_2, \\ldots, A_N$.\n\nOutput\nFor each test case, print a single line containing the string \"YES\" if the recipe could have been prepared by Chef or \"NO\" otherwise (without quotes).\nConstraints\n\n$1 \\le T \\le 100$\n$1 \\le N \\le 10^3$\n$1 \\le A_i \\le 10^3$ for each valid $i$",
            "input_format": "",
            "output_format": "",
            "problem_name": "Chef and Recipe",
            "user_tags": [
                "Brute Force",
                "Implementation"
            ],
            "computed_tags": [
                "Algorithms"
            ],
            "problem_code_id": "CHEFRECP",
            "difficulty_level": "1398",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 1027863293,
                    "submission_date": 1698734589,
                    "language": "PYTH 3",
                    "username": "a_bhi_9",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.02",
                    "memory": "8.8M",
                    "solution": 1027863293,
                    "code": "\r\ndef check(L, n):\r\n    count = dict()\r\n    \r\n    for i in range(n):\r\n        a = L[i]\r\n        count[a] = count.setdefault(a, 0) + 1 \r\n        if count[a]>1:\r\n            if L[i-1] !=L[i]:\r\n                return False\r\n    t = tuple(count.values())\r\n    if len(t)!=len(set(t)):\r\n        return False\r\n    return True\r\n\r\nfor i in range(int(input())):\r\n    n = int(input())\r\n    L = list(map(int,input().split()))\r\n    ch = check(L, n)\r\n    if ch:\r\n        print(\"YES\")\r\n    else:\r\n        print(\"NO\")"
                },
                {
                    "id": 1024921067,
                    "submission_date": 1696872805,
                    "language": "PYTH 3",
                    "username": "udhayashankar4",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.12",
                    "memory": "9.8M",
                    "solution": 1024921067,
                    "code": "for t in range(int(input())):\r\n    n=int(input())\r\n    a=list(map(int,input().split()))\r\n    freq={a.count(i):i for i in set(a)}\r\n    if len(freq)==len(set(a)):\r\n        freq={i:a.count(i) for i in set(a)}\r\n        current_value=a[0]\r\n        count=1\r\n        flag=True\r\n        for i in a[1:]:\r\n            if i==current_value:\r\n                count+=1\r\n            elif count!=freq[current_value]:\r\n                flag=False\r\n                break\r\n            else:\r\n                count=1\r\n                current_value=i\r\n                \r\n        if flag:\r\n            print(\"YES\")\r\n        else:\r\n            print(\"NO\")\r\n    else:\r\n        print(\"NO\")\r\n        \r\n    \r\n    "
                }
            ]
        },
        "LCPESY": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "4\nabcd\nxyz\nabcd\nbcda\naabc\nacaa\nCodechef\nelfedcc",
                    "output": "0\n4\n3\n5",
                    "explanation": "Example case 1. There is no common character.\nExample case 2. All the characters are same.\nExample case 3. Three characters (a, a and c) are same.\nExample case 4. This sample is mentioned by the statement."
                }
            ],
            "problem_statement": "Read problems statements in Mandarin Chinese  and Russian.\nAs we all know, Chef is cooking string for long days, his new discovery on string is the longest common pattern length. The longest common pattern length between two strings is the maximum number of characters that both strings have in common. Characters are case sensitive, that is, lower case and upper case characters are considered as different. Note that characters can repeat in a string and a character might have one or more occurrence in common between two strings. For example, if Chef has two strings A = \"Codechef\" and B = \"elfedcc\", then the longest common pattern length of A and B is 5 (common characters are c, d, e, e, f).\nChef wants to test you with the problem described above. He will give you two strings of Latin alphabets and digits, return him the longest common pattern length.\nInput\nThe first line of the input contains an integer T, denoting the number of test cases. Then the description of T test cases follows.\nThe first line of each test case contains a string A. The next line contains another character string B.\nOutput\nFor each test case, output a single line containing a single integer, the longest common pattern length between A and B.\nConstraints\n1 \u2264 T \u2264 100\n1 \u2264 |A|, |B| \u2264 10000 (104), where |S| denotes the length of the string S\nBoth of A and B can contain only alphabet characters (both lower and upper case) and digits",
            "input_format": "",
            "output_format": "",
            "problem_name": "Longest Common Pattern",
            "user_tags": [
                "Frequency Arrays",
                "String"
            ],
            "computed_tags": [
                "Data Structures",
                "Arrays"
            ],
            "problem_code_id": "LCPESY",
            "difficulty_level": "1284",
            "ai_solutions": [
                "from collections import Counter\n\ndef longest_common_pattern_length(T, test_cases):\n    for _ in range(T):\n        A = Counter(test_cases[_][0])\n        B = Counter(test_cases[_][1])\n        common = A & B\n        print(sum(common.values()))\n\nT = int(input())\ntest_cases = []\nfor _ in range(T):\n    A = input().strip()\n    B = input().strip()\n    test_cases.append((A, B))\n\nlongest_common_pattern_length(T, test_cases)",
                "def longest_common_pattern_length(T, test_cases):\n    for _ in range(T):\n        A = test_cases[_][0]\n        B = test_cases[_][1]\n        common = 0\n        for char in set(A):\n            common += min(A.count(char), B.count(char))\n        print(common)\n\nT = int(input())\ntest_cases = []\nfor _ in range(T):\n    A = input().strip()\n    B = input().strip()\n    test_cases.append((A, B))\n\nlongest_common_pattern_length(T, test_cases)"
            ],
            "human_solutions": [
                {
                    "id": 39191409,
                    "submission_date": 1604059333,
                    "language": "PYTH 3",
                    "username": "laveen2001",
                    "user_rating_star": 3,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.42",
                    "memory": "17.5M",
                    "solution": 39191409,
                    "code": "for _ in range(int(input())):\n    a=input()\n    b=input()\n    d=dict()\n    ct=0\n    for i in a:\n        if i in d.keys():\n            d[i]+=1\n        else:\n            d[i]=1\n    for j in b:\n        if j in d.keys():\n            if d[j]!=0:\n                d[j]-=1\n                ct+=1\n    print(ct)"
                },
                {
                    "id": 37379243,
                    "submission_date": 1599044179,
                    "language": "PYTH 3",
                    "username": "krishna369",
                    "user_rating_star": 3,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.10",
                    "memory": "17.3M",
                    "solution": 37379243,
                    "code": "from collections import *\nfor u in range(int(input())):\n    s=input()\n    r=input()\n    x=Counter(s)\n    y=Counter(r)\n    c=0\n    for i in x:\n        c+=min(x[i],y[i])\n    print(c)\n"
                }
            ]
        },
        "LEXOPAL": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "3\na.ba\ncb.bc\na.b",
                    "output": "abba\ncbabc\n-1",
                    "explanation": "In example 1, you can create a palindrome by filling the faded character by 'b'.\nIn example 2, you can replace the faded character by any character from 'a' to 'z'. We fill it by 'a', as it will generate the lexicographically smallest palindrome.\nIn example 3, it is not possible to make the string s a palindrome."
                }
            ],
            "problem_statement": "Read problems statements in Mandarin Chinese, Russian and Vietnamese as well.\nChef likes strings a lot but he likes palindromic strings even more. Today he found an old string s in his garage. The string is so old that some of its characters have faded and are unidentifiable now. Faded characters in the string are represented by '.' whereas other characters are lower case Latin alphabets i.e ['a'-'z'].\n\n\nChef being the palindrome lover decided to construct the lexicographically smallest palindrome by filling each of the faded character ('.') with a lower case Latin alphabet. Can you please help him completing the task?\nInput\nFirst line of input contains a single integer T denoting the number of test cases. T test cases follow.\nFirst and the only line of each case contains string s denoting the old string that chef has found in his garage.\nOutput\nFor each test case, print lexicographically smallest palindrome after filling each faded character - if it possible to construct one. Print -1 otherwise.\nConstraints\n1 \u2264 T \u2264 50\n1 \u2264 |s| \u2264 12345\nString s consists of ['a'-'z'] and '.' only.\n\nSubtasks\nSubtask #1 (47 points)\n1 \u2264 T \u2264 50, 1 \u2264 |S| \u2264 123\n\nSubtask #2 (53 points)\n1 \u2264 T \u2264 50, 1 \u2264 |S| \u2264 12345",
            "input_format": "",
            "output_format": "",
            "problem_name": "Faded Palindromes",
            "user_tags": [
                "String"
            ],
            "computed_tags": [
                "Data Structures"
            ],
            "problem_code_id": "LEXOPAL",
            "difficulty_level": "1335",
            "ai_solutions": [
                "T = int(input())\nfor _ in range(T):\n    s = list(input())\n    l = len(s)\n    possible = True\n    for i in range(l//2):\n        if s[i] != '.' and s[l-i-1] != '.' and s[i] != s[l-i-1]:\n            possible = False\n            break\n        elif s[i] == '.' and s[l-i-1] != '.':\n            s[i] = s[l-i-1]\n        elif s[i] != '.' and s[l-i-1] == '.':\n            s[l-i-1] = s[i]\n        elif s[i] == '.' and s[l-i-1] == '.':\n            s[i] = s[l-i-1] = 'a'\n    if l % 2 != 0 and s[l//2] == '.':\n        s[l//2] = 'a'\n    if possible:\n        print(''.join(s))\n    else:\n        print(-1)",
                "T = int(input())\nfor _ in range(T):\n    s = list(input())\n    l = len(s)\n    possible = True\n    for i in range(l//2):\n        if s[i] != '.' and s[l-i-1] != '.' and s[i] != s[l-i-1]:\n            possible = False\n            break\n        elif s[i] == '.' and s[l-i-1] != '.':\n            s[i] = s[l-i-1]\n        elif s[i] != '.' and s[l-i-1] == '.':\n            s[l-i-1] = s[i]\n        elif s[i] == '.' and s[l-i-1] == '.':\n            s[i] = s[l-i-1] = 'a'\n    if l % 2 != 0 and s[l//2] == '.':\n        s[l//2] = 'a'\n    print(''.join(s) if possible else -1)"
            ],
            "human_solutions": [
                {
                    "id": 33144182,
                    "submission_date": 1589776312,
                    "language": "PYTH 3",
                    "username": "ukiyo23",
                    "user_rating_star": 3,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.06",
                    "memory": "17.6M",
                    "solution": 33144182,
                    "code": "for _ in range(int(input())):\r\n    str = list(input())\r\n    l = len(str)\r\n    flag = False\r\n    for i in range(l//2):\r\n        if str[i] == '.':\r\n            if str[-i-1] == '.':\r\n                str[i] = str[-i-1] = 'a'\r\n            else:\r\n                str[i] = str[-i-1]\r\n        elif str[-i-1] == '.':\r\n            str[-i-1] = str[i]\r\n        elif str[i] != str[-i-1]:\r\n            print(\"-1\")\r\n            flag = True\r\n            break\r\n    if flag:\r\n        continue\r\n    if l%2 != 0 and str[l//2] == '.':\r\n        str[l//2] = 'a'\r\n    print(\"\".join(str))\r\n"
                },
                {
                    "id": 28600924,
                    "submission_date": 1577899314,
                    "language": "PYTH 3",
                    "username": "smdp26",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.10",
                    "memory": "17.7M",
                    "solution": 28600924,
                    "code": "t = int(input())\nfor q in range(t):\n    s = input()\n    ns = ''\n    \n    f = 0\n    if len(s)%2 == 0:\n        k = len(s) // 2\n    else:\n        k = (len(s)//2)+1\n    \n    for i in range(k):\n    \n        if s[i] != s[len(s)-1-i] and s[i] != '.' and s[len(s)-1-i] != '.':\n            f = 1\n            break\n        elif s[i] == '.':\n            if s[i] == s[len(s)-1-i]:\n                ns += 'a'\n            else:\n                ns += s[len(s)-1-i]\n        elif s[len(s)-1-i] == '.':\n            if s[i] == s[len(s)-1-i]:\n                ns += 'a'\n            else:\n                ns += s[i]\n        else:\n            ns += s[i]\n    \n    \n    if f == 1:\n        print(-1)\n    elif len(s)%2 == 0:\n        print(ns + ns[::-1])\n    else:\n        print(ns + ns[::-1][1:])\n"
                }
            ]
        },
        "CAPPLE": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "2\n3\n3 3 3\n4\n1 2 3 3",
                    "output": "1\n3",
                    "explanation": "For test 1, Chef can select all the trees and can pluck all the apples in 1 minute.\nFor test 2, there are many ways Chef can pluck all of the apples in 3 minutes. Here is one example: \nFirst minute: Select the third and fourth trees. Pluck 1 apple from the third tree, and 2 apples from the fourth tree.\nSecond minute: Select the second and third tree. Pluck 1 apple from each tree.\nThird minute: Select all of the trees and pluck the last apple from each tree."
                }
            ],
            "problem_statement": "Read problems statements in Mandarin Chinese  and Russian.\nChef loves to prepare delicious dishes. This time, Chef has decided to prepare a special dish for you, and needs to gather several apples to do so.\nChef has N apple trees in his home garden. Each tree has a certain (non-zero) number of apples on it. In order to create his dish, Chef wants to pluck every apple from every tree.\nChef has an unusual method of collecting apples. In a single minute, he can perform the following task:\n\n\nPick any subset of trees such that every tree in the subset has the same number of apples.\nFrom each tree in the subset, pluck any number of apples, as long as the number of apples left on the tree equals the number of apples on a tree not in the subset.\n\n \nIf all trees have the same number of apples left, Chef can pluck all of the apples remaining in a single minute.\nChef does not want to keep you waiting, so wants to achieve this task in the minimum possible time. Can you tell him what the minimum time required is?\nInput\nThe first line of the input contains a single integer T denoting the number of test cases. This will be followed by T test cases. The first line of each test case contains a single integer N denoting the number of apple trees in Chef's garden. The next line of each test case contains N space separated integers denoting the number of apples on each tree.\nOutput\nFor each of the T test cases, output a single line - the minimum time to pluck all apples from all trees.\nConstraints\n1 T \n1 N 5\n1 5\n\nScoring\nSubtask 1 : 1 T N 3:  (27 pts)  \nSubtask 2 : 1 T N 4:  (25 pts)  \nSubtask 3 : 1 T N 5:  (48 pts)",
            "input_format": "",
            "output_format": "",
            "problem_name": "Chef and Apple Trees",
            "user_tags": [
                "Frequency Arrays",
                "Sets"
            ],
            "computed_tags": [
                "Data Structures",
                "Arrays"
            ],
            "problem_code_id": "CAPPLE",
            "difficulty_level": "1301",
            "ai_solutions": [
                "T = int(input().strip())\nfor _ in range(T):\n    N = int(input().strip())\n    apples = list(map(int, input().strip().split()))\n    unique_apples = set(apples)\n    print(len(unique_apples))",
                "T = int(input().strip())\nfor _ in range(T):\n    N = int(input().strip())\n    apples = [int(x) for x in input().strip().split()]\n    print(len(set(apples)))"
            ],
            "human_solutions": [
                {
                    "id": 35645774,
                    "submission_date": 1594810481,
                    "language": "PYTH 3",
                    "username": "sanvi_2512",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.22",
                    "memory": "25.4M",
                    "solution": 35645774,
                    "code": "for _ in range(int(input())):\r\n    n=int(input())\r\n    a=[int(i) for i in input().split()]\r\n    print(len(set(a)))"
                },
                {
                    "id": 34877399,
                    "submission_date": 1593494499,
                    "language": "PYTH 3",
                    "username": "nishtha_28",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.20",
                    "memory": "19.4M",
                    "solution": 34877399,
                    "code": "try:\n    def fun(t):\n        for i in range(t):\n            n=int(input())\n            a=list(map(int,input().split()))\n            b=set(a)\n            print(len(b))\n    t=int(input())\n    fun(t)\nexcept:\n    pass"
                }
            ]
        },
        "AMSGAME1": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "3\n2\n10 12\n2\n5 9\n3\n6 10 15",
                    "output": "2\n1\n1",
                    "explanation": "Test Case 1: Since there are only two numbers, the operations are forced.\n{ 10, 12 } => Replace 12 with ( 12 - 10 = 2 ) => { 10, 2 }\n{ 10, 2 } => Replace 10 with ( 10 - 2 = 8 ) => { 8, 2 }\n{ 8, 2 } => Replace 8 with ( 8 - 2 = 6 ) => { 6, 2 }\n{ 6, 2 } => Replace 6 with ( 6 - 2 = 4 ) => { 4, 2 }\n{ 4, 2 } => Replace 4 with ( 4 - 2 = 2 ) => { 2, 2 }\n\nThe value of all the numbers when the game ends is 2.\nTest Case 2: Since there are only two numbers, the operations are forced.\n{ 5, 9 } => Replace 9 with ( 9 - 5 = 4 ) => { 5, 4 }\n{ 5, 4 } => Replace 5 with ( 5 - 4 = 1 ) => { 1, 4 }\n{ 1, 4 } => Replace 4 with ( 4 - 1 = 3 ) => { 1, 3 }\n{ 1, 3 } => Replace 3 with ( 3 - 1 = 2 ) => { 1, 2 }\n{ 1, 2 } => Replace 2 with ( 2 - 1 = 1 ) => { 1, 1 }\n\nThe value of all the numbers when the game ends is 1.\nTest Case 3: One way to play the game is\n{ 6, 10, 15 } => Replace 15 with ( 15 - 6 = 9 ) => { 6, 10, 9 }\n{ 6, 10, 9 } => Replace 10 with ( 10 - 6 = 4 ) => { 6, 4, 9 }\n{ 6, 4, 9 } => Replace 9 with ( 9 - 6 = 3 ) => { 6, 4, 3 }\n{ 6, 4, 3 } => Replace 6 with ( 6 - 4 = 2 ) => { 2, 4, 3 }\n{ 2, 4, 3 } => Replace 3 with ( 3 - 2 = 1 ) => { 2, 4, 1 }\n{ 2, 4, 1 } => Replace 4 with ( 4 - 2 = 2 ) => { 2, 2, 1 }\n{ 2, 2, 1 } => Replace first 2 with ( 2 - 1 = 1 ) => { 1, 2, 1 }\n{ 1, 2, 1 } => Replace 2 with ( 2 - 1 = 1 ) => { 1, 1, 1 }\n\nThe value of all the numbers when the game ends is 1. You may try to play the game differently and observe that the game will always end when all the values are 1."
                }
            ],
            "problem_statement": "Chef is playing a game on a sequence of N positive integers, say A1, A2, ... AN. The game is played as follows.\nIf all the numbers are equal, the game ends.\nOtherwise\n        Select two numbers which are unequal\nSubtract the smaller number from the larger number\nReplace the larger number with the result from above (see the explanation section for clarity)\n\n\nChef has already figured out that the game always terminates. He also knows, for a given sequence of integers, the game will always terminate on the same value, no matter how the game is played. Chef wants you to simulate the game for him and tell him on which value will the game terminate for a given sequence of integers.\nInput\nThe first line of the input contains an integer T, the number of test cases. Then follow the description of T test cases. The first line of each test case contains a single integer N, the length of the sequence. The second line contains N positive integers, each separated by a single space.\nOutput\nFor each test case, output a single integer - the value of all the numbers when they are equal (and the game terminates), on a line by itself.\nConstraints\n\n1 \u2264 T \u2264 1001 \u2264 N \u2264 10001 \u2264 Ai \u2264 109",
            "input_format": "",
            "output_format": "",
            "problem_name": "Subtraction Game 1",
            "user_tags": [
                "GCD",
                "Observation"
            ],
            "computed_tags": [
                "Mathematics",
                "Number Theory",
                "Algorithms"
            ],
            "problem_code_id": "AMSGAME1",
            "difficulty_level": "1250",
            "ai_solutions": [
                "import math\ndef game_terminate_value(T, test_cases):\n    for _ in range(T):\n        N, sequence = test_cases[_]\n        result = sequence[0]\n        for i in range(1, N):\n            result = math.gcd(result, sequence[i])\n        print(result)\n\nT = int(input())\ntest_cases = []\nfor _ in range(T):\n    N = int(input())\n    sequence = list(map(int, input().split()))\n    test_cases.append((N, sequence))\ngame_terminate_value(T, test_cases)"
            ],
            "human_solutions": [
                {
                    "id": 33084825,
                    "submission_date": 1589475988,
                    "language": "PYTH 3",
                    "username": "thejayeshpatil",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.06",
                    "memory": "17.7M",
                    "solution": 33084825,
                    "code": "import math\nfor _ in range(int(input())):\n    n=int(input())\n    j=list(map(int,input().split(' ')))\n    for i in range(1,n):\n        j[i]=math.gcd(j[i],j[i-1])\n    print(j[-1])"
                },
                {
                    "id": 32830621,
                    "submission_date": 1588861706,
                    "language": "PYTH 3",
                    "username": "niladriclw",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.06",
                    "memory": "17.6M",
                    "solution": 32830621,
                    "code": "import math\nfor _ in range(int(input())):\n    n=int(input())\n    l=list(map(int, input().split()))\n    for i in range(1,n):\n        l[i]=math.gcd(l[i], l[i-1])\n    print(l[-1])"
                }
            ]
        },
        "NUMGAME2": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "2\n1\n2",
                    "output": "ALICE\nBOB",
                    "explanation": ""
                }
            ],
            "problem_statement": "Alice and Bob play the following game.They choose a number N to play with.The runs are as follows :\n\n1.Bob plays first and the two players alternate.\n\n2.In his/her turn ,a player can subtract from N any prime     number(including 1) less than N.The number thus obtained is the new N.\n\n3.The person who cannot make a move in his/her turn loses the game.\n\nAssuming both play optimally,who wins the game ?\n\nInput format:\nThe first line contains the number of test cases T.Each of the next lines contains an integer N.\n\nOutput format:\nOutput T lines one for each test case,containing \"ALICE\" if Alice wins the game ,or \"BOB\" if Bob wins the game.\n\n\nConstraints:\n1 \n\nNote : For the first test case, Bob cannot make any move and hence Alice wins the game. For the second test case, Bob subtracts 1 from N. Now, Alice cannot make a move and loses the game.",
            "input_format": "",
            "output_format": "",
            "problem_name": "Number Game Revisited",
            "user_tags": [
                "Game Theory"
            ],
            "computed_tags": [
                "Algorithms"
            ],
            "problem_code_id": "NUMGAME2",
            "difficulty_level": "1316",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 30176574,
                    "submission_date": 1583673016,
                    "language": "PYTH 3",
                    "username": "utkarsh_sri",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.01",
                    "memory": "17.6M",
                    "solution": 30176574,
                    "code": "for i in range(int(input())):\r\n    n=int(input())\r\n    if n%4!=1:\r\n        print(\"BOB\")\r\n    else:\r\n        print(\"ALICE\")\r\n"
                },
                {
                    "id": 29887232,
                    "submission_date": 1582603281,
                    "language": "PYTH 3",
                    "username": "justsuyash",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.02",
                    "memory": "17.6M",
                    "solution": 29887232,
                    "code": "for tc in range(int(input())):\n    \n    n = int(input())\n    turns = 0\n    \n    if n%4 == 1:\n        print('ALICE')\n    else:\n        print('BOB')"
                }
            ]
        }
    },
    "2": {
        "CUTPIZ": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "3\n4 \n0 90 180 270\n2\n90 210\n2\n0 1",
                    "output": "0\n1\n358",
                    "explanation": "In the first sample the pizza is already cut into four equal slices.\nIn the second sample the pizza will be cut into three equal slices after making one extra cut at $330$ degrees.\nIn the third sample Vasya will have to cut his pizza into $360$ pieces of $1$ degree angle each."
                }
            ],
            "problem_statement": "Vasya has ordered a pizza delivery. The pizza can be considered a perfect circle. There were $n$ premade cuts in the pizza when it was delivered. Each cut is a straight segment connecting the center of the pizza with its boundary.\nLet $O$ be the center of the pizza, $P_i$ be the endpoint of the $i$-th cut lying on the boundary, and $R$ be the point of the boundary straight to the right of $O$. Then the counterclockwise-measured angle $\\angle ROP_i$ is equal to $a_i$ degrees, where $a_i$ is an integer between $0$ and $359$. Note that angles between $0$ and $180$ angles correspond to $P_i$ in the top half of the pizza, while angles between $180$ and $360$ angles correspond to the bottom half.\nVasya may cut his pizza a few more times, and the new cuts still have to be straight segments starting at the center. He wants to make the pizza separated into several equal slices, with each slice being a circular sector with no cuts inside of it. How many new cuts Vasya will have to make?\nInput:\nThe first line of input contains $T$ , i.e number of test cases per file.\nThe first line of each test case contains a single integer $n-$  the numbers of premade cuts ($2 \\leq n \\leq 360$).\nThe second lines contains $n$ integers $a_1, \\ldots, a_n-$ angles of the cuts $1, \\ldots, n$ respectively ($0 \\leq a_1 < \\ldots, a_{n - 1} < 360$).\nOutput:\nPrint a single integer$-$ the smallest number of additional cuts Vasya has to make so that the pizza is divided into several equal slices.\nConstraints\n\n$1  \\leq T  \\leq 36$\n$2 \\leq n \\leq 360$\n$0 \\leq a_1 < \\ldots, a_{n - 1} < 360$",
            "input_format": "",
            "output_format": "",
            "problem_name": "Cutting Pizza",
            "user_tags": [
                "Geometry",
                "GCD",
                "Observation"
            ],
            "computed_tags": [
                "Mathematics",
                "Number Theory",
                "Algorithms"
            ],
            "problem_code_id": "CUTPIZ",
            "difficulty_level": "1446",
            "ai_solutions": [
                "T = int(input())\nfor _ in range(T):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.append(360)\n    diff = [a[i+1] - a[i] for i in range(n)]\n    min_diff = min(diff)\n    print(360//min_diff - n)",
                "T = int(input())\nfor _ in range(T):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.append(360)\n    min_diff = min(a[i+1] - a[i] for i in range(n))\n    print(360//min_diff - n)"
            ],
            "human_solutions": [
                {
                    "id": 60723968,
                    "submission_date": 1647619574,
                    "language": "PYTH 3",
                    "username": "ussleonidas_19",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.02",
                    "memory": "9M",
                    "solution": 60723968,
                    "code": "import math\n\nfor _ in range(int(input())):\n    angels = []\n    dif = []\n    gcd = 360\n    nAngels = int(input())\n    angels = list(map(int,input().split()))\n\n    for i in range(1,len(angels)):\n        dif.append(angels[i]-angels[i-1])\n    \n    dif.append(angels[0]+(360-angels[-1]))\n    \n    for d in dif:\n        gcd = math.gcd(gcd,d)\n    \n    print(int(360/gcd)-nAngels)"
                },
                {
                    "id": 42896348,
                    "submission_date": 1613729516,
                    "language": "PYTH 3",
                    "username": "aayush_jerry",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.02",
                    "memory": "17.5M",
                    "solution": 42896348,
                    "code": "import math\n\nfor _ in range(int(input())):\n    angels = []\n    dif = []\n    gcd = 360\n    nAngels = int(input())\n    angels = list(map(int,input().split()))\n\n    for i in range(1,len(angels)):\n        dif.append(angels[i]-angels[i-1])\n    \n    dif.append(angels[0]+(360-angels[-1]))\n    \n    for d in dif:\n        gcd = math.gcd(gcd,d)\n    \n    print(int(360/gcd)-nAngels)\n"
                }
            ]
        },
        "TRIANGCL": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "1\n2\n0 0 1 1 1 2\n3 0 0 4 4 7",
                    "output": "Scalene triangle\nIsosceles triangle",
                    "explanation": ""
                },
                {
                    "input": "2\n6\n0 0 4 1 1 3\n0 0 1 0 1 2\n0 0 1 1 1 2\n0 0 2 1 1 2\n3 0 0 4 4 7\n0 0 2 1 4 0",
                    "output": "Scalene acute triangle\nScalene right triangle\nScalene obtuse triangle\nIsosceles acute triangle\nIsosceles right triangle\nIsosceles obtuse triangle",
                    "explanation": ""
                }
            ],
            "problem_statement": "Read problems statements in Mandarin Chinese , Russian and Vietnamese as well.\n\nTriangle classification is an important problem in modern mathematics. Mathematicians have developed many criteria according to which a triangle can be classified. In this problem, you will be asked to classify some triangles according to their sides and angles.\n\n\nAccording to their measure, angles may be:\n\n  \nAcute \u2014 an angle that is less than 90 degrees\n    Right \u2014 a 90-degrees angle\n    Obtuse \u2014 an angle that is greater than 90 degrees\n  \n\nAccording to their sides, triangles may be:\n\n  \nScalene \u2014 all sides are different\n    Isosceles \u2014 exactly two sides are equal\n  \n\nAccording to their angles, triangles may be:\n\n  \nAcute \u2014 all angles are acute\n    Right \u2014 one angle is right\n    Obtuse \u2014 one angle is obtuse\n  \nTriangles with three equal sides (equilateral triangles) will not appear in the test data.\nThe triangles formed by three collinear points are not considered in this problem. In order to classify a triangle, you should use only the adjactives from the statement. There is no triangle which could be described in two different ways according to the classification characteristics considered above.\nInput\nThe first line of input contains an integer SUBTASK_ID denoting the subtask id this input belongs to.\nThe second line of input contains an integer T denoting the number of test cases. The description of T test cases follows.\n\nThe only line of each test case contains six integers x1, y1, x2, y2, x3 and y3 denoting Cartesian coordinates of points, that form the triangle to be classified.\n\n\nIt is guaranteed that the points are non-collinear.\n\nOutput\nFor each test case, output a single line containing the classification of the given triangle.\nIf SUBTASK_ID equals 1, then the classification should follow the \"Side classification starting with a capital letter> triangle\" format.\nIf SUBTASK_ID equals 2, then the classification should follow the \"Side classification starting with a capital letter> angle classification> triangle\" format.\nPlease, check out the samples section to better understand the format of the output.\nConstraints\n1 \u2264 T \u2264 60\n|xi|, |yi| \u2264 100\nSubtask 1 (50 points): no additional constraints\nSubtask 2 (50 points): no additional constraints\n\nNote\n\nThe first test of the first subtask and the first test of the second subtask are the example tests (each in the corresponding subtask). It's made for you to make sure that your solution produces the same verdict both on your machine and our server.\n\nTip\n\nConsider using the following condition in order to check whether two floats or doubles A and B are equal instead of traditional A == B: |A - B| -6.",
            "input_format": "",
            "output_format": "",
            "problem_name": "Triangle Classification",
            "user_tags": [
                "ad-hoc",
                "cakewalk",
                "geometry",
                "kostya_by",
                "ltime32"
            ],
            "computed_tags": [],
            "problem_code_id": "TRIANGCL",
            "difficulty_level": "1462",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 70732462,
                    "submission_date": 1659757062,
                    "language": "PYTH 3",
                    "username": "amitv_123",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.02",
                    "memory": "9.2M",
                    "solution": 70732462,
                    "code": "\r\n\r\nid=int(input())\r\nt=int(input())\r\nfor i in range(t):\r\n    x1,y1,x2,y2,x3,y3=map(int,input().split())\r\n    d1 = (x1-x2)**2 + (y1-y2)**2\r\n    d2 = (x1-x3)**2 + (y1-y3)**2 \r\n    d3 = (x2-x3)**2 + (y2-y3)**2\r\n    \r\n    angle=\"\"\r\n    length=\"\"\r\n    \r\n    arr=[d1,d2,d3]\r\n    arr.sort()\r\n    \r\n    if arr[2]>arr[0]+arr[1]:\r\n      angle= \"obtuse\"\r\n    elif arr[2]<arr[0]+arr[1]:\r\n        angle= \"acute\"\r\n    else:\r\n        angle= \"right\"\r\n    \r\n    if d1!=d2 and d2!=d3 and d3!=d1:\r\n        length=\"Scalene\"\r\n    else:\r\n        length=\"Isosceles\"  \r\n        \r\n    if id==1:\r\n        print(length + \" triangle\")\r\n    else:\r\n        print(length + \" \" + angle + \" triangle\")\r\n        "
                },
                {
                    "id": 67054835,
                    "submission_date": 1655540513,
                    "language": "PYTH 3",
                    "username": "anusri1207",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.02",
                    "memory": "9.3M",
                    "solution": 67054835,
                    "code": "id=int(input())\r\nt=int(input())\r\nfor i in range(t):\r\n    x1,y1,x2,y2,x3,y3=map(int,input().split())\r\n    d1 = (x1-x2)**2 + (y1-y2)**2\r\n    d2 = (x1-x3)**2 + (y1-y3)**2 \r\n    d3 = (x2-x3)**2 + (y2-y3)**2\r\n    \r\n    angle=\"\"\r\n    length=\"\"\r\n    \r\n    arr=[d1,d2,d3]\r\n    arr.sort()\r\n    \r\n    if arr[2]>arr[0]+arr[1]:\r\n      angle= \"obtuse\"\r\n    elif arr[2]<arr[0]+arr[1]:\r\n        angle= \"acute\"\r\n    else:\r\n        angle= \"right\"\r\n    \r\n    if d1!=d2 and d2!=d3 and d3!=d1:\r\n        length=\"Scalene\"\r\n    else:\r\n        length=\"Isosceles\"  \r\n        \r\n    if id==1:\r\n        print(length + \" triangle\")\r\n    else:\r\n        print(length + \" \" + angle + \" triangle\")\r\n        \r\n"
                }
            ]
        },
        "MIKE1": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "3 2\n1 2\n4 5\n7 0\n2\n1 2\n2 2",
                    "output": "9",
                    "explanation": "In this test case N equals to 3, M equals to 2, L equals to 2. E1 = 2 + 5 = 7, E2 = 4 + 5 = 9. The answer is max(E1, E2) = max(7, 9) = 9;"
                },
                {
                    "input": "1 3\n1 2 3\n2\n1 3\n3 1",
                    "output": "-1",
                    "explanation": "In the second test case N equals to 1, M equals to 3, L equals to 2. It is impossible to calculate E1 and E2, because A3, 1 doesn't exist. So the answer is max(E1, E2) = max(-1, -1) = -1;"
                },
                {
                    "input": "1 3\n1 2 3\n2\n1 1\n3 1",
                    "output": "4",
                    "explanation": "In the third test case N equals to 1, M equals to 3, L equals to 2. It is impossible to calculate E1, because A3, 1 doesn't exist. So E1 is equal to -1. E2 = 1 + 3 = 4. The answer is max(E1, E2) = max(-1,4) = 4."
                }
            ],
            "problem_statement": "Read problems statements in Mandarin Chinese and Russian.\nMike is given a matrix A, N and M are numbers of rows and columns respectively. A1, 1 is the number in the top left corner. All the numbers in A are non-negative integers. He also has L pairs of integers (ik, jk). His task is to calculate Ai1, j1 + Ai2, j2 + ... + AiL, jL.\n\n\nUnfortunately, Mike forgot if Ai, j was a number in the i'th row and j'th column or vice versa, if Ai, j was a number in the j'th row and i'th column.\n\n\nSo, Mike decided to calculate both E1 = Ai1, j1 + Ai2, j2 + ... + AiL, jL and E2 = Aj1, i1 + Aj2, i2 + ... + AjL, iL. If it is impossible to calculate E1(i.e. one of the summands doesn't exist), then let's assume, that it is equal to -1. If it is impossible to calculate E2, then let's also assume, that it is equal to -1.\n\n\nYour task is to calculate max(E1, E2).\n\nInput\n\nThe first line contains two integers N and M, denoting the number of rows and the number of columns respectively.\nEach of next N lines contains M integers. The j'th integer in the (i + 1)'th line of the input denotes Ai, j.\n\nThe (N + 2)'th line contains an integer L, denoting the number of pairs of integers, that Mike has.\nEach of next L lines contains a pair of integers. The (N + 2 + k)-th line in the input contains a pair (ik, jk).\n\nOutput\nThe first line should contain an integer, denoting max(E1, E2).\nScoring\n\n1 \u2264 ik, jk \u2264 500 for each test case.\n\n\nSubtask 1 (10 points): 1 \u2264 N, M, L \u2264 5, 0 \u2264 Ai, j \u2264 10;\nSubtask 2 (12 points): 1 \u2264 N, M, L \u2264 300, 0 \u2264 Ai, j \u2264 106, all the numbers in A are equal;\nSubtask 3 (20 points): 1 \u2264 N, M, L \u2264 300, 0 \u2264 Ai, j \u2264 109;\nSubtask 4 (26 points): 1 \u2264 N, M, L \u2264 500, 0 \u2264 Ai, j \u2264 109;\nSubtask 5 (32 points): 1 \u2264 N, M \u2264 500, 1 \u2264 L \u2264 250 000, 0 \u2264 Ai, j \u2264 109.",
            "input_format": "",
            "output_format": "",
            "problem_name": "Mike and Matrices ",
            "user_tags": [
                "Implementation"
            ],
            "computed_tags": [
                "Algorithms"
            ],
            "problem_code_id": "MIKE1",
            "difficulty_level": "1482",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 69120859,
                    "submission_date": 1657997499,
                    "language": "PYTH 3",
                    "username": "dhruvgautam_16",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.87",
                    "memory": "48.4M",
                    "solution": 69120859,
                    "code": "n , m = map(int,input().split(\" \"))\r\narr = []\r\nfor i in range(n):\r\n    arr.append([int(j) for j in input().split()])\r\nl = int(input())\r\ncheck = []\r\nfor i in range(l):\r\n    a, b = map(int,input().split())\r\n    check.append([a-1,b-1])\r\n\r\ne1 , e2 = 0 , 0\r\nfor i in range(l):\r\n    if e1 != -1:\r\n        if check[i][0] < n and check[i][1] < m:\r\n            e1 += arr[check[i][0]][check[i][1]]\r\n        else:\r\n            e1 = -1\r\n    if e2 != -1:\r\n        if check[i][0] < m and check[i][1] < n:\r\n            e2 += arr[check[i][1]][check[i][0]]\r\n        else:\r\n            e2 = -1\r\nprint(max(e1,e2))"
                },
                {
                    "id": 61948134,
                    "submission_date": 1649000430,
                    "language": "PYTH 3",
                    "username": "manchanpally",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.80",
                    "memory": "48.7M",
                    "solution": 61948134,
                    "code": "n , m = map(int,input().split(\" \"))\narr = []\nfor i in range(n):\n    arr.append([int(j) for j in input().split()])\nl = int(input())\ncheck = []\nfor i in range(l):\n    a, b = map(int,input().split())\n    check.append([a-1,b-1])\n\ne1 , e2 = 0 , 0\nfor i in range(l):\n    if e1 != -1:\n        if check[i][0] < n and check[i][1] < m:\n            e1 += arr[check[i][0]][check[i][1]]\n        else:\n            e1 = -1\n    if e2 != -1:\n        if check[i][0] < m and check[i][1] < n:\n            e2 += arr[check[i][1]][check[i][0]]\n        else:\n            e2 = -1\nprint(max(e1,e2))\n"
                }
            ]
        },
        "VEGETA": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "2\n3 7\n1 1023",
                    "output": "5\n2177",
                    "explanation": "Example case 1: Vegeta is standing at $n$=3. As he moves from 3 to 4, energy used is 1. From 4 to 5, energy used is 1. Similarly, as he continues to move towards m=7, the total energy used is 1+1+1+2=5."
                }
            ],
            "problem_statement": "Babidi has summoned Majin Vegeta. He orders him to kill Supreme Kai. But Vegeta wants to get out of his control.\nBabidi has laid out a trap. Vegeta is standing at the $nth$ level of mind control. In order to defeat Babidi's trap, he needs to reach $mth$ level. The levels are continuous increasing integers. At each increment of level, $nth$ to $(n+1)th$ level, for example, the energy used is - number of distinct prime factors of $n$. \nVegeta needs your help in order to figure out how much total minimum energy he needs to defeat Babidi's trap. The total energy is the sum of energy used at each increment of a level.In the calculation of energy, $n$ and $m$ are inclusive.\nInput:\n\nThe first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follow. \nThe first and only line of each test case contains the two integers $n$ and $m$, separated by a single space. \n\nOutput:\nFor each test case, print a single line containing one integer denoting the energy needed by Vegeta to escape Babidi's mind control and continue his battle with Kakarot.\nConstraints\n\n$1 \\leq T \\leq 2$\n$1 \\leq n \\leq m \\leq 10^6$",
            "input_format": "",
            "output_format": "",
            "problem_name": "Majin Vegeta",
            "user_tags": [
                "akshatgirdhar8"
            ],
            "computed_tags": [],
            "problem_code_id": "VEGETA",
            "difficulty_level": "1477",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 61902738,
                    "submission_date": 1648927971,
                    "language": "PYTH 3",
                    "username": "raghavireddy10",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.77",
                    "memory": "16.5M",
                    "solution": 61902738,
                    "code": "from math import ceil,sqrt\nl=[0]*(10**6+1)\nfor i in range(2,10**6):\n    if l[i]==0:\n        j=1\n        while (i*j)<=(10**6):\n            l[i*j]+=1\n            j+=1\nfor i in range(int(input())):\n    n,m=map(int,input().split())\n    c=0\n    for i in range(n,m):\n        c+=l[i]\n    print(c)\n"
                },
                {
                    "id": 19923649,
                    "submission_date": 1535785373,
                    "language": "PYTH 3",
                    "username": "dhanyaabhirami",
                    "user_rating_star": 3,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.49",
                    "memory": "17.5M",
                    "solution": 19923649,
                    "code": "factors=[0]*1000001\nfor i in range(2,1000001):\n    if factors[i]==0:\n        factors[i]=1\n        for j in range(i+i,1000001,i):\n            factors[j]+=1\nt=int(input())\nwhile t:\n    t-=1\n    ans=0\n    n,m=map(int,input().strip().split(' '))\n    for i in range(n,m):\n        ans+=factors[i]\n    print(ans)\n"
                }
            ]
        },
        "MONTRANS": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "2\n9 77 69\n98 99 69",
                    "output": "4\n0",
                    "explanation": "In the first test we have the following sequence: 9.77, 8.09, 40.07, 38.39, 70.37, 68.69, 0.68. After last step we have not enough money for further transformations. The maximal profit will be after 4 transformations."
                }
            ],
            "problem_statement": "You are standing near a very strange machine. If you put C cents in the machine, the remaining money in your purse will transform in an unusual way. If you have A dollars and B cents remaining in your purse after depositing the C cents, then after the transformation you will have B dollars and A cents. You can repeat this procedure as many times as you want unless you don't have enough money for the machine. If at any point C > B and A > 0, then the machine will allow you to break one of the A dollars into 100 cents so you can place C cents in the machine. The machine will not allow you to exchange a dollar for 100 cents if B >= C.\n\n \n\nOf course, you want to do this to maximize your profit. For example if C=69 and you have 9 dollars and 77 cents then after you put 69 cents in the machine you will have 8 dollars and 9 cents (9.77 --> 9.08 --> 8.09). But I should warn you that you can't cheat. If you try to throw away 9 cents before the transformation (in order to obtain 99 dollars and 8 cents after), the machine will sense you are cheating and take away all of your money. You need to know how many times you should do this transformation in order to make a maximum profit. Since you are very busy man, you want to obtain the maximum possible profit in the minimum amount of time.\n\n\nInput\n The first line contains a single integer T , the number of test cases. T test cases follow. The only line of each test case contains three nonnegative integers A, B and C where A, B, C . It means that you have A dollars and B cents in your purse and you need to put C cents in the machine to make the transformation.\n\n\nOutput\n For each test case, output a single line containing the minimal number of times you should do this transformation in order to make a maximal profit. It is guaranteed that the answer is less than 10000.",
            "input_format": "",
            "output_format": "",
            "problem_name": "Money Transformation",
            "user_tags": [
                "anton_adm",
                "cook08",
                "easy"
            ],
            "computed_tags": [],
            "problem_code_id": "MONTRANS",
            "difficulty_level": "1449",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 1025097648,
                    "submission_date": 1696997607,
                    "language": "PYTH 3",
                    "username": "premlanivinit",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.03",
                    "memory": "9.2M",
                    "solution": 1025097648,
                    "code": "for _ in range(int(input())):\r\n    A, B, C = list(map(int, input().split()))\r\n\r\n    seen = set()\r\n    iteration = ans = 0\r\n    max_profit = 100*A + B\r\n    while (A,B) not in seen and (A or B > C):\r\n        seen.add((A,B))\r\n        A, B = (B - C, A) if B >= C else (B + 100 - C, A - 1)\r\n        iteration += 1\r\n        profit = 100*A + B\r\n        if max_profit < profit:\r\n            max_profit = profit\r\n            ans = iteration\r\n        \r\n        #print(A, B, iteration, max_profit)\r\n    print(ans)"
                },
                {
                    "id": 92595608,
                    "submission_date": 1679451453,
                    "language": "PYTH 3",
                    "username": "piceratop",
                    "user_rating_star": 3,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.02",
                    "memory": "9.6M",
                    "solution": 92595608,
                    "code": "for _ in range(int(input())):\r\n  a, b, c = map(int, input().split())\r\n  i, m_index, m_money = 0, 0, a*100+b\r\n  p_money={m_money}\r\n  while a*100+b>c:\r\n    i += 1\r\n    if c > b:\r\n      a -= 1\r\n      b += 100\r\n    b -= c\r\n    a,b = b,a\r\n    if a*100+b in p_money:\r\n      break\r\n    p_money.add(a*100+b)\r\n    if a*100+b > m_money:\r\n      m_index=i\r\n      m_money=a*100+b\r\n  print(m_index)\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  "
                }
            ]
        },
        "EMITL": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "3\nLTIMEAZAZAITLME\nLLLTTTIIIMMMEEEAHA\nLTIMEM",
                    "output": "YES\nYES\nNO",
                    "explanation": "Test case 1: we can permute the last 5 letters and get LTIMEAZAZAEMITL\nTest case 2: we have 3 copies of each of the letters 'L', 'T', 'I', 'M', 'E' so we can leave 5 of them in the beginning and move 5 of them to the end.\nTest case 3: we have only one letter 'L' so we can't make necessary prefix and suffix at the same time."
                }
            ],
            "problem_statement": "Read problems statements in Mandarin Chinese  and Russian\nYou are given a string S constisting of uppercase Latin letters. Is it possible to reorder the characters in this string to get a string with prefix \"LTIME\" and suffix \"EMITL\"?\nWe remind you that a prefix of a string is any substring which contains its first character, while a suffix of a string is substring containing its last character.\nInput\nThe first line contains a single integer T, denoting the number of testcases. The descriptions of T test cases follow.\nThe first and only line of the test case description has one non-empty string S consisting of uppercase Latin letters only.\nOutput\nFor each testcase output a single line containing the string \"YES\" (without quotes) if it's possible to reorder the characters to get the required prefix and suffix, or \"NO\" (without quotes) otherwise.\nConstraints\nSubtask 1 (23 points) : 1 \u2264 T \u2264 100, 1 \u2264 |S| \u2264 9\nSubtask 2 (77 points) : 1 \u2264 T \u2264 1000, 1 \u2264 |S| \u2264 100",
            "input_format": "",
            "output_format": "",
            "problem_name": "emitL",
            "user_tags": [
                "Implementation"
            ],
            "computed_tags": [
                "Algorithms"
            ],
            "problem_code_id": "EMITL",
            "difficulty_level": "1483",
            "ai_solutions": [
                "T = int(input())\nfor _ in range(T):\n    S = input()\n    if S.count('L') >= 2 and S.count('T') >= 2 and S.count('I') >= 2 and S.count('M') >= 2 and S.count('E') >= 2:\n        print(\"YES\")\n    else:\n        print(\"NO\")",
                "def check_string(S):\n    for char in \"LTIME\":\n        if S.count(char) < 2:\n            return \"NO\"\n    return \"YES\"\n\nT = int(input())\nfor _ in range(T):\n    S = input()\n    print(check_string(S))"
            ],
            "human_solutions": [
                {
                    "id": 29199272,
                    "submission_date": 1580044681,
                    "language": "PYTH 3",
                    "username": "ankit022",
                    "user_rating_star": 3,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.02",
                    "memory": "17.6M",
                    "solution": 29199272,
                    "code": "for _ in range(int(input())):\n    s=input()\n    s1=s2=s3=s4=s5=0\n    for i in range(len(s)):\n        if s[i]=='L':\n            s1+=1\n        if s[i]=='T':\n            s2+=1\n        if s[i]=='I':\n            s3+=1\n        if s[i]=='M':\n            s4+=1\n        if s[i]=='E':\n            s5+=1\n    if s1>=2 and s2>=2 and s3>=2 and s4>=2 and s5>=2 and len(s)>9:\n        print(\"YES\")\n    elif s1>=2 and s2>=2 and s3>=2 and s4>=2 and s5>=1 and len(s)==9:\n        print(\"YES\")\n    else:\n        print(\"NO\")"
                },
                {
                    "id": 25475705,
                    "submission_date": 1564379846,
                    "language": "PYTH 3",
                    "username": "raj_tyagi20",
                    "user_rating_star": 4,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.00",
                    "memory": "22.8M",
                    "solution": 25475705,
                    "code": "t=int(input())\nfor i in range(0,t):\n    s=raw_input()\n    \n    h=[]\n    for i in range(0,26):\n        h.append(0)\n        \n    for i in range(0,len(s)):\n        x=ord(s[i])-65\n        h[x]=h[x]+1\n        \n    if h[4]>=2 and h[8]>=2 and h[11]>=2 and h[12]>=2 and h[19]>=2:\n        print(\"YES\")\n    elif len(s)==9 and h[4]==1 and h[8]==2 and h[11]==2 and h[12]==2 and h[19]==2:\n        print(\"YES\")\n    else:\n        print(\"NO\")"
                }
            ]
        },
        "SUPVIL": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "3  \n2   \nkittywoman  \nwingman  \n6  \nhacker  \nbeautywoman  \nblackjack  \nnoname  \nwatersnake  \nstrongman  \n4  \nfamousman  \nredsnake  \ntallwoman  \ntinythief",
                    "output": "superheroes\nvillains\ndraw",
                    "explanation": "Example case 1. As you know that initially a superhero is fighting with a villain. After that, superhero \"kittywoman\" joins the fight. At this point, there are two superheros and one villain. After that \"wingman\" joins the fight too. As this point of time, there are three superheros and one villain, so the number of superheros are two more than number of villains, so superheros will win the fight. \nExample case 2. Other than first two peoople, six more people join the fight. The moment when the fight is decided is after watersnake joins the fight, because there are two superheroes fighting five villains, so villains will win.\nExample case 3. Other than initial two people, four more people join the fight, and there is no moment at which the fight can be decided, so it ends with a draw."
                }
            ],
            "problem_statement": "Read problems statements in Mandarin Chinese, Russian and Vietnamese as well.\nIn a world of superheroes each person is either a superhero or a villain. It is well known that every superhero has a name ending with either \u201cman\u201d or \u201cwoman\u201d, for example \u201cchefman\u201d, \u201cprettywoman\u201d are Superheroes. All other persons are villains, for example \u201chacker\u201d and \u201cunclejohn\". \n\nCurrently a big fight between the superheroes and the villains is going to happen. Initially there is only one superhero fighting one villain. Then total of N persons joined the fight one after another. If at point of time, there are two more superheroes than villains in the fight, superheroes will win the fight immediately, as they can overwhelm villains with their powers. On the other hand, if there are 3 more villains than superheroes at any time, they will win, because they use dirty tricks to defeat the superheroes. If over all all the fights, none of these cases happen, then the fight is declared to be a draw. For a given list of people joining the fight in the given order, decide which groups wins the fight or whether the fight is ended with a draw. \n\nInput\nIn the first line there is a single integer T denoting the number of test cases to handle. After that the description of T test cases follow.\nDescription of each test cases starts with a line containing a single integer N denoting the number of people joining the fight.\nThe i-th of the following N lines contains the name of person joining the fight at time i.\nOutput\n\nFor each test cases, output either \"superheroes\" if superheroes win the fight, \"villains\" if villains win or a \"draw\" if the fight ends with a draw. All of these strings should be outputted without quotes.\n\nConstraints\n\n1 \u2264 T \u2264 10\nEvery person's name consists only of English lowercase letters (i.e. from 'a' to 'z') and it is no longer than 15 characters.\nNo two persons have the same name.\n\nSubtasks\n\nSubtask #1: (30 points)\n\n1 \u2264 N \u2264 500\n\n\nSubtask #2: (70 points)\n\n1 \u2264 N \u2264 105",
            "input_format": "",
            "output_format": "",
            "problem_name": "Superheroes and villains",
            "user_tags": [
                "String",
                "ad-hoc"
            ],
            "computed_tags": [
                "Data Structures",
                "Algorithms",
                "Constructive"
            ],
            "problem_code_id": "SUPVIL",
            "difficulty_level": "1446",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 61902462,
                    "submission_date": 1648927462,
                    "language": "PYTH 3",
                    "username": "amulya_0710",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "1.31",
                    "memory": "9.2M",
                    "solution": 61902462,
                    "code": "for i in range(int(input())):\n    n=int(input())\n    l=[]\n    h=1\n    v=1\n    win=0\n    for i in range(n):\n        x=input().strip()\n        if len(x)>=3:\n            if x[-3:]=='man':\n                h=h+1\n            else:\n                v=v+1\n        else:\n            v=v+1\n        if win==0:\n            if v+2<=h:\n                win=1\n            elif h+3<=v:\n                win=2\n    if win==0:\n        print('draw')\n    elif win==1:\n        print('superheroes')\n    elif win==2:\n        print('villains')\n"
                },
                {
                    "id": 60948811,
                    "submission_date": 1647838174,
                    "language": "PYTH 3",
                    "username": "sasikumar_22",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "1.24",
                    "memory": "9.3M",
                    "solution": 60948811,
                    "code": "for i in range(int(input())):\r\n    n=int(input())\r\n    l=[]\r\n    h=1\r\n    v=1\r\n    win=0\r\n    for i in range(n):\r\n        x=input().strip()\r\n        if len(x)>=3:\r\n            if x[-3:]=='man':\r\n                h=h+1\r\n            else:\r\n                v=v+1\r\n        else:\r\n            v=v+1\r\n        if win==0:\r\n            if v+2<=h:\r\n                win=1\r\n            elif h+3<=v:\r\n                win=2\r\n    if win==0:\r\n        print('draw')\r\n    elif win==1:\r\n        print('superheroes')\r\n    elif win==2:\r\n        print('villains')"
                }
            ]
        },
        "ARRANGE": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "2\n2 chef\n4 enjoyourapplepie",
                    "output": "cehf\neayejpuinpopolre",
                    "explanation": ""
                }
            ],
            "problem_statement": "The Chef has prepared the appetizers in the shapes of letters to spell a special message for the guests. There are n appetizers numbered from 0 to n-1 such that if the appetizers are arrayed in this order, they will display the message. The Chef plans to display them in this order on a table that can be viewed by all guests as they enter. The appetizers will only be served once all guests are seated.\n\n\n\nThe appetizers are not necessarily finished in the same order as they are numbered. So, when an appetizer is finished the Chef will write the number on a piece of paper and place it beside the appetizer on a counter between the kitchen and the restaurant. A server will retrieve this appetizer and place it in the proper location according to the number written beside it.\n\n\n\nThe Chef has a penchant for binary numbers. The number of appetizers created is a power of 2, say n = 2k. Furthermore, he has written the number of the appetizer in binary with exactly k bits. That is, binary numbers with fewer than k bits are padded on the left with zeros so they are written with exactly k bits.\n\n\n\nUnfortunately, this has unforseen complications. A binary number still \"looks\" binary when it is written upside down. For example, the binary number \"0101\" looks like \"1010\" when read upside down and the binary number \"110\" looks like \"011\" (the Chef uses simple vertical lines to denote a 1 bit). The Chef didn't realize that the servers would read the numbers upside down so he doesn't rotate the paper when he places it on the counter. Thus, when the server picks up an appetizer they place it the location indexed by the binary number when it is read upside down.\n\n\n\nYou are given the message the chef intended to display and you are to display the message that will be displayed after the servers move all appetizers to their locations based on the binary numbers they read.\n\n\nInput\n\nThe first line consists of a single integer T \u2264 25 indicating the number of test cases to follow. Each test case consists of a single line beginning with an integer 1 \u2264 k \u2264 16 followed by a string of precisely 2k characters. The integer and the string are separated by a single space. The string has no spaces and is composed only of lower case letters from `a` to `z`.\n\n\n\nOutput\n\nFor each test case you are to output the scrambled message on a single line.",
            "input_format": "",
            "output_format": "",
            "problem_name": "Arranging the Appetizers",
            "user_tags": [
                "String",
                "Bit Manipulation",
                "Implementation"
            ],
            "computed_tags": [
                "Data Structures",
                "Mathematics",
                "Algorithms"
            ],
            "problem_code_id": "ARRANGE",
            "difficulty_level": "1462",
            "ai_solutions": [
                "def solve():\n    T = int(input())\n    for _ in range(T):\n        k, s = input().split()\n        k = int(k)\n        n = 1 << k\n        s = list(s)\n        for i in range(n):\n            j = int(bin(i)[2:].zfill(k)[::-1], 2)\n            if i < j:\n                s[i], s[j] = s[j], s[i]\n        print(''.join(s))\n\nsolve()",
                "def solve():\n    T = int(input())\n    for _ in range(T):\n        k, s = input().split()\n        k = int(k)\n        n = 1 << k\n        s = list(s)\n        for i in range(n):\n            j = int(\"{:0{width}b}\".format(i, width=k)[::-1], 2)\n            if i < j:\n                s[i], s[j] = s[j], s[i]\n        print(''.join(s))\n\nsolve()"
            ],
            "human_solutions": [
                {
                    "id": 36924528,
                    "submission_date": 1597830329,
                    "language": "PYTH 3",
                    "username": "akshaykalucha",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.16",
                    "memory": "17.8M",
                    "solution": 36924528,
                    "code": "for _ in range(int(input())):\n\tarray = list(input().split())\n\tk = int(array[0])\n\tlength = 2**k\n\tfinal = [0]*length\n\tfor i in range(length):\n\t\tp = bin(i)[2:]\n\t\tfor TT in range(k-len(p)):\n\t\t\tp = '0'+p\n\t\tp = p[-1::-1]\n\t\tfinal[int(p,2)] = array[1][i]\n\tprint(''.join(final))"
                },
                {
                    "id": 34226259,
                    "submission_date": 1591939459,
                    "language": "PYTH 3",
                    "username": "vittal_161",
                    "user_rating_star": 3,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.14",
                    "memory": "17.8M",
                    "solution": 34226259,
                    "code": "from math import *\nform = lambda x : int(x) if x.isdigit() else x\ndef padBin(n, k):\n    b = bin(n)[2:]\n    return (\"0\"*(ceil(len(b)/k)*k-len(b))) + b\ndef revBin(n, k):\n    return int(padBin(n,k)[::-1], 2)\n    \ntest=int(input())\nfor _ in range(test):\n    k, mes = map(form, input().split())\n    scrambled = ['']*(2**k)\n    for i in range(2**k):\n        scrambled[revBin(i,k)] = mes[i]\n    print (''.join(scrambled))"
                }
            ]
        },
        "APPROX2": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "1   \n4 9\n4 4 2 6",
                    "output": "1 4",
                    "explanation": "The minimal possible absolute difference of 1 can be obtained by taking the pairs of a1 and a2, a1 and a4, a2 and a4, a3 and a4."
                }
            ],
            "problem_statement": "Read problems statements in Mandarin Chinese  and Russian.\nYou are given an array of N integers a1, a2, ..., aN and an integer K. Find the number of such unordered pairs {i, j} that \n\ni \u2260 j\n|ai + aj - K| is minimal possible\n\nOutput  the minimal possible value of |ai + aj - K| (where i \u2260 j) and the number of such pairs for the given array and the integer K.\nInput\nThe first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows.\nThe first line of each test case consists of two space separated integers - N and K respectively.\nThe second line contains N single space separated integers - a1, a2, ..., aN respectively.\n\nOutput\nFor each test case, output a single line containing two single space separated integers - the minimal possible value of |ai + aj - K| and the number of unordered pairs {i, j} for which this minimal difference is reached.\nConstraints\n\n\n1 \u2264 T \u2264 50\n1 \u2264 ai, K \u2264 109\nN = 2 - 31 point.\n2 \u2264 N \u2264 1000 - 69 points.",
            "input_format": "",
            "output_format": "",
            "problem_name": "Approximately II",
            "user_tags": [
                "Basic Maths",
                "Brute Force",
                "Implementation"
            ],
            "computed_tags": [
                "Mathematics",
                "Algorithms"
            ],
            "problem_code_id": "APPROX2",
            "difficulty_level": "1471",
            "ai_solutions": [
                "def solve():\n    T = int(input())\n    for _ in range(T):\n        N, K = map(int, input().split())\n        A = sorted(map(int, input().split()))\n        min_diff = float('inf')\n        pairs = 0\n        for i in range(N):\n            for j in range(i+1, N):\n                diff = abs(A[i] + A[j] - K)\n                if diff < min_diff:\n                    min_diff = diff\n                    pairs = 1\n                elif diff == min_diff:\n                    pairs += 1\n        print(min_diff, pairs)\n\nsolve()"
            ],
            "human_solutions": [
                {
                    "id": 35712406,
                    "submission_date": 1594916690,
                    "language": "PYTH 3",
                    "username": "umang_garg",
                    "user_rating_star": 3,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "3.77",
                    "memory": "25.4M",
                    "solution": 35712406,
                    "code": "t=int(input())\r\nfor i in range(t):\r\n    l=[]\r\n    mi=99999999999\r\n    n,m=map(int,input().split())\r\n    a=list(map(int,input().split()))\r\n    for j in range(n-1):\r\n        for k in range(j+1,n):\r\n            a1=a[j]\r\n            a2=a[k]\r\n            b1=a1+a2-m\r\n            b2=abs(b1)\r\n            l.append(b2)\r\n            if(mi>b2):\r\n                mi=b2\r\n                \r\n    print(mi,l.count(mi))        \r\n            \r\n"
                },
                {
                    "id": 34476766,
                    "submission_date": 1592374278,
                    "language": "PYTH 3",
                    "username": "vittal_161",
                    "user_rating_star": 3,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "2.47",
                    "memory": "17.7M",
                    "solution": 34476766,
                    "code": "for _ in range(int(input())):\n    n,k=map(int,input().split())\n    list1=list(map(int,input().split()))\n    list1.sort()\n    min1=1000000000000001\n    maxsum=0\n    for i in range(len(list1)):\n        for j in range(i+1,len(list1)): \n            temp=abs(list1[i]+list1[j]-k)      \n            if temp<min1:\n                min1=min(min1,temp)\n    if min1!=0:        \n        cand1=k+min1\n        cand2=k-min1\n\n        s=list()\n        cnt=0\n        for i in list1:\n            t1=cand1-i\n            if t1 in s:\n                cnt+=s.count(t1)\n            t2=cand2-i\n            if t2 in s:\n                cnt+=s.count(t2)\n            s.append(i)    \n        print(min1,cnt)        \n    else:\n        cand=k+min1\n        s=list()\n        cnt=0\n        for i in list1:\n            t1=cand-i\n            if t1 in s:\n                cnt+=s.count(t1)\n            s.append(i)        \n        print(min1,cnt)        "
                }
            ]
        },
        "HHAL": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "1\nabbabaab",
                    "output": "2",
                    "explanation": "There're multiple ways to ruin Harrenhal in the example test. Let's consider one of them.\nThe first troop can delete S = 'ababa'('abbabaab'). After that, H = 'bab'.\nThe second troop can delete S = 'bab'('bab'). After that, H is empty and that's it."
                }
            ],
            "problem_statement": "Read problems statements in Mandarin Chinese  and Russian.\nHarrenhal is the largest castle in the Seven Kingdoms and is the seat of House Whent in the Riverlands, on the north shore of the Gods Eye lake. Since the War of Conquest, however, it has become a dark and ruinous place.\n(c) A Wiki of Ice and Fire\n\nNow Harrenhal is too dangerous since it's a nice place for bandits to hide, or even for rebels to start planning overthrowing of the king. So, the current Lord of the Seven Kingdoms has decided, that it's time to completely ruin the castle. For that puposes, he's planning to send some military troops.\nIn this problem we assume, that Harrenhal can be described as a string H, which consists only of symbols 'a' and 'b'. Harrenhal is completely ruined if and only if the length of H is equal to zero.\nSo, how to make H empty? Send a military troop! When a military troop of the king reach the castle, they delete some palindromic subsequence S of H. For example, let H = 'abbabaab'. Then the current military troop can choose S = 'ababa'(Let's make symbols of S bold in H: 'abbabaab'). After deleting S, H will be equal to 'bab'. Military troops are free to choose any possible palindromic subsequence of H.\nYour task is pretty simple: determine the minimal number of military troops, that the Lord of the Seven Kingdoms has to send in order to ruin Harrenhal.\nNote\n\nMaybe, some of you aren't familiar with definitions from the statement. Here're some articles that could help you to understand the problem correctly:\n\nSubsequence: http://en.wikipedia.org/wiki/Subsequence\nPalindrome: http://en.wikipedia.org/wiki/Palindrome\n\nInput\nThe first line of the input contains an integer T, denoting the number of test cases.\nThe next T lines contain a string H each, denoting the string, that describes the current state of Harrenhal for the corresponding test cases.\nIt's guaranteed, that each H consists only of symbols 'a' and 'b'.\nOutput\nThe output should contain exactly T lines. i'th line of the output should contain the only integer: the minimal number of military troops, that the Lord of the Seven Kingdoms has to send in order to ruin Harrenhal for the corresponding test cases.\nConstraints\n1 \u2264 |H| \u2264 100000, for each H.\nSubtask 1(30 points): each H in the input is a palindrome, 1 \u2264 T \u2264 6;\nSubtask 2(70 points): 1 \u2264 T \u2264 9.",
            "input_format": "",
            "output_format": "",
            "problem_name": "Harrenhal",
            "user_tags": [
                "String",
                "Observation"
            ],
            "computed_tags": [
                "Data Structures",
                "Algorithms"
            ],
            "problem_code_id": "HHAL",
            "difficulty_level": "1495",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 36199700,
                    "submission_date": 1596603375,
                    "language": "PYTH 3",
                    "username": "d_anuj",
                    "user_rating_star": 3,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.02",
                    "memory": "17.6M",
                    "solution": 36199700,
                    "code": "t=int(input())\nfor _ in range(t):\n    h=input()\n    if len(h)%2:\n        if h[:int(len(h)/2)]==h[int(len(h)/2)+1:][::-1]:\n            print(1)\n        else:\n            print(2)\n    else:\n        if h[:int(len(h)/2)]==h[int(len(h)/2):][::-1]:\n            print(1)\n        else:\n            print(2)"
                },
                {
                    "id": 34722470,
                    "submission_date": 1593148649,
                    "language": "PYTH 3",
                    "username": "manimala123",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.02",
                    "memory": "17.6M",
                    "solution": 34722470,
                    "code": "def isPalindrome(s):\n    return(s==s[::-1])\nt=int(input())\nfor i in range(t):\n    word=input()\n    if(isPalindrome(word)):\n        print(1)\n    else:\n        print(2)\n\n"
                }
            ]
        },
        "FLAGS": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "3\n1\n2\n3",
                    "output": "0\n4\n42",
                    "explanation": "There are four different well-painted flags for N = 2 different colors :"
                }
            ],
            "problem_statement": "Read problems statements in Mandarin Chinese and Russian as well.\n\nMike is a famous traveler. He visits about 100 countries a year and buys the flag of each country he has been to.\n\n\nMike knows, that there are some flags, that correspond to one pattern, but colored in different ways. E.g. the flag of Ireland(link) and the flag of Belgium(link). In this problem we consider only five 2,2cm\u27151,1cm patterns of flags:\n\n\n\n\nThere are N different colors available to paint the flags and the colors are denoted by integers from 1 to N.\nMike wants you to count the number of different well-painted flags. We call a flag well-painted if it's made according to the following algorithm:\n\n\nPick up one of the flag patterns considered above;\nPaint each one-colored polygon on the pattern in a color encoded by an integer from 1 to N. Different colors are encoded with different integers. If two different one-colored polygons share a common side(not corner), than they must be painted in different colors. In any other case they can be painted in both equal and different colors.\n\n\nTwo flags are different, if they look different(have at least one pixel painted with different color).\n\n\nHelp Mike!\n\nText version of the pictures: \nPicture 1\n\n112233\n112233\n112233\n\n\n111111\n222222\n333333\n\n\n112222\n112222\n113333\n\n\n122223\n111333\n144443\n\n\n111222\n333222\n333444\n\nPicture 2\n\n112211\n112211\n112211\n\n\n221122\n221122\n221122\n\n\n111111\n222222\n111111\n\n\n222222\n111111\n222222\n\nInput\nThe first line of the input contains integer T, denoting the number of testcases. The description of T testcases follows.\nThe only line of each test case contains integer N, denoting the number of different colors, that can be used while painting a flag pattern.\n\u00a0\nOutput\nFor each testcase, output a single line containing an integer - the answer for the corresponding query.\n\u00a0\nConstraints\n1 \u2264 T \u2264 10 000;\n1 \u2264 N \u2264 10 000 for each testcase.",
            "input_format": "",
            "output_format": "",
            "problem_name": "Counting Flags",
            "user_tags": [
                "ad-hoc"
            ],
            "computed_tags": [
                "Algorithms",
                "Constructive"
            ],
            "problem_code_id": "FLAGS",
            "difficulty_level": "1446",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 38095537,
                    "submission_date": 1600697183,
                    "language": "PYTH 3",
                    "username": "jpdotcom",
                    "user_rating_star": 5,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.08",
                    "memory": "17.6M",
                    "solution": 38095537,
                    "code": "import sys\nimport math\n\n\n    \n    \n   \n\n     \n\nfor _ in range(int(input())):\n    n=int(input())\n    print(n*(n-1)**2+n*(n-1)**2+n*(n-1)*(n-2)+n*(n-1)*(n-2)*(n-2)+n*(n-1)*(n-2)*(n-2))\n\n        "
                },
                {
                    "id": 34445594,
                    "submission_date": 1592231823,
                    "language": "PYTH 3",
                    "username": "vittal_161",
                    "user_rating_star": 3,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.07",
                    "memory": "17.6M",
                    "solution": 34445594,
                    "code": "test=int(input())\nfor _ in range(test):\n  n=int(input())\n  print(n*(n-1)*((n-1)*2+(n-2)+(n-2)*(n-2)*2))\n"
                }
            ]
        },
        "ONOZ": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "6\n24 60\n34 50\n10 11\n10 12\n11 11\n1 1",
                    "output": "19\n20\n10\n11\n10\n1",
                    "explanation": "Example case 1. A clock shows two identical digits at times 0:0, 1:1, .., 9:9, three identical digits at times 11:1, 22:2, 1:11, 2:22, 3:33, 4:44, 5:55, and four identical digits at times 11:11 and 22:22. So, there are 19 minutes during which the time displayed by the clock will have identical digits. \nExample case 2. Compared to the previous case, the clock doesn't show 5:55, but can show 33:3 and 33:33.\nExample case 6. In this example, our day consists of one hour and one hour consists of one minute. Hence, the entire day is just 1 minute - the only time the digital clock will display is 0:0 during the entire day, (i.e. the entire hour, i.e. entire minute). And 0:0 has all digits identical, so the answer is 1."
                }
            ],
            "problem_statement": "Read problems statements in Mandarin Chinese, Russian and Vietnamese as well.\n3:33\nIt's possible for all the digits displayed on a digital clock in the hours:minutes format to be identical. The time shown above (3:33) is an example of such a situation. Other examples are 2:2 and 1:11. Note that the digits of 33:33 are identical, but it is not a valid time on a usual digital clock.\nThe above example was for a usual 24-hour format digital clock. Let's consider a more general clock, where an hour lasts M minutes and a day lasts H hours (therefore, the clock can show any number of hours between 0 and H-1, inclusive, and any number of minutes between 0 and M-1, inclusive). Both the hours and the minutes are shown without leading zeroes in decimal notation and their separator (e.g., ':') doesn't matter.\nCan you tell how many minutes during a day will the digital clock have identical digits displayed on it?\nInput\n\nThe first line of the input contains an integer T - the number of test cases.\nEach of the next T lines contains two space-separated integers H and M for one test case.\n\nOutput\nFor each test case, output a single line corresponding to the answer of the problem.\nConstraints\n\n1 \u2264 T \u2264 50\n1 \u2264 H, M \u2264 100",
            "input_format": "",
            "output_format": "",
            "problem_name": "Digital clock",
            "user_tags": [
                "String",
                "Brute Force"
            ],
            "computed_tags": [
                "Data Structures",
                "Algorithms"
            ],
            "problem_code_id": "ONOZ",
            "difficulty_level": "1482",
            "ai_solutions": [
                "T = int(input())\nfor _ in range(T):\n    H, M = map(int, input().split())\n    count = 0\n    for h in range(H):\n        for m in range(M):\n            if len(set(str(h) + str(m))) == 1:\n                count += 1\n    print(count)",
                "T = int(input())\nfor _ in range(T):\n    H, M = map(int, input().split())\n    count = 0\n    for h in range(H):\n        for m in range(M):\n            if h < 10 and m < 10 and h == m:\n                count += 1\n            elif h >= 10 and m >= 10 and h // 10 == h % 10 == m // 10 == m % 10:\n                count += 1\n            elif h < 10 and m >= 10 and h == m // 10 == m % 10:\n                count += 1\n            elif h >= 10 and m < 10 and h // 10 == h % 10 == m:\n                count += 1\n    print(count)"
            ],
            "human_solutions": [
                {
                    "id": 37294092,
                    "submission_date": 1598762495,
                    "language": "PYTH 3",
                    "username": "drs195",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.17",
                    "memory": "17.6M",
                    "solution": 37294092,
                    "code": "t= int(input())\nfor _ in range(t):\n    h,m = map(int, input().split())\n    cnt=0\n    for i in range(h):\n        for j in range(m):\n            cnt+=1\n            s = str(i)+str(j)\n            for k in s:\n                if k!=s[0]:\n                    cnt-=1\n                    break\n    print(cnt)"
                },
                {
                    "id": 36042451,
                    "submission_date": 1595764171,
                    "language": "PYTH 3",
                    "username": "anixudh",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.06",
                    "memory": "17.6M",
                    "solution": 36042451,
                    "code": "def getCount(h,m,i) :\r\n    h=int(h)\r\n    m=int(m)\r\n    h1=0\r\n    lst=[11,22,33,44,55,66,77,88,99]\r\n    while(h1<h) :\r\n        for m1 in range(0,m) :\r\n            if h1<10 :\r\n                if(m1<10 and h1==m1) : count[i]+=1\r\n                if (m1 in lst and m1%10==h1) :  count[i]+=1\r\n            else :\r\n                if(m1 in lst and h1==m1) : count[i]+=1\r\n                if(h1 in lst and h1%10==m1) : count[i]+=1\r\n        h1+=1\r\nt=int(input())\r\ncount=[0]*t\r\nfor i in range(0,t) :\r\n    h,m=input().split()\r\n    getCount(h,m,i)\r\n\r\nfor i in count : print(i)\r\n"
                }
            ]
        },
        "KNIGHTMV": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "4\na1-b3\nd2-h8\na3 c4\nErrorError",
                    "output": "Yes\nNo\nError\nError",
                    "explanation": ""
                }
            ],
            "problem_statement": "Chef develops his own computer program for playing chess. He is at the very beginning. At first he needs to write the module that will receive moves written by the players and analyze it. The module will receive a string and it should report at first whether this string represents the correct pair of cells on the chess board (we call such strings correct) and then report whether it represents the correct move depending on the situation on the chess board. Chef always has troubles with analyzing knight moves. So at first he needs a test program that can say whether a given string is correct and then whether it represents a correct knight move (irregardless of the situation on the chess board). The cell on the chessboard is represented as a string of two characters: first character is a lowercase Latin letter from a to h and the second character is a digit from 1 to 8. The string represents the correct pair of cells on the chess board if it composed of 5 characters where first two characters represent the cell where chess figure was, 3rd character is the dash \"-\" and the last two characters represent the destination cell.\n\n\nInput\n The first line contains a single integer T , the number of test cases. T test cases follow. The only line of each test case contains a non-empty string composed the characters with ASCII-codes from 32 to 126. The length of the string is not greater than 10.\n\n\nOutput\n For each test case, output a single line containing the word \"Error\" if the corresponding string does not represent the correct pair of cells on the chess board. Otherwise output \"Yes\" if this pair of cells represents the correct knight move and \"No\" otherwise.",
            "input_format": "",
            "output_format": "",
            "problem_name": "Correctness of Knight Move",
            "user_tags": [
                "String",
                "Chess",
                "Implementation"
            ],
            "computed_tags": [
                "Data Structures",
                "Special",
                "Algorithms"
            ],
            "problem_code_id": "KNIGHTMV",
            "difficulty_level": "1482",
            "ai_solutions": [
                "def is_knight_move(move):\n    if len(move) != 5 or move[2] != '-':\n        return \"Error\"\n    start, end = move[:2], move[3:]\n    if not ('a' <= start[0] <= 'h' and '1' <= start[1] <= '8') or not ('a' <= end[0] <= 'h' and '1' <= end[1] <= '8'):\n        return \"Error\"\n    dx, dy = abs(ord(start[0]) - ord(end[0])), abs(int(start[1]) - int(end[1]))\n    return \"Yes\" if (dx, dy) in [(1, 2), (2, 1)] else \"No\"\n\nT = int(input().strip())\nfor _ in range(T):\n    move = input().strip()\n    print(is_knight_move(move))",
                "def is_knight_move(move):\n    if len(move) != 5 or move[2] != '-':\n        return \"Error\"\n    start, end = move.split('-')\n    if not ('a' <= start[0] <= 'h' and '1' <= start[1] <= '8') or not ('a' <= end[0] <= 'h' and '1' <= end[1] <= '8'):\n        return \"Error\"\n    dx, dy = abs(ord(start[0]) - ord(end[0])), abs(int(start[1]) - int(end[1]))\n    return \"Yes\" if (dx, dy) in [(1, 2), (2, 1)] else \"No\"\n\nT = int(input().strip())\nfor _ in range(T):\n    move = input().strip()\n    print(is_knight_move(move))"
            ],
            "human_solutions": [
                {
                    "id": 35894483,
                    "submission_date": 1595523900,
                    "language": "PYTH 3",
                    "username": "vikrant_1408",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.23",
                    "memory": "17.6M",
                    "solution": 35894483,
                    "code": "def solve():\r\n    s = input()\r\n    if len(s) != 5:\r\n        print(\"Error\")\r\n    else:\r\n        if (s[0] < 'a' or s[0] > 'h') or (s[1] < '1' or s[1] > '8') or (s[2] != '-') or (s[3] < 'a' or s[3] > 'h') or (\r\n                s[4] < '1' or s[4] > '8'):\r\n            print(\"Error\")\r\n        else:\r\n            c1 = ord(s[0])\r\n            c2 = ord(s[3])\r\n            d1 = int(s[1])\r\n            d2 = int(s[4])\r\n            if abs((c1 - c2) * (d1 - d2)) == 2:\r\n                print(\"Yes\")\r\n            else:\r\n                print(\"No\")\r\n                \r\n\r\nif __name__ == \"__main__\":\r\n    t = int(input())\r\n    while t != 0:\r\n        solve()\r\n        t -= 1\r\n"
                },
                {
                    "id": 33559255,
                    "submission_date": 1591065891,
                    "language": "PYTH 3",
                    "username": "smokeyhom",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.26",
                    "memory": "17.6M",
                    "solution": 33559255,
                    "code": "colConv = {'a':1,'b':2,'c':3,'d':4,'e':5,'f':6,'g':7,'h':8}\n\ncol = set(list('abcdefgh'))\nrow = set(list('12345678'))\nfor _ in range(int(input())):\n    m = input()\n    if len(m) != 5:\n        print (\"Error\")\n        continue\n    if (m[2] != '-') or (m[0] not in col) or (m[3] not in col) or (m[1] not in row) or (m[4] not in row):\n        print (\"Error\")\n        continue\n    x1, y1, x2, y2 = colConv[m[0]], int(m[1]), colConv[m[3]], int(m[4]) \n    if ((abs(x1-x2) == 2 and abs(y1-y2) == 1) or (abs(x1-x2) == 1 and abs(y1-y2) == 2)):\n        print (\"Yes\")\n    else:\n        print (\"No\")"
                }
            ]
        },
        "BOUQUET": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "1\n1 2 3\n3 2 1\n1 3 4",
                    "output": "7",
                    "explanation": "Example case 1. We can create a bouquet with 7 leaves, for example, by collecting all yellow leaves. This is not the only way to create the nice bouquet with 7 leaves (for example, Sergey can use all but one red leaves), but it is impossible to create a nice bouquet with more than 7 leaves."
                }
            ],
            "problem_statement": "Read problems statements in Mandarin Chinese, Russian and Vietnamese as well.\nIt's autumn now, the time of the leaf fall.\nSergey likes to collect fallen leaves in autumn. In his city, he can find fallen leaves of maple, oak and poplar. These leaves can be of three different colors: green, yellow or red.\nSergey has collected some leaves of each type and color. Now he wants to create the biggest nice bouquet from them. He considers the bouquet nice iff all the leaves in it are either from the same type of tree or of the same color (or both). Moreover, he doesn't want to create a bouquet with even number of leaves in it, since this kind of bouquets are considered to attract bad luck. However, if it's impossible to make any nice bouquet, he won't do anything, thus, obtaining a bouquet with zero leaves.\nPlease help Sergey to find the maximal number of leaves he can have in a nice bouquet, which satisfies all the above mentioned requirements.\nPlease note that Sergey doesn't have to use all the leaves of the same color or of the same type. For example, if he has 20 maple leaves, he can still create a bouquet of 19 leaves.\nInput\nIThe first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows.\"\nThe first line of each test case contains three space-separated integers MG MY MR denoting the number of green, yellow and red maple leaves respectively.\nThe second line contains three space-separated integers OG OY OR denoting the number of green, yellow and red oak leaves respectively.\nThe third line of each test case contains three space-separated integers PG PY PR denoting the number of green, yellow and red poplar leaves respectively.\nOutput\nFor each test case, output a single line containing the maximal amount of flowers in nice bouquet, satisfying all conditions or 0 if it's impossible to create any bouquet, satisfying the conditions.\nConstraints\n\n\n1 \u2264 T \u2264 10000\nSubtask 1 (50 points): 0 \u2264 MG, MY, MR, OG, OY, OR, PG, PY, PR \u2264 5\nSubtask 2 (50 points): 0 \u2264 MG, MY, MR, OG, OY, OR, PG, PY, PR \u2264 109",
            "input_format": "",
            "output_format": "",
            "problem_name": "The Largest Bouquet",
            "user_tags": [
                "Conditional Statements",
                "Inbuilt functions"
            ],
            "computed_tags": [
                "Basic Programming Concepts"
            ],
            "problem_code_id": "BOUQUET",
            "difficulty_level": "1423",
            "ai_solutions": [
                "def max_bouquet(T, test_cases):\n    for _ in range(T):\n        MG, MY, MR, OG, OY, OR, PG, PY, PR = test_cases[_]\n        green = MG + OG + PG\n        yellow = MY + OY + PY\n        red = MR + OR + PR\n        maple = MG + MY + MR\n        oak = OG + OY + OR\n        poplar = PG + PY + PR\n        total = [green, yellow, red, maple, oak, poplar]\n        total.sort()\n        ans = total[-1]\n        if ans % 2 == 0:\n            ans -= 1\n        print(ans)\n\nT = int(input())\ntest_cases = []\nfor _ in range(T):\n    MG, MY, MR = map(int, input().split())\n    OG, OY, OR = map(int, input().split())\n    PG, PY, PR = map(int, input().split())\n    test_cases.append((MG, MY, MR, OG, OY, OR, PG, PY, PR))\nmax_bouquet(T, test_cases)"
            ],
            "human_solutions": [
                {
                    "id": 57051642,
                    "submission_date": 1643096709,
                    "language": "PYTH 3",
                    "username": "viti_11",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.04",
                    "memory": "9.2M",
                    "solution": 57051642,
                    "code": "t=int(input())\nfor i in range(t):\n    l=list(map(int,input().split()))\n    m=list(map(int,input().split()))\n    n=list(map(int,input().split()))\n    a=[]\n    a.append(sum(l))\n    a.append(sum(m))\n    a.append(sum(n))\n    a.append(l[0]+m[0]+n[0])\n    a.append(l[1]+m[1]+n[1])\n    a.append(l[2]+m[2]+n[2])\n    c=max(a)\n    if c>0:\n        if c%2==0:\n            print(c-1)\n        else:    \n            print(c)    \n    else:\n        print(0)"
                },
                {
                    "id": 57046511,
                    "submission_date": 1643088647,
                    "language": "PYTH 3",
                    "username": "alwal_2024",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.03",
                    "memory": "9.4M",
                    "solution": 57046511,
                    "code": "def solve(m,o,p):\r\n    sum_m=sum(m)\r\n    sum_o=sum(o)\r\n    sum_p=sum(p)\r\n    maxi=0\r\n    for i in range(0,len(m)):\r\n        sum_=m[i]+o[i]+p[i]\r\n        if(sum_%2!=0 and sum_>maxi):\r\n            maxi=sum_\r\n        elif(sum_>maxi and sum_-1>maxi):\r\n            if(sum_%2==0):\r\n                maxi=sum_-1\r\n    if(sum_m%2==0):\r\n        sum_m-=1\r\n    if(sum_o%2==0):\r\n        sum_o-=1\r\n    if(sum_p%2==0):\r\n        sum_p-=1\r\n    return max(maxi,sum_m,sum_o,sum_p)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nn=int(input())\r\nresults=[]\r\nfor i in range(0,n):\r\n    M=list(map(int,input().split()))\r\n    O=list(map(int,input().split()))\r\n    P=list(map(int,input().split()))\r\n    out=solve(M,O,P)\r\n    results.append(out)\r\n\r\nfor i in results:\r\n    print(i)\r\n"
                }
            ]
        },
        "CAOS1": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "2\n5 5\n^^^^^\n^^^^^\n^^^^#\n^^^^^\n^^^^^\n5 7\n^^#^^^^\n^^#^#^#\n#^^^^^^\n^^#^^#^\n^^^^^^^",
                    "output": "0\n1",
                    "explanation": "Example case 1. There is no cell for which minimum of L, R, T, B is greater than some prime P.\nExample case 2. The cell at [3, 4], (1-based indexing) is the only CPC."
                }
            ],
            "problem_statement": "Problem Statement\nPast\nIn the year of 2048, the Virtual Reality Massively Multiplayer Online Role-Playing Game (VRMMORPG), Code Art Online (CAO), is released. With the Chef Gear, a virtual reality helmet that stimulates the user's five senses via their brain, players can experience and control their in-game characters with their minds.\nOn August the 2nd, 2048, all the players log in for the first time, and subsequently discover that they are unable to log out. They are then informed by Code Master, the creator of CAO, that if they wish to be free, they must reach the second stage of the game.\nKirito is a known star player of CAO. You have to help him log out.\nPresent\nStage 1\nA map is described by a 2D grid of cells. Each cell is either labelled as a # or a ^. # denotes a wall. A monster exists in a cell if the cell is not a wall and the cell is a centre of Prime-Cross (CPC).\n\nLet L be the number of contiguous ^ to the left of X, in the same row as X.\nR be the number of contiguous ^ to the right of X, in the same row as X.\nT be the number of contiguous ^ above X, in the same column as X.\nB be the number of contiguous ^ below X, in the same column as X.\n\n\nA cell X is said to be a CPC if there exists a prime number P such that P \u2264 minimum of [L, R, T, B].\nNote: While computing L, R, T, B for a cell X, you should not count the ^ of the cell X.\nGiven a map, you have to tell Kirito the number of cells where monsters exist.\nFuture\nIf you are done with this task, go help Kirito with Stage 2 :-)\nInput\nThe first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. Each case starts with a line containing two space separated integers R, C denoting the number of rows and columns in the map respectively. The next R lines contain C characters each, describing the map.\nOutput\nFor each test case, output a single line containing the number of cells where monsters exist.\nConstraints\n1 \u2264 T \u2264 100\n1 \u2264 R \u2264 50\n1 \u2264 C \u2264 50",
            "input_format": "",
            "output_format": "",
            "problem_name": "CAO Stage-1",
            "user_tags": [
                "ad-hoc"
            ],
            "computed_tags": [
                "Algorithms",
                "Constructive"
            ],
            "problem_code_id": "CAOS1",
            "difficulty_level": "1488",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 70282459,
                    "submission_date": 1659194614,
                    "language": "PYTH 3",
                    "username": "diegoz",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.25",
                    "memory": "9.3M",
                    "solution": 70282459,
                    "code": "def is_CPC(grid, j , k):\r\n    l = k-1\r\n    L = 0\r\n    while(l >= 0):\r\n        if grid[j][l] == '^':\r\n            L = L + 1\r\n        else:\r\n            break\r\n        l = l - 1\r\n    if L < 2:\r\n        return False\r\n    l = k+1\r\n    R = 0\r\n    while(l < n):\r\n        if grid[j][l] == '^':\r\n            R = R + 1\r\n        else:\r\n            break\r\n        l = l+1\r\n    if R < 2:\r\n        return False\r\n    l = j-1\r\n    T = 0\r\n    while(l >= 0):\r\n        if grid[l][k] == '^':\r\n            T = T+1\r\n        else:\r\n            break\r\n        l = l-1\r\n    if T < 2:\r\n        return False\r\n    l = j+1\r\n    B = 0\r\n    while(l < m):\r\n        if grid[l][k] == '^':\r\n            B = B + 1\r\n        else:\r\n            break\r\n        l = l+1\r\n    if B < 2:\r\n        return False\r\n    return True\r\n\r\n\r\nT = int(input())\r\nfor i in range(T):\r\n    m,n = input().split()\r\n    m = int(m)\r\n    n = int(n)\r\n    grid = []\r\n    for j in range(m):\r\n        row = str(input())\r\n        grid.append(row)\r\n    monsters = 0\r\n    for j in range(m):\r\n        for k in range(n):\r\n            if grid[j][k] == '^' and is_CPC(grid, j, k):\r\n                monsters = monsters + 1\r\n    print(monsters)"
                },
                {
                    "id": 67431634,
                    "submission_date": 1655968666,
                    "language": "PYTH 3",
                    "username": "likhitha207",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.10",
                    "memory": "9.3M",
                    "solution": 67431634,
                    "code": "\r\nfor _ in range(int(input())):\r\n   r,c = map(int,input().split())\r\n   mat = []\r\n   for _ in range(r):\r\n      st = input()\r\n      mat.append(st)\r\n   ans = 0 \r\n   for i in range(r):\r\n      for j in range(c):\r\n         if i>=2 and i<=r-3 and j>=2 and j<=c-3:\r\n            if mat[i][j]=='^' and mat[i-1][j]=='^' and mat[i-2][j]=='^' and mat[i+1][j]=='^' and mat[i+2][j]=='^' and mat[i][j-1]=='^' and mat[i][j-2]=='^' and mat[i][j+1]=='^' and mat[i][j+2]=='^':\r\n               ans+=1 \r\n   print(ans)"
                }
            ]
        },
        "HUNGALGO": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "5\n3\n0 0 4\n3 0 1\n0 1 0\n2\n0 5\n3 2\n2\n1 3\n5 0\n3\n0 3 4\n4 0 5\n6 5 0\n4\n3 0 2 4\n0 2 3 5\n3 4 3 0\n3 4 0 3",
                    "output": "YES\nNO\nNO\nYES\nYES",
                    "explanation": "Example case 1: Let's consider the matrix\n3 1 5\n7 2 3\n5 4 3\nand apply the first two steps of the Hungarian algorithm on it.\nIn the first step:\n- the smallest integer in row $1$ is $1$\n- the smallest integer in row $2$ is $2$\n- the smallest integer in row $3$ is $3$\nAfter subtracting, the matrix becomes\n2 0 4\n5 0 1\n2 1 0\nand the second step is performed on this matrix. In the second step:\n- the smallest integer in column $1$ is $2$\n- the smallest integer in column $2$ is $0$\n- the smallest integer in column $3$ is $0$\nAfter subtracting, the resulting matrix is\n0 0 4\n3 0 1\n0 1 0\nand this is the matrix given on the input, so the answer is YES.\nExample case 2: It is impossible to find a matrix such that after applying the first two steps of the Hungarian algorithm, it becomes the matrix given on the input, so the answer is NO."
                }
            ],
            "problem_statement": "Read problems statements in Hindi, Mandarin Chinese, Russian, Vietnamese and Bengali as well.\nChef is studying computer science. Tomorrow, he has an exam on algorithms and data structures. One of the algorithms he is required to study is the Hungarian algorithm (you do not have to know this algorithm to solve this problem).\nIn the Hungarian algorithm, you start with a matrix of positive integers with $N$ rows (numbered $1$ through $N$) and $N$ columns (numbered $1$ through $N$). The algorithm proceeds in steps.\nIn the first step, for each row of the matrix, you should find the smallest element in this row (let's denote it by $A$) and subtract $A$ from each element of the matrix in this row.\nIn the second step, for each column of the matrix, you should find the smallest element in this column (let's denote it by $A$) and subtract $A$ from each element in this column. The remaining steps of the algorithm are not relevant in this problem.\nCurrently, Chef is practicing implementation of the first two steps of the algorithm. He wants you to check if he is doing these two steps correctly or not. You are given a matrix with $N$ rows and $N$ columns; let's denote the element of this matrix in the $i$-th row and $j$-th column by $a_{i, j}$. Determine if this matrix can be the result of applying the first two steps of the Hungarian algorithm on some matrix.\nInput\n\nThe first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\nThe first line of each test case contains a single integer $N$.\n$N$ lines follow. For each $i$ ($1 \\le i \\le N$), the $i$-th of the following $N$ lines contains $N$ space-separated integers $a_{i, 1}, a_{i, 2}, \\ldots, a_{i, N}$.\n\nOutput\nFor each test case, print a single line containing the string \"YES\" (without quotes) if the given matrix can be a result of the first two steps or \"NO\" (without quotes) if it cannot.\nConstraints\n\n$1 \\le T \\le 10,000$\n$2 \\le N \\le 500$\n$0 \\le a_{i, j} \\le 10^3$ for each valid $i, j$\nthe sum of $N^2$ over all test cases does not exceed $2 \\cdot 10^6$",
            "input_format": "",
            "output_format": "",
            "problem_name": "Chef Learning Hungarian Algorithm",
            "user_tags": [
                "2D Arrays",
                "Observation"
            ],
            "computed_tags": [
                "Data Structures",
                "Arrays",
                "Algorithms"
            ],
            "problem_code_id": "HUNGALGO",
            "difficulty_level": "1439",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 33284510,
                    "submission_date": 1590329013,
                    "language": "PYTH 3",
                    "username": "shyguy99",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.22",
                    "memory": "20.2M",
                    "solution": 33284510,
                    "code": "for _ in range(int(input())):\r\n    n=int(input())\r\n    a=[]\r\n    for i in range(n):\r\n        a.append(list(map(int,input().split())))\r\n    for j in range(n):\r\n        k = 1\r\n        for qq in range(n):\r\n            if a[j][qq] == 0:\r\n                k = 0\r\n                break\r\n        if k==1:\r\n            print(\"NO\")\r\n            break\r\n    if k==0:\r\n         for l in range(n):\r\n             k=1\r\n             for q in range(n):\r\n                 if a[q][l]==0:\r\n                     k=0\r\n                     break\r\n             if k!=0:\r\n                 print(\"NO\")\r\n                 break\r\n    if k==0:\r\n        print(\"YES\")"
                },
                {
                    "id": 33124635,
                    "submission_date": 1589669704,
                    "language": "PYTH 3",
                    "username": "thedeep",
                    "user_rating_star": 3,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.20",
                    "memory": "17.6M",
                    "solution": 33124635,
                    "code": "\r\nfrom sys import stdin, stdout\r\nfrom collections import Counter\r\n\r\n\r\ndef solve():\r\n    for _ in range(int(input())):\r\n        n = int(input())\r\n        r = [False]*(n)\r\n        c = [False]*(n)\r\n        for i in range(n):\r\n            a = list(map(int, input().split()))\r\n            for j in range(n):\r\n                if a[j] == 0:\r\n                    r[i] = True\r\n                    c[j] = True\r\n\r\n        flag = True\r\n        for i in range(n):\r\n            if r[i] != True or c[i] != True:\r\n                flag = False\r\n                break\r\n\r\n        if flag:\r\n            print(\"YES\")\r\n        else:\r\n            print(\"NO\")\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    solve()\r\n"
                }
            ]
        },
        "CHEFFED": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "6",
                    "output": "1",
                    "explanation": "Example 1. Only one positive integer X = 2 satisfies the equation X + S(X) + S(S(X)) = 6, as X + S(X) + S(S(X)) = 2 + 2 + 2 = 6."
                },
                {
                    "input": "9939",
                    "output": "4",
                    "explanation": "Example 2.X can be 9898, 9907, 9910 and 9913. \n9898 + S(9898) + S(S(9898)) = 9898 + 34 + 7 = 9939\n9907 + S(9907) + S(S(9907)) = 9907 + 25 + 7 = 9939\n9910 + S(9910) + S(S(9910)) = 9910 + 19 + 10 = 9939\n9913 + S(9913) + S(S(9913)) = 9913 + 22 + 4 = 9939\nYou can verify that there is not other positive value of X satisfying the given equation."
                }
            ],
            "problem_statement": "Read problems statements in Mandarin Chinese, Russian and Vietnamese as well.\nChef likes problems related to numbers a lot. He is generally quite good at solving these kinds of problems, but today he got stuck at one number theory problem, and so he asks your help to solve it.\n\nGiven a positive integer N, find out how many positive integers X satisfy the equation X + S(X) + S(S(X)) = N, where S(X) denoting sum of digits of X in decimal (base 10) representation.\n\nInput\n\nThe only line of the input contains one integer number - N.\nOutput\nOutput single integer in a line denoting the count of number of positive integers X satisfying the above given equation.\nConstraints\n1 \u2264 N \u2264 109",
            "input_format": "",
            "output_format": "",
            "problem_name": "Chef and Numbers",
            "user_tags": [
                "Number Theory",
                "Basic Maths"
            ],
            "computed_tags": [
                "Mathematics"
            ],
            "problem_code_id": "CHEFFED",
            "difficulty_level": "1477",
            "ai_solutions": [
                "def sum_of_digits(n):\n    return sum(int(digit) for digit in str(n))\n\ndef solve(n):\n    count = 0\n    for x in range(max(1, n - 100), n):\n        if x + sum_of_digits(x) + sum_of_digits(sum_of_digits(x)) == n:\n            count += 1\n    return count\n\nn = int(input())\nprint(solve(n))",
                "def sum_of_digits(n):\n    sum = 0\n    while n:\n        sum += n % 10\n        n //= 10\n    return sum\n\ndef solve(n):\n    count = 0\n    for x in range(max(1, n - 100), n):\n        if x + sum_of_digits(x) + sum_of_digits(sum_of_digits(x)) == n:\n            count += 1\n    return count\n\nn = int(input())\nprint(solve(n))"
            ],
            "human_solutions": [
                {
                    "id": 35766542,
                    "submission_date": 1595137216,
                    "language": "PYTH 3",
                    "username": "kashyap653",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.02",
                    "memory": "17.6M",
                    "solution": 35766542,
                    "code": "def s(t):\n    a=0\n    for k in str(t):\n        a+=int(k)\n    return a\ndef ss(t):\n    a=0\n    for k in str(s(t)):\n        a+=int(k)\n    return a\n\nn=int(input())\nc=0\nfor i in range(n-9*len(str(n))-9*(len(str(9*len(str(n))))),n+9*len(str(n))+9*(len(str(9*len(str(n)))))+1):\n    if i+s(i)+ss(i)==n:\n        #print(i,'+',s(i),'+',ss(i))\n        c+=1\nprint(c)"
                },
                {
                    "id": 33550050,
                    "submission_date": 1591018605,
                    "language": "PYTH 3",
                    "username": "luna06",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.02",
                    "memory": "17.6M",
                    "solution": 33550050,
                    "code": "n=int(input())\ncount=0\ndef sumse(x):\n    sums=0\n    while x:\n        sums+=x%10\n        x=x//10\n    return sums\nfor i in range(max(0,n-1000),n+1):\n    res=i+sumse(i)+sumse(sumse(i))\n    if res==n:\n        count+=1\nprint(count)"
                }
            ]
        },
        "GERALD04": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "3\n10:00\n09:00\n10\n10:00\n09:00\n30\n10:00\n09:00\n60",
                    "output": "70.0 60.0\n90.0 60.0\n120.0 90.0",
                    "explanation": ""
                }
            ],
            "problem_statement": "Read problems statements in Mandarin Chinese here\n Read problems statements in Russian here\nProblem Statement\nOne day Chef is waiting his girlfriend on the bus station. The girlfriend said that she will be at time1. Chef went to the bus station at time2. When Chef has reached the bus station he realized that he forgot a gift for his better half in his home.\nChef knows that someone can reach his home in dist minutes (his girlfriend also needs dist minutes to get Chef's home after she arrived at the bus station). So, Chef came up with two plans for present the gift:\ni. The first one is to wait for his girlfriend at the bus station. And then go to the home together with her. When Chef and his girlfriend will reach the home he will present his gift. \nii. The second one is to call the girlfriend and ask her to go to his home when she will reach the bus station. And after calling he will go to the home, take the gift, and go towards the girlfriend. When they meet each other he will present his gift (they can meet at any position of the road or at the bus station). It's known that girlfriend and Chef uses the same road between bus station and Chef's home.\nPlease, help Chef to estimate the time in minutes for each of his plans. \nInput\nThe first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows.  Each test case contains of three lines. The first line contains time1, the second line contains time2, and the third line contains dist. \nOutput\nFor each test case output a single line containing two real numbers - the time for the first plan and the time for the second one. Print real numbers with exactly one decimal digit after the dot.\nConstraints\n1 \u2264 T \u2264 10000;\n1 \u2264 dist \u2264 180.\nTwo times are given in form HH:MM (usual time from 00:00 to 23:59), and these two times are from the same day. It's guaranteed that Chef will be at bus station strictly earlier that his girlfriend.",
            "input_format": "",
            "output_format": "",
            "problem_name": "Chef and Girlfriend",
            "user_tags": [
                "ad-hoc"
            ],
            "computed_tags": [
                "Algorithms",
                "Constructive"
            ],
            "problem_code_id": "GERALD04",
            "difficulty_level": "1421",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 32918197,
                    "submission_date": 1589027388,
                    "language": "PYTH 3",
                    "username": "amrtya",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.10",
                    "memory": "17.5M",
                    "solution": 32918197,
                    "code": "t = int(input())\n\nwhile t!=0:\n    s1 = input()\n    s2 = input()\n    \n    s = s1.split(':')\n    t1 = (int(s[0])*60)+int(s[1])\n    s = s2.split(':')\n    t2 = (int(s[0])*60)+int(s[1])\n    \n    t3 = int(input())\n    \n    if(t1-t2>=2*t3):\n        ans2 = t1-t2\n    else:\n        ans2 = (t1-t2)+(2*t3+t2-t1)/2\n    \n    ans1 = t1-t2+t3;\n    \n    print('%0.1f %0.1f' %(ans1, ans2))\n    t-=1"
                },
                {
                    "id": 30016710,
                    "submission_date": 1583207385,
                    "language": "PYTH 3",
                    "username": "k_sang",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.10",
                    "memory": "17.6M",
                    "solution": 30016710,
                    "code": "def gerald04(time1, time2, dist):\n\twait = (int(time1[3:])-int(time2[3:])) + (int(time1[:2])-int(time2[:2]))*60\n\tfirst = wait + dist\n\tif dist <= wait - dist:\n\t\tsecond = wait\n\telse:\n\t\tsecond = dist + wait / 2\n\treturn float(first), float(second)\n\t\nt = int(input())\nfor _ in range(t):\n    time1 = input()\n    time2 = input()\n    dist = int(input())\n    a, b = gerald04(time1, time2, dist)\n    print(a, b)"
                }
            ]
        },
        "CHRECT": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "3\n2 2 1\n3 3 2\n1 5 12",
                    "output": "1\n1\n12",
                    "explanation": "Test Case 1: Chef may choose any way. The maximum value on any cell would be 1.\nTest Case 2: If Chef selects two paths that have a common cell, such as\n\n\n(1,1)->(1,2)->(2,2)->(3,2)->(3,3)\n(1,1)->(2,1)->(2,2)->(3,2)->(3,3)\n\nThen the value of S will be equal to 2, since the number of stones in (2,2) and (3,2) is equal to 2. But, if Chef selects two paths which do not have any common cells, such as\n\n(1,1)->(1,2)->(1,3)->(2,3)->(3,3)\n(1,1)->(2,1)->(3,1)->(3,2)->(3,3)\n\nThen the value of S will be equal to 1."
                }
            ],
            "problem_statement": "Chef likes rectangles. Among all possible rectangles, he loves rectangles that can be drawn like a grid, such that they have N rows and M columns. Grids are common in Byteland. Hence, Chef has drawn such a rectangle and plans on moving around in it.\nThe rows of the rectangle are labeled from 1 to N from top to bottom. The columns of the rectangle are labeled form 1 to M from left to right. Thus, the cell in the top left can be denoted by (1,1). The 5th cell from the left in the 4th row form the top can be denoted by (4,5). The bottom right cell can be denoted as (N,M).\nChef wants to move from the cell in the top left to the cell in the bottom right. In each move, Chef may only move one cell right, or one cell down. Also, Chef is not allowed to move to any cell outside the boundary of the rectangle.\nOf course, there are many ways for Chef to move from (1,1) to (N,M). Chef has a curious sport. While going from (1,1) to (N,M), he drops a stone on each of the cells he steps on, except the cells (1,1) and\n(N,M). Also, Chef repeats this game exactly K times.\nLet us say he moved from (1,1) to (N,M), exactly K times. At the end of all the K journeys, let the number of stones, in the cell with the maximum number of stones, be equal to S. Chef wants to know what is the smallest possible value for S.\nInput\nThe first line contains single integer T, the number of test cases. Each of the next T lines contains 3 integers N, M and K, respectivily.\nOutput\nFor each test case, output the smallest value possible for S, if the Chef chooses the K paths smartly.\nConstraints\n1 \u2264 T \u2264 1001 \u2264 N, M, K \u2264 70",
            "input_format": "",
            "output_format": "",
            "problem_name": "Chef and Walking on the rectangle ",
            "user_tags": [
                "2D Arrays",
                "Case work",
                "ad-hoc"
            ],
            "computed_tags": [
                "Data Structures",
                "Arrays",
                "Special",
                "Algorithms",
                "Constructive"
            ],
            "problem_code_id": "CHRECT",
            "difficulty_level": "1435",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 61736827,
                    "submission_date": 1648736205,
                    "language": "PYTH 3",
                    "username": "phantom0_6",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.03",
                    "memory": "9.3M",
                    "solution": 61736827,
                    "code": "from math import *\nfor _ in range(int(input())):\n   n,m,k = map(int,input().split())\n   if n+m<=3:\n      print(0)\n   elif n==1 or m==1:\n      print(k)\n   else:\n      print(ceil(k/2))\n\n   "
                },
                {
                    "id": 60191431,
                    "submission_date": 1647020993,
                    "language": "PYTH 3",
                    "username": "harshita_8888",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.02",
                    "memory": "9.1M",
                    "solution": 60191431,
                    "code": "from math import ceil\nt = int(input())\n\nfor i in range(t):\n    n, m, k = map(int, input().split())\n    if n == 1 or m == 1:\n      if n <= 2 and m <= 2:\n          print(0)\n      else:\n          print(k)\n    elif n > 1 and m > 1:\n        if k <= 2:\n          print(1)\n        else:\n          print(ceil(k / 2)) "
                }
            ]
        },
        "TWEED": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "1\n2 Dee\n2 2",
                    "output": "Dum",
                    "explanation": "Tweedle-Dee takes two stones from any of the heaps leaving just one non empty heap, next Tweedle-Dum takes one stone and the game finishes."
                }
            ],
            "problem_statement": "Read problems statements in Mandarin Chinese, Russian and Vietnamese as well.\nTweedle-Dee and Tweedle-Dum are in a fierce battle playing even-odd nim. This novel game is played on N heaps. Heap i contains ai stones.\n\nLike normal nim, Tweedle-Dee and Tweedle-Dum alternate taking a positive number of stones from any single one of the heaps, and the player that can't remove stones loses. However Tweedle-Dee can only take an even number of stones, and Tweedle-Dum can only take an odd number of stones.\nAlice doesn't want to wait until the end of the game, so she asks you to determine the winner of the game. Remember that Tweedle-Dee and Tweedle-Dum are legendary grandmasters of combinatorial games, so they always play optimally.\nInput\nThe first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows.\nThe first line of each case consists of an integer N the number of heaps, and a string P the player that starts the game. String P is equal to \"Dee\" if Tweedle-Dee goes first, or \"Dum\" if  Tweedle-Dum goes first.\nThe second line of each case contains N space separated integers ai the number of stones of the i-th heap.\nOutput\nFor each test case, output a single line containing either \"Dee\" if Twedle-Dee winns the game or \"Dum\" otherwise.\nConstraints\n1 \u2264 T \u2264 50\n1 \u2264 N \u2264 50\n1 \u2264 ai \u2264 50",
            "input_format": "",
            "output_format": "",
            "problem_name": "Tweedle-Dee and Tweedle-Dum ",
            "user_tags": [
                "Game Theory",
                "Observation"
            ],
            "computed_tags": [
                "Algorithms"
            ],
            "problem_code_id": "TWEED",
            "difficulty_level": "1484",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 39953922,
                    "submission_date": 1606962804,
                    "language": "PYTH 3",
                    "username": "vagdevi_16",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.02",
                    "memory": "17.5M",
                    "solution": 39953922,
                    "code": "t=int(input())\r\nfor i in range(t):\r\n    n,c=input().split()\r\n    a=list(map(int,input().split()))\r\n    n=int(n)\r\n    if n==1 and a[0]%2==0 and c=='Dee':\r\n        print(\"Dee\")\r\n    else:\r\n        print(\"Dum\")"
                },
                {
                    "id": 39819979,
                    "submission_date": 1606320408,
                    "language": "PYTH 3",
                    "username": "faiz_2k20",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.02",
                    "memory": "17.5M",
                    "solution": 39819979,
                    "code": "for i in range(int(input())):\r\n    N,name = input().split()\r\n    N = int(N)\r\n    list1 = list(map(int,input().split()))\r\n    if (N==1 and name == \"Dee\" and list1[0]%2 == 0):\r\n        print(\"Dee\")\r\n    else:\r\n        print(\"Dum\")\r\n"
                }
            ]
        },
        "ICM2008": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "2\n3 4 1 2\n10 20 3 7",
                    "output": "YES\nNO",
                    "explanation": "In the first test case, Mr. Pr will move 2 units in the first second and Ms. Ad moves 1 unit simultaneously and they meet. \nIn the second test case, it is impossible to meet (fractional time is not allowed)."
                }
            ],
            "problem_statement": "Mr. Pr and Ms. Ad are at $a$ and $b$ respectively on an infinite number line. Mr. Pr wants to meet Ms. Ad.\nMr. Pr can choose to move  $c$ or $d$ units in 1 second. If Mr. Pr moves $c$ units then Ms. Ad will move $d$ units and vice versa. (Both of them always moved in positive x-direction)\nYou have to determine if Mr. Pr can meet with Ms. Ad after some integral amount of time, given that Mr. Pr chooses optimally. Note that meeting after a fractional amount of time does not count.\nInput:\n\nFirst line will contain $T$, number of testcases. Then the testcases follow. \nEach testcase contains four space separated integers, $a$, $b$, $c$, and $d$.\n\nOutput:\n\nFor each test case, output a single line containing \"YES\" if Mr. Pr meets with Ms. Ad, otherwise \"NO\".\n\nConstraints\n\n$1 \\leq T \\leq 10^5$\n$1 \\leq a,b,c,d \\leq 10^9$",
            "input_format": "",
            "output_format": "",
            "problem_name": "Mr Pr in a Dilemma ",
            "user_tags": [
                "Observation"
            ],
            "computed_tags": [
                "Algorithms"
            ],
            "problem_code_id": "ICM2008",
            "difficulty_level": "1441",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 1023744616,
                    "submission_date": 1696169433,
                    "language": "PYTH 3",
                    "username": "riddhiman2005",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.03",
                    "memory": "9.7M",
                    "solution": 1023744616,
                    "code": "for _ in range(int(input())):\r\n    a,b,c,d=[int(x) for x in input().split()]\r\n    if a==b:\r\n        print(\"YES\")\r\n    elif c==d:\r\n        print(\"NO\")\r\n    elif abs(a-b)%abs(c-d)==0:\r\n        print(\"YES\")\r\n    else:\r\n        print(\"NO\")"
                },
                {
                    "id": 1018016647,
                    "submission_date": 1693727233,
                    "language": "PYTH 3",
                    "username": "ajinkyalatkar",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.01",
                    "memory": "7.5M",
                    "solution": 1018016647,
                    "code": "t=int(input())\r\nfor i in range(t):\r\n    a,b,c,d=map(int,input().split())\r\n    if a==b:\r\n        print(\"YES\")\r\n    elif a!=b and c==d:\r\n        print(\"NO\")\r\n    else:\r\n        if abs(a-b)%abs(c-d)==0:\r\n            print(\"YES\")\r\n        else:\r\n            print(\"NO\")"
                }
            ]
        },
        "DIRECTI": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "2\n4\nBegin on Road A\nRight on Road B\nRight on Road C\nLeft on Road D\n6\nBegin on Old Madras Road\nLeft on Domlur Flyover\nLeft on 100 Feet Road\nRight on Sarjapur Road\nRight on Hosur Road\nRight on Ganapathi Temple Road",
                    "output": "Begin on Road D\nRight on Road C\nLeft on Road B\nLeft on Road A\n\nBegin on Ganapathi Temple Road\nLeft on Hosur Road\nLeft on Sarjapur Road\nLeft on 100 Feet Road\nRight on Domlur Flyover\nRight on Old Madras Road",
                    "explanation": "In the first test case, the destination lies on Road D, hence the reversed route begins on Road D. The final turn in the original route is turning left from Road C onto Road D. The reverse of this, turning right from Road D onto Road C, is the first turn in the reversed route."
                }
            ],
            "problem_statement": "Chef recently printed directions from his home to a hot new restaurant across the town, but forgot to print the directions to get back home. Help Chef to transform the directions to get home from the restaurant.\nA set of directions consists of several instructions. The first instruction is of the form \"Begin on XXX\", indicating the street that the route begins on. Each subsequent instruction is of the form \"Left on XXX\" or \"Right on XXX\", indicating a turn onto the specified road.\nWhen reversing directions, all left turns become right turns and vice versa, and the order of roads and turns is reversed. See the sample input for examples.\nInput\nInput will begin with an integer T, the number of test cases that follow. Each test case begins with an integer N, the number of instructions in the route. N lines follow, each with exactly one instruction in the format described above.\nOutput\nFor each test case, print the directions of the reversed route, one instruction per line. Print a blank line after each test case.\nConstraints\n1 \u2264 T \u2264 15\n2 \u2264 N \u2264 40\nEach line in the input will contain at most 50 characters, will contain only alphanumeric characters and spaces and will not contain consecutive spaces nor trailing spaces. By alphanumeric characters we mean digits and letters of the English alphabet (lowercase and uppercase).",
            "input_format": "",
            "output_format": "",
            "problem_name": "Reversing directions",
            "user_tags": [
                "String",
                "Implementation"
            ],
            "computed_tags": [
                "Data Structures",
                "Algorithms"
            ],
            "problem_code_id": "DIRECTI",
            "difficulty_level": "1426",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 39170930,
                    "submission_date": 1603898794,
                    "language": "PYTH 3",
                    "username": "codechef_1998",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.01",
                    "memory": "17.5M",
                    "solution": 39170930,
                    "code": "for _ in range(int(input())):\n    N=int(input())\n    direc=[]\n    for _ in range(N):\n        direc.append(input().split())\n    the_reverse=[]\n    for i in range(N):\n        the_reverse.append(direc[N-i-1])\n    invert=[]\n    for i in range(N-1):\n        this_seq=the_reverse[i]\n        prev_key=this_seq[0]\n        if prev_key=='Left':\n            invert.append('Right')\n        else:\n            invert.append('Left')\n    for i in range(1,N):\n        the_reverse[i][0]=invert[i-1]\n    the_reverse[0][0]='Begin'\n    for row in the_reverse:\n        print(' '.join(row))"
                },
                {
                    "id": 38135876,
                    "submission_date": 1600876007,
                    "language": "PYTH 3",
                    "username": "abhishai_31256",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.02",
                    "memory": "17.6M",
                    "solution": 38135876,
                    "code": "t=int(input())\nfor i in range(t):\n    n=int(input())\n    list1=[]\n    list2=[]\n    list3=[]\n    list4=[]\n    list5=[]\n    list6=[]\n    \n    dict1={}\n    dict1={\"Right\":\"Left\",\"Left\":\"Right\"}\n    for i in range(n):\n        a=[]\n        a=list(input().split())\n        list7=[]\n        str1=\"\"\n        str2=\"\"\n        str3=\" \"\n        str1+=a[0]\n        list7=a[2:]\n        str2=str3.join(list7)\n        \n        list1.append(str1)\n        list2.append(str2)\n    list3=list1[1:]\n    list4=list2[:len(list2)-1]\n    list5=list3[::-1]\n    list6=list4[::-1]\n    print(\"Begin on\",end=\" \")\n    print(list2[-1])\n    for i in range(n-1):\n        print(dict1[list5[i]],end=\" \")\n        print(\"on\",end=\" \")\n        print(list6[i])\n        \n        \n    \n"
                }
            ]
        },
        "CO92SUBW": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "4\n1\n2\n3\n9",
                    "output": "1\n2\n2\n5",
                    "explanation": "Example case 4: Chef will walk from x = 0 to x = 1 in one minute, then he will enter the subway and move from station 1 (at x = 1) to station 2 (at x = 3) in one minute, then from station 2 to station 3 (at x = 6) in one minute, from station 3 to station 4 (at x = 10) in one minute, and finally, he will walk from x = 10 to x = 9 in one minute, which makes the total travel time 5 minutes."
                }
            ],
            "problem_statement": "Read problems statements in Mandarin chinese, Russian and Vietnamese as well.\nChef lives in Chefcity. Chefcity can be represented as a straight line with Chef's house at point 0 on this line. There is an infinite number of subway stations in Chefcity, numbered by positive integers. The first station is located at point 1 and for each i \u2265 1, the distance between stations i and i+1 is equal to i+1. (Station i+1 is always located at a higher coordinate than station i, i.e., the subway stations are located at points 1, 3, 6, 10, 15 etc.)\nSubway trains in Chefcity allow Chef to move between any pair of adjacent stations in one minute, regardless of the distance between them. Chef can also move by walking; his walking speed is one unit of distance in one minute. Chef can enter or exit the subway at any station.\nChef has decided to go to the cinema. The only cinema in Chefcity is located at point X. (Note that the cinema can be placed at the same point as a subway station.) Help Chef determine the minimum possible time required to get to the cinema from his house.\nInput\n\nThe first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows.\nThe first and only line of each test case contains a single integer X.\n\nOutput\nFor each test case, print a single line containing one integer - the minimum possible travel time.\nConstraints\n\n1 \u2264 T \u2264 200\n1 \u2264 X \u2264 109",
            "input_format": "",
            "output_format": "",
            "problem_name": "Chef Goes to the Cinema",
            "user_tags": [
                "Basic Maths",
                "ad-hoc"
            ],
            "computed_tags": [
                "Mathematics",
                "Algorithms",
                "Constructive"
            ],
            "problem_code_id": "CO92SUBW",
            "difficulty_level": "1493",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 33555503,
                    "submission_date": 1591032266,
                    "language": "PYTH 3",
                    "username": "udesh620",
                    "user_rating_star": 3,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "1.17",
                    "memory": "17.8M",
                    "solution": 33555503,
                    "code": "for _ in range(int(input())):\r\n\tX=int(input())\r\n\tl=[0,1]\r\n\twhile True:\r\n\t\tp=len(l)+l[-1]\r\n\t\tl.append(p)\r\n\t\tif p>X:\r\n\t\t\tbreak\r\n\tt1=len(l)-1+l[-1]-X\r\n\tt2=len(l)-2+X-l[-2]\r\n\tprint(min(t1,t2))\r\n\t\t\r\n\t\t"
                },
                {
                    "id": 32449317,
                    "submission_date": 1588252002,
                    "language": "PYTH 3",
                    "username": "aman_ravan02",
                    "user_rating_star": 3,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.02",
                    "memory": "17.6M",
                    "solution": 32449317,
                    "code": "from bisect import bisect_left\r\nx=[0]*50000\r\nfor i in range(50000):\r\n    x[i] = x[i - 1] + (i + 1)\r\nfor j in range(int(input())):\r\n    n=int(input())\r\n    if(n==1):\r\n        print(1)\r\n    else:\r\n        index=bisect_left(x,n)\r\n        a=index\r\n        b=index-1\r\n        c=b+abs(x[b]-n)+1\r\n        d=a+abs(x[a]-n)+1\r\n        print(min(c,d))\r\n\r\n\r\n\r\n\r\n\r\n"
                }
            ]
        },
        "MAANDI": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10",
                    "output": "0\n0\n0\n1\n0\n0\n1\n1\n0\n0",
                    "explanation": ""
                }
            ],
            "problem_statement": "Read problems statements in Mandarin Chinese here\nProblem Statement\n\nMaxim likes dividers of the numbers. Also Maxim is fond of \nlucky numbers of small elephant from Lviv city.\n\u00a0\nIf you remember, lucky numbers are positive integers whose decimal representation contains only the lucky digits 4 and 7. For example, numbers 47, 744, 4 are lucky, 5, 17, 467 \u2014 aren't.\n\u00a0\nNow Maxim is interested in the next information: what is the number of the integer positive dividers of number n, which are overlucky.\n\u00a0\nWe call number overlucky if it is possible to remove some, but not all, digits and during bonding the remaining digits we will receive a lucky number. For example, number 72344 \u2014 overlucky, because it is possible to remove digits 2 and 3, and get number 744, which is lucky. Number 223 isn't overlucky.\u00a0\nInput\nThe first line of the input contains an integer \nT denoting the number of test cases. The description of T test cases follows. Single line of each test case contains an integer n.\n\u00a0\nOutput\nFor each test case on different lines print the answer to the problem.\nConstraints\n1 \u2264 T \u2264 10\n1\u2009\u2264\u2009n\u2009\u2264\u200910^9",
            "input_format": "",
            "output_format": "",
            "problem_name": "Maxim and Dividers",
            "user_tags": [
                "divisors",
                "number-theory",
                "oct13",
                "sereja_adm",
                "simple"
            ],
            "computed_tags": [],
            "problem_code_id": "MAANDI",
            "difficulty_level": "1466",
            "ai_solutions": [
                "import math\ndef overlucky(n):\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            if '4' in str(i) or '7' in str(i):\n                count += 1\n            if n//i != i:\n                if '4' in str(n//i) or '7' in str(n//i):\n                    count += 1\n    return count\n\nT = int(input())\nfor _ in range(T):\n    n = int(input())\n    print(overlucky(n))",
                "import math\ndef overlucky(n):\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            if any(x in str(i) for x in '47'):\n                count += 1\n            if n//i != i:\n                if any(x in str(n//i) for x in '47'):\n                    count += 1\n    return count\n\nT = int(input())\nfor _ in range(T):\n    n = int(input())\n    print(overlucky(n))"
            ],
            "human_solutions": [
                {
                    "id": 30702665,
                    "submission_date": 1585033908,
                    "language": "PYTH 3",
                    "username": "smit_r",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.03",
                    "memory": "17.6M",
                    "solution": 30702665,
                    "code": "from math import sqrt\n\ndef div(n):\n    count = 0\n    for i in range(1,int(sqrt(n))+1):\n        if n%i==0:\n            j = n/i\n            if '4' in str(i) or '7' in str(i):\n                count += 1\n            if '4' in str(j) or '7' in str(j):\n                count += 1-(j==i)\n    return count\n\nt = int(input())\nwhile t:\n    n = int(input())\n    print(div(n))\n    t -= 1\n    \n"
                },
                {
                    "id": 28438779,
                    "submission_date": 1577011095,
                    "language": "PYTH 3",
                    "username": "ayushm17",
                    "user_rating_star": 3,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.03",
                    "memory": "17.6M",
                    "solution": 28438779,
                    "code": "def divisors(n):\n    r = []\n    a = int(n**(0.5)+1)\n    for i in range(1,a):\n        if n%i==0:\n            r.append(i)\n            if n//i!=i:\n                r.append(n//i)\n    return r\ndef lucky(n):\n    for i in n:\n        if i!='4' or i!='7':\n            return False\n    return True\ndef overlucky(n):\n    s = ''\n    for i in n:\n        if i=='4' or i=='7':\n            s+=i\n    if s=='':\n        return False\n    else:\n        return True\nT = int(input())\nfor i in range(T):\n    N = int(input())\n    count=0\n    for i in divisors(N):\n        if lucky(str(i)):\n            count+=1\n        else:\n            if overlucky(str(i)):\n                count+=1\n    print(count)            \n    "
                }
            ]
        },
        "EQUALITY": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "2\n3\n9 6 5\n4\n13 11 10 8",
                    "output": "1 4 5 \n1 3 4 6",
                    "explanation": "In the first test case, we can simply replace the variables with the values from the correct output to make sure, that all the conditions are satisfied: \n    \nx2 + x3 = 4 + 5 = 9 = a1\nx1 + x3 = 1 + 5 = 6 = a2\nx1 + x2 = 1 + 4 = 5 = a3\n\n\n    In the second test case, we can repeat the same process to make sure, that all the conditions are satisfied: \n    \nx2 + x3 + x4 = 3 + 4 + 6 = 13 = a1\nx1 + x3 + x4 = 1 + 4 + 6 = 11 = a2\nx1 + x2 + x4 = 1 + 3 + 6 = 10 = a3\nx1 + x2 + x3 = 1 + 3 + 4 = 8 = a4"
                }
            ],
            "problem_statement": "Read problems statements in Mandarin Chinese and Russian as well.\n\nAn equation is an equality containing one or more variables. Solving the equation consists of determining which values of the variables make the equality true. In this situation, variables are also known as unknowns and the values which satisfy the equality are known as solutions. An equation differs from an identity in that an equation is not necessarily true for all possible values of the variable.\nThere are many types of equations, and they are found in all areas of mathematics. For instance, a linear equation is an algebraic equation in which each term is either a constant or the product of a constant and (the first power of) a single variable.\nIn this problem we'll consider quite a special kind of systems of linear equations. To be more specific, you are given a system of N linear equations of the following form:\n\nx2 + x3 + ... + xN - 1 + xN = a1\nx1 + x3 + ... + xN - 1 + xN = a2\n...\nx1 + x2 + ... + xN - 2 + xN = aN - 1\nx1 + x2 + ... + xN - 2 + xN - 1 = aN\n\nIn other words, i'th equation of the system consists of the sum of all the variable x1, ..., xN except xi to the left of the equality sign and the constant ai to the right of the equality sign.\nOne can easily prove, that a system of linear equations as described above always have exactly one solution in case N is greater than one. Your task is to find the solution of the system(such a sequence x1, x2, ..., xN, that turns each of the equations into equality). It's guaranteed, that the solution of the system is a sequence consisting only of integers from the range [1, 108].\nInput\nThe first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows.\nThe first line of the test case description contains one integer N denoting the number of equations in the system.\nThe second line contains N integers a1, a2, ..., aN denoting the constants defining a system of linear equations, that you are asked to solve.\nOutput\nFor each test case, output a single line containing N integers: a sequence x1, x2, ..., xN, which is the solution of the system.\nConstraints\n1 \u2264 T \u2264 25000\n2 \u2264 N \u2264 50000\n1 \u2264 ai \u2264 5 \u00d7 1012\n1 \u2264 xi \u2264 108\nThe sum of all N in the input is not greater than 50000",
            "input_format": "",
            "output_format": "",
            "problem_name": "Equality",
            "user_tags": [
                "Basic Maths"
            ],
            "computed_tags": [
                "Mathematics"
            ],
            "problem_code_id": "EQUALITY",
            "difficulty_level": "1419",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 30877999,
                    "submission_date": 1585538940,
                    "language": "PYTH 3",
                    "username": "raviteja_20",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.18",
                    "memory": "18.8M",
                    "solution": 30877999,
                    "code": "def main():\n    t = int(input())\n    for __ in range(t):\n        n = int(input())\n        a = list(map(int,input().split()))\n        s = sum(a)//(n-1)\n        print(*[abs(x-s) for x in a])\nif __name__ == '__main__':\n    main()\n"
                },
                {
                    "id": 28427749,
                    "submission_date": 1576914104,
                    "language": "PYTH 3",
                    "username": "siramk",
                    "user_rating_star": 4,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.24",
                    "memory": "18.8M",
                    "solution": 28427749,
                    "code": "t=int(input())\nfor loop in range(t):\n    n=int(input())\n    nums=list(map(int,(input()).split()))\n    s=0\n    for num in nums:\n        s+=num\n    \n    for i in range(n):\n        x=(s//(n-1))-nums[i]\n        print(x,end=\" \")\n    print(\"\")"
                }
            ]
        },
        "TRICKYDL": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "4\n5\n8\n9\n1000000000",
                    "output": "4 3\n5 3\n5 4\n35 30",
                    "explanation": ""
                }
            ],
            "problem_statement": "Read problems statements Mandarin , Bengali , Hindi , Russian and Vietnamese as well.\nOne of Chef's friends offered him a deal: during $D$ days, they are going to exchange money. For each $i$ ($1 \\le i \\le D$), on the $i$-th day, Chef's friend would give Chef $A$ rupees, while Chef would give his friend $2^{i-1}$ rupees ($1$ rupee on day $1$, $2$ rupees on day $2$, $4$ rupees on day $3$, and so on). Chef's profit from the deal is the total number of rupees he received from his friend minus the total number of rupees he gave his friend.\nChef decided to ask for your advice before accepting the deal. You want to help him by telling him two numbers $D_1$ and $D_2$, where $D_1$ is the maximum value of $D$ such that Chef should accept the deal, i.e. his profit from the deal is positive if $D = D_1$, and $D_2$ is the value of $D$ that leads to the maximum possible profit for Chef. If there are multiple values of $D$ that lead to the maximum profit, $D_2$ is the smallest of these values.\nInput\n\nThe first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\nThe first and only line of each test case contains a single integer $A$.\n\nOutput\nFor each test case, print a single line containing two space-separated integers $D_1$ and $D_2$.\nConstraints\n\n$1 \\le T \\le 100,000$\n$5 \\le A \\le 10^9$\n\nSubtasks\nSubtask #1 (100 points): original constraints",
            "input_format": "",
            "output_format": "",
            "problem_name": "The Tricky Deal",
            "user_tags": [
                "Basic Maths",
                "Implementation"
            ],
            "computed_tags": [
                "Mathematics",
                "Algorithms"
            ],
            "problem_code_id": "TRICKYDL",
            "difficulty_level": "1431",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 37240137,
                    "submission_date": 1598712691,
                    "language": "PYTH 3",
                    "username": "drs195",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "2.89",
                    "memory": "17.6M",
                    "solution": 37240137,
                    "code": "t = int(input())\nfor _ in range(t):\n    a = int(input())\n    d1=0\n    profit=0\n    i=0\n    while a-2**i>0:\n        profit+=a-2**i\n        i+=1\n        d1+=1\n        \n    d2=d1\n    \n    while profit>0:\n        profit+=a-2**i\n        i+=1\n        d2+=1\n# one extra day gets counted after profit becomes negative\n    print(d2-1,d1)"
                },
                {
                    "id": 35890824,
                    "submission_date": 1595510587,
                    "language": "PYTH 3",
                    "username": "gupta_naman",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "1.89",
                    "memory": "17.5M",
                    "solution": 35890824,
                    "code": "T = int(input())\n\nfor i in range(T):\n    a = int(input())\n    \n    # d2 = n such that 2^n is just greater than a.  \n    # d1 = max days so that profit is > 0.\n    \n    s = bin(a)\n    d2 = len(s) - s.index('1')\n    if 2**(d2-1) == a:\n        d2 -= 1\n        \n    d1 = 0\n    while d1*a >= 2**d1 - 1:\n        d1 += 1\n        \n    print(d1-1, d2)"
                }
            ]
        },
        "MCHAIRS": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "2\n1\n2",
                    "output": "1\n3",
                    "explanation": ""
                }
            ],
            "problem_statement": "Read problems statements in  Mandarin Chinese  and  Russian.\nA new school in Byteland is now in the process of renewing some classrooms with new, stronger and better chairs, so that the students can stay still and pay attention to class :)\nHowever, due to budget and logistic reasons, it's only possible to carry a chair at a time to the classroom, which means that for a long time, many students will be up, waiting for their chair to arrive.\nThe teacher, however, as she is very clever, decided to challenge her students with a problem: \"Imagine that there are N students in the classroom and that there are only K chairs. In how many ways, can I choose K elements from the class to sit down, if I see them as being distinct?\" \nLira replied immediately with the right answer, so, the teacher decided to make the game a little funnier: \"Okay Lira, as you are so fast, now I want you to tell me exactly the same thing, but, with the addition that the value of K is changing, this is, I want you to tell me the sum of the number of ways I can sit down K of you, if the value of K goes from 1 (meaning that there are no chairs in the classroom but one) to N (meaning that all of your chairs arrived). Can you be as fast now? As the answer might get large I want you to tell me the result modulo 1000000007. (109 + 7)\"\nAs you might have noticed, it's time for you to help Lira solving this variant of the problem. :D \nInput\nThe first line of the input file contains an integer T, denoting the number of test cases on the input file.\nAfterwards, T lines follow, each containing an integer N, the number of students that the teacher will try to sit down as the number of chairs goes from 1 to N.\nOutput\nFor each test case, you should output an integer, denoting the sum of the number of ways the teacher can make N students sit down on K chairs, as K goes from 1 to N, modulo 109 + 7.\nConstraints\n1 \u2264 T \u2264 100\n1 \u2264 N \u2264 100000000",
            "input_format": "",
            "output_format": "",
            "problem_name": "Missing some chairs",
            "user_tags": [
                "Modular Exponentiation"
            ],
            "computed_tags": [
                "Mathematics",
                "Modular Arithmetic"
            ],
            "problem_code_id": "MCHAIRS",
            "difficulty_level": "1456",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 41586971,
                    "submission_date": 1610360203,
                    "language": "PYTH 3",
                    "username": "thoimas",
                    "user_rating_star": 3,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.01",
                    "memory": "17.5M",
                    "solution": 41586971,
                    "code": "'''for i in range(int(intput())):\r\n\tn = int(input())\r\n\tprint(pow(2,n,1000000007)-1)\r\n'''\r\nfor u in range(int(input())):\r\n    n=int(input())\r\n    print(pow(2,n,1000000007)-1)\r\n"
                },
                {
                    "id": 35057691,
                    "submission_date": 1593849753,
                    "language": "PYTH 3",
                    "username": "niteshk2",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.02",
                    "memory": "17.6M",
                    "solution": 35057691,
                    "code": "t=int(input())\nwhile(t>0):\n    n=int(input())\n    x=pow(2,n,1000000007)\n    print(x-1)\n    t-=1"
                }
            ]
        },
        "SUBMIN": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "5\n4 1 2 3 4\n4\n3\n4\n6\n1",
                    "output": "2\n2\n0\n8",
                    "explanation": "Query 1. Only the two subarrays [3, 4] and [3] satisfy.\nQuery 2. Again only the two subarrays [4] and [4] satisfy. Please note that these subarrays (A0 and A4) are considered different.\nQuery 3. No subarray satisfies.\nQuery 4. The eight subarrays [4, 1], [4, 1, 2], [4, 1, 2, 3], [4, 1, 2, 3, 4], [1], [1, 2], [1, 2, 3] and [1, 2, 3, 4] satisfy."
                }
            ],
            "problem_statement": "Read problems statements in Mandarin Chinese  and Russian.\nLittle Elephant is playing a game with arrays. He is given an array A0, A1, ..., AN\u22121 of N integers. And then Q queries are given, each containing an integer K. He has to tell how many subarrays satisfy the condition: the function foo returns K when it is applied to the subarray.\nIn this problem, a subarray is defined as a sequence of continuous elements Ai, Ai+1, ..., Aj where 0 \u2264 i \u2264 j \u2264 N\u22121. The function foo, when applied to an array, returns the minimum of all the elements in the array.\nFor example, foo returns 5 when it is applied to the array [7, 5, 10, 7, 5, 8]. Please note that the subarrays Ai, Ai+1, ..., Aj and Ak, Ak+1, ..., Al are different if and only if i \u2260 k or j \u2260 l in this problem.\nInput\nThe first line of input contains N, denoting the size of the array. The next line contains N space separated integers A0, A1, ..., AN\u22121, denoting the array. Then the next line contains Q, denoting the number of queries. Each query consists of one integer per line, denoting K.\nOutput\nFor each query, print the required number of subarrays.\nConstraints\n1 \u2264 N \u2264 50\n1 \u2264 Ai \u2264 1000000 (106)\n1 \u2264 Q \u2264 10\n1 \u2264 K \u2264 1000000 (106)",
            "input_format": "",
            "output_format": "",
            "problem_name": "Little Elephant and Subarrays",
            "user_tags": [
                "Stacks",
                "ad-hoc",
                "Brute Force"
            ],
            "computed_tags": [
                "Data Structures",
                "Algorithms",
                "Constructive"
            ],
            "problem_code_id": "SUBMIN",
            "difficulty_level": "1475",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 37157768,
                    "submission_date": 1598438759,
                    "language": "PYTH 3",
                    "username": "akshay_murari_",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.02",
                    "memory": "17.6M",
                    "solution": 37157768,
                    "code": "from sys import stdin, stdout\r\ndef fun(a,k):\r\n    for i in range(len(a)):\r\n        if a[i]==k:yield i\r\ndef ind(a,k,s,e):\r\n    for i in range(s,e):\r\n        if a[i]<k:return i\r\n    return e\r\ndef rind(a,k,e,s):\r\n    for i in range(e-1,s-1,-1):\r\n        if a[i] <= k: return i\r\n    return -1\r\nn = int(stdin.readline())\r\na = list(map(int, stdin.readline().split()))\r\nq = int(stdin.readline())\r\nfor i in range(q):\r\n    m = int(stdin.readline())\r\n    b=tuple(fun(a,m))\r\n    ans=0\r\n    for i in range(len(b)):\r\n        if b[i]==0:\r\n            k=ind(a,a[b[i]],b[i]+1,n)\r\n            ans+=k-b[i]\r\n        elif b[i]==n-1:\r\n            k=rind(a,a[b[i]],b[i],0)\r\n            ans+=b[i]-k\r\n        else:\r\n            ans+=(b[i]-rind(a,a[b[i]],b[i],0))*(ind(a,a[b[i]],b[i]+1,n)-b[i])\r\n    stdout.write(str(ans) + '\\n')"
                },
                {
                    "id": 35639082,
                    "submission_date": 1594788274,
                    "language": "PYTH 3",
                    "username": "pro_001",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.03",
                    "memory": "17.6M",
                    "solution": 35639082,
                    "code": "\r\nn=int(input())\r\nlis = list(map(int, input().split()))\r\n\r\nq = int(input())\r\nans = []\r\nres=[]\r\nfor i in range(len(lis)+1):\r\n    ans=[]\r\n    for j in range(i+1, len(lis)+1):\r\n        ans=lis[i:j]\r\n        res.append(ans)\r\n    #print(res)\r\nwhile q>0:\r\n    k = int(input())\r\n    count=0\r\n    for i in range(len(res)):\r\n        if k==min(res[i]):\r\n            count+=1\r\n    print(count)\r\n    q-=1\r\n"
                }
            ]
        },
        "KCHESS": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "2\n6\n1 0\n0 2\n2 5\n4 4\n5 0\n6 2\n3 2\n4\n5 6\n3 5\n2 8\n-8 -8\n0 0",
                    "output": "YES\nNO",
                    "explanation": "In the first test case, the king is in cannot move to any valid position\nIn second test case, the king can easily make a valid move."
                }
            ],
            "problem_statement": "Abhineet the Chess master of NIT Kurukshetra got bored of 8x8 chess board and invented the new variation of Chess, the one on an infinite chess board. There is only a white king and $N$ black knights. The white king has to avoid checkmate as long as it can.\nA situation is given. Determine if white king is in checkmate or not. The white king is in checkmate if and only if it is in check and it is not able to move to any of its neighboring positions which is not in check.\nInput:\n\nThe first line will contain $T$, number of test cases. Then the test cases follow. \nThe first line of each test case contains a single integer $N$.\nThe next N line contains 2 space-separated integers $Xi$ and $Yi$ denoting the position of knights.\nThe next line contains 2 space-separated integers $A$ and $B$ denoting the position of king\n\nOutput:\nPrint a single line corresponding to each test case \u2014 \u201cYES\u201d (without quotes) \u2013 if the king is in checkmate and \u201cNO\u201d (without quotes) \u2013 if the king is not in checkmate.\nConstraints\n\n$1 \\leq T \\leq 5$\n$1 \\leq N \\leq 10^5$\n$-10^9 \\leq Xi, Yi, A, B \\leq 10^9$",
            "input_format": "",
            "output_format": "",
            "problem_name": "Knight Chess",
            "user_tags": [
                "Implementation"
            ],
            "computed_tags": [
                "Algorithms"
            ],
            "problem_code_id": "KCHESS",
            "difficulty_level": "1420",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 33170672,
                    "submission_date": 1589881333,
                    "language": "PYTH 3",
                    "username": "thanojkumar",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.87",
                    "memory": "34.2M",
                    "solution": 33170672,
                    "code": "# KNIGHT CHESS\r\n# Code : KCHESS\r\n\r\n#  find next moves of king\r\ndef findNextKxKy(kx,ky):\r\n\trow_dir = [-1,-1,0,1,1,1,0,-1]\r\n\tcol_dir = [0,1,1,1,0,-1,-1,-1]\r\n\tnext_kx_ky = [(kx,ky)]\r\n\tfor i in range(8):\r\n\t\tnext_kx_ky.append(tuple([kx+row_dir[i],ky+col_dir[i]]))\r\n\treturn next_kx_ky\r\n\r\n# find next moves of all knight\r\ndef findNextKNPS(knps_arr):\r\n\trow_dir = [1,2,2,1,-1,-2,-2,-1]\r\n\tcol_dir = [2,1,-1,-2,-2,-1,1,2]\r\n\tnext_knps = set()\r\n\tfor kn in knps_arr:\r\n\t\tfor i in range(8):\r\n\t\t\tnext_knps.add(tuple([kn[0]+row_dir[i],kn[1]+col_dir[i]]))\r\n\treturn list(next_knps)\r\n\r\n\r\n#  check if king has atleast one move to go ahead if not return true\r\ndef allKxKyInKnps(next_knps,next_kx_ky):\r\n\tfor kxky in next_kx_ky:\r\n\t\tif not (kxky in next_knps):\r\n\t\t\treturn False\r\n\treturn True\r\n\r\n\r\nt = int(input())\r\nwhile t>0:\r\n\tknps = int(input())\r\n\tknps_arr = []\r\n\tfor _ in range(knps):\r\n\t\tknps_arr.append(tuple(map(int,input().split())))\r\n\tkx,ky = map(int,input().split())\r\n\r\n\tnext_knps = findNextKNPS(knps_arr)\r\n\r\n\tnext_kx_ky = findNextKxKy(kx,ky)\r\n\r\n\tif(allKxKyInKnps(next_knps,next_kx_ky) == True):\r\n\t\tprint(\"YES\")\r\n\telse:\r\n\t\tprint(\"NO\")\r\n\tt-=1\r\n"
                },
                {
                    "id": 33139692,
                    "submission_date": 1589735012,
                    "language": "PYTH 3",
                    "username": "tarun_678",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.58",
                    "memory": "32.3M",
                    "solution": 33139692,
                    "code": "def neighbours(i,j):\r\n    x = [1,-1,2,-2,1,-1,2,-2];y = [2,2,1,1,-2,-2,-1,-1]\r\n    for k in range(8):l.add((i+x[k],j+y[k]))\r\n    return l\r\nfor t_iter in range(int(input())):\r\n    n = int(input());l = set()\r\n    for n_iter in range(n):i,j = map(int,input().split());neighbours(i,j)\r\n    a,b = map(int,input().split());x = [0,0,1,1,1,-1,-1,-1];y = [-1,1,0,1,-1,0,1,-1];flag = 0\r\n    for k in range(8):\r\n        if not (a+x[k],b+y[k]) in l:flag = 1;print(\"NO\");break\r\n    if flag == 0:print(\"YES\")"
                }
            ]
        },
        "PROBSET": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "4\n4 5\ncorrect 11111\nwrong 10101\ncorrect 11111\nwrong 01111\n4 5\ncorrect 10110\nwrong 11111\ncorrect 11111\nwrong 01000\n4 5\ncorrect 11111\nwrong 11111\nwrong 10100\nwrong 00000\n4 5\nwrong 10110\ncorrect 01101\ncorrect 11111\nwrong 11000",
                    "output": "FINE\nINVALID\nWEAK\nINVALID",
                    "explanation": "First problem: All correct submissions are passing all tests and each wrong submission is failing on at least one test, so the tests are fine.\nSecond problem: The first submission is failing on the second and fifth test, even though it is intended to be correct, so the tests are invalid. Note that even though the second submission indicates that the tests are also weak, the answer is still \"INVALID\", since you should print \"WEAK\" only if the tests are not invalid.\nThird problem: All correct submissions are passing, so the tests are valid, but the second submission is intended to fail, yet it passes all tests, so the tests are weak.\nFourth problem: The second submission is correct, but it is not passing all tests, so the tests are invalid."
                }
            ],
            "problem_statement": "Read problems statements in Hindi,\nMandarin chinese\n, Russian and Vietnamese as well.\nChef wants to set problems for a Lunchtime contest. He already has all the problem ideas and tests for them. Now, he only needs someone to test them, so he asked Hasan to do it. \nHasan is now testing the problems, the problem that hasan is currently testing has $M$ tests (numbered $1$ through $M$). He wrote $N$ solutions (numbered $1$ through $N$) for this problem; some of the solutions are intended to pass, while other ones are intended to fail on some tests. \nHe has submitted all of his solutions to this problem in a testing contest. For each solution, the system returned a (possibly empty) list of tests on which this solution failed as feedback.\nThere are three possible outcomes:\n- If there is a solution which is intended to pass all tests, but fails on some test, the tests are invalid.\n- If the tests are not invalid and there is a solution which is intended to fail on some test, but passes all tests, the tests are weak.\n- If the tests are not invalid or weak, they are fine.\nHelp Hasan determine the outcome for this problem!\nInput\n\nThe first line of the input contains a single integer $T$ denoting the number of problems that Hasan wants to test. The description of $T$ problems follows.\nThe first line contains two space-separated integers $N$ and $M$. \n$N$ lines follow. For each $i$ ($1 \\le i \\le N$), the $i$-th of these lines contains the string \"correct\" if the $i$-th solution is intended to pass or \"wrong\" if it is intended to fail, followed by a space and a string with length $M$. For each valid $j$, the $j$-th character of this string is '1' if the $i$-th solution passed the $j$-th test or '0' if it failed the $j$-th test.\n\nOutput\nFor each test case, print a single line containing one of the strings \"FINE\", \"INVALID\" or \"WEAK\".\nConstraints\n\n$1 \\le T \\le 100$\n$2 \\le N, M \\le 50$\n\nSubtasks\nSubtask #1 (100 points): original constraints",
            "input_format": "",
            "output_format": "",
            "problem_name": "Chef and Problem Setting",
            "user_tags": [
                "Implementation"
            ],
            "computed_tags": [
                "Algorithms"
            ],
            "problem_code_id": "PROBSET",
            "difficulty_level": "1406",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 54773582,
                    "submission_date": 1638937131,
                    "language": "PYTH 3",
                    "username": "uning",
                    "user_rating_star": 3,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.03",
                    "memory": "9.1M",
                    "solution": 54773582,
                    "code": "for _ in range(int(input())):\n    n, m = map(int, input().split())\n    ans = 'FINE'\n    temp = ''\n    for _ in range(n):\n        a, b = input().split()\n        if a == 'correct' and b.count('0') > 0:\n            ans = 'INVALID'\n        elif a == 'wrong' and b.count('0') == 0:\n            temp = 'WEAK'\n    if ans == 'FINE' and len(temp) > 0: print(temp)\n    else:\n        print(ans)"
                },
                {
                    "id": 43518340,
                    "submission_date": 1615140427,
                    "language": "PYTH 3",
                    "username": "kjakksns",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.02",
                    "memory": "17.5M",
                    "solution": 43518340,
                    "code": "def cd(n):\r\n    c=0\r\n    for x in n:            \r\n        if x=='1':\r\n            c+=1\r\n    return c\r\nfor _ in range(int(input())):\r\n\tm,n=map(int,input().split())\r\n\tinv,we,f=0,0,0\r\n\tfor _ in range(m):\r\n\t\ta,b=map(str,input().split())\r\n\t\tif a[0]=='c':\r\n\t\t\tif cd(b)!=n:inv=1\r\n\t\telif a[0]=='w':\r\n\t\t\tif cd(b)==n:we=1\r\n\tif inv==1:print('INVALID')\r\n\telif we==1 and inv==0:print('WEAK')\r\n\telif inv==0 and we==0:print('FINE')\r\n"
                }
            ]
        },
        "CHDOGS": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "2\n2 5\n1 1000000000",
                    "output": "0.266667\n0.0000001",
                    "explanation": "Due to the triangle being very small, but the dogs running extremely fast, they will meet after less than 1e-6 seconds. Thus, due to remark about absolute or relative error in the output section, any answer within [0, 1e-6] will be considered correct."
                }
            ],
            "problem_statement": "Read problems statements in Mandarin Chinese, Russian and Vietnamese as well.\nChef has three dogs sitting at the vertices of an equilateral triangle. The length of each side of the triangle equals to s meters. Chef gives the command \"Start!\" and each dog starts to run with constant speed v meters per second. At each moment, each dog is running towards the dog just right to him (in counter-clockwise direction). Therefore, their trajectories are forming some spirals that converging to one point as illustrated below.\n\n\nHow long does it takes dogs to meet each other after the command \"Start!\"?  \nInput\nThe first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows.\nThe only line of each test case contains two space-separated integers s and v.\nOutput\nFor each test case, output a single line containing a real number corresponding to the answer of the problem. The answer will be considered correct if its absolute or relative error does not exceed 10-6.\nConstraints\n1 \u2264 T \u2264 10\n1 \u2264 s, v \u2264 109\n\nSubtasks\nSubtask #1 (40 points): 1 \u2264 s, v \u2264 10\nSubtask #2 (60 points): original constraints",
            "input_format": "",
            "output_format": "",
            "problem_name": "Chef and Three Dogs",
            "user_tags": [
                "Geometry",
                "Trigonometry"
            ],
            "computed_tags": [
                "Mathematics",
                "Basic Maths"
            ],
            "problem_code_id": "CHDOGS",
            "difficulty_level": "1473",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 30511772,
                    "submission_date": 1584360365,
                    "language": "PYTH 3",
                    "username": "s_i_am_here",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.02",
                    "memory": "17.6M",
                    "solution": 30511772,
                    "code": "T=int(input())\nfor i in range(0,T):\n    s,v=map(int,input().split())\n    print((2*s)/(3*v))\n    \n"
                },
                {
                    "id": 24476849,
                    "submission_date": 1559732023,
                    "language": "PYTH 3",
                    "username": "cubeforce777",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.01",
                    "memory": "17.5M",
                    "solution": 24476849,
                    "code": "for i in range(int(input())):\n    s,v = map(int,input().split())\n    print(2*s/(3*v))"
                }
            ]
        },
        "PIPSQUIK": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "3\n6 5 1 2 3\n2 2\n2 1\n1 10\n2 8\n2 4\n1 2\n1 4 2 5 1\n2 6\n6 5 1 2 3\n2 2\n2 1\n1 10\n2 8\n2 4\n1 6",
                    "output": "5\n0\n6",
                    "explanation": "Test Case 1: \nGiven $N = 6$, $H = 5$, $Y_{1} = 1$, $Y_{2} = 2$ and $L = 3$.  \nHe passes the first three barriers by either ducking or jumping. He uses alchemic life force for breaking $4^{th}$, $5^{th}$ and $6^{th}$ barriers because he cannot pass them by either jumping or ducking. He gets exhausted after breaking the $6^{th}$ barrier and is unable to pass it. So, in total he passes $5$ barriers."
                }
            ],
            "problem_statement": "Edward Elric is chasing after Scar. To stop Edward, Scar creates $N$ barriers in the way, numbered from $1$ to $N$. \nEach barrier Scar created is either one of the following two types.\n- Type 1 barrier - This barrier starts from a height $X$ above the ground and extends till the sky.\n- Type 2 barrier - This barrier starts from the ground and extends up to height $X$ above the ground.\n\nThe height of Edward is $H$ units and he has an alchemic life force of $L$ units. Moreover, he can duck by $Y_{1}$ units and jump by height $Y_{2}$ units (as explained in the figures). He starts crossing barriers in sequence, starting from barrier $1$ till the barrier $N$. Whenever he can't pass a barrier by ducking or jumping (considered passed even when the barrier just touches him), he uses Alchemy to break the barrier. However, this costs him a single unit of his alchemic life force.\nIf after breaking a barrier no life force is left, Edward gets completely exhausted, unable to pass that barrier. \nHow many barriers can Edward cross?   \nAnd remember never to call him a pipsqueak if his height is too short!\nInput:\n\nThe first line contains $T$, the number of test cases. Then the test cases follow. \nFor each test case, the first line contains five integers $N$, $H$, $Y_{1}$, $Y_{2}$ and $L$.\nThe i-th of the next $N$ lines contains two integers $t_{i}$ and $X_{i}$ for the $i^{th}$ barrier where $t_{i} = 1$ denotes a Type 1 Barrier and $t_{i} = 2$ denotes a Type 2 barrier.\n\nOutput:\nFor each test case print a single line containing the number of barriers Edward can pass.\nConstraints\n\n$1 \\leq T\\leq 100$   \n$1 \\leq N\\leq 10^{3}$    \n$2 \\leq H\\leq 10^{3}$   \n$1 \\leq Y_{1} < H$   \n$1 \\leq Y_{2} \\leq 10^{3}$    \n$1 \\leq L \\leq N$    \n$1 \\leq t_{i} \\leq 2$\n$1 \\leq X_{i}\\leq 10^{3}$",
            "input_format": "",
            "output_format": "",
            "problem_name": "Full Barrier Alchemist",
            "user_tags": [
                "Conditional Statements",
                "Implementation"
            ],
            "computed_tags": [
                "Basic Programming Concepts",
                "Algorithms"
            ],
            "problem_code_id": "PIPSQUIK",
            "difficulty_level": "1426",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 32891778,
                    "submission_date": 1588969914,
                    "language": "PYTH 3",
                    "username": "us2022",
                    "user_rating_star": 3,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.12",
                    "memory": "17.6M",
                    "solution": 32891778,
                    "code": "for _ in range(int(input())):\n     N,H,Y1,Y2,L=map(int,input().split())\n     k=0\n     for i in range(N):\n         t,x=map(int,input().split())\n         if t==2:\n             if Y2>=x and L>0:\n                 k+=1\n             elif(Y2<x and L>=1):\n                 if L==1:\n                     L-=1\n                 else:\n                     k+=1\n                     L-=1\n         elif t==1:\n             if H-Y1<=x and L>0:\n                 k=k+1\n             elif H-Y1>x and L>=1:\n                 if L==1:\n                     L-=1\n                 else:     \n                     k+=1\n                     L-=1\n     print(k)    \n                 \n                        \n"
                },
                {
                    "id": 32480123,
                    "submission_date": 1588330414,
                    "language": "PYTH 3",
                    "username": "sahil4321",
                    "user_rating_star": 5,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.12",
                    "memory": "17.6M",
                    "solution": 32480123,
                    "code": "for i in range(int(input())):\n    n,h,y1,y2,l=map(int,input().split())\n    ctr=0\n    for j in range(n):\n        t,x=map(int,input().split())\n        if t==2 and l!=0:\n            if y2>=x:\n                ctr+=1\n            else:\n                l-=1\n                if l>=1:\n                    ctr+=1\n        elif t==1 and l!=0:\n            if h-y1<=x:\n                ctr+=1\n\n            else:\n                l-=1\n                if l>=1:\n                    ctr+=1\n                \n    print(ctr)\n            \n                \n        \n       \n\n"
                }
            ]
        },
        "CLRL": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "2\n5 200\n600 300 100 350 200\n5 890\n5123 3300 783 1111 890\n",
                    "output": "NO\nYES",
                    "explanation": "Example case 1.The first person that Chef asked has a rating of 600, which is more than 200 so he tells Chef to go to his left. The second person Chef meets has a rating of 300, also tells Chef to go to the left. The third person that chef asked has a rating of 100 so he tells Chef to go to the right. Then Chef asked a person with rating 350, that means Chef went beyond the person with rating of 300, which should never happen, so Chef must have made a mistake while writing this sequence."
                }
            ],
            "problem_statement": "Read problems statements in Mandarin chinese, Russian and Vietnamese as well.\nChef is at a Code Expo where many coders are present discussing, solving, sharing, and eavesdropping on solutions :P\n\nHe recently learnt that a former HackerPlant employee, Reziba, who is now working at KodeKarma stole some questions for their KoolKontest. Chef wants to find Reziba, but the only data he has on him, and everyone else present, are their CodeXP ratings, which are distinct.\nChef decides to find Reziba through his rating by asking different people present at the expo. Everyone present are arranged in such a way that, assuming a person with rating X, every person with a rating higher than X are on the person's right, while every person with a rating lower than X are on the person's left.\n\nEveryone present there knows Reziba's rating, except Chef, who now asks people where he could find Reziba.\n\n\nChef initially asks an arbitrary person, who replies by giving information on whether Reziba is to the person's left or the person's right, depending on whether this person has a higher or lower rating than Reziba.\nChef proceeds in that direction for an arbitrary distance and stops and asks the next person encountered, and repeats this procedure. However, Chef will never go beyond a person whose rating Chef has asked before. For example, if Chef was walking to the left and finds a person who already told him to walk to the right then he will not continue going to the person's left. Chef finally finds Reziba when he finally stops in front of Reziba.\nDuring Chef's search for Reziba, he wrote the sequence of ratings of the people Chef asked in the exact same order, including Reziba's rating, which is the last integer in the sequence.Towards the end, Chef feels he might've made a mistake while writing this sequence.\n\nGiven the sequence that Chef wrote and Reziba's rating, find out whether this sequence is possible or has mistakes.\n\u00a0\nInput\n\n\n\nFirst line contains number of test cases T.\nThe first line of each test case contains the number of people Chef meets, N and Reziba's rating R seperated by a space.\nSecond line of each test case contains N number of space separated ratings from A1 to AN where AN is always equal to R.\n\n\u00a0\nOutput\n\n\nFor each test case, output a singe line with either  \"YES\" if the sequence is correct, or print \"NO\" if the sequence has mistakes, without quotes.\n\n\n\u00a0\nConstraints\n\n1 \u2264 T \u2264 50\n1 \u2264 N \u2264 106\n1 \u2264 sum of N in all test-cases \u2264 1.5*106\n1 \u2264 Ai \u2264 109\nIntegers in A are distinct\nAN = R\n\n\u00a0\nSubtasks\n\nSubtask #1: N \u2264 20\nSubtask #2: Original Constraints",
            "input_format": "",
            "output_format": "",
            "problem_name": "Chef goes Left Right Left",
            "user_tags": [
                "Implementation"
            ],
            "computed_tags": [
                "Algorithms"
            ],
            "problem_code_id": "CLRL",
            "difficulty_level": "1498",
            "ai_solutions": [
                "def solve():\n    n, r = map(int, input().split())\n    a = list(map(int, input().split()))\n    l = 1\n    h = 10**9\n    for i in range(n-1):\n        if a[i] < r:\n            if a[i] > l:\n                l = a[i]\n            else:\n                return \"NO\"\n        else:\n            if a[i] < h:\n                h = a[i]\n            else:\n                return \"NO\"\n    return \"YES\"\n\nt = int(input())\nfor _ in range(t):\n    print(solve())",
                "def solve():\n    n, r = map(int, input().split())\n    a = list(map(int, input().split()))\n    l = 0\n    h = 10**9 + 1\n    for i in range(n-1):\n        if a[i] < r:\n            if a[i] > l:\n                l = a[i]\n            else:\n                return \"NO\"\n        else:\n            if a[i] < h:\n                h = a[i]\n            else:\n                return \"NO\"\n    return \"YES\"\n\nt = int(input())\nfor _ in range(t):\n    print(solve())"
            ],
            "human_solutions": [
                {
                    "id": 42156272,
                    "submission_date": 1612178575,
                    "language": "PYTH 3",
                    "username": "tanmay_garg",
                    "user_rating_star": 3,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.35",
                    "memory": "24.6M",
                    "solution": 42156272,
                    "code": "for i in range(int(input())):\n    n, r = map(int, input().split())\n    li = list(map(int, input().split()))\n    \n    ans = \"YES\"\n    least = None\n    most = None\n    \n    for el in li:\n        if el > r:\n            if most == None or most > el:\n                most = el\n            else:\n                ans = \"NO\"\n                break\n        else:\n            if least == None or least < el:\n                least = el\n            else:\n                ans = \"NO\"\n                break\n    \n    print(ans)"
                },
                {
                    "id": 32192573,
                    "submission_date": 1587745815,
                    "language": "PYTH 3",
                    "username": "rk_161",
                    "user_rating_star": 3,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.46",
                    "memory": "26.6M",
                    "solution": 32192573,
                    "code": "try:\n    for _ in range(int(input())):\n    \tN,R=input().split()\n    \tN,R=int(N),int(R)\n    \tA=[int(j) for j in input().split()]\n    \tl,r=0,max(A)+1\n    \tfor i in range(N):\n    \t\tif A[i]>R and A[i]<r:\n    \t\t\tr=A[i]\n    \t\telif A[i]<R and A[i]>l:\n    \t\t\tl=A[i]\n    \t\telse:\n    \t\t\tif A[i]==R:\n    \t\t\t\tprint(\"YES\")\n    \t\t\t\tbreak\n    \t\t\telse:\n    \t\t\t\tprint(\"NO\")\n    \t\t\t\tbreak\nexcept:\n    pass"
                }
            ]
        },
        "ROTATION": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "5 5\n5 4 3 3 9\nR 1\nC 4\nR 5\nA 3\nR 2",
                    "output": "5\n3\n3",
                    "explanation": "The initial array : 5 4 3 3 9\nThe answer for R 1 : 5\nThe array after C 4 :  9 5 4 3 3\nThe answer for R 5 : 3\nThe array after A 3 : 4 3 3 9 5\nThe answer for R 2 : 3"
                }
            ],
            "problem_statement": "Read problems statements in Mandarin Chinese  and Russian.\n\nYou are given an array A of N integers. You are to fulfill M queries. Each query has one of the following three types:\nC d : Rotate the array A clockwise by d units.\nA d : Rotate the array A anticlockwise by d units.\nR d : Query for the value of the element, currently being the d-th in the array A.\n\nInput\nThe first line contains two numbers - N and M respectively.\nThe next line contains N space separated Integers, denoting the array A.\nEach of the following M lines contains a query in the one of the forms described above.\nOutput\nFor each query of type R output the answer on a separate line.\nConstraints\n1 \u2264 N \u2264 100000 \n1 \u2264 M \u2264 100000 \n1 \u2264 d \u2264 N, in all the queries\n1 \u2264 elements of A \u2264 1000000\nThe array A and the queries of the type R are 1-based.",
            "input_format": "",
            "output_format": "",
            "problem_name": "Fun with Rotation",
            "user_tags": [
                "Modular Arithmetic",
                "Online Queries"
            ],
            "computed_tags": [
                "Mathematics",
                "Algorithms",
                "Queries"
            ],
            "problem_code_id": "ROTATION",
            "difficulty_level": "1446",
            "ai_solutions": [
                "from collections import deque\n\ndef solve():\n    n, m = map(int, input().split())\n    a = deque(map(int, input().split()))\n    offset = 0\n    for _ in range(m):\n        query = input().split()\n        if query[0] == 'C':\n            offset = (offset + int(query[1])) % n\n        elif query[0] == 'A':\n            offset = (offset - int(query[1])) % n\n        else:\n            print(a[(offset + int(query[1]) - 1) % n])\n\nsolve()",
                "def solve():\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n    offset = 0\n    for _ in range(m):\n        query = input().split()\n        if query[0] == 'C':\n            offset = (offset + int(query[1])) % n\n        elif query[0] == 'A':\n            offset = (offset - int(query[1])) % n\n        else:\n            print(a[(offset + int(query[1]) - 1) % n])\n\nsolve()"
            ],
            "human_solutions": [
                {
                    "id": 35712508,
                    "submission_date": 1594916994,
                    "language": "PYTH 3",
                    "username": "umang_garg",
                    "user_rating_star": 3,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.36",
                    "memory": "18.2M",
                    "solution": 35712508,
                    "code": "x,y=map(int,input().split())\r\na=list(map(int,input().split()))\r\ncount=0\r\nfor i in range(y):\r\n    p,q=input().split()\r\n    q=int(q)\r\n    if p==\"C\":\r\n        count+=q\r\n    elif p==\"A\":\r\n        count-=q\r\n    else:\r\n        print(a[(q-1+count)%x])"
                },
                {
                    "id": 32627826,
                    "submission_date": 1588521079,
                    "language": "PYTH 3",
                    "username": "nav_debug",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "1.48",
                    "memory": "18.3M",
                    "solution": 32627826,
                    "code": "import collections \r\nn,m=map(int,input().split())\r\narr=[int(i) for i in input().split()]\r\ne=collections.deque(arr)\r\nfor j in range(m):\r\n    s,k=map(str,input().split())\r\n    k=int(k)\r\n    result=[]\r\n    if s=='R':\r\n        print(e[k-1]) \r\n         \r\n    elif s=='C':\r\n        e.rotate(-k)\r\n        \r\n    elif s=='A':\r\n        e.rotate(k) \r\n\r\n\r\n    \r\n        "
                }
            ]
        },
        "RETPO": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "2\n3 3\n3 4",
                    "output": "6\n7",
                    "explanation": "Example case 1. Sequence of moves would be LRLRLR"
                }
            ],
            "problem_statement": "Read problems statements in Mandarin Chinese  and Russian.\nRecently Chef bought a bunch of robot-waiters. And now he needs to know how much to pay for the electricity that robots use for their work. All waiters serve food from the kitchen (which is in the point (0, 0)) and carry it to some table (which is in some point (x, y)) in a shortest way. But this is a beta version of robots and they can only do the next moves: turn right and make a step forward or turn left and make a step forward. Initially they look in direction of X-axis. Your task is to calculate for each query the number of moves they\u2019ll do to reach corresponding table.\n\n\u00a0\nInput\nThe first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. For each test case there is a sing line containing two space-separated integers - x and y.\nOutput\nFor each test case, output a single line containing number of moves that robot will make to reach point (x, y)\nConstraints\n1 \u2264 T \u2264 105\n-109 \u2264 x, y \u2264 109",
            "input_format": "",
            "output_format": "",
            "problem_name": "Reach The Point",
            "user_tags": [
                "Basic Maths",
                "ad-hoc"
            ],
            "computed_tags": [
                "Mathematics",
                "Algorithms",
                "Constructive"
            ],
            "problem_code_id": "RETPO",
            "difficulty_level": "1495",
            "ai_solutions": [
                "T = int(input())\nfor _ in range(T):\n    x, y = map(int, input().split())\n    x, y = abs(x), abs(y)\n    if x == y:\n        print(2 * x)\n    elif x > y:\n        print(2 * y + ((x - y) * 2 - 1 if (x - y) % 2 else 0))\n    else:\n        print(2 * x + ((y - x) * 2 - 1 if (y - x) % 2 else 0))",
                "T = int(input())\nfor _ in range(T):\n    x, y = map(int, input().split())\n    x, y = abs(x), abs(y)\n    if x < y:\n        x, y = y, x\n    if x > y * 2:\n        print(x * 2)\n    elif x % 2 == y % 2:\n        print(x * 2)\n    else:\n        print(x * 2 - 1)"
            ],
            "human_solutions": [
                {
                    "id": 40507083,
                    "submission_date": 1608226205,
                    "language": "PYTH 3",
                    "username": "prsb2408",
                    "user_rating_star": 3,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.69",
                    "memory": "17.5M",
                    "solution": 40507083,
                    "code": "for _ in range(int(input())):\r\n    x, y = list(map(int,input().split()))\r\n    x, y = abs(x), abs(y)\r\n    \r\n    if x<=y:\r\n        if(x+y)%2==0:\r\n            p =2 *y\r\n        else:\r\n            p = 2*y-1\r\n            \r\n    else:\r\n        if(x+y)%2==0:\r\n            p = 2*x\r\n        else:\r\n            p = 2*x+1\r\n            \r\n    print(p)"
                },
                {
                    "id": 35887929,
                    "submission_date": 1595500518,
                    "language": "PYTH 3",
                    "username": "feelme",
                    "user_rating_star": 3,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.31",
                    "memory": "78.9M",
                    "solution": 35887929,
                    "code": "# Coding is about expressing your feeling and there is always a better way to express your feeling _feelme\nimport sys,math,numpy as np\n# sys.stdin,sys.stdout=open('input.txt','r'),open('output.txt','w')\nfrom sys import stdin,stdout;mod=int(1e9 + 7);from statistics import mode\nfrom collections import deque,defaultdict;from math import ceil,floor,inf,factorial,gcd,log2\nii1=lambda:int(stdin.readline().strip())\nis1=lambda:stdin.readline().strip()\niia=lambda:list(map(int,stdin.readline().strip().split()))\nisa=lambda:stdin.readline().strip().split()\n# print('{:.3f}'.format(1),round(1.123456789,4))\n# np.set_printoptions(sign=' ',legacy='1.13') # legacy add space at sign position\ndef lcm(a,b): return (a*b)//gcd(a,b)\ndef setbits(n):return bin(n).count('1')\ndef resetbits(n):return bin(n).count('0')\ndef modinv(n,p):return pow(n,p-2,p)\ndef ncr_p(n, r, p):\n    num,den=1,1;\n    for i in range(r):num = (num * (n - i)) % p ;den = (den * (i + 1)) % p\n    return (num * modinv(den,p)) % p\ndef isPrime(num) :\n    if num<=1:return False\n    if num==2 or n==3:return True\n    if (num % 2 == 0 or num % 3 == 0) :return False\n    for i in range(5,int(num**0.5)+1,6):\n        if (num % i == 0 or num % (i + 2) == 0) :return False\n    return True\ndef bin_search(arr, low, high, val):\n    while low <= high:\n        mid = low + (high - low) // 2;\n        if arr[mid] == val:return mid\n        elif arr[mid] < val:low = mid + 1\n        else:high = mid - 1\n    return -1\ndef sumofdigit(num):\n    count=0;\n    while num : count+=num % 10;num //= 10\n    return count;\ndef make_dic(arr):\n    freq = {}\n    for val in arr : freq[val] = (freq[val] + 1 if val in freq else 1)\n    # print(freq)\n    return freq\ndef inputmatrix():\n    r,c=iia();mat=[0]*r;\n    for i in range(r):mat[i]=iia();\n    return mat;\ndef prefix_sum(n,arr):\n    for i in range(1,n):arr[i]+=arr[i-1]\n    return arr;\ndef binomial(n, k):\n    if 0 <= k <= n:\n        ntok = 1;ktok = 1\n        for t in range(1, min(k, n - k) + 1):ntok *= n;ktok *= t;n -= 1\n        return ntok // ktok\n    else:return 0\ndef divisors(n):\n    res = [];\n    for i in range(1,ceil(sqrt(n))+1):\n        if n%i == 0:\n            if i==n//i:res.append(i)\n            else:res.append(i);res.append(n//i)\n    return res;\n# code here ----->\nfor _ in range(ii1()):\n    n,m=iia()\n    if abs(n)==abs(m):\n        print(abs(n)+abs(m))\n        continue\n    elif abs(n)>abs(m):\n        if (abs(n)-abs(m))&1:\n            print(2*abs(n)+1)\n        else:\n            print(2*abs(n))\n    else:\n        if (abs(m)-abs(n))&1:\n            print(2*abs(m)-1)\n        else:\n            print(2*abs(m))\n\n\n"
                }
            ]
        },
        "ALEXTASK": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "3\n3\n2 3 5\n4\n1 8 7 11\n4\n4 4 5 6",
                    "output": "6\n7\n4",
                    "explanation": "Case 1: in 6 milliseconds, the third reading will be attempted from the 1st sensor and the second reading will be attempted from the 2nd sensor.\nCase 2: in 7 milliseconds the seventh reading will be attempted from the 1st sensor and the first reading will be attempted from the 3rd sensor.\nCase 3: in 4 milliseconds, the first readings from the first two sensors will be attempted."
                }
            ],
            "problem_statement": "Read problems statements in Mandarin Chinese, Russian and Vietnamese as well.\n Alexey is trying to develop a program for a very simple microcontroller. It makes readings from various sensors over time, and these readings must happen at specific regular times. Unfortunately, if two of these readings occur at the same time, the microcontroller freezes and must be reset. \n\nThere are N different sensors that read data on a regular basis. For each i from 1 to N, the reading from sensor i will occur every Ai milliseconds with the first reading occurring exactly Ai milliseconds after the microcontroller is powered up. Each reading takes precisely one millisecond on Alexey's microcontroller.\n\n\nAlexey wants to know when the microcontroller will freeze after he turns it on.\n\nInput\nThe first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows.\nThe first line contains single integer N denoting the number of sensors.\n\nThe second line contains N space-separated integers A1, A2, ..., AN denoting frequency of measurements. Namely, sensor i will be read every Ai milliseconds with the first reading occurring Ai milliseconds after the microcontroller is first turned on.\n\n \nOutput\nFor each test case, output a single line containing the number of milliseconds until the microcontroller freezes.\n\u00a0\nConstraints\n1 \u2264 T \u2264 10\n2 \u2264 N \u2264 500\n1 \u2264 Ai \u2264 109\n\n\u00a0\nSubtasks\nSubtask #1 (10 points) 1  \u2264 T \u2264 10, 2 \u2264 N \u2264 9, 1 \u2264 Ai \u2264 500\nSubtask #2 (20 points) 1  \u2264 T \u2264 10, 2 \u2264 N \u2264 500, 1 \u2264 Ai \u2264  1000\nSubtask #3 (70 points)  original constraints",
            "input_format": "",
            "output_format": "",
            "problem_name": "Task for Alexey",
            "user_tags": [
                "Basic Maths"
            ],
            "computed_tags": [
                "Mathematics"
            ],
            "problem_code_id": "ALEXTASK",
            "difficulty_level": "1449",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 34684434,
                    "submission_date": 1592995031,
                    "language": "PYTH 3",
                    "username": "kaustubhk13",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.34",
                    "memory": "17.6M",
                    "solution": 34684434,
                    "code": "import math\nfor t in range(int(input())):\n    n = int(input())\n    arr = list(map(int,input().split()))\n    least = None\n    for i in range(0, len(arr)):\n        for j in range(i+1, len(arr)):\n            lcm = (arr[i]*arr[j])//math.gcd(arr[i], arr[j])\n            if least == None or lcm <= least:\n                least = lcm\n    print(least)\n"
                },
                {
                    "id": 34466583,
                    "submission_date": 1592314552,
                    "language": "PYTH 3",
                    "username": "jeevana15",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.34",
                    "memory": "17.6M",
                    "solution": 34466583,
                    "code": "import math\n\nfor _ in range(int(input())):\n    n = int(input())\n    s = list(map(int, input().split()))\n    m = (s[0]*s[1])//math.gcd(s[0],s[1])\n    for i in range(len(s)):\n        for j in range(i+1, len(s)):\n            x = (s[i]*s[j])//math.gcd(s[i], s[j])\n            if x < m:\n                m = x\n    print(m)"
                }
            ]
        },
        "CHEFST": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "3\n1 1 1\n1 2 1\n4 5 2",
                    "output": "0\n1\n3",
                    "explanation": "Example case 1. : Remove 1 stone from each of the piles. Now 0 stones are remaining, so chef cannot remove any more stones from the piles. Hence, answer is 0+0 = 0\nExample case 2. : Again, remove 1 stone from both the piles to get (0,1) stones. Now chef cannot remove any more stones from pile 1, so he stops. Hence, answer is 0+1 = 1.\nExample case 3. : First remove 1 stone from both the piles to get (3,4) stones. Now, remove 2 stones from both the piles so that (1,2) stones are remaining. Now chef cannot remove any more stones owing to the condition that he cannot remove the same number of stones twice. So, the answer is 1+2 = 3."
                }
            ],
            "problem_statement": "Read problems statements in Mandarin Chinese, Russian and Vietnamese as well.\nChef has two piles of stones with him, one has n1 stones and the other has n2 stones. Fired up by boredom, he invented a game with the two piles.\n\nBefore the start of the game Chef chooses an integer m.\n\n\nIn the j-th move: \n\n He chooses a number xj such that 1 \u2264 xj \u2264 m, and removes xj stones from both the piles (this is only possible when both the piles have \u2265 xj stones).\n The number chosen must be unique over all the moves in the game. That is, for all k j \u2260 xk.\n\nThe game stops when Chef is unable to make any more moves.\nChef wants to make the moves in such a way that the sum of the number of stones remaining in the two piles is minimized. Please help Chef find this.\n\nInput\nThe first line of input contains an integer T denoting the number of test cases.\nEach test case consists of 1 line with three integers \u2014 n1, n2 and m \u2014 separated by single spaces.\n\nOutput\nFor each test case, output a single line containing the minimum sum of the number of stones of two piles.\nConstraints\nSubtask 1 : (5 pts)\n1 \u2264 T \u2264 100\n0 \u2264 m \u2264 18\n0 \u2264 n1, n2 \u2264 100\n\nSubtask 2 : (25 pts)\n1 \u2264 T \u2264 1000\n0 \u2264 m \u2264 10000\n0 \u2264 n1, n2 \u2264 10000\n\nSubtask 3 : (70 pts)\n1 \u2264 T \u2264 105\n0 \u2264 m \u2264 109\n0 \u2264 n1, n2 \u2264 1018",
            "input_format": "",
            "output_format": "",
            "problem_name": "Chef and the stones",
            "user_tags": [
                "AP"
            ],
            "computed_tags": [
                "Mathematics",
                "Sequences and Progression"
            ],
            "problem_code_id": "CHEFST",
            "difficulty_level": "1441",
            "ai_solutions": [
                "T = int(input())\nfor _ in range(T):\n    n1, n2, m = map(int, input().split())\n    total = min(n1, n2, m*(m+1)//2)\n    print(n1 + n2 - 2*total)",
                "def min_sum_of_stones(T, test_cases):\n    for i in range(T):\n        n1, n2, m = test_cases[i]\n        total = min(n1, n2, m*(m+1)//2)\n        print(n1 + n2 - 2*total)\n\nT = int(input())\ntest_cases = []\nfor _ in range(T):\n    test_cases.append(list(map(int, input().split())))\n\nmin_sum_of_stones(T, test_cases)"
            ],
            "human_solutions": [
                {
                    "id": 34238699,
                    "submission_date": 1591952132,
                    "language": "PYTH 3",
                    "username": "jaydeep1998",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.67",
                    "memory": "17.5M",
                    "solution": 34238699,
                    "code": "if __name__ == '__main__':\n    t = int(input())\n    for i in range(t):\n        n1,n2,m = map(int,input().split())\n        temp = min(n1,n2)\n        # if temp > sum of m numbers then\n        count = 0\n        total = m*(m+1)//2\n        if total<temp:\n            count = total\n        else:\n            count = temp\n        ans = n1+n2-2*count\n        print(ans)\n            \n\n    "
                },
                {
                    "id": 33577867,
                    "submission_date": 1591127094,
                    "language": "PYTH 3",
                    "username": "diyajaiswal11",
                    "user_rating_star": 3,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.74",
                    "memory": "17.6M",
                    "solution": 33577867,
                    "code": "t=int(input()) \r\nfor i in range(t):\r\n   n1,n2,m=list(map(int,input().split())) \r\n   x=(m*(m+1))//2\r\n   a=min(n1,n2) \r\n   b=max(n1,n2) \r\n   if x>a:\r\n      x=a \r\n   a-=x \r\n   b-=x \r\n   print(a+b)\r\n   \r\n   \r\n      \r\n   "
                }
            ]
        },
        "MGCSET": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "2\n2 3\n1 2\n2 3\n1 3",
                    "output": "0\n1",
                    "explanation": "Example case 1: There are no good subsequences.\nExample case 2: There is exactly one good subsequence of $a$: $[3]$."
                }
            ],
            "problem_statement": "Read problems statements in Mandarin chinese, Russian and Vietnamese as well.\nKatya has a sequence of integers $a_1, a_2, \\dots, a_n$ and an integer $m$.\nShe defines a good sequence of integers as a non-empty sequence such that the sum of the elements in each of its non-empty subsequences is divisible by $m$.\nKatya wants to know the number of good subsequences of the sequence $a$. Can you help her?\nInput\n\nThe first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\nThe first line of each test case contains two space-separated integers $n$ and $m$.\nThe second line contains $n$ space-separated integers $a_1, a_2, \\dots, a_n$.\n\nOutput\nFor each test case, print a single line containing one integer \u2014 the number of good subsequences.\nConstraints\n\n$1 \\le T \\le 1,000$\n$1 \\le n \\le 30$\n$1 \\le m \\le 1,000$\n$1 \\le a_i \\le 1,000$ for each valid $i$\n\nSubtasks\nSubtask #1 (30 points): $1 \\le n \\le 5$\nSubtask #2 (70 points): original constraints",
            "input_format": "",
            "output_format": "",
            "problem_name": "Magic Set",
            "user_tags": [
                "Combinatorics",
                "Observation"
            ],
            "computed_tags": [
                "Mathematics",
                "Algorithms"
            ],
            "problem_code_id": "MGCSET",
            "difficulty_level": "1472",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 32004103,
                    "submission_date": 1587280206,
                    "language": "PYTH 3",
                    "username": "bianchengxb",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.03",
                    "memory": "17.6M",
                    "solution": 32004103,
                    "code": "for _ in range(int(input())):\r\n    n,m = map(int,input().split())\r\n    L = list(map(int,input().split()))\r\n    count = 0\r\n    for i in range(len(L)):\r\n        if L[i] % m == 0:\r\n            count += 1\r\n    print(2**count-1)"
                },
                {
                    "id": 31948017,
                    "submission_date": 1587055863,
                    "language": "PYTH 3",
                    "username": "anchaljain__",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.03",
                    "memory": "17.6M",
                    "solution": 31948017,
                    "code": "test=int(input())\r\nfor t in range(test) :\r\n  n,m =[int(x) for x in input().split()]\r\n  a =[int(x) for x in input().split()]\r\n  count=0\r\n  for i in a :\r\n      if i % m ==0 :\r\n        count=count+1\r\n  print(2**count-1)"
                }
            ]
        },
        "PROSUM": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "2\n3\n3 4 5\n4\n1 1 1 1",
                    "output": "3\n0",
                    "explanation": "Example case 1.\nAll pairs of numbers satisfy the criteria. Total number of pairs equals 3.\n\nExample case 2.\nNo pair of numbers satisfy the criteria."
                }
            ],
            "problem_statement": "Read problems statements in Mandarin Chinese  and Russian.\nLittle chef has just been introduced to the world of numbers! While experimenting with addition and multiplication operations, the little chef came up with the following problem:\n\n Given an array A of non-negative integers, how many pairs of indices i and j exist such that  A[i]*A[j] > A[i]+A[j]  where  i .\n\n\n Now being a learner, little chef isn't able to solve this problem efficiently and hence turns to you for help. \nInput\nFirst line of input contains an integer T denoting the number of test cases. For each test case, the first line contains an integer N denoting the number of integers in the array. The next line contains N space separated integers where the ith integer represents A[i]. \n Note : There may be trailing spaces on each line of input. \nOutput\nFor each test, print the required number of pairs in a single line.\nConstraints\n 1 \u2264 T \u2264 10 \n 2 \u2264 N \u2264 100000 (105) \n 0 \u2264 A[i] \u2264 1000000 (106)",
            "input_format": "",
            "output_format": "",
            "problem_name": "Little Chef and Numbers",
            "user_tags": [
                "Combinatorics"
            ],
            "computed_tags": [
                "Mathematics"
            ],
            "problem_code_id": "PROSUM",
            "difficulty_level": "1490",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 34437508,
                    "submission_date": 1592215307,
                    "language": "PYTH 3",
                    "username": "joyous_shah",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.21",
                    "memory": "20.6M",
                    "solution": 34437508,
                    "code": "T=int(input())\nfor i in range(T):\n    N=int(input())\n    A=list(map(int,input().split()))[:N]\n    c=(N*(N-1))//2\n    b=A.count(1)+A.count(0)\n    d=A.count(2)\n    c=c-((b*(b-1))//2)-b*(N-b)-((d*(d-1))//2)\n    print(c)"
                },
                {
                    "id": 33369017,
                    "submission_date": 1590556993,
                    "language": "PYTH 3",
                    "username": "vittal_161",
                    "user_rating_star": 3,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.36",
                    "memory": "20.2M",
                    "solution": 33369017,
                    "code": "test=int(input())\nfor _ in range(test):\n\tn=int(input())\n\ta=list(map(int,input().split()))\n\tc=0\n\tc2=0\n\tfor i in range(n):\n\t\tif a[i]==2:\n\t\t\tc2+=1\n\t\telif a[i]>2:\n\t\t\tc+=1\n\tres=int((c2*c)+((c*(c-1))/2))\n\tprint(res)\n"
                }
            ]
        },
        "DECREM": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "2\r\n4 6\r\n1 2",
                    "output": "6\r\n-1",
                    "explanation": "Example case 1: $N = 6$ satisfies the given condition, since $6 \\,\\%\\, 4 \\,(= 2) \\gt 6 \\,\\%\\, 5 \\,(= 1) \\gt 6 \\,\\%\\, 6 \\,(= 0)$. Notice that $N = 7$ also satisfies the condition, but it is larger.\nExample case 2: It is impossible to find a valid solution because for any non-negative integer $N$, we have $N \\,\\%\\, 1 \\,(= 0) \\le N \\,\\%\\, 2$."
                }
            ],
            "problem_statement": "Read problems statements in Hindi, Mandarin Chinese, Russian, Vietnamese, and Bengali as well.\nYou are given two integers $L$ and $R$. Find the smallest non-negative integer $N$ such that\n$$N \\,\\%\\, L \\gt N \\,\\%\\, (L + 1) \\gt \\ldots \\gt N \\,\\%\\, (R - 1) \\gt N \\,\\%\\, R \\,.$$\nHere, $\\%$ is the modulo operator, so $A \\,\\%\\, B$ is the remainder of $A$ after division by $B$. For example, $11 \\,\\%\\, 3 = 2$.\nInput\n\nThe first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\nThe first and only line of each test case contains two space-separated integers $L$ and $R$.\n\nOutput\nFor each test case, print a single line containing one integer \u2015 the smallest possible $N$, or $-1$ if no solution exists.\nIt is guaranteed that when a solution exists, the smallest solution does not exceed $10^{18}$.\nConstraints\n\n$1 \\le T \\le 10^5$\n$1 \\le L \\lt R \\le 10^6$",
            "input_format": "",
            "output_format": "",
            "problem_name": "Decreasing Srrnmieeda",
            "user_tags": [
                "Pigeonhole Principle",
                "Observation"
            ],
            "computed_tags": [
                "Mathematics",
                "Set Theory",
                "Algorithms"
            ],
            "problem_code_id": "DECREM",
            "difficulty_level": "1423",
            "ai_solutions": [
                "T = int(input().strip())\nfor _ in range(T):\n    L, R = map(int, input().strip().split())\n    if R >= 2*L:\n        print(-1)\n    else:\n        print(R)",
                "def find_smallest_N(T, test_cases):\n    result = []\n    for i in range(T):\n        L, R = test_cases[i]\n        if R >= 2*L:\n            result.append(-1)\n        else:\n            result.append(R)\n    return result\n\nT = int(input().strip())\ntest_cases = []\nfor _ in range(T):\n    test_cases.append(list(map(int, input().strip().split())))\n\nprint(\"\\n\".join(map(str, find_smallest_N(T, test_cases))))"
            ],
            "human_solutions": [
                {
                    "id": 1027540123,
                    "submission_date": 1698493869,
                    "language": "PYTH 3",
                    "username": "riddhiman2005",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.40",
                    "memory": "8.5M",
                    "solution": 1027540123,
                    "code": "t=int(input())\r\nfor _ in range(t):\r\n    l,r=map(int,input().split())\r\n    if(l>r):\r\n        print(-1)\r\n    elif(l*2>r):\r\n        print(r)\r\n    else:\r\n        print(-1)"
                },
                {
                    "id": 1023720656,
                    "submission_date": 1696158751,
                    "language": "PYTH 3",
                    "username": "bakhtiyar_2k3",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.40",
                    "memory": "9.9M",
                    "solution": 1023720656,
                    "code": "import sys\r\nfrom os import path\r\nif(path.exists('input.txt')):\r\n    sys.stdin = open(\"input.txt\",\"r\")\r\n    sys.stdout = open(\"output.txt\",\"w\")\r\ndef solve():\r\n    pass\r\n    l, r = map(int, input().split())\r\n    print(r) if r-l <= l-1 else print(-1)\r\n\r\n\r\nfor _ in range(int(input())):\r\n    solve()\r\n"
                }
            ]
        },
        "LUCKY5": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "3\n25\n46\n99",
                    "output": "2\n1\n2",
                    "explanation": ""
                }
            ],
            "problem_statement": "Chef loves lucky numbers. Everybody knows that lucky numbers are positive integers whose decimal representation contains only the lucky digits 4 and 7. For example, numbers 47, 744, 4 are lucky and 5, 17, 467 are not.\n\n\n Chef has a positive integer N. He can apply any of the following operations as many times as he want in any order:\n\n\n Add 1 to the number N.\n Take some digit of N and replace it by any non-zero digit.\n Add any non-zero leading digit to N.\n\n Find the minimum number of operations that is needed for changing N to the lucky number.\n\n\nInput\nThe first line contains a single positive integer T, the number of test cases. T test cases follow. The only line of each test case contains a positive integer N without leading zeros. \n\n\nOutput\nFor each T test cases print one integer, the minimum number of operations that is needed for changing N to the lucky number.\n\n\nConstraints\n\n1 \u2264 T \u2264 10\n\n\n1 \u2264 N 100000",
            "input_format": "",
            "output_format": "",
            "problem_name": "Lucky Long",
            "user_tags": [
                "ad-hoc"
            ],
            "computed_tags": [
                "Algorithms",
                "Constructive"
            ],
            "problem_code_id": "LUCKY5",
            "difficulty_level": "1478",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 29935366,
                    "submission_date": 1582895828,
                    "language": "PYTH 3",
                    "username": "sagarpaliwal",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.18",
                    "memory": "17.6M",
                    "solution": 29935366,
                    "code": "t=int(input())\nwhile t:\n    arr=input().strip()\n    count=0\n    l=len(arr)\n    for i in range(l):\n        if arr[i] == '4' or arr[i] == '7':\n            count+=1\n    print(l-count)\n    t-=1\n    "
                },
                {
                    "id": 29809333,
                    "submission_date": 1582139985,
                    "language": "PYTH 3",
                    "username": "abhinav_1630",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.01",
                    "memory": "22.8M",
                    "solution": 29809333,
                    "code": "t=int(input())\nfor i in range(t):\n    n=raw_input().strip()\n    print (len(n)-n.count('4')-n.count('7'))"
                }
            ]
        },
        "GIT01": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "2\n4 5\nRGRGR\nGRGRG\nRGRGR\nGRGRG\n2 3\nRRG\nGGR",
                    "output": "0\n8",
                    "explanation": ""
                }
            ],
            "problem_statement": "Read problems statements in Mandarin chinese, Russian and Vietnamese as well.\nChef\u2019s girlfriend's birthday is near, so he wants to surprise her by making a special cake for her. Chef knows that his girlfriend likes cherries on the cake, so he puts cherries on the top of the cake, but he was not satisfied. Therefore, he decided to replace some of the cherries to make a beautiful pattern. However, Chef has a lot of other work to do so he decided to ask for your help.\nThe cherries are of two colors red and green. Now Chef wants the cherries to be placed in such a way that each cherry of one color must be adjacent to only cherries of the other color, two cherries are adjacent if they share a side. Now Chef has asked for your help in making that pattern on the cake.\nYou can replace any cherry of given color with the other color. But there is a cost for each replacement: if you replace a red cherry with a green one, the cost is 5 units and if you replace a green cherry with a red one, the cost is 3 units.\nHelp your friend Chef by making the cake special with minimum cost.\nInput\n\nThe first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows.\nThe first line of each test case contains two space-separated integers N and M, where N \u00d7 M are the dimensions of the cake.\nEach of the next N lines contains a string of length M.\n\nOutput\nFor each test case, output the minimum cost required to make the cake special.\nConstraints\n\n1 \u2264 T \u2264 100\n1 \u2264 N, M \u2264 100\neach string consists only of letters 'R' and 'G' denoting red and green cherries respectively",
            "input_format": "",
            "output_format": "",
            "problem_name": "Chef And his Cake",
            "user_tags": [
                "Observation",
                "Brute Force"
            ],
            "computed_tags": [
                "Algorithms"
            ],
            "problem_code_id": "GIT01",
            "difficulty_level": "1451",
            "ai_solutions": [
                "T = int(input())\nfor _ in range(T):\n    N, M = map(int, input().split())\n    cake = [list(input()) for _ in range(N)]\n    cost1, cost2 = 0, 0\n    for i in range(N):\n        for j in range(M):\n            if (i+j)%2 == 0:\n                if cake[i][j] == 'R':\n                    cost2 += 5\n                else:\n                    cost1 += 3\n            else:\n                if cake[i][j] == 'R':\n                    cost1 += 5\n                else:\n                    cost2 += 3\n    print(min(cost1, cost2))"
            ],
            "human_solutions": [
                {
                    "id": 36931288,
                    "submission_date": 1597831250,
                    "language": "PYTH 3",
                    "username": "khushishah",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.07",
                    "memory": "17.6M",
                    "solution": 36931288,
                    "code": "for i in range(int(input())):\n    count=0\n    count2=0\n    ar=[]\n    n,m=map(int,input().split())\n    for j in range(n):\n        ar.append(input())\n    for k in range(0,n):\n        for b in range(0,m):\n            if((k+b)%2==0):\n                if(ar[k][b]=='R'):\n                    count+=5\n                else:\n                    count2+=3\n            else:\n                if(ar[k][b]=='R'):\n                    count2+=5\n                else:\n                    count+=3\n    print(min(count,count2))\n        "
                },
                {
                    "id": 36402051,
                    "submission_date": 1596953338,
                    "language": "PYTH 3",
                    "username": "enbiocrypt",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.05",
                    "memory": "17.6M",
                    "solution": 36402051,
                    "code": "def pat(pl,row):\n    dict1 = {1:5,0:3}\n    dict2 = {'R':1,'G':0}\n    k=1\n    c1=0\n    c2=0\n    for sl in pl:\n        for e in sl:\n            if dict2[e]!=k:\n                c1+=dict1[abs(k-1)]\n            else:\n                c2+=dict1[k]\n            k=abs(k-1)\n        if row%2 == 0:\n            k=abs(k-1)\n    if c1<c2:\n        return c1\n    else:\n        return c2\n\nT = int(input())\nfor i in range(T):\n    a,b = [int(x) for x in input().split()]\n    costr = []\n    for j in range(a):\n        costr.append(input())\n    print(pat(costr,b))"
                }
            ]
        },
        "CHCOINSG": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "2\r\n1\r\n8",
                    "output": "Chef\r\nChef",
                    "explanation": "Example case 1. Chef will remove the only coin from the pile and will win the game.\nExample case 2. Chef will remove all 8 coins from the pile and win the game. Chef can remove 8 coins because 8 is a prime power, as 8 = 23."
                }
            ],
            "problem_statement": "Read problems statements in Mandarin Chinese, Russian and Vietnamese as well.\nChef is playing a game with his friend Misha. They have a pile containg N coins. Players take alternate turns, removing some coins from the pile. On each turn, a player can remove either one coin or coins equal to some prime power (i.e. px coins, where p - prime number and x - positive integer). Game ends when the pile becomes empty. The player who can not make a move in his turn loses.\n\nChef plays first. Your task is to find out who will win the game, provided that both of the player play optimally.\nInput\n\nThe first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows.\nThe only line of each test case contains one integer N.\n\nOutput\n\nFor each test case, output a single line containing one word - the name of the winner of the game. Print \"Chef\" (without quotes) if Chef wins the game, print \"Misha\" (without quotes) otherwise. \n\nConstraints\n\n1 \u2264 T \u2264 1000\n1 \u2264 N \u2264 109\n\nSubtasks\nSubtask #1 (20 points): \n\n1 \u2264 N \u2264 10\n\nSubtask #2 (30 points): \n\n1 \u2264 N \u2264 104\n\nSubtask #3 (50 points): No additional constraints.",
            "input_format": "",
            "output_format": "",
            "problem_name": "Chef and Coins Game",
            "user_tags": [
                "Game Theory",
                "Patterns"
            ],
            "computed_tags": [
                "Algorithms",
                "Observation"
            ],
            "problem_code_id": "CHCOINSG",
            "difficulty_level": "1442",
            "ai_solutions": [
                "T = int(input())\nfor _ in range(T):\n    N = int(input())\n    if N % 6 == 0:\n        print(\"Misha\")\n    else:\n        print(\"Chef\")",
                "def game_winner(T, test_cases):\n    for i in range(T):\n        if test_cases[i] % 6 == 0:\n            print(\"Misha\")\n        else:\n            print(\"Chef\")\n\nT = int(input())\ntest_cases = []\nfor _ in range(T):\n    test_cases.append(int(input()))\ngame_winner(T, test_cases)"
            ],
            "human_solutions": [
                {
                    "id": 28990055,
                    "submission_date": 1578998960,
                    "language": "PYTH 3",
                    "username": "niteshk2",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.02",
                    "memory": "17.6M",
                    "solution": 28990055,
                    "code": "a=int(input())\nimport math\nwhile(a>0):\n    n=int(input())\n    \n    if(n%6==0):\n        print(\"Misha\")\n    else:\n        print(\"Chef\")\n    \n    a=a-1\n            \n            \n                    \n            "
                },
                {
                    "id": 28437057,
                    "submission_date": 1576999550,
                    "language": "PYTH 3",
                    "username": "sonushahuji4",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.02",
                    "memory": "17.6M",
                    "solution": 28437057,
                    "code": "for _ in range(int(input())):\r\n    n = int(input())\r\n    if n%6 == 0:\r\n        print(\"Misha\")\r\n    else:\r\n        print(\"Chef\")"
                }
            ]
        },
        "SLAB": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "2\r\n600000\r\n250000",
                    "output": "577500\r\n250000",
                    "explanation": "Example case 1: We know that the total income is Rs. $6$ lakh ($1$ lakh rupees = $10^5$ rupees). The total tax for each slab is calculated as follows:\n- Up to $2.5$ lakh, the tax is Rs. $0$, since the tax rate is $0$ percent.\n- From above Rs. $2.5$ lakh to Rs. $5$ lakh, the tax rate is $5$ percent. Therefore, this tax is $0.05 \\cdot (500,000-250,000)$, which is Rs. $12,500$.\n- From above Rs. $5$ lakh to Rs. $6$ lakh, the tax rate is $10$ percent. Therefore, this tax is $0.10 \\cdot (600,000-500,000)$, which is Rs. $10,000$.\n- Summing them up, we get that the total tax on Chef's whole income is Rs. $22,500$. Since the net income is the total income minus the tax reduction, it is Rs. $600,000$ minus Rs. $22,500$, which is Rs. $577,500$.\nExample case 2: For income up to Rs. $2.5$ lakh, we have no tax, so the net income is the same as the total income: Rs. $2.5$ lakh."
                }
            ],
            "problem_statement": "Read problems statements in Hindi, Mandarin Chinese, Russian, Vietnamese, and Bengali as well.\nIn India, every individual is charged with income tax on the total income each year. This tax is applied to specific ranges of income, which are called income tax slabs. The slabs of income tax keep changing from year to year. This fiscal year (2020-21), the tax slabs and their respective tax rates are as follows:\n\n\nTotal income (in rupees)\nTax rate\n\n\nup to Rs. 250,000\n0%\n\n\nfrom Rs. 250,001 to Rs. 500,000\n5%\n\n\nfrom Rs. 500,001 to Rs. 750,000\n10%\n\n\nfrom Rs. 750,001 to Rs. 1,000,000\n15%\n\n\nfrom Rs. 1,000,001 to Rs. 1,250,000\n20%\n\n\nfrom Rs. 1,250,001 to Rs. 1,500,000\n25%\n\n\nabove Rs. 1,500,000\n30%\n\n\nSee the sample explanation for details on how the income tax is calculated.\nYou are given Chef's total income: $N$ rupees (Rs.). Find his net income. The net income is calculated by subtracting the total tax (also called tax reduction) from the total income. Note that you do not need to worry about any other kind of tax reductions, only the one described above.\nInput\n\nThe first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\nThe first and only line of each test case contains a single integer $N$.\n\nOutput\nFor each test case, print a single line containing one integer \u2014 Chef's net income.\nConstraints\n\n$1 \\le T \\le 10^3$\n$0 \\le N \\le 10^7$\n$N$ is a multiple of $100$",
            "input_format": "",
            "output_format": "",
            "problem_name": "Tax Slabs",
            "user_tags": [
                "Implementation"
            ],
            "computed_tags": [
                "Algorithms"
            ],
            "problem_code_id": "SLAB",
            "difficulty_level": "1406",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 1027900758,
                    "submission_date": 1698754238,
                    "language": "PYTH 3",
                    "username": "udhayashankar4",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.02",
                    "memory": "8.6M",
                    "solution": 1027900758,
                    "code": "for t in range(int(input())):\r\n    n=int(input())\r\n    temp=250000\r\n    tax=0\r\n    p=0.00\r\n    while p<0.30 and n-temp>=0:\r\n        tax+=250000*p\r\n        temp+=250000\r\n        p+=0.05\r\n    tax+=(n-temp+250000)*p\r\n    print(int(n-tax))\r\n        "
                },
                {
                    "id": 1027420337,
                    "submission_date": 1698408600,
                    "language": "PYTH 3",
                    "username": "ridham_patel",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.02",
                    "memory": "8.5M",
                    "solution": 1027420337,
                    "code": "T= int(input())\r\nfor i in range(T):\r\n    N = int(input())\r\n    a1 = 250000\r\n    a2 = 250000*0.95\r\n    a3 = 250000*0.9\r\n    a4 = 250000*0.85\r\n    a5 = 250000*0.8\r\n    a6 = 250000*0.75\r\n    \r\n    if N<=250000:\r\n        print(N)\r\n    elif 250000<N<= 500000:\r\n        print(int(0.95*(N-250000) + a1))\r\n    elif 500000< N<=750000:\r\n        print(int(0.9*(N-500000) + a2+a1))\r\n    elif 750000<N<=1000000:\r\n        print(int(0.85*(N-750000)+a3+a2+a1))\r\n    elif 1000000<N<=1250000:\r\n        print(int(0.8*(N-1000000)+a4+a3+a2+a1))\r\n    elif 1250000<N<=1500000:\r\n        print(int(0.75*(N-1250000)+a5+a4+a3+a2+a1))\r\n    else: print(int(0.7*(N-1500000)+a6+a5+a4+a3+a2+a1))"
                }
            ]
        },
        "MTYFRI": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "2\n6 0\n1 1 1 1 1 1\n5 1\n2 4 6 3 4",
                    "output": "NO\nYES",
                    "explanation": "Example case 1: At the end of the game, both Motu and Tomu will have scores $1+1+1 = 3$. Tomu is unable to win that game, so the output is \"NO\".\nExample case 2: If no swaps were performed, Motu's score would be $2+6+4 = 12$ and Tomu's score would be $4+3 = 7$. However, Tomu can swap the elements $A_2 = 6$ and $A_3 = 3$, which makes Motu's score at the end of the game equal to $2+3+4 = 9$ and Tomu's score equal to $4+6 = 10$. Tomu managed to score higher than Motu, so the output is \"YES\"."
                }
            ],
            "problem_statement": "Read problems statements in Mandarin chinese, Russian and Vietnamese as well.\nMotu and Tomu are very good friends who are always looking for new games to play against each other and ways to win these games. One day, they decided to play a new type of game with the following rules:\n- The game is played on a sequence $A_0, A_1, \\dots, A_{N-1}$.\n- The players alternate turns; Motu plays first, since he's earlier in lexicographical order.\n- Each player has a score. The initial scores of both players are $0$.\n- On his turn, the current player has to pick the element of $A$ with the lowest index, add its value to his score and delete that element from the sequence $A$.\n- At the end of the game (when $A$ is empty), Tomu wins if he has strictly greater score than Motu. Otherwise, Motu wins the game.\nIn other words, Motu starts by selecting $A_0$, adding it to his score and then deleting it; then, Tomu selects $A_1$, adds its value to his score and deletes it, and so on.\nMotu and Tomu already chose a sequence $A$ for this game. However, since Tomu plays second, he is given a different advantage: before the game, he is allowed to perform at most $K$ swaps in $A$; afterwards, the two friends are going to play the game on this modified sequence.\nNow, Tomu wants you to determine if it is possible to perform up to $K$ swaps in such a way that he can win this game.\nInput\n\nThe first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\nThe first line of each test case contains two space-separated integers $N$ and $K$ denoting the number of elements in the sequence and the maximum number of swaps Tomu can perform.\nThe second line contains $N$ space-separated integers $A_0, A_1, \\dots, A_{N-1}$.\n\nOutput\nFor each test case, print a single line containing the string \"YES\" if Tomu can win the game or \"NO\" otherwise (without quotes).\nConstraints\n\n$1 \\le T \\le 100$\n$1 \\le N \\le 10,000$\n$0 \\le K \\le 10,000$\n$1 \\le A_i \\le 10,000$ for each valid $i$\n\nSubtasks\nSubtask #1 (20 points): $1 \\le N \\le 100$\nSubtask #2 (80 points): original constraints",
            "input_format": "",
            "output_format": "",
            "problem_name": "Mighty Friend",
            "user_tags": [
                "Maps"
            ],
            "computed_tags": [
                "Data Structures"
            ],
            "problem_code_id": "MTYFRI",
            "difficulty_level": "1406",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 59804770,
                    "submission_date": 1646574726,
                    "language": "PYTH 3",
                    "username": "alekhya2202",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.20",
                    "memory": "10.9M",
                    "solution": 59804770,
                    "code": "tc = int(input())\n\nfor _ in range(tc):\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    \n    motu = [a[0]]\n    tomu = []\n    \n    for i in range(1, len(a)):\n        if i % 2 == 0:\n            motu.append(a[i])\n        else:\n            tomu.append(a[i])\n    \n    if sum(tomu) > sum(motu):\n        print(\"YES\")\n        continue\n    \n    else:\n        motu.sort(reverse = True)\n        tomu.sort()\n        \n        for i in range(len(tomu)):\n            if motu[i] > tomu[i] and k:\n                motu[i], tomu[i] = tomu[i], motu[i]\n                k -= 1\n            if k == 0:\n                break\n            \n        if sum(motu) < sum(tomu):\n            print(\"YES\")\n        else:\n            print(\"NO\")"
                },
                {
                    "id": 59615774,
                    "submission_date": 1646402630,
                    "language": "PYTH 3",
                    "username": "koppu_alekhya",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "2.60",
                    "memory": "11M",
                    "solution": 59615774,
                    "code": "try:\n    for i in range(int(input())):\n        n,k=map(int,input().split())\n        l=list(map(int,input().split()))\n        m_list=[]\n        t_list=[]\n        for j in range(0,len(l)):\n            if(j%2==0):\n                m_list.append(l[j])\n            else:\n                t_list.append(l[j])\n        for k in range(k):\n            max_m=max(m_list)\n            min_t=min(t_list)\n            max_index=m_list.index(max_m)\n            min_index=t_list.index(min_t)\n            t_list.append(max_m)\n            m_list.append(min_t)\n            m_list.pop(max_index)\n            t_list.pop(min_index)\n    \n        if(sum(t_list)>sum(m_list)):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n        \n        \n        \n        \n        \nexcept:\n    pass"
                }
            ]
        },
        "CHEFPDIG": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "4\r\n65\r\n566\r\n11\r\n1623455078",
                    "output": "A\r\nAB\r\n\r\nACDFGHIJKLNPQRSTUVW",
                    "explanation": "Example case 1. Chef can pick digits 6 and 5 and create integers 56 and 65. The integer 65 corresponds to 'A'.\nExample case 2. Chef can pick digits 6 and 5 and create 'A' as it equals 65. He can pick 6 and 6 (they are picked from position 2 and position 3, respectively) to create 'B' too. Hence answer is \"AB\".\nExample case 3. It's not possible to create any character from 'A' to 'Z'. Hence, we just print a new line."
                }
            ],
            "problem_statement": "Read problems statements in mandarin chinese, russian and vietnamese as well.\nChef likes to play with big numbers. Today, he has a big positive integer N. He can select any two digits from this number (the digits can be same but their positions should be different) and orders them in any one of the two possible ways. For each of these ways, he creates a two digit number from it (might contain leading zeros). Then, he will pick a character corresponding to the ASCII value equal to this number, i.e. the number 65 corresponds to 'A', 66 to 'B' and so on till 90 for 'Z'. Chef is only interested in finding which of the characters in the range 'A' to 'Z' can possibly be picked this way. \nInput\nThe first line of the input contains an integer T denoting the number of test cases.\nThe first line of the input contains an integer N. \nOutput\nFor each test case, output a string containing characters Chef can pick in sorted order If the resulting size of string is zero, you should output a new line.\n\nConstraints\n\n1 \u2264 T \u2264 10\n1 \u2264 N \u2264 10100000\n\nSubtasks\n\nSubtask #1 (40 points) N \u2264 1010\nSubtask #2 (60 points) Original Constraints",
            "input_format": "",
            "output_format": "",
            "problem_name": "Chef and Pick Digit",
            "user_tags": [
                "String",
                "Constructive"
            ],
            "computed_tags": [
                "Data Structures",
                "Algorithms"
            ],
            "problem_code_id": "CHEFPDIG",
            "difficulty_level": "1460",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 44929109,
                    "submission_date": 1618160967,
                    "language": "PYTH 3",
                    "username": "jpdotcom",
                    "user_rating_star": 5,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.20",
                    "memory": "17.6M",
                    "solution": 44929109,
                    "code": "import sys\nimport math\n\ndef main(arr):\n    \n    freq={}\n    for e in arr:\n        s=int(e)\n        \n        if s not in freq:\n            freq[s]=0\n        freq[s]+=1 \n   \n    ans=[]\n    for i in range(65,91):\n        \n        s=str(i)\n        \n        if int(s[0]) in freq:\n            freq[int(s[0])]-=1 \n            if int(s[1]) in freq and freq[int(s[1])]>0:\n                ans.append(chr(i+32).upper())\n            freq[int(s[0])]+=1 \n    ans=\"\".join(ans)\n    return ans\n\nt=int(input())\n\nfor i in range(t):\n    n=input()\n    print(main(n))\n        "
                },
                {
                    "id": 37029540,
                    "submission_date": 1597956695,
                    "language": "PYTH 3",
                    "username": "adi3100",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.63",
                    "memory": "78.6M",
                    "solution": 37029540,
                    "code": "import numpy as np\nfor t in range(int(input())):\n    n = list(input())\n    arr = [int(x) for x in n]\n    num = []\n    if 6 in arr:\n        for i in arr:\n            if i>=5:\n                num.append(6*10 + i)\n    if 66 in num:\n        num.remove(66)\n    if 7 in arr:\n        for i in arr:\n            num.append(7*10 + i)\n    if 77 in num:\n        num.remove(77)\n    if 8 in arr:\n        for i in arr:\n            num.append(8*10 + i)\n    if 88 in num:\n        num.remove(88)\n    if 9 in arr:\n        if 0 in arr:\n            num.append(90)\n    num = np.array(num)\n    np.sort(num)\n    ch = ''\n    for i in np.unique(num):\n        ch += chr(i)\n    \n    print(ch)\n"
                }
            ]
        },
        "CHEFADV": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "5\r\n2 2 1 2\r\n11 10 5 9\r\n11 11 5 9\r\n12 11 5 9\r\n1 2 1 100",
                    "output": "Chefirnemo\r\nChefirnemo\r\nPofik\r\nChefirnemo\r\nPofik",
                    "explanation": "Example case 2: We add $Y=9$ once to the power to get power $10$. We add $X=5$ twice to the knowledge to get knowledge $11$.\nExample case 3: We can see that it is impossible to reach power $M=11$ no matter which or how many operations we do. Note that the ShareChat operation will increase both knowledge and power by $1$, and hence it will still be impossible to attain the given values of knowledge and power at the same time.\nExample case 4: We can reach knowledge $11$ and power $10$ like in example case 2, the only difference is that we also use the ShareChat operation to increase both by $1$."
                }
            ],
            "problem_statement": "Read problems statements Hindi ,Bengali , Mandarin chinese , Russian and Vietnamese as well.\nMysterious Chefland... Recently, Chef realised that Discuss, the educational system of Chefland, is out of date. Therefore, he is trying to find ways to update the infrastructure in the country. One possible way is to move all materials from Discuss to Discourse.\nChef will have access to Discourse if his knowledge and power become exactly equal to $N$ and $M$ respectively. Initially, he has power $1$ and knowledge $1$.\nChef can perform actions of the following types to improve his skills:\n- solve a problem \u2014 increase his knowledge by $X$\n- do a push-up \u2014 increase his power by $Y$\n- install ShareChat to keep in touch with friends \u2014 increase both knowledge and power by $1$\nChef can only install ShareChat at most once. The remaining actions may be performed any number of times and the actions may be performed in any order.\nHelp Chef find out whether it is possible to move from Discuss to Discourse.\nInput\n\nThe first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\nThe first and only line of each test case contains four space-separated integers $N$, $M$, $X$ and $Y$.\n\nOutput\nFor each test case, print a single line containing the string \"Chefirnemo\" if it is possible to reach the required knowledge and power or \"Pofik\" if it is impossible.\nConstraints\n\n$1 \\le T \\le 1,000$\n$1 \\le N, M, X, Y \\le 10^9$\n\nSubtasks\nSubtask #1 (30 points): $1 \\le N, M, X, Y \\le 100$\nSubtask #2 (70 points): original constraints",
            "input_format": "",
            "output_format": "",
            "problem_name": "Chef and Adventures",
            "user_tags": [
                "Divisibility",
                "Linear Algebra",
                "Arithmetic"
            ],
            "computed_tags": [
                "Mathematics",
                "Modular Arithmetic",
                "Algebra",
                "Basic Maths"
            ],
            "problem_code_id": "CHEFADV",
            "difficulty_level": "1462",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 30865706,
                    "submission_date": 1585491537,
                    "language": "PYTH 3",
                    "username": "munch_01",
                    "user_rating_star": 5,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.01",
                    "memory": "17.6M",
                    "solution": 30865706,
                    "code": "from collections import *\r\nimport sys\r\ninput=sys.stdin.readline\r\nt=int(input())\r\nwhile(t):\r\n    t-=1\r\n    n,m,x,y=map(int,input().split())\r\n    n-=1\r\n    m-=1\r\n    if((n%x<=1 and m%y<=1 and n%x==m%y) or (n==m==0 or n==m==1) or((n-1)%x==(m-1)%y and (n-1)%x==0) and n-1>=0 and m-1>=0):\r\n        print(\"Chefirnemo\")\r\n    else:\r\n        print(\"Pofik\")\r\n    \r\n    \r\n"
                },
                {
                    "id": 29027435,
                    "submission_date": 1579275509,
                    "language": "PYTH 3",
                    "username": "bharath918",
                    "user_rating_star": 3,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.02",
                    "memory": "17.6M",
                    "solution": 29027435,
                    "code": "for _ in range(int(input())):\n    \n    n,m,x,y = map( int, input().split() )\n    \n    n= n-1\n    m= m-1\n    \n    flag = 0\n    \n    if n%x == 0 and flag == 0:\n        if m%y == 0 and flag == 0:\n            print(\"Chefirnemo\")\n            flag = 1\n            \n    if n>0 and m>0:\n        if (n-1)%x == 0 and (m-1)%y == 0 and flag == 0 :\n            print(\"Chefirnemo\")\n            flag = 1\n        \n    if flag == 0:\n        print(\"Pofik\")\n        \n        "
                }
            ]
        },
        "ANUDTC": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "2\n4\n7",
                    "output": "y y y\nn y y",
                    "explanation": "Example case 1.\nIs it possible to make N equal pieces?\nYes, you can cut 4 pieces each with 90 degrees angle.\nIs it possible to make N pieces?\nYes, you can cut 4 pieces each with 90 degrees angle.\nIs it possible to make N pieces, such that no two of them are equal?\nYes, you can cut 4 pieces with angles 88, 89, 91, 92."
                }
            ],
            "problem_statement": "Read problems statements in Mandarin Chinese and Russian as well.\nProblem description\nChef loves circular cakes. He divides them into smaller pieces and sells them. You are to help him in this work.\nToday Chef has cooked the brand new circular cake. To split the cake Chef can make several (possibly, zero) cuts. Each cut should be a straight line going from the center of the cake to its border. Also, the angle between any two cuts should have positive integer value (Chef measure all the angles in degrees). Chef consider two pieces of cake equal if the appropriate angles are equal.\nThe picture contains two distinct pieces, and two cuts. Red part on the image shows one piece. The appropriate angle is AOB.\nChef gives to you an integer N, denoting the number of pieces Chef wants to make. You need to answer the following questions:\n\n\nIs it possible to make exactly N equal pieces from the whole cake?\nIs it possible to make exactly N pieces from the whole cake?\nIs it possible to make exactly N pieces from the whole cake, in such a way that no two of them are equal?\n\nInput\nFirst line contains a single integer T denoting the number of test cases. Each of the following T lines contain a single integer N denoting the number of pieces Chef wants to make.\nOutput\nFor each test case, output one line containing 3 space separated characters.\nAbove, we defined the 3 questions that Chef will ask. Output 'y' for yes or 'n' for no (quotes for clarity) for each of those questions.\nAnswers for 3 questions (in the order above) must be space separated on the same line.\nConstraints\n1 \u2264 T \u2264 10000\n1 \u2264 N \u2264 10000",
            "input_format": "",
            "output_format": "",
            "problem_name": "Divide the Cake",
            "user_tags": [
                "Geometry"
            ],
            "computed_tags": [
                "Mathematics"
            ],
            "problem_code_id": "ANUDTC",
            "difficulty_level": "1426",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 34893677,
                    "submission_date": 1593547699,
                    "language": "PYTH 3",
                    "username": "rahul6035656",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.08",
                    "memory": "17.6M",
                    "solution": 34893677,
                    "code": "for _ in range(int(input())):\n    n = int(input());\n    q1=q2=q3=0;\n    if 360%n==0:\n        print('y', end=\" \");\n    else:\n        print('n', end=\" \");\n    if n<=360:\n        print('y', end=\" \");\n    else:\n        print('n', end=\" \");\n    if n*(n+1)//2<=360:\n        print('y', end=\" \");\n    else:\n        print('n', end=\" \");\n    print();"
                },
                {
                    "id": 34864695,
                    "submission_date": 1593424958,
                    "language": "PYTH 3",
                    "username": "musk_123",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.09",
                    "memory": "17.6M",
                    "solution": 34864695,
                    "code": "\nt = int(input())\n\nfor i in range(t):\n    n = int(input())\n    \n    if 360%n == 0:\n        print(\"y\",end=' ')\n    else:\n        print(\"n\",end=' ')\n    \n    if n>360:\n        print(\"n\",end=' ')\n    else:\n        print(\"y\",end=' ')\n    \n    if (n*(n+1))/2 <= 360:\n        print(\"y\",end=' ')\n    else:\n        print(\"n\",end=' ')\n        \n    print('')"
                }
            ]
        },
        "RRSTONE": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "4 1\n5 -1 7 0",
                    "output": "2 8 0 7",
                    "explanation": ""
                }
            ],
            "problem_statement": "Read problems statements in Mandarin Chinese  and Russian.\nRoman has no idea, why this problem is called Stone. He also has no idea on how to solve the followong problem: given array of N integers A and a number K. During a turn the maximal value over all Ai is chosen, let's call it MAX. Then Ai = \nMAX - Ai is done for every 1 . Help Roman to find out how will the array look like after K turns.\n\nInput\nThe numbers N and K are given in the first line of an input. Then N integers are given in the second line which denote the array A. \nOutput\nOutput N numbers on a single line. It should be the array A after K turns.\nConstraints\n\n\n1 N 105\n0 K 109\nAi does not exceed 2 * 109 by it's absolute value.",
            "input_format": "",
            "output_format": "",
            "problem_name": "Stone",
            "user_tags": [
                "1D Arrays",
                "Arithmetic",
                "ad-hoc"
            ],
            "computed_tags": [
                "Data Structures",
                "Arrays",
                "Mathematics",
                "Basic Maths",
                "Algorithms",
                "Constructive"
            ],
            "problem_code_id": "RRSTONE",
            "difficulty_level": "1489",
            "ai_solutions": [
                "def solve(n, k, a):\n    max_val = max(a)\n    if k % 2 == 1:\n        return [max_val - i for i in a]\n    else:\n        min_val = min(a)\n        return [i - min_val for i in a]\n\nn, k = map(int, input().split())\na = list(map(int, input().split()))\nresult = solve(n, k, a)\nprint(' '.join(map(str, result)))",
                "def solve(n, k, a):\n    max_val = max(a)\n    min_val = min(a)\n    for i in range(k):\n        if i % 2 == 0:\n            a = [max_val - i for i in a]\n        else:\n            a = [i - min_val for i in a]\n    return a\n\nn, k = map(int, input().split())\na = list(map(int, input().split()))\nresult = solve(n, k, a)\nprint(' '.join(map(str, result)))"
            ],
            "human_solutions": [
                {
                    "id": 30615948,
                    "submission_date": 1584807838,
                    "language": "PYTH 3",
                    "username": "didibhaiya",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.13",
                    "memory": "19.9M",
                    "solution": 30615948,
                    "code": "n,k = map(int,input().split())\nlist1 = list(map(int,input().split()))\nmaxx = max(list1)\nif k==0:\n    pass\nelif k!=0 and k%2!=0:\n    for i in range(n):\n        list1[i]=maxx-list1[i]\nelse:\n    for i in range(n):\n        list1[i]= maxx-list1[i]\n    maxx2 = max(list1)\n    for i in range(n):\n        list1[i]=maxx2-list1[i]\nfor val in list1:\n    print(val,end=\" \")\n    \n"
                },
                {
                    "id": 30010360,
                    "submission_date": 1583157958,
                    "language": "PYTH 3",
                    "username": "veeru_uppin",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.13",
                    "memory": "19.9M",
                    "solution": 30010360,
                    "code": "[n,k]=list(map(int,input().split()))\r\nl=list(map(int,input().split()))\r\nif k==0:\r\n    for i in l:\r\n        print(i,end=\" \")\r\nelif k%2==0:\r\n    for i in range(0,2):\r\n        m=max(l)\r\n        for i in range(len(l)):\r\n            l[i]=m-l[i] \r\n    for i in l:\r\n        print(i,end=\" \")\r\nelse:\r\n     m=max(l)\r\n     for i in range(len(l)):\r\n            l[i]=m-l[i] \r\n     for i in l:\r\n        print(i,end=\" \")"
                }
            ]
        },
        "STRCH": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "2\n3\nabb b\n6\nabcabc c",
                    "output": "5\n15",
                    "explanation": "Example case 1: The string \"abb\" has six substrings: \"a\", \"b\", \"b\", \"ab\", \"bb\", \"abb\". The substrings that contain 'b' are \"b\", \"b\", \"ab\", \"bb\", \"abb\"."
                }
            ],
            "problem_statement": "Read problem statements in Hindi, Bengali, Mandarin Chinese, Russian, and Vietnamese as well.\nShlok and Sachin are good friends. Shlok wanted to test Sachin, so he wrote down a string $S$ with length $N$ and one character $X$. He wants Sachin to find the number of different substrings of $S$ which contain the character $X$ at least once. Sachin is busy with his girlfriend, so he needs you to find the answer.\nTwo substrings of $S$ are considered different if their positions in $S$ are different.\nInput\n\nThe first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\nThe first line of each test case contains a single integer $N$. \nThe second line contains a string $S$ with length $N$, followed by a space and a character $X$.\n\nOutput\nFor each test case, print a single line containing one integer \u2014 the number of substrings of $S$ that contain $X$.\nConstraints\n\n$1 \\le T \\le 1,000$\n$1 \\le N \\le 10^6$\n$S$ contains only lowercase English letters\n$X$ is a lowercase English letter\nthe sum of $N$ over all test cases does not exceed $10^6$\n\nSubtasks\nSubtask #1 (30 points): the sum of $N$ over all test cases does not exceed $10^3$\nSubtask #2 (70 points): original constraints",
            "input_format": "",
            "output_format": "",
            "problem_name": "Friend or Girlfriend",
            "user_tags": [
                "april19",
                "combinatorics",
                "jnarutoj",
                "simple"
            ],
            "computed_tags": [],
            "problem_code_id": "STRCH",
            "difficulty_level": "1486",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 31947472,
                    "submission_date": 1587054388,
                    "language": "PYTH 3",
                    "username": "ujjwald997",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.23",
                    "memory": "17.9M",
                    "solution": 31947472,
                    "code": "# for _ in range(int(input())):\r\n#     n=int(input())\r\n#     s,k=input().split()\r\n#     c=0\r\n#     lst=[]\r\n#     for i in range(n):\r\n#         if(lst[i]==k):\r\n#             c+=(i+1)\r\n#             lst.append(i+1)\r\n#         elif lst:\r\n#             c+=lst[-1]\r\n#     print(c)\r\n    \r\nfor _ in range(int(input())):\r\n    n=int(input())\r\n    s,x=input().split()\r\n    count=0\r\n    t=[]\r\n    for i in range(n):\r\n        if s[i]==x:\r\n            count+=i+1\r\n            t.append(i+1)\r\n        elif t:\r\n            count+=t[-1]\r\n    print(count)"
                },
                {
                    "id": 31836316,
                    "submission_date": 1586768695,
                    "language": "PYTH 3",
                    "username": "shardul_rane",
                    "user_rating_star": 3,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.04",
                    "memory": "18M",
                    "solution": 31836316,
                    "code": "op=[]\ndef sumn(n): \n    return (n*(n+1))//2\n\nt=int(input())\nwhile t>0:\n    n=int(input())\n    mainsum=sumn(n)\n    inpt=[str(x) for x in input().split()]\n    miss=inpt[0].split(inpt[1])\n    summiss=0\n    for i in range(0,len(miss)):\n        summiss+=sumn(len(miss[i]))\n    \n    print(mainsum-summiss)\n    t-=1"
                }
            ]
        },
        "RRSUM": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "3 5\n6\n2\n9\n7\n5",
                    "output": "2\n0\n1\n3\n1",
                    "explanation": ""
                }
            ],
            "problem_statement": "Read problems statements in Mandarin Chinese and Russian as well.\n\u00a0\nAndrii is good in Math, but not in Programming. He is asking you to solve following problem: Given an integer number N and two sets of integer A and B. Let set A contain all numbers from 1 to N and set B contain all numbers from N + 1 to 2N. Multiset C contains all sums a + b such that a belongs to A and b belongs to B. Note that multiset may contain several elements with the same values. For example, if N equals to three, then A = {1, 2, 3}, B = {4, 5, 6} and C = {5, 6, 6, 7, 7, 7, 8, 8, 9}. Andrii has M queries about multiset C. Every query is defined by a single integer q. Andrii wants to know the number of times q is contained in C. For example, number 6 is contained two times, 1 is not contained in C at all. \nPlease, help Andrii to answer all the queries.\n\u00a0\nInput\n\nThe first line of the input contains two integers N and M. Each of the next M line contains one integer q, the query asked by Andrii.\n\u00a0\nOutput\nOutput the answer for each query in separate lines as in example.\n\u00a0\nConstraints\n1 \u2264 N \u2264 109\n1 \u2264 M \u2264 105\n1 \u2264 q \u2264 3N",
            "input_format": "",
            "output_format": "",
            "problem_name": "Sum Queries",
            "user_tags": [
                "Arithmetic",
                "Online Queries"
            ],
            "computed_tags": [
                "Mathematics",
                "Basic Maths",
                "Algorithms",
                "Queries"
            ],
            "problem_code_id": "RRSUM",
            "difficulty_level": "1438",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 32968904,
                    "submission_date": 1589123875,
                    "language": "PYTH 3",
                    "username": "niladriclw",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.53",
                    "memory": "17.6M",
                    "solution": 32968904,
                    "code": "n,m=map(int, input().split())\nfor i in range(m):\n    q=int(input())\n    \n    if q<n+2 or q>3*n:\n        print(0)\n    elif q<2*n+1:\n        print(q-n-1)\n    else:\n        print(3*n-q+1)"
                },
                {
                    "id": 32838379,
                    "submission_date": 1588871650,
                    "language": "PYTH 3",
                    "username": "chandu519",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.52",
                    "memory": "17.6M",
                    "solution": 32838379,
                    "code": "\nn,m = map(int,input().split())\na,b = 2+n, 3*n\nt = (a+b) // 2\nfor _ in range(m):\n    r = 0\n    q = int(input())\n    if q <= n:\n        print(0)\n    else:\n        r = abs( t - q )\n        print(n-r)\n"
                }
            ]
        },
        "WDTBAM": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "3\n5\nABCDE\nEBCDA\n0 10 20 30 40 50\n4\nCHEF\nQUIZ\n4 3 2 1 0\n8\nABBABAAB\nABABABAB\n100 100 100 100 100 100 100 100 100",
                    "output": "30\n4\n100",
                    "explanation": "Example case 1. If questions will be placed in order: 2nd (Chef's answer is B, which is correct), 3rd (Chef's answer is C, and it is correct as well), 4th (Chef's answer is D, and he is right), 5th (Chef's answer is A but correct answer is E and the game is over), 1st, Chef will correctly answer 3 questions, and therefore win 30 dollars.\nExample case 2. Chef's answers for all questions are incorrect, so his winnings are W0 dollars.\nExample case 3. Since all Wi are equal to 100 dollars, Chef will win this sum in any possible case."
                }
            ],
            "problem_statement": "Read problems statements in Mandarin Chinese  and Russian \nChef is going to participate in a new quiz show: \"Who dares to be a millionaire?\"\nAccording to the rules of the game, contestants must answer N questions. The quiz being famous for its difficulty, each question has 26 candidate answers, but only one of which is correct. Answers are denoted by capital Latin letters from A to Z. Chef knows all the questions that can be asked, and for each of them he knows the answer candidate he will choose (some of them can be incorrect). For each question, we'll tell you Chef's answer to it.\nThe game goes on as follows. First, all the questions are shuffled randomly. Then, a contestant is asked these questions one-by-one in the new shuffled order. If the contestant answers any question incorrectly, the game is over. Total winnings of the contestant are calculated as follows. Let X denote the number of questions answered correctly by the contestant. Depending on this value, the winnings are determined: W0 dollars is the amount won for X = 0, W1 dollars is for X = 1, and so on till X = N. Note that the game was invented by a twisted mind, and so a case where Wi \u2265 Wi + 1 for some 0 \u2264 i \u2264 N \u2212 1 is possible.\nChef is interested in finding the maximum possible winnings that he can amass.\nInput\nThe first line of input contains an integer T denoting the number of test cases. The  description of T test cases follows.\nThe first line of each test case contains a single integer N denoting the number of questions.\nNext line contains N capital Latin letters denoting the correct answers to these questions.\nNext line contains N capital Latin letters denoting answers given by Chef to these questions.\nNext line contains N + 1 space-separated integers W0, W1, ..., WN denoting the winnings for 0, 1, ..., N correct answers.\nOutput\nFor each test case, output a single line containing the value of maximum possible winnings that Chef can get.\nConstraints\n1 \u2264 T \u2264 500\n1 \u2264 N \u2264 1000\n0 \u2264 Wi \u2264 109\n\nSubtasks\nSubtask 1: (20 points)\n1 \u2264 N \u2264 8\n\nSubtask 2: (80 points)\nOriginal constraints",
            "input_format": "",
            "output_format": "",
            "problem_name": "Who dares to be a millionaire",
            "user_tags": [
                "Case work",
                "Conditional Statements",
                "ad-hoc"
            ],
            "computed_tags": [
                "Special",
                "Basic Programming Concepts",
                "Algorithms",
                "Constructive"
            ],
            "problem_code_id": "WDTBAM",
            "difficulty_level": "1497",
            "ai_solutions": [
                "T = int(input())\nfor _ in range(T):\n    N = int(input())\n    correct_answers = input()\n    chef_answers = input()\n    winnings = list(map(int, input().split()))\n    correct_count = sum([correct_answers[i] == chef_answers[i] for i in range(N)])\n    if correct_count == N:\n        print(winnings[N])\n    else:\n        print(max(winnings[:correct_count+1]))",
                "def max_winnings(T, data):\n    for t in range(T):\n        N = data[t][0]\n        correct_answers = data[t][1]\n        chef_answers = data[t][2]\n        winnings = data[t][3]\n        correct_count = sum([correct_answers[i] == chef_answers[i] for i in range(N)])\n        if correct_count == N:\n            print(winnings[N])\n        else:\n            print(max(winnings[:correct_count+1]))\n\nT = int(input())\ndata = []\nfor _ in range(T):\n    N = int(input())\n    correct_answers = input()\n    chef_answers = input()\n    winnings = list(map(int, input().split()))\n    data.append((N, correct_answers, chef_answers, winnings))\nmax_winnings(T, data)"
            ],
            "human_solutions": [
                {
                    "id": 32695295,
                    "submission_date": 1588622025,
                    "language": "PYTH 3",
                    "username": "devipriya26",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.17",
                    "memory": "17.8M",
                    "solution": 32695295,
                    "code": "for _ in range(int(input())):\n    n=int(input())\n    a=input()\n    c=input()\n    w=list(map(int,input().split()))\n    j=0\n    for i in range(n):\n        if a[i]==c[i]:\n            j+=1\n    if n==j:\n        print(w[-1])\n    else:\n        print(max(w[:j+1]))"
                },
                {
                    "id": 32647338,
                    "submission_date": 1588561351,
                    "language": "PYTH 3",
                    "username": "supriyakarra",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.20",
                    "memory": "17.8M",
                    "solution": 32647338,
                    "code": "t= int(input())\nwhile t:\n    t-=1\n    n=int(input())\n    str1=input()\n    str2=input()\n    arr=list(map(int,input().split()))\n    c_cor=0\n    for i in range(n):\n        if str1[i]==str2[i]:\n            c_cor+=1\n    if c_cor==n:\n        print(arr[-1])\n    else:\n        print(max(arr[:c_cor+1:]))"
                }
            ]
        },
        "HOTEL": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "3\n3\n1 2 3\n4 5 6\n5\n1 2 3 4 5\n2 3 4 5 6\n7\n13 6 5 8 2 10 12\n19 18 6 9 9 11 15",
                    "output": "3\n1\n3",
                    "explanation": ""
                }
            ],
            "problem_statement": "A holiday weekend is coming up,\nand Hotel Bytelandia needs to find out if it has enough rooms to accommodate all potential guests.\nA number of guests have made reservations.\nEach reservation consists of an arrival time, and a departure time.\nThe hotel management has hired you to calculate the maximum number of guests that will be at the hotel simultaneously.\nNote that if one guest arrives at the same time another leaves, they are never considered to be at the hotel simultaneously\n(see the second example).\n\nInput\nInput will begin with an integer T, the number of test cases.\nEach test case begins with an integer N, the number of guests.\nTwo lines follow, each with exactly N positive integers.\nThe i-th integer of the first line is the arrival time of the i-th guest,\nand the i-th integer of the second line is the departure time of the i-th guest\n(which will be strictly greater than the arrival time).\n\nOutput\nFor each test case, print the maximum number of guests that are simultaneously at the hotel.\nConstraints\nT\u2264100\nN\u2264100\nAll arrival/departure times will be between 1 and 1000, inclusive",
            "input_format": "",
            "output_format": "",
            "problem_name": "Hotel Bytelandia",
            "user_tags": [
                "cook14",
                "david_adm",
                "easy"
            ],
            "computed_tags": [],
            "problem_code_id": "HOTEL",
            "difficulty_level": "1405",
            "ai_solutions": [
                "T = int(input())\nfor _ in range(T):\n    N = int(input())\n    arrivals = list(map(int, input().split()))\n    departures = list(map(int, input().split()))\n    timeline = [(t, 1) for t in arrivals] + [(t, -1) for t in departures]\n    timeline.sort()\n    max_guests = 0\n    guests_in = 0\n    for _, delta in timeline:\n        guests_in += delta\n        max_guests = max(max_guests, guests_in)\n    print(max_guests)"
            ],
            "human_solutions": [
                {
                    "id": 36214806,
                    "submission_date": 1596705448,
                    "language": "PYTH 3",
                    "username": "aman_ravan02",
                    "user_rating_star": 3,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.14",
                    "memory": "78.5M",
                    "solution": 36214806,
                    "code": "try:\r\n    import numpy as np\r\n\r\n    for _ in range(int(input())):\r\n        n = int(input())\r\n        arrival = np.array(list(map(int, input().split())))\r\n        departure = np.array(list(map(int, input().split())))\r\n\r\n        arr = [0] * 1000\r\n        arr = np.array(arr)\r\n\r\n        for i in range(n):\r\n            arr[arrival[i]:departure[i]] += 1\r\n        print(max(arr))\r\nexcept EOFError:\r\n    pass"
                },
                {
                    "id": 33204093,
                    "submission_date": 1590043554,
                    "language": "PYTH 3",
                    "username": "sibu08",
                    "user_rating_star": 3,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.10",
                    "memory": "78.5M",
                    "solution": 33204093,
                    "code": "try:\n    import numpy as np\n    for _ in range(int(input())):\n        n = int(input())\n        arrival = np.array(list(map(int,input().split())))\n        departure = np.array(list(map(int,input().split())))\n        \n        arr = [0]*1000\n        arr = np.array(arr)\n        \n        for i in range(n):\n            arr[arrival[i]:departure[i]]+=1\n        \n        print(max(arr))\nexcept EOFError:\n    pass"
                }
            ]
        },
        "UNICOURS": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "2\r\n3\r\n0 1 1\r\n3\r\n0 1 2",
                    "output": "2\r\n1",
                    "explanation": "Example case 1. Both the courses 2 and 3 can have course 1 as a prerequisite. In this case, course 2 and course 3 are not prerequisites for any course. So, we have two such courses.\n\nOther possibility could be following. Course 2 has course 1 as a prerequisite, and course 3 has course 2 as a prerequisite. Thus only course 3 is the only course that is not the prerequisite of any other course.\n\n\nThus answer is 2."
                }
            ],
            "problem_statement": "Read problems statements in mandarin chinese, russian and vietnamese as well.\n\nThere are n courses in a university being offered. These courses are numbered from 1 to n in the increasing order of their difficulty. For each course, you can have some courses as prerequisites. The prerequisite courses for a course should be of lower difficulty than it. You are given an array a of size n, where ai denotes that there should be at least ai prerequisite courses for i-th course. \n\n\nThe university wants to estimate the efficiency of the allocation of prerequisites of courses by maximizing the number of courses that are not prerequisites for any other course. Find out what's the maximum such number of courses possible. It is guaranteed that ai\nInput\nThe first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows.\nThe first line of each test case contains an integer n.\nThe second line of each test case contains n space separated integers denoting array a.\nOutput\nFor each test case, output a single line containing an integer corresponding to the maximum number of possible courses which are not prerequisite for any other course.\nConstraints\n\n1 \u2264 T \u2264 10\n1 \u2264 n \u2264 105\n0 \u2264 ai\n\nSubtasks\n\nSubtask #1 (40 points) : 1 \u2264 n \u2264 100\nSubtask #2 (60 points) : original constraints",
            "input_format": "",
            "output_format": "",
            "problem_name": "Courses in an university",
            "user_tags": [
                "1D Arrays",
                "Greedy",
                "ad-hoc"
            ],
            "computed_tags": [
                "Data Structures",
                "Arrays",
                "Algorithms",
                "Constructive"
            ],
            "problem_code_id": "UNICOURS",
            "difficulty_level": "1417",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 29065613,
                    "submission_date": 1579453029,
                    "language": "PYTH 3",
                    "username": "geeky_geeks",
                    "user_rating_star": 3,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.23",
                    "memory": "18.9M",
                    "solution": 29065613,
                    "code": "for _ in range(int(input())):\n  n=int(input())\n  li=[int(x) for x in input().split()]\n  m=max(li)\n  print(n-m)"
                },
                {
                    "id": 27873632,
                    "submission_date": 1573494971,
                    "language": "PYTH 3",
                    "username": "akshay1_2",
                    "user_rating_star": 4,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.17",
                    "memory": "18.1M",
                    "solution": 27873632,
                    "code": "t=int(input())\r\nfor _ in range(t):\r\n    n=int(input())\r\n    l=list(map(int,input().split()))\r\n    print(n-max(l))\r\n            \r\n        \r\n"
                }
            ]
        },
        "PLAYFIT": {
            "constraints": "$1 \\leq T \\leq 10$\n$1 \\leq N \\leq 100000$\n$0 \\leq g_i \\leq 1000000$ (Well, Rayne's a legend! You can expect him to score so many goals!)",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "3\n6\n3 7 1 4 2 4\n5\n5 4 3 2 1\n5\n4 3 2 2 3",
                    "output": "4\nUNFIT\n1",
                    "explanation": "In the first test case, Rayne can choose the first and second game. Thus he gets a difference of 7-3=4 goals. Any other pair would give him a lower improvement.\nIn the second test case, Rayne has not been improving in any match. Thus he's declared UNFIT."
                }
            ],
            "problem_statement": "Rayne Wooney has been one of the top players for his football club for the last few years. But unfortunately, he got injured during a game a few months back and has been out of play ever since.\nHe's got proper treatment and is eager to go out and play for his team again. Before doing that, he has to prove to his fitness to the coach and manager of the team. Rayne has been playing practice matches for the past few days. He's played N practice matches in all.\nHe wants to convince the coach and the manager that he's improved over time and that his injury no longer affects his game. To increase his chances of getting back into the team, he's decided to show them stats of any 2 of his practice games. The coach and manager will look into the goals scored in both the games and see how much he's improved. If the number of goals scored in the 2nd game(the game which took place later) is greater than that in 1st, then he has a chance of getting in. Tell Rayne what is the maximum improvement in terms of goal difference that he can show to maximize his chances of getting into the team. If he hasn't improved over time, he's not fit to play. Scoring equal number of goals in 2 matches will not be considered an improvement. Also, he will be declared unfit if he doesn't have enough matches to show an improvement.\nNote: Large input data. Use faster I/O methods. Prefer scanf,printf over cin/cout.",
            "input_format": "The first line of the input contains a single integer $T$, the number of test cases.\nEach test case begins with a single integer $N$, the number of practice matches Rayne has played.\nThe next line contains $N$ integers. The $i^{th}$ integer, $g_i$, on this line represents the number of goals Rayne scored in his $i^{th}$ practice match. The matches are given in chronological order i.e. $j > i$ means match number $j$ took place after match number $i$.",
            "output_format": "For each test case output a single line containing the maximum goal difference that Rayne can show to his coach and manager. If he's not fit yet, print \"UNFIT\".",
            "problem_name": "Fit to Play",
            "user_tags": [
                "1D Arrays",
                "Dynamic Programming",
                "ad-hoc",
                "Prefix Sum"
            ],
            "computed_tags": [
                "Data Structures",
                "Arrays",
                "Algorithms",
                "Constructive",
                "Simple Algos"
            ],
            "problem_code_id": "PLAYFIT",
            "difficulty_level": "1419",
            "ai_solutions": [
                "def max_goal_diff(T, test_cases):\n    for _ in range(T):\n        N, goals = test_cases[_]\n        min_goals = goals[0]\n        max_diff = goals[1] - goals[0]\n        for i in range(1, N):\n            max_diff = max(max_diff, goals[i] - min_goals)\n            min_goals = min(min_goals, goals[i])\n        if max_diff <= 0:\n            print(\"UNFIT\")\n        else:\n            print(max_diff)\n\nT = int(input())\ntest_cases = []\nfor _ in range(T):\n    N = int(input())\n    goals = list(map(int, input().split()))\n    test_cases.append((N, goals))\nmax_goal_diff(T, test_cases)",
                "def max_goal_diff(T, test_cases):\n    for _ in range(T):\n        N, goals = test_cases[_]\n        min_goals = [0]*N\n        min_goals[0] = goals[0]\n        for i in range(1, N):\n            min_goals[i] = min(min_goals[i-1], goals[i])\n        max_diff = max([j-i for i, j in zip(min_goals, goals)])\n        if max_diff <= 0:\n            print(\"UNFIT\")\n        else:\n            print(max_diff)\n\nT = int(input())\ntest_cases = []\nfor _ in range(T):\n    N = int(input())\n    goals = list(map(int, input().split()))\n    test_cases.append((N, goals))\nmax_goal_diff(T, test_cases)"
            ],
            "human_solutions": [
                {
                    "id": 28601035,
                    "submission_date": 1577899798,
                    "language": "PYTH 3",
                    "username": "karthik0901",
                    "user_rating_star": 3,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.37",
                    "memory": "19M",
                    "solution": 28601035,
                    "code": "for _ in range(int(input())):\n        n=int(input())\n        l=list(map(int,input().split()))\n        ma=0\n        mi=l[0]\n        for i in range(1,n):\n            if l[i]-mi>ma:\n                ma=l[i]-mi\n            if l[i]<mi:\n                mi=l[i]\n                \n        if ma==0:\n            print(\"UNFIT\")\n        else:\n            print(ma)   "
                },
                {
                    "id": 28437269,
                    "submission_date": 1577000583,
                    "language": "PYTH 3",
                    "username": "ragul_2000",
                    "user_rating_star": 3,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.37",
                    "memory": "19M",
                    "solution": 28437269,
                    "code": "for _ in range(int(input())):\r\n    n=int(input())\r\n    arr=list(map(int,input().split()))\r\n    maxdiff=0\r\n    _min=arr[0]\r\n    for i in range(1,n):\r\n        if arr[i]-_min>maxdiff:\r\n            maxdiff=arr[i]-_min\r\n        if arr[i]<_min:\r\n            _min=arr[i]\r\n            \r\n    if maxdiff==0:\r\n        print(\"UNFIT\")\r\n    else:\r\n        print(maxdiff)     \r\n        \r\n             \r\n    \r\n    \r\n"
                }
            ]
        }
    },
    "2*": {
        "SMALLARR": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "3 2\n1 -2 3",
                    "output": "0.5",
                    "explanation": "Array 1 -2 3, selecting subsegment {3}, you get 1 -2 1.5, which gives $sum=0.5$"
                }
            ],
            "problem_statement": "You are given a sequence of integers $A_1,A_2,\u2026,A_N$ and a magical non-zero integer $x$\nYou have to select a subsegment of sequence A (possibly empty), and replace the elements in that subsegment after dividing them by x.\nFormally, replace any one subsegment $A_l, A_{l+1}, ..., A_r$ with $A_l/x, A_{l+1}/x, ..., A_r/x$ where $l \\leq r$\nWhat is the minimum possible sum you can obtain?\nNote: The given operation can only be performed once\nInput \nThe first line of the input contains two positive integer n denoting the size of array, and x\ndenoting the magical integer\nNext line contains $N$ space separated integers\n\nOutput\nSingle line containing one real number, denoting the minimum possible sum you can obtain. Your answer will be considered correct if its absolute or relative error does not exceed $10^{-2}$\nConstraints\n$1 \\leq n \\leq 10^3$\n$1 \\leq |x| \\leq 10^3$\n$ |A_i| \\leq 10^3$",
            "input_format": "",
            "output_format": "",
            "problem_name": "A Small Array",
            "user_tags": [
                "ad-hoc"
            ],
            "computed_tags": [
                "Algorithms",
                "Constructive"
            ],
            "problem_code_id": "SMALLARR",
            "difficulty_level": "1597",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 64297154,
                    "submission_date": 1651825996,
                    "language": "PYTH 3",
                    "username": "sanimish1511",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.09",
                    "memory": "9.4M",
                    "solution": 64297154,
                    "code": "n,k=map(int, input().split())\r\narr=list(map(int, input().split()))\r\nsum_arr=[0]*n\r\nsum_arr[0]=arr[0]\r\npartial=arr[0]\r\n\r\nfor i in range(1,n):\r\n    partial+=arr[i]\r\n    sum_arr[i]=partial\r\n    \r\nsum_arr.insert(0,0)    \r\n\r\nmax_var=sum_arr[1]-sum_arr[0]\r\n\r\nfor i in range(1,n+1):\r\n    for j in range(i):\r\n        if (max_var<=(sum_arr[i]-sum_arr[j])):\r\n            max_var=(sum_arr[i]-sum_arr[j])\r\n            \r\nprint('%0.1f' %(sum(arr)+(max_var)*((1/k)-1)))"
                },
                {
                    "id": 63209152,
                    "submission_date": 1650411624,
                    "language": "PYTH 3",
                    "username": "andy96903",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.17",
                    "memory": "9.4M",
                    "solution": 63209152,
                    "code": "N, X = map(int, input().split())\nA = list(map(int, input().split()))\nlst = []\ns = 0\npsum = A[:]\nfor i in range(1, N):\n    psum[i] += psum[i-1]\nm = -9999999\nfor i in range(0, N):\n    for j in range(i, N):\n        m = max(m, psum[j] - psum[i] + A[i])\nprint(psum[-1] - m + m / X)"
                }
            ]
        },
        "LFEB14B": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "2\n1\n1\n4\n1 2 1 2",
                    "output": "1\n3",
                    "explanation": ""
                }
            ],
            "problem_statement": "Read problems statements in Mandarin Chinese  and Russian.\nSereja have an array that consist of n integers a[1], a[2], ..., a[n]. Now Sereja want to delete some(possible none, but not all) elements from the array, such that arithmetical mean of all remaining numbers will as big as possible.\nHelp Sereja, find number of ways to delete numbers.\nInput\nFirst line contain integer T - number of testcases. T tests follow. First line of each testcase contain integer n. Next line contain n integers a[1], a[2], ..., a[n].\n\u00a0\nOutput\nFor each testcase print the answer modulo 10^9+7.\n\u00a0\nConstraints\n1 \u2264 T \u2264 10\n1 \u2264 n \u2264 10^5\n1 \u2264 a[i] \u2264 10^5\n\u00a0\nNote\nTest #0-1(25 points) n  \u2264 20\nTest #2(25 points) n  \u2264 1000\nTest #3-4(50 points) n  \u2264 100000",
            "input_format": "",
            "output_format": "",
            "problem_name": "Sereja and ASum",
            "user_tags": [
                "Basic Maths",
                "Combinatorics"
            ],
            "computed_tags": [
                "Mathematics"
            ],
            "problem_code_id": "LFEB14B",
            "difficulty_level": "1559",
            "ai_solutions": [
                "from collections import Counter\nMOD = 10**9+7\n\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    max_a = max(a)\n    c = Counter(a)\n    max_count = c[max_a]\n    ans = pow(2, max_count, MOD) - 1\n    print(ans)\n\nT = int(input())\nfor _ in range(T):\n    solve()",
                "MOD = 10**9+7\n\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    max_a = max(a)\n    max_count = a.count(max_a)\n    ans = pow(2, max_count, MOD) - 1\n    print(ans)\n\nT = int(input())\nfor _ in range(T):\n    solve()"
            ],
            "human_solutions": [
                {
                    "id": 33225457,
                    "submission_date": 1590142033,
                    "language": "PYTH 3",
                    "username": "shubhamiitbh",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.07",
                    "memory": "20M",
                    "solution": 33225457,
                    "code": "for i in range(int(input())):\n    n = int(input());a = list(map(int,input().split()))\n    print((pow(2,a.count(max(a)))-1)%(10**9 + 7))    "
                },
                {
                    "id": 26626487,
                    "submission_date": 1568658527,
                    "language": "PYTH 3",
                    "username": "yusufuc",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.08",
                    "memory": "20M",
                    "solution": 26626487,
                    "code": "for _ in range(int(input())):\r\n    n=int(input())\r\n    a=list(map(int,input().split()))\r\n    mc=a.count(max(a))\r\n    print((2**mc -1)%(10**9+7))\r\n"
                }
            ]
        },
        "NUMBERS": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "2\n5\nKouta 1\nYuka 1\nMayu 3\nLucy 2\nNana 5\n2\nLucy 2\nNana 2",
                    "output": "Lucy\nNobody wins.",
                    "explanation": ""
                }
            ],
            "problem_statement": "Read problems statements in Russian here\nLucy had recently learned the game, called Natural Numbers.\nThe rules of the game are really simple. There are N players. At the same time, every player says one natural number. Let's call the number said by the i-th player Ai. The person with the smallest unique number (that is, the smallest number that was not said by anybody else) wins. Sometimes, there is a case when there are no unique numbers at all. Then the game is obviously a draw, so nobody wins it.\nSometimes, it's hard to determine the winner, especially, when the number of players is enormous. So in this problem, your assignment will be: given the names of the players and the numbers every of them have said. Please, tell the name of the winner, or determine that nobody wins.\nInput\nThe first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows.\nThe first line of every test case consists of a single integer N - the number of players. Then, N lines will follow. Each of these N lines will consist of the player's name and the number Ai said by her, separated by a single space.\nOutput\nFor each test case, output a single line containing an answer to the corresponding test case - the name of the winner, or a string \"Nobody wins.\", if nobody wins the game.\nScoring\nSubtask 1 (17 points): T = 10000, 1 <= N <= 10, 1 <= Ai <= 10 \nSubtask 2 (19 points): T = 10000, 1 <= N <= 10, 1 <= Ai <= 2109\nSubtask 3 (30 points): T = 100, 1 <= N <= 1000, 1<= Ai <= 2109\nSubtask 4 (34 points): T = 10, 1 <= N <= 10000, 1 <= Ai <= 2*109\nYou can safely assume that in all the test cases the length of any name will not exceed five letters. All the players'  names  are unique.",
            "input_format": "",
            "output_format": "",
            "problem_name": "Lucy and the Number Game",
            "user_tags": [
                "Sorting",
                "Simple Algos"
            ],
            "computed_tags": [
                "Algorithms"
            ],
            "problem_code_id": "NUMBERS",
            "difficulty_level": "1585",
            "ai_solutions": [
                "from collections import Counter\n\ndef find_winner(T, test_cases):\n    for _ in range(T):\n        N, players = test_cases[_]\n        numbers = [player[1] for player in players]\n        counter = Counter(numbers)\n        unique_numbers = [number for number, count in counter.items() if count == 1]\n        if unique_numbers:\n            min_unique = min(unique_numbers)\n            winner = [player[0] for player in players if player[1] == min_unique][0]\n            print(winner)\n        else:\n            print(\"Nobody wins.\")\n\nT = int(input())\ntest_cases = []\nfor _ in range(T):\n    N = int(input())\n    players = []\n    for _ in range(N):\n        name, number = input().split()\n        players.append((name, int(number)))\n    test_cases.append((N, players))\n\nfind_winner(T, test_cases)",
                "def find_winner(T, test_cases):\n    for _ in range(T):\n        N, players = test_cases[_]\n        players.sort(key=lambda x: x[1])\n        winner = \"Nobody wins.\"\n        for i in range(N):\n            if (i == 0 or players[i][1] != players[i-1][1]) and (i == N-1 or players[i][1] != players[i+1][1]):\n                winner = players[i][0]\n                break\n        print(winner)\n\nT = int(input())\ntest_cases = []\nfor _ in range(T):\n    N = int(input())\n    players = []\n    for _ in range(N):\n        name, number = input().split()\n        players.append((name, int(number)))\n    test_cases.append((N, players))\n\nfind_winner(T, test_cases)"
            ],
            "human_solutions": [
                {
                    "id": 1023802018,
                    "submission_date": 1696220956,
                    "language": "PYTH 3",
                    "username": "jemi617",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.15",
                    "memory": "10.2M",
                    "solution": 1023802018,
                    "code": "def getInput():\r\n    arr = list(map(int,input().split()))\r\n    if len(arr) ==1:\r\n        return arr[0]\r\n    return arr\r\n\r\nfor tc in range(int(input())):\r\n    n = getInput()\r\n    kmap = {}\r\n    winner = \"Nobody wins.\"\r\n    winnum = 9999999999\r\n    for i in range(n):\r\n        name,num = input().split()\r\n        num = int(num)\r\n        if num not in kmap:\r\n            kmap[num] = [1,name]\r\n        else:\r\n            kmap[num] = [kmap[num][0] + 1,name]\r\n    for num in kmap:\r\n        if kmap[num][0] == 1 and num<winnum:\r\n            winnum = num\r\n            winner = kmap[num][1]\r\n    print(winner)\r\n            "
                },
                {
                    "id": 100679132,
                    "submission_date": 1689700293,
                    "language": "PYTH 3",
                    "username": "harsha_6174",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.18",
                    "memory": "11M",
                    "solution": 100679132,
                    "code": "for x in range(int(input())):\n    a=[]\n    b=[]\n    c=int(input())\n    for i in range(c):\n        d,e=map(str,input().split(' '))\n        a.append(d)\n        b.append(int(e))\n    f=set(b)\n    m=1\n    for j in range(len(f)):\n        g=min(f)\n        if b.count(g)==1:\n            k=b.index(g)\n            m=2\n            print(a[k])\n            break\n        else:\n            f.remove(g)\n    if m==1:\n        print(\"Nobody wins.\")"
                }
            ]
        },
        "GREG": {
            "constraints": "$1 \\leq n,m \\leq 10^{6}$",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "3 4\n",
                    "output": "4",
                    "explanation": ""
                }
            ],
            "problem_statement": "Recently, Greg got a grid with $n$ rows and $m$ columns. Rows are indexed from $1$ to $n$ and columns are indexed from $1$ to $m$. The cell $ ( i , j )$ is the cell of intersection of row $i$ and column $j$. Each cell has a number written on it. The number written on cell  $( i , j )$  is equal to  $(i+j)$.  \nNow, Greg wants to select some cells from the grid, such that for every pair of  selected cells ,the numbers on the cells are co-prime.  Determine the maximum number of cells that Greg can select.",
            "input_format": "A single line containing the integers $n$ and $m$ denoting number of rows and number of columns respectively.",
            "output_format": "Output a single line containing the answer.",
            "problem_name": "Greg and Grid",
            "user_tags": [
                "Observation",
                "Primes"
            ],
            "computed_tags": [
                "Mathematics",
                "Number Theory",
                "Algorithms"
            ],
            "problem_code_id": "GREG",
            "difficulty_level": "1519",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 60703937,
                    "submission_date": 1647586846,
                    "language": "PYTH 3",
                    "username": "atharv_7",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.41",
                    "memory": "88.1M",
                    "solution": 60703937,
                    "code": "def sieve(n):\n    prime = [i for i in range(n+1)]\n    prime[0]=True\n    prime[1]=True\n    p = 2\n    while (p * p <= n):\n        if (prime[p] != True):\n            for i in range(p * p, n+1, p):\n                prime[i] = True\n        p += 1\n    prime=list(set(prime))\n\n    del prime[0]\n    \n    return prime\n\nn,m=map(int,input().split())\nprint(len(sieve(n+m)))\n"
                },
                {
                    "id": 53414710,
                    "submission_date": 1635927978,
                    "language": "PYTH 3",
                    "username": "dazlersan1",
                    "user_rating_star": 5,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "1.28",
                    "memory": "23.5M",
                    "solution": 53414710,
                    "code": "n,m=map(int,input().split())\r\nmi=2\r\nma=n+m\r\nans=[1 for i in range(ma+1)]\r\n\r\nfor i in range(2,int(ma**0.5)+1):\r\n    for j in range(i+i,ma+1,i):\r\n        ans[j]=0\r\nans[0]=0\r\nans[1]=0\r\nprint(ans.count(1))\r\n    \r\n        \r\n        \r\n"
                }
            ]
        },
        "CIELNUM2": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "6\nmilk 58\nCiel's Drink 80\nThe curry 2nd edition 888888\nrice omelet 85855\nunagi 1\n   The first    and last letters can be a space    358",
                    "output": "3",
                    "explanation": "58 and 888888 and 358 are Ciel numbers.\n80 and 85855 and 1 are not Ciel numbers."
                }
            ],
            "problem_statement": "Recently, chef Ciel often hears about lucky numbers.\n\n\n\n\nEverybody knows that lucky numbers are positive integers\nwhose decimal representation contains only the lucky digits 4 and 7.\nFor example, numbers 47, 744, 4 are lucky and 5, 17, 467 are not.\n\n\n\n\nCiel decides to make Ciel numbers.\nAs you know, Ciel likes the digit 8 very much.\nAnd then, Ciel likes the digits 5 and 3.\nSo Ciel defines Ciel numbers as the positive integers k such that d(k, 8) \u2265 d(k, 5) \u2265 d(k, 3) and d(k, i) = 0 for all i = 0, 1, 2, 4, 6, 7, 9,\nwhere d(k, i) denotes the number of the digit i in the decimal representation of the integer k.\nFor example, the first few Ciel numbers are 8, 58, 85, 88, 358, 385, 538, 583, 588, 835, 853, 858, 885, 888, ....\n\n\nCiel's restaurant has N menus.\nAnd Ciel want to know how many menus have Ciel numbers as their price.\nYour task is to find it.\n\nInput\n\nThe first line contains an integer N.\nThen N lines follow.\nEach line has the name Si of the menu and its price Pi separated by a single space.\nOutput\n\nPrint the number of menus whose prices are one of Ciel numbers.\n\nConstraints\n\n1 \u2264 N \u2264 1000\n1 \u2264 |Si| \u2264 100, where |Si| denotes the length of Si\nEach letter of Si is either an alphabetical letter or a digit or a single quotation mark or a space.\n1 \u2264 Pi 6)Pi contains no leading zeros.\nNotes\n\nDifferent operating systems have different ways of representing a newline; do not assume one particular way will be used.",
            "input_format": "",
            "output_format": "",
            "problem_name": "Ciel Numbers II",
            "user_tags": [
                "cook20",
                "easy",
                "hiroto_adm"
            ],
            "computed_tags": [],
            "problem_code_id": "CIELNUM2",
            "difficulty_level": "1593",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 61239421,
                    "submission_date": 1648150400,
                    "language": "PYTH 3",
                    "username": "dominic11",
                    "user_rating_star": 3,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.03",
                    "memory": "9.1M",
                    "solution": 61239421,
                    "code": "def is_ciel(n):\r\n    n3 = 0\r\n    n5 = 0\r\n    n8 = 0\r\n    \r\n    while n>0:\r\n        k = n%10\r\n        if(k==3):\r\n            n3+=1\r\n        elif(k==5):\r\n            n5+=1\r\n        elif(k==8):\r\n            n8+=1\r\n        else:\r\n            return 0\r\n        n //= 10\r\n  \r\n    if(n3 <= n5 and n5 <= n8):\r\n        return 1\r\n    return 0\r\n\r\nif __name__ == \"__main__\":\r\n    res=0\r\n    for _ in range(int(input())):\r\n        buf=input()\r\n        length=len(buf)\r\n        st=-1\r\n        for i in range(length-1,-1,-1):\r\n            if(buf[i]==' '):\r\n                st=i\r\n                break\r\n    \r\n        p=int(buf[i+1:length])\r\n        if(is_ciel(p)):\r\n            res+=1\r\n    \r\n    print(res)\r\n\r\n\r\n\r\n\r\n    "
                },
                {
                    "id": 60995574,
                    "submission_date": 1647923900,
                    "language": "PYTH 3",
                    "username": "sasikumar_22",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.03",
                    "memory": "9.9M",
                    "solution": 60995574,
                    "code": "from audioop import reverse\r\n\r\nfrom itertools import count\r\nfrom math import*\r\nfrom operator import index, indexOf\r\nfrom pickle import TRUE\r\nfrom re import M, T\r\n\r\n\r\n# # def bs(x, k, a):\r\n# #     r = a-1\r\n# #     l = 0\r\n# #     while(l < r):\r\n# #         m = (l+r)//2\r\n# #         if((x >= k[m] and x < k[m+1]) or (m == a-1 and x > k[m+1])):\r\n# #             return m+1\r\n# #         elif(x < k[m]):\r\n# #             r = m\r\n# #         else:\r\n# #             l = m+1\r\n# #     return 0\r\n\r\n\r\n# def check(nums):\r\n#     for i in range(len(nums)-1):\r\n#         if nums[i] > nums[i+1]:\r\n#             return False\r\n#     return True\r\n\r\ndef rl():\r\n    return list(map(int, input().split()))\r\n\r\n\r\ndef r2():\r\n    return map(int, input().split())\r\n\r\n\r\ndef func(x):\r\n    l = len(str(x))\r\n    e = str(x).count('8')\r\n    f = str(x).count('5')\r\n    t = str(x).count('3')\r\n    y = e+f+t\r\n    return e >= f and f >= t and y == l\r\n\r\n\r\n# def Count(s, c):\r\n#     j = 0\r\n#     for i in s:\r\n#         if i == c:\r\n#             j += 1\r\n#     return j\r\n\r\ndef solve(n, arr):\r\n    m = 0\r\n    for i in range(n):\r\n        if func(arr[i]):\r\n            m += 1\r\n\r\n    return m\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    res = []\r\n    a = []\r\n    n = int(input())\r\n    for i in range(n):\r\n        arr = list(input().split())\r\n        a.append(arr[-1])\r\n\r\n    print(solve(n, a))\r\n"
                }
            ]
        },
        "SPSUM": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "2\n5 7\n1 2",
                    "output": "Yes\nNo",
                    "explanation": ""
                }
            ],
            "problem_statement": "A and B are brothers and like playing with marbles.Their mother buys them N marbles to play with.The preciousness of each marble is a natural number from 1 to N and no two marbles have same preciousness.\nSince A and B are good at maths they want to divide all those N marbles among them in such a way that sum of the preciousness of all marbles that A receives and sum of the preciousness of all marbles that B receives after distribution are co-primes i.e the gcd(greatest common divisor) of their sum is 1.\nAlso the absolute value of difference between the sum of the preciousness of marbles of A and B should be exactly M.\nHelp A and B in finding whether such a distribution of N marbles between them is possible or not.\nFormally, you have to tell whether you can distribute first N natural numbers in two sets such that the absolute difference of the sum of numbers in the two sets is equal to M and the gcd of their sum is 1.\nNote that one of the set can be empty and greatest common divisor of 0 and k is k\nInput\nThe first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows.\nThe first line of each test case contains two integers N  and M denoting the number of marbles and the absolute difference of sum respectively. \n \n\nOutput\nFor each test case, output a single line.\nPrint \u201cYes\u201d if there exist a valid distribution of marbles between A and B else print \u201cNo\u201d.\n\nConstraints\n1 \u2264 T \u2264 20\n1 \u2264 N \u2264 1,000,000,000\n0 \u2264 M \u2264 1018",
            "input_format": "",
            "output_format": "",
            "problem_name": "Split Sums",
            "user_tags": [
                "ad-hoc",
                "gvaibhav21",
                "inso2018",
                "insomnia18",
                "maths"
            ],
            "computed_tags": [],
            "problem_code_id": "SPSUM",
            "difficulty_level": "1524",
            "ai_solutions": [
                "def solve(N, M):\n    if N*(N+1)//2 < M or (N*(N+1)//2 - M) % 2 != 0:\n        return \"No\"\n    else:\n        return \"Yes\"\n\nT = int(input())\nfor _ in range(T):\n    N, M = map(int, input().split())\n    print(solve(N, M))",
                "def solve(N, M):\n    total_sum = N*(N+1)//2\n    if total_sum < M or (total_sum - M) % 2 != 0:\n        return \"No\"\n    else:\n        return \"Yes\"\n\nT = int(input())\nfor _ in range(T):\n    N, M = map(int, input().split())\n    print(solve(N, M))"
            ],
            "human_solutions": [
                {
                    "id": 78671622,
                    "submission_date": 1667191037,
                    "language": "PYTH 3",
                    "username": "milimurmu1995",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.02",
                    "memory": "9.6M",
                    "solution": 78671622,
                    "code": "import math\r\n\r\nt = int(input())\r\nfor _ in range(t):\r\n    n , m = map(int, input().split())\r\n    total = (n*(n+1))//2\r\n    ans ='No'\r\n    if total > m:\r\n        remain = total-m\r\n        half=remain//2\r\n        if remain&1:\r\n            ans='No'\r\n        elif math.gcd(half+m,half)==1:\r\n            ans='Yes'\r\n    print(ans)         \r\n"
                },
                {
                    "id": 75745731,
                    "submission_date": 1664616766,
                    "language": "PYTH 3",
                    "username": "shaik_kaleema",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.02",
                    "memory": "9.7M",
                    "solution": 75745731,
                    "code": "import math\r\nT=int(input())\r\nfor  _ in range(T):\r\n    N,M=map(int,input().split())\r\n    a=N*(N+1)//2\r\n    b=(a+M)//2\r\n    c=a-b\r\n    if b-c ==M:\r\n        if math.gcd(b,c) ==1.0:\r\n            print(\"Yes\")\r\n        else:\r\n            print(\"No\")\r\n    else:\r\n        print(\"No\")"
                }
            ]
        },
        "MINIAND": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "1\n5\n1 3 2 4 5\n3\n1 2 \n1 5\n3 4",
                    "output": "ODD\nEVEN\nEVEN",
                    "explanation": "For the first query, the bitwise AND of 1 and 3 is 1, which is Odd. Hence the first output is ODD.\nFor the third query, the bitwise AND of 2 and 4 is 0, which is Even. Hence the third output is EVEN."
                }
            ],
            "problem_statement": "We all know Gru loves Agnes very much. One day Agnes asked Gru to answer some of her queries. She lined up $N$ minions in a straight line from $1$ to $N$. \nYou are given an array $A$ which contains the height of minions. Agnes will ask him several queries. In each query, Gru has to tell whether the bitwise AND of  $A[L \\ldots R]$ is EVEN or ODD. Since Gru is busy planning the biggest heist on Earth, he asks for your help.\nInput:\n\nFirst line of the input contains an integer $T$ denoting the number of test cases.\nFor each test case:-\nFirst line contains an integer $N$ denoting the number of elements.\nSecond line contains $N$ spaced integer representing array elements.\nThird line contains $Q$ representing number of query.\nNext $Q$ lines contains two integer $L$ and $R$ as defined above.\n\nOutput:\nFor each query, output \"EVEN\" or \"ODD\" without quotes.\nConstraints\n\n$1 \\leq T \\leq 10$\n$1 \\leq N \\leq 10^5$\n$1 \\leq A_i \\leq 10^5$\n$1 \\leq Q \\leq 10^5$",
            "input_format": "",
            "output_format": "",
            "problem_name": "Minion AND Range",
            "user_tags": [
                "Bitwise Operation"
            ],
            "computed_tags": [
                "Mathematics",
                "Bit Manipulation"
            ],
            "problem_code_id": "MINIAND",
            "difficulty_level": "1567",
            "ai_solutions": [
                "T = int(input())\nfor _ in range(T):\n    N = int(input())\n    A = list(map(int, input().split()))\n    Q = int(input())\n    for _ in range(Q):\n        L, R = map(int, input().split())\n        result = A[L-1]\n        for i in range(L, R):\n            result &= A[i]\n        if result % 2 == 0:\n            print(\"EVEN\")\n        else:\n            print(\"ODD\")",
                "def solve(T, test_cases):\n    for _ in range(T):\n        N = test_cases[_][0]\n        A = test_cases[_][1]\n        Q = test_cases[_][2]\n        queries = test_cases[_][3]\n        for q in range(Q):\n            L, R = queries[q]\n            result = A[L-1]\n            for i in range(L, R):\n                result &= A[i]\n            if result % 2 == 0:\n                print(\"EVEN\")\n            else:\n                print(\"ODD\")\n\nT = int(input())\ntest_cases = []\nfor _ in range(T):\n    N = int(input())\n    A = list(map(int, input().split()))\n    Q = int(input())\n    queries = []\n    for _ in range(Q):\n        queries.append(list(map(int, input().split())))\n    test_cases.append([N, A, Q, queries])\n\nsolve(T, test_cases)"
            ],
            "human_solutions": [
                {
                    "id": 1024082775,
                    "submission_date": 1696388064,
                    "language": "PYTH 3",
                    "username": "dawnchen",
                    "user_rating_star": 4,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "2.39",
                    "memory": "22.9M",
                    "solution": 1024082775,
                    "code": "t = int(input())\r\nfor _ in range(t):\r\n    n = int(input())\r\n    a = list(map(int,input().split()))\r\n    oddcount = [0 for i in range(n+1)]\r\n    for i in range(n):\r\n        if a[i]%2==1: oddcount[i+1]=oddcount[i]+1\r\n        else: oddcount[i+1] = oddcount[i]\r\n    q = int(input())\r\n    for _ in range(q):\r\n        (l,r) = map(int,input().split())\r\n        if oddcount[r]-oddcount[l-1]==r-l+1: print(\"ODD\")\r\n        else: print(\"EVEN\")"
                },
                {
                    "id": 1012562176,
                    "submission_date": 1691300620,
                    "language": "PYTH 3",
                    "username": "yashsingh62",
                    "user_rating_star": 3,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "2.70",
                    "memory": "19.3M",
                    "solution": 1012562176,
                    "code": "for i in range(int(input())):\r\n    n=int(input())\r\n    a=list(map(int,input().split()))\r\n    l1=[]\r\n    for j in range(n):\r\n        if a[j]%2==0:l1.append(j+1)\r\n    q=int(input())\r\n    for x in range(q):\r\n        l,r=map(int,input().split())\r\n        for e in l1:\r\n            if e>=l and e<=r:\r\n                print('EVEN')\r\n                break\r\n        else:print('ODD')"
                }
            ]
        },
        "BWCELL": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "3\nW\nBW\nBWBB",
                    "output": "Chef\nAleksa\nAleksa",
                    "explanation": ""
                }
            ],
            "problem_statement": "Read problems statements in Mandarin Chinese , Russian and  Vietnamese\nChef and his best friend Aleksa are into mathematical games these days. Today, they have some ( \u2265 0 ) black cells represented as B, and a white cell represented as W, lying randomly in a straight line.\nThey have decided to play with these cells. In a move, a player chooses some ( > 0 ) black cells lying on any one side of the white cell and remove them. It should be noted that a player is not allowed to choose black cells from both side of the given white cell. Both the players alternate their moves, and play optimally. The player who is unable to move in his respective turn will lose the game.\nAleksa, being a girl, has a habit of playing first. But Chef is fairly smart himself, and will not play the game if he is going to lose it. Therefore, he wants to know the winner beforehand. Can you tell him who is going to win the game for the given configuration of cells?\nInput\n First line of input contains a single integer T denoting the number of test cases. First and the only line of each test case contains a string S consisting of the characters 'B' and 'W', denoting black and white cells, respectively.\nOutput\nFor each test case, output \"Chef\" if chef wins the game for the given configuration. Else print \"Aleksa\". (quotes for clarity only).\nConstraints\n\n1 \u2264 T \u2264 10\n1 \u2264 |S| \u2264 10000\nS contains exactly 1 white cell.\n\nScoring\n\n Subtask 1:  1 \u2264 T \u2264 10, 1 \u2264 |S| \u2264 10 : ( 30 pts )\n Subtask 2:  1 \u2264 T \u2264 10, 1 \u2264 |S| \u2264 100 : ( 30 pts )\n Subtask 3:  1 \u2264 T \u2264 10, 1 \u2264 |S| \u2264 10000 : ( 40 pts )",
            "input_format": "",
            "output_format": "",
            "problem_name": "Black And White Cells",
            "user_tags": [
                "String"
            ],
            "computed_tags": [
                "Data Structures"
            ],
            "problem_code_id": "BWCELL",
            "difficulty_level": "1515",
            "ai_solutions": [
                "T = int(input().strip())\nfor _ in range(T):\n    S = input().strip()\n    B_count = S.count('B')\n    if B_count % 2 == 0:\n        print(\"Chef\")\n    else:\n        print(\"Aleksa\")",
                "def game_winner(T, test_cases):\n    for i in range(T):\n        S = test_cases[i]\n        B_count = S.count('B')\n        if B_count % 2 == 0:\n            print(\"Chef\")\n        else:\n            print(\"Aleksa\")\n\nT = int(input().strip())\ntest_cases = []\nfor _ in range(T):\n    test_cases.append(input().strip())\ngame_winner(T, test_cases)"
            ],
            "human_solutions": [
                {
                    "id": 61977121,
                    "submission_date": 1649063830,
                    "language": "PYTH 3",
                    "username": "abhinay_823",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.03",
                    "memory": "9.2M",
                    "solution": 61977121,
                    "code": "for _ in range(int(input())):\n        l=0\n        r=0\n        f=False\n        for w in input():\n                if w==\"W\":\n                        f=True\n                        continue\n                if f:\n                        r=r+1\n                else:\n                        l=l+1\n        if l==r:\n                            print(\"Chef\")\n        else:\n                            print(\"Aleksa\")"
                },
                {
                    "id": 55523539,
                    "submission_date": 1640645417,
                    "language": "PYTH 3",
                    "username": "dscdsc",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.02",
                    "memory": "9.3M",
                    "solution": 55523539,
                    "code": "t = int(input())\n\nfor i in range(t):\n    s = input()\n    n = len(s)\n    p = s.find('W')\n    l = p\n    r = n - p - 1\n    if l != 0 and r != 0:\n    \tif l != r:\n        \tprint('Aleksa')\n    \telse:\n        \tprint('Chef')\n    elif l == 0 and r != 0:\n    \tprint('Aleksa')\n    elif l != 0 and r == 0:\n     \tprint('Aleksa')\n    else:\n     \tprint('Chef')   "
                }
            ]
        },
        "CREP": {
            "constraints": "$1\\leq T\\leq 10$\n$1\\leq N\\leq10,000$\n$1 \\leq K \\leq N$\n$0 \\leq A_i \\leq 10^9$",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "3\n4 1\n2 3 4 4\n5 3\n9 9 1 1 9\n2 1\n2 2",
                    "output": "5\n9\n-1",
                    "explanation": "Test Case 1: The numbers 2 and 3 occur exactly once. So the answer is 2 + 3 = 5.\nTest Case 2: The number 9 occurs exactly three times. So the answer is 9.\nTest Case 3: There is no number which occurs exactly once. Hence the answer is -1."
                }
            ],
            "problem_statement": "Chef Avi likes the number $K$. Given a list of $N$ integers, help him find the sum of all distinct numbers repeating exactly $K$ times. Each of those numbers should be considered only once in the sum, not $K$ times.",
            "input_format": "First line will contain $T$, number of testcases. Then the testcases follow. \nEach testcase contains two lines:\nThe first line contains two space-separated integers $N, K$. \nThe second line contains $N$ space-separated integers.",
            "output_format": "For each testcase, print the sum of all numbers occurring exactly $K$ times. If there is no such number, print -1 instead.",
            "problem_name": "Chef and Replication",
            "user_tags": [
                "avi224"
            ],
            "computed_tags": [],
            "problem_code_id": "CREP",
            "difficulty_level": "1509",
            "ai_solutions": [
                "from collections import Counter\n\nT = int(input())\nfor _ in range(T):\n    N, K = map(int, input().split())\n    A = list(map(int, input().split()))\n    count = Counter(A)\n    result = sum(k for k, v in count.items() if v == K)\n    print(result if result != 0 else -1)",
                "T = int(input())\nfor _ in range(T):\n    N, K = map(int, input().split())\n    A = list(map(int, input().split()))\n    unique_numbers = set(A)\n    result = sum(number for number in unique_numbers if A.count(number) == K)\n    print(result if result != 0 else -1)"
            ],
            "human_solutions": [
                {
                    "id": 61843258,
                    "submission_date": 1648912355,
                    "language": "PYTH 3",
                    "username": "abhinay_823",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.07",
                    "memory": "10.8M",
                    "solution": 61843258,
                    "code": "t = int(input())\nwhile t:\n    t-=1 \n    n,k = map(int,input().split())\n    ls = list(map(int,input().split()))\n    ls.sort()\n    count,nsum=1,-1\n    if n==1:\n        print(ls[0])\n    else:\n        for i in range(n-1):\n            if ls[i]==ls[i+1]:\n                count+=1\n                #print(count,ls[i])\n            else:\n                #print(count,ls[i])\n                if count==k:\n                    if nsum==-1:\n                        nsum=0\n                    nsum+=ls[i]\n                count=1\n        if count==k:\n            if nsum==-1:\n                nsum=0\n            nsum+=ls[n-1]\n        if nsum==-1:\n            print(-1)\n        else:\n            print(nsum)\n            "
                },
                {
                    "id": 60826316,
                    "submission_date": 1647705170,
                    "language": "PYTH 3",
                    "username": "furmarie",
                    "user_rating_star": 3,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.04",
                    "memory": "11.5M",
                    "solution": 60826316,
                    "code": "from collections import Counter\n\nT = int(input())\nfor _ in range(T):\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    c = Counter(a)\n    ans = 0\n    ok = False\n    for i in c:\n        if c[i] == k:\n            ans += i\n            ok = True\n    if ok:\n        print(ans)\n    else:\n        print(-1)\n"
                }
            ]
        },
        "P1Z2S": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "2\n3 1",
                    "output": "2",
                    "explanation": "Example case 1. This example is already explained in the problem statement."
                },
                {
                    "input": "4\n1 2 3 3",
                    "output": "5",
                    "explanation": ""
                }
            ],
            "problem_statement": "Read problems statements in Mandarin Chinese, Russian and Vietnamese as well.\n\nPhantasialand boasts of its famous theme park. The park is frequently visited. It is quite large park that some tourists visit it more than once to fully appreciate its offerings. One day, our Chefs decided to visit the park. There are total n Chefs, i-th of them wants to visit the park ti times.\n\n\nUsually, the entry ticket for the park is very expensive. Today, being a weekend, park had an interesting offer for the visitors, \"1x Zahlen, 2x Spa\u00df\" (pay once, visit twice), i.e. you can get a second free visit after the first paid visit. The procedure for visiting the park and availing the offer is as follows.\nFirst time visitors should buy a ticket at the entrance of the park. Along with the ticket, you are offered an option of availing a voucher if you want a second visit.\nEnter the theme park, enjoy your visit. While returning make sure to sign your name in the voucher. Any unsigned voucher will not allowed to take out of the park.\nAfter the visit is done, the ticket counter takes back your ticket.\nIf it is your second time visit, then the counter will take back your voucher. No new voucher will be provided to you as you have already availed the offer.\nYou can avail the offer as many times as you wish in a day, i.e. offer is applicable for each visit with a paid ticket.\n\n\nObviously, this procedure has a flaw. The counter doesn't ask you to sign your name on the voucher at the time of providing it to make sure that the person buying the ticket is the one signing the voucher. So, if more than one Chefs enter the park, they can exchange their vouchers while they are inside the park.\n\n\nChefs thought of exploiting this flow. They wanted to buy minimum number of tickets. Can you help them in finding how many minimum tickets they should buy?\n\n\nLet us take an example. There are two Chef's, Alice and Bob. Alice wants to visit the park three times and Bob only once. For their first visits, each of them buys a ticket and obtains their vouchers and visits the park. After they have entered their park, Bob gives his voucher to Alice. Alice signs her name on her own voucher and on the voucher given by Bob. In this way, she has two vouchers, which she can use to visit the park two more times. So, in total by buying two tickets, Alice can visit three times and Bob once.\n\nInput\nThe first line of the input contains a single integer n denoting the number of Chefs.\nThe second line contains n space-separated integers t1, t2, ..., tn, where ti denotes the number of times i-th Chef wants to visit the park.\nOutput\nOutput a single integer corresponding to the minimum number of tickets Chefs needs to buy.\nConstraints\n1 \u2264 n \u2264 105\n1 \u2264 ti \u2264 104",
            "input_format": "",
            "output_format": "",
            "problem_name": "Phantasialand",
            "user_tags": [
                "cakewalk",
                "cook70",
                "wwwwodddd"
            ],
            "computed_tags": [],
            "problem_code_id": "P1Z2S",
            "difficulty_level": "1556",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 31964351,
                    "submission_date": 1587127300,
                    "language": "PYTH 3",
                    "username": "aman_ravan02",
                    "user_rating_star": 3,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.04",
                    "memory": "18.4M",
                    "solution": 31964351,
                    "code": "from math import *\r\nn=int(input())\r\nx=list(map(int,input().split()))\r\na=0\r\nfor j in x:\r\n    a+=j/2\r\nb=(ceil(a))\r\nif(b<n):\r\n    print(n)\r\nelse:\r\n    print(b)\r\n"
                },
                {
                    "id": 16019499,
                    "submission_date": 1509453848,
                    "language": "PYTH 3",
                    "username": "ashubaplawat",
                    "user_rating_star": 3,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.04",
                    "memory": "27.9M",
                    "solution": 16019499,
                    "code": "n=int(input())\nc=n\nt=list(map(int,input().split()))\n\nval=0\nfor i in range(n):\n\tval+=t[i]\n\t\ntot=n\nval-=2*n\nif val>0:\n\n\ttot+=val//2\n\tif val%2>0:\n\t\ttot+=1\nprint(tot)\t\n"
                }
            ]
        },
        "SEAARASU": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "2\n1\n1\n3\n2 4 6",
                    "output": "1\n6",
                    "explanation": "Example case 2. In this case, one possible way in which Sereja can perform the operations could be as follows. \n\n\n Pick i = 2, j = 1. A[2] -= A[1]. Now the resulting array would be [2, 2, 6].\n Pick i = 3, j = 2. A[3] -= A[2]. Now the resulting array would be [2, 2, 4].\n Pick i = 3, j = 2. A[3] -= A[2]. Now the resulting array would be [2, 2, 2].\n\n\nAs the resulting array is [2 2 2], so the sum is 6."
                }
            ],
            "problem_statement": "Read problems statements in Mandarin Chinese and Russian.\n\nSereja has an array A of N positive integers : A[1], A[2], A[3], ... , A[N]. \n\n\nIn a single operation on the array, he performs the following two steps :  \n\nPick two indices i, j s.t. A[i] > A[j]\nA[i] -= A[j]\n\n\nSereja can apply these operations any number of times (possibly zero), such that the sum of resulting elements of the array is as small as possible.\n\n\nHelp Sereja find this minimum sum.\n\nInput\n\nFirst line of input contains an integer T - the number of test cases. T test cases follow.\n\n\nFirst line of each test case contains the integer N. The next line contains N integers \u2014 A[1], A[2], A[3], ... , A[N].\n\nOutput\nFor each test case, output a single line with the answer.\nConstraints\n\n1 \u2264 T \u2264 10\n1 \u2264 N \u2264 105\n1 \u2264 A[i] \u2264 109",
            "input_format": "",
            "output_format": "",
            "problem_name": "Sereja and Array and Subtracting",
            "user_tags": [
                "1D Arrays",
                "Euclid's Algorithm"
            ],
            "computed_tags": [
                "Data Structures",
                "Arrays",
                "Mathematics",
                "Number Theory",
                "GCD"
            ],
            "problem_code_id": "SEAARASU",
            "difficulty_level": "1559",
            "ai_solutions": [
                "T = int(input())\nfor _ in range(T):\n    N = int(input())\n    A = list(map(int, input().split()))\n    print(min(A) * N)",
                "def min_sum(T, test_cases):\n    for _ in range(T):\n        N, A = test_cases[_]\n        print(min(A) * N)\n\nT = int(input())\ntest_cases = []\nfor _ in range(T):\n    N = int(input())\n    A = list(map(int, input().split()))\n    test_cases.append((N, A))\n\nmin_sum(T, test_cases)"
            ],
            "human_solutions": [
                {
                    "id": 40731007,
                    "submission_date": 1608904290,
                    "language": "PYTH 3",
                    "username": "vittal_161",
                    "user_rating_star": 3,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.22",
                    "memory": "21.1M",
                    "solution": 40731007,
                    "code": "import math \nfor _ in range(int(input())):\n    n=int(input())\n    a=list(map(int,input().split()))\n    g=0\n    for i in range(n):\n        g=math.gcd(a[i],g)\n    print(g*n)\n            "
                },
                {
                    "id": 36204458,
                    "submission_date": 1596626394,
                    "language": "PYTH 3",
                    "username": "deepika_7777",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.30",
                    "memory": "21.1M",
                    "solution": 36204458,
                    "code": "def gcd(a,b):\n    if(a==0):\n        return b\n    return gcd(b%a,a)\nt=int(input())\nfor I in range(t):\n    n=int(input())\n    l=list(map(int,input().split()))\n    if(n==1):\n        print(l[0])\n    else:\n        g=l[0]\n        for I in range(1,n):\n            if(g>l[I]):\n                g=gcd(l[I],g)\n            else:\n                g=gcd(g,l[I])\n        print(n*g)"
                }
            ]
        },
        "NBONACCI": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "3 4\n0 1 2\n7\n2\n5\n1000000000",
                    "output": "3\n1\n0\n0",
                    "explanation": ""
                }
            ],
            "problem_statement": "Read problems statements in Hindi, Mandarin Chinese,\nVietnamese and Bengali as well.\nAn $N$-bonacci sequence is an infinite sequence $F_1, F_2, \\ldots$ such that for each integer $i \\gt N$, $F_i$ is calculated as $f(F_{i-1}, F_{i-2}, \\ldots, F_{i-N})$, where $f$ is some function. A XOR $N$-bonacci sequence is an $N$-bonacci sequence for which $f(F_{i-1}, F_{i-2}, \\ldots, F_{i-N}) = F_{i-1} \\oplus F_{i\u22122} \\oplus \\ldots \\oplus F_{i\u2212N}$, where $\\oplus$ denotes the bitwise XOR operation.\nRecently, Chef has found an interesting sequence $S_1, S_2, \\ldots$, which is obtained from prefix XORs of a XOR $N$-bonacci sequence $F_1, F_2, \\ldots$. Formally, for each positive integer $i$, $S_i = F_1 \\oplus F_2 \\oplus \\ldots \\oplus F_i$. You are given the first $N$ elements of the sequence $F$, which uniquely determine the entire sequence $S$.\nYou should answer $Q$ queries. In each query, you are given an index $k$ and you should calculate $S_k$. It is guaranteed that in each query, $S_k$ does not exceed $10^{50}$.\nInput\n\nThe first line of the input contains two space-separated integers $N$ and $Q$.\nThe second line contains $N$ space-separated integers $F_1, F_2, \\ldots, F_N$.\nThe following $Q$ lines describe queries. Each of these lines contains a single integer $k$.\n\nOutput\nFor each query, print a single line containing one integer $S_k$.\nConstraints\n\n$1 \\le N, Q \\le 10^5$\n$0 \\le F_i \\le 10^9$ for each $i$ such that $1 \\le i \\le N$\n$1 \\le k \\le 10^9$",
            "input_format": "",
            "output_format": "",
            "problem_name": "XOR N-bonacci Sequence",
            "user_tags": [
                "1D Arrays",
                "Bitwise Operation",
                "ad-hoc"
            ],
            "computed_tags": [
                "Data Structures",
                "Arrays",
                "Mathematics",
                "Bit Manipulation",
                "Algorithms",
                "Constructive"
            ],
            "problem_code_id": "NBONACCI",
            "difficulty_level": "1552",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 67427619,
                    "submission_date": 1655963193,
                    "language": "PYTH 3",
                    "username": "kaushal_faldu",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.54",
                    "memory": "20.9M",
                    "solution": 67427619,
                    "code": "n,c = list(map(int,input().split()))\r\ns = [0]*(n+1)\r\nkp = list(map(int,input().split()))\r\nfor i in range(1,n+1):\r\n    s[i] = s[i-1] ^ kp[i-1]\r\nfor _ in range(c):\r\n    k = int(input())\r\n    print(s[k % (n+1)])\r\n    \r\n    "
                },
                {
                    "id": 63101153,
                    "submission_date": 1650156071,
                    "language": "PYTH 3",
                    "username": "uk2459644",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.55",
                    "memory": "20.1M",
                    "solution": 63101153,
                    "code": "\nn,q=map(int,input().split())\nnli=[0]+list(map(int,input().split()))\nd=[0]\nfor i in range(1,n+1):\n    d.append(d[i-1]^nli[i])\n\nfor j in range(q):\n    qi=int(input())\n    print(d[qi%(n+1)])"
                }
            ]
        },
        "CAKE1AM": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "2\n1 1 10 10\n11 11 20 20\n1 1 20 20\n11 11 30 30",
                    "output": "162\n641",
                    "explanation": "Test Case 1:\nThe area of the first piece is 81 and the area of the second piece is 81, a total of 162. \n\nTest Case 2:\nThe area of the first piece is 361 and the area of the second piece is 280, a total of 641."
                }
            ],
            "problem_statement": "Read problems statements in Mandarin Chinese and Russian as well.\nYour friend \u0421hef has prepared a rectangular cake for you. Both of you want to divide the cake among yourselves. Your friend is generous enough to let you choose your share first. You have decided to take two pieces.For the first piece you make a rectangular cut (each side of this cut is parallel to the corresponding side of the cake) inside the cake. Now the cake have two pieces. You take the piece inside the rectangle cut. For the second piece, you make another rectangular cut (each side of this cut is parallel to the corresponding side of the cake) inside the cake. Now the cake again have two pieces. You take the piece inside the rectangle cut (note that this piece may not be rectangular, because of cut may cross an empty space that remains from the first piece, also it can be empty). Your friend will have the rest of the cake.Given the cuts determine the amount of cake that you will have. The amount is calculated as the sum of the areas covered by your pieces. The cake can be considered as a rectangle with the lower left corner at (0,0) and the upper right corner at (1001,1001).\nInput\nThe first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. Each test case consists of two lines. Each line contains the description of a rectangular cut by giving the information of the rectangle. A rectangle is defined by four integers (co-ordinate of the lower-left corner (x1,y1) and upper right corner (x2,y2)). \nOutput\nFor each test case, output a single line containing the amount of cake you will have. \nConstraints\n1\u2264T\u2264100\n1\u2264x1x2\u22641000\n1\u2264y1y2\u22641000",
            "input_format": "",
            "output_format": "",
            "problem_name": "Chef and the Cake I",
            "user_tags": [
                "cakewalk",
                "cook42",
                "geometry",
                "satej_adm"
            ],
            "computed_tags": [],
            "problem_code_id": "CAKE1AM",
            "difficulty_level": "1508",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 70690373,
                    "submission_date": 1659677855,
                    "language": "PYTH 3",
                    "username": "dscdsc",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.02",
                    "memory": "9M",
                    "solution": 70690373,
                    "code": "t = int(input())\r\n\r\nfor i in range(t):\r\n    x1, y1, x2, y2 = map(int, input().split())\r\n    x3, y3, x4, y4 = map(int, input().split())\r\n    d = (x2 - x1) * (y2 - y1) + (x4 - x3) * (y4 - y3)\r\n    b1 = max(x1, x3)\r\n    b2 = max(y1, y3)\r\n    b3 = min(x2, x4)\r\n    b4 = min(y2, y4)\r\n    if b1 < b3 and b2 < b4:\r\n        d -= (b3 - b1) * (b4 - b2)\r\n    print(d)"
                },
                {
                    "id": 67467047,
                    "submission_date": 1656041068,
                    "language": "PYTH 3",
                    "username": "aayush_332",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.02",
                    "memory": "9.2M",
                    "solution": 67467047,
                    "code": "for _ in range(int(input())):\r\n    x1,y1,x2,y2=map(int,input().split())\r\n    x3,y3,x4,y4=(map(int,input().split()))\r\n    p=0\r\n    x5=max(x1,x3)\r\n    y5=max(y1,y3)\r\n    x6=min(x2,x4)\r\n    y6=min(y2,y4)\r\n    p=((x2-x1)*(y2-y1)+(x4-x3)*(y4-y3))\r\n    if x5<x6 and y5 < y6:\r\n        p -= ((x6-x5) * (y6-y5))\r\n   \r\n    print(p)\r\n    \r\n"
                }
            ]
        },
        "TWSTR": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "4\nflour-with-eggs 100\nchicken-ham -10\nflour-without-eggs 200\nfish-with-pepper 1100\n6\nf\nflour-with\nflour-with-\nc\nfl\nchik",
                    "output": "fish-with-pepper\nflour-without-eggs\nflour-with-eggs\nchicken-ham\nflour-without-eggs\nNO",
                    "explanation": ""
                }
            ],
            "problem_statement": "Chef Jessie has a lot of recipes with her (N). She often remembered the starting few characters of the recipe and forgot the rest. As all the great chefs do, Jessie also numbered the recipes depending on the priority. So, given the list of recipes along with their priorities answer Jessie\u2019s queries.\nJessie\u2019s queries are as follows:\nShe gives you the first few characters of a recipe; you have to print the complete recipe with the highest priority.\nNote:\nEvery recipe has a unique priority\n\nInput\n\nFirst line contains an integer N - the number of recipes.\nFollowed by N strings Si along with an integer each Vi.Si stands for the recipe and Vi for the priority.\nIt is followed by an integer Q - the number of queries.\nFollowed by Q strings Qi.\nEach string Si, Qi contain only lowercase Latin alphabets ('a' - 'z') and '-'.\nOutput\nQ \u2013 lines, each contain the answer for each of the query.\nIf for a query no recipe matches print \"NO\". (Without quotes)\nConstraints:\n0 N \n\n0 Q \n\n-10^9 Vi \n\n1 |Si| Si)\n\n1 |Qi| Qi)",
            "input_format": "",
            "output_format": "",
            "problem_name": "Remember the recipe",
            "user_tags": [
                "Tries",
                "Brute Force"
            ],
            "computed_tags": [
                "Advanced Data Structures",
                "Algorithms"
            ],
            "problem_code_id": "TWSTR",
            "difficulty_level": "1529",
            "ai_solutions": [
                "N = int(input())\nrecipes = {}\nfor _ in range(N):\n    recipe, priority = input().split()\n    priority = int(priority)\n    if recipe in recipes:\n        recipes[recipe] = max(recipes[recipe], priority)\n    else:\n        recipes[recipe] = priority\n\nQ = int(input())\nfor _ in range(Q):\n    query = input()\n    matching_recipes = [recipe for recipe in recipes if recipe.startswith(query)]\n    if matching_recipes:\n        print(max(matching_recipes, key=recipes.get))\n    else:\n        print(\"NO\")",
                "N = int(input())\nrecipes = {}\nfor _ in range(N):\n    recipe, priority = input().split()\n    priority = int(priority)\n    recipes[recipe] = priority\n\nQ = int(input())\nfor _ in range(Q):\n    query = input()\n    matching_recipes = sorted([(recipe, priority) for recipe, priority in recipes.items() if recipe.startswith(query)], key=lambda x: x[1], reverse=True)\n    if matching_recipes:\n        print(matching_recipes[0][0])\n    else:\n        print(\"NO\")"
            ],
            "human_solutions": [
                {
                    "id": 60971019,
                    "submission_date": 1647870319,
                    "language": "PYTH 3",
                    "username": "sasikumar_22",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.24",
                    "memory": "10M",
                    "solution": 60971019,
                    "code": "di={}\r\nli=[]\r\nlis=[]\r\n    \r\nfor i in range(int(input())):\r\n    s,n=map(str,input().split())\r\n    di[n]=s\r\n    li.append(int(n))\r\nli.sort(reverse=True)\r\nfor i in li:\r\n    lis.append(di[str(i)])\r\nfor i in range(int(input())):\r\n    q=input()\r\n    for j in range(len(lis)):\r\n        if q in lis[j] and q==lis[j][0:len(q)]:\r\n            print(lis[j])\r\n            break\r\n            \r\n    else:\r\n        print('NO')\r\n    \r\n    "
                },
                {
                    "id": 50038606,
                    "submission_date": 1629571063,
                    "language": "PYTH 3",
                    "username": "codetilldawn07",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.44",
                    "memory": "17.9M",
                    "solution": 50038606,
                    "code": "n=int(input())\na=[]\nb=[]\nfor _ in range(n):\n    s=input().split()\n    a.append(s[0])\n    b.append(int(s[1]))\n    \n\nq=int(input())\nfor i in range(q):\n    x=input()\n    \n    m=-(10**10)\n    for k in range(n):\n        y=a[k]\n        if(x in y and x==y[0:len(x)]):\n            m=max(m,b[k])\n            \n    if(m==-(10**10)):\n        print(\"NO\")\n    else:\n        j=b.index(m)\n        print(a[j])\n    "
                }
            ]
        },
        "AMMEAT2": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "2\n100 3\n100 100",
                    "output": "45 63 35\n-1",
                    "explanation": "Example case 1: One of the possible choices is that he takes 45th plate, 63rd plate, and 35th plate. BecauseGCD(45, 63) = 9,GCD(45, 35) = 5,GCD(63, 35) = 7.\nExample case 2: He must choose all N = K plates in this case. But, for example, the pair of 3rd plate and 5th plate does not satisfy his desire. So it is impossible to choose K plates."
                }
            ],
            "problem_statement": "Andrew likes meatballs very much as you know.\nHe has N plates of meatballs, here the ith plate contains exactly i meatballs. Andrew wants to take exactly K plates to his trip to Las Vegas.\nOn this occasion, he wants to choose the K plates by a strange way: if both ith and jth plates are chosen, then i and j must not be relative prime, for all 1 \u2264 i .\nPlease help him to choose K plates. Output one of the possible choices.\nInput\nThe first line of the input contains an integer T, denoting the number of test cases. The description of T test cases follows. The first line and only line of each test case contains two space-separated integers N and K.\nOutput\nFor each test case, output K distinct integers, denoting the number of selected plates, where the plates are numbered from 1 to N. If there are multiple solutions, any one will do. If it is impossible to choose K plates, print only one integer -1.\nConstraints\n1 \u2264 T \u2264 7\n1 \u2264 K \u2264 N \u2264 777",
            "input_format": "",
            "output_format": "",
            "problem_name": "Andrew and the Meatballs again",
            "user_tags": [
                "GCD",
                "Pigeonhole Principle"
            ],
            "computed_tags": [
                "Mathematics",
                "Number Theory",
                "Set Theory"
            ],
            "problem_code_id": "AMMEAT2",
            "difficulty_level": "1597",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 36142182,
                    "submission_date": 1596219249,
                    "language": "PYTH 3",
                    "username": "abhi084",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.02",
                    "memory": "17.6M",
                    "solution": 36142182,
                    "code": "for _ in range(int(input())):\n    n,k=map(int,input().split())\n    if k==1:\n        print(1)\n    elif k<=(n//2):\n        c=1\n        t_1=2\n        while c<=k:\n            print(t_1,end=' ')\n            t_1=t_1+2\n            c+=1\n        print()\n    else:\n        print(-1)"
                },
                {
                    "id": 30151101,
                    "submission_date": 1583630699,
                    "language": "PYTH 3",
                    "username": "k_sang",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.02",
                    "memory": "17.6M",
                    "solution": 30151101,
                    "code": "def ammeat2(n, k):\n\tif k == 1:\n\t\tprint(1)\n\telif k > n // 2:\n\t\tprint(-1)\n\telse:\n\t\tstart = 1\n\t\twhile k:\n\t\t\tprint(start*2, end=' ')\n\t\t\tstart += 1\n\t\t\tk -= 1\n\t\tprint()\n\t\t\nt = int(input())\nfor _ in range(t):\n    n, k = map(int, input().split())\n    ammeat2(n, k)"
                }
            ]
        },
        "NEWSCH": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "3\n2\n3\n5",
                    "output": "12\n24\n240",
                    "explanation": "Case 1. For N = 2 days we have the following 12 schedules:\n\nFirst day Second day salo   borsch   salo   varenyky   salo   galushky   borsch   salo   borsch   varenyky   borsch   galushky   varenyky   salo   varenyky   borsch   varenyky   galushky   galushky   salo   galushky   borsch   galushky   varenyky  \n\nCase 2. For N = 3 we have the following 24 schedules:\n\nFirst daySecond dayThird day salo   borsch   varenyky   salo   borsch   galushky   salo   varenyky   borsch   salo   varenyky   galushky   salo   galushky   borsch   salo   galushky   varenyky   borsch   salo   varenyky   borsch   salo   galushky   borsch   varenyky   salo   borsch   varenyky   galushky   borsch   galushky   salo   borsch   galushky   varenyky   varenyky   salo   borsch   varenyky   salo   galushky   varenyky   borsch   salo   varenyky   borsch   galushky   varenyky   galushky   salo   varenyky   galushky   borsch   galushky   salo   borsch   galushky   salo   varenyky   galushky   borsch   salo   galushky   borsch   varenyky   galushky   varenyky   salo   galushky   varenyky   borsch  \n\n\n\nCase 3. Don't be afraid. This time we will not provide you with a table of 240 schedules. The only thing we want to mention here is that apart from the previous two cases schedules for other values of N can have equal dishes (and even must have for N > 4). For example the schedule (salo, borsch, salo, borsch) is a correct schedule for N = 4 while the schedule (varenyky, salo, galushky, verynky, salo) is a correct schedule for N = 5."
                }
            ],
            "problem_statement": "Scheme? - Too loudly said. Just a new idea. Now Chef is expanding his business. He wants to make some new restaurants in the big city of Lviv. To make his business competitive he should interest customers. Now he knows how. But don't tell anyone -  it is a secret plan. Chef knows four national Ukrainian dishes - salo, borsch, varenyky and galushky. It is too few, of course, but enough for the beginning. Every day in his restaurant will be a dish of the day among these four ones. And dishes of the consecutive days must be different. To make the scheme more refined the dish of the first day and the dish of the last day must be different too. Now he wants his assistant to make schedule for some period. Chef suspects that there is more than one possible schedule. Hence he wants his assistant to prepare all possible plans so that he can choose the best one among them. He asks you for help. At first tell him how many such schedules exist. Since the answer can be large output it modulo 109 + 7, that is, you need to output the remainder of division of the actual answer by 109 + 7.\n\nInput\n\nThe first line of the input contains an integer T, the number of test cases. Each of the following T lines contains a single integer N denoting the number of days for which the schedule should be made.\n\nOutput\n\nFor each test case output a single integer in a separate line, the answer for the corresponding test case.\n\n\nConstraints\n1 \u2264 T \u2264 100\n2 \u2264 N \u2264 109",
            "input_format": "",
            "output_format": "",
            "problem_name": "The New Scheme",
            "user_tags": [
                "Modular Arithmetic"
            ],
            "computed_tags": [
                "Mathematics"
            ],
            "problem_code_id": "NEWSCH",
            "difficulty_level": "1555",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 67434035,
                    "submission_date": 1655972556,
                    "language": "PYTH 3",
                    "username": "likhitha207",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.02",
                    "memory": "9.3M",
                    "solution": 67434035,
                    "code": "mod = 1000000007\r\nt = int(input())\r\nfor tc in range(t):\r\n    n = int(input())\r\n    ans = pow(3,n,mod)\r\n    if n%2 == 0:\r\n        ans = (ans+3)%mod\r\n    else:\r\n        ans = (ans-3)%mod\r\n        \r\n    print(ans)"
                },
                {
                    "id": 63105669,
                    "submission_date": 1650171818,
                    "language": "PYTH 3",
                    "username": "uk2459644",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.02",
                    "memory": "9.1M",
                    "solution": 63105669,
                    "code": "for _ in range(int(input())):\n    n=int(input())\n    md=10**9+7\n    ans=pow(3,n,md)\n    if n%2==0:\n        print((ans+3)%md)\n    else:\n        print((ans-3)%md)"
                }
            ]
        },
        "RIGHTTRI": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "4\n5 6\n6 10\n258303 89837245228\n616153 77878145466",
                    "output": "3.00000 4.00000 5.00000\n-1\n-1\n285168.817674 546189.769984 616153.000000",
                    "explanation": ""
                }
            ],
            "problem_statement": "Read problems statements in Mandarin Chinese, Russian and Vietnamese as well.\nChef taught his brother Chefu about right angled triangle and its properties. Chefu says that he has understood everything about right angled triangles. Chef wants to check learning of his brother by asking the following question \"Can you find a right angled triangle whose length of hypotenuse  is H and its area is S?\"\nChefu is confused how to solve it. I hope you are not. Please solve this by finding a right angled triangle with hypotenuse H and area S. If it not possible to do so, then output -1.\nInput\nThe first line of the input contains a single integer T denoting the number of test-cases. T test cases follow.\nFor each test case, there will be a single line containing two space separated integers H and S.\nOutput\nOutput the answer for each test-case in a single line. If it is not possible to find such a triangle, output -1. Otherwise print 3 real numbers corresponding to the lengths of the sides of the triangle sorted in non-decreasing order. Please note that the length of the triangle sides should not differ by more than 0.01 in absolute value from the correct lengths.\nConstraints\n1 \u2264 T \u2264 105\n1 \u2264 H \u2264 106\n1 \u2264 S \u2264 1012",
            "input_format": "",
            "output_format": "",
            "problem_name": "Right Triangle",
            "user_tags": [
                "Geometry"
            ],
            "computed_tags": [
                "Mathematics"
            ],
            "problem_code_id": "RIGHTTRI",
            "difficulty_level": "1572",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 37398193,
                    "submission_date": 1599149478,
                    "language": "PYTH 3",
                    "username": "akshat_1010",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "1.05",
                    "memory": "17.6M",
                    "solution": 37398193,
                    "code": "T = int(input())\n\ndef RightTriangle(H,S):\n    \n    if (H**2-4*S)<0:\n        return -1\n    \n    a = (H**2+4*S)**0.5\n    b = (H**2-4*S)**0.5\n    c = (a+b)/2\n    d = (a-b)/2\n    \n    if c<=0 and d<=0:\n        return -1\n    else:\n        e = str(d)+' '+str(c)+' '+str(H)\n        return e\n    \nfor i in range(T):\n    H,S = map(int,input().split())\n    \n    print(RightTriangle(H,S))"
                },
                {
                    "id": 34722506,
                    "submission_date": 1593148829,
                    "language": "PYTH 3",
                    "username": "manimala123",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.94",
                    "memory": "17.6M",
                    "solution": 34722506,
                    "code": "import math\nfor i in range(int(input())):\n    h,s=map(int,input().split())\n    p=s*2\n    if h**2-2*p<0:\n        print(-1)\n        continue\n    B=(((h**2+2*p)**.5)+((h**2-2*p)**.5))/2\n    H=p/B\n    print(\"%.6f %.6f %.6f\"%(min(B,H),max(B,H),h))\n        \n    "
                }
            ]
        },
        "EXUNB": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "2\n3\n2",
                    "output": "YES\n010\n001\n100\nNO",
                    "explanation": "One such scenario for $N$ = $3$ is when player $1$ beats player $2$, player $2$ to beats player $3$ and player $3$ beats player $1$. Here all players win exactly $1$ match."
                }
            ],
            "problem_statement": "A tennis tournament is about to take place with $N$ players participating in it.\nEvery player plays with every other player exactly once and there are no ties. That is, every match has a winner and a loser. \nWith Naman's birthday approaching, he wants to make sure that each player wins the same number of matches so that nobody gets disheartened.  \nYour task is to determine if such a scenario can take place and if yes find one such scenario.\nInput:\n\nFirst line will contain $T$, number of testcases. Then the testcases follow. \nEach testcase contains of a single integer $N$ denoting number of players.\n\nOutput:\n\nIf it's impossible for everyone to win the same number of matches, print \"NO\" (without quotes).\nOtherwise print \"YES\" (without quotes) and then print $N$ lines , each line should consist of a string containing only 0s and 1s and should be of size $N$. \nIf the jth character in the ith line is 1 then it means in the match between $i$ and $j$ , $i$ wins. \nYou will get a WA if the output does not correspond to a valid tournament, or if the constraints are not satisfied.\nYou will get also WA verdict if any 2 lines have contradicting results or if a player beats himself.\n\nConstraints\n\n$1 \\leq T \\leq 100$\n$2 \\leq N \\leq 100$\n\nSubtasks\n\n10 points : $2 \\leq N \\leq 6$\n90 points :  Original Constraints.",
            "input_format": "",
            "output_format": "",
            "problem_name": "Tennis Tournament",
            "user_tags": [
                "ad-hoc",
                "Observation"
            ],
            "computed_tags": [
                "Algorithms",
                "Constructive"
            ],
            "problem_code_id": "EXUNB",
            "difficulty_level": "1503",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 35908166,
                    "submission_date": 1595604192,
                    "language": "PYTH 3",
                    "username": "md_junaid_13",
                    "user_rating_star": 3,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.09",
                    "memory": "17.6M",
                    "solution": 35908166,
                    "code": "\ndef calc(n) :\n    a = n * (n-1)\n    a = int(a/2)\n    return a\n\nt = int(input())\ntt = 0\nwhile tt < t :\n    tt = tt + 1\n    n = int(input())\n    num = calc(n)\n    if num%n != 0 :\n        print(\"NO\")\n    else :\n        win = int(num/n)\n        print(\"YES\")\n        i = 0\n        while i < n :\n            i = i + 1\n            j = i\n            str = \"\"\n            k = 0\n            while k < n :\n                str = str + \"0\"\n                k = k + 1\n            k = 0\n            while k < win :\n                if (j+k)%n==0 :\n                    str = '1' + str[1:n]\n                elif (j+k)%n==(n-1) :\n                    str = str[:n-1] + \"1\"\n                else :\n                    kkk = (j+k)%n\n                    str = str[0:kkk] + \"1\" + str[kkk+1:]\n                k = k + 1\n            print(str)    \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                "
                },
                {
                    "id": 33556705,
                    "submission_date": 1591036191,
                    "language": "PYTH 3",
                    "username": "pypimo",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.14",
                    "memory": "19M",
                    "solution": 33556705,
                    "code": "t = int(input())\n\nfor e in range(t):\n    n = int(input())\n\n    if n % 2 == 0:\n        print(\"NO\")\n    else:\n        print(\"YES\")\n\n        total = 0\n        for g in range(n):\n            total += g\n        num = total // n\n        \n        for i in range(n):\n            l = [0] * n\n            for j in range(i+1, i+1+num):\n                try:\n                    l[j] = 1\n                except IndexError:\n                    k = j - n\n                    l[k] = 1\n            for b in range(len(l)):\n                print(l[b], end = \"\")\n                \n            print()\n"
                }
            ]
        },
        "FASTFOOD": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "3\n3\n2 3 2\n10 3 4\n4\n7 5 3 4\n2 3 1 3\n2\n10 1\n1 10",
                    "output": "17\n19\n20",
                    "explanation": "Example case 1: The best time to move is before the first day.\nExample case 2: The best time to move is after the last day.\nExample case 3: The best time to move is after the first day."
                }
            ],
            "problem_statement": "Read problem statements in Hindi, Bengali, Mandarin Chinese, Russian, and Vietnamese as well.\nChef owns a fast food shop that is currently located in a city called Chefland. He is planning to move his shop to a bigger city called Chefabad. There are $N$ consecutive days (numbered $1$ through $N$) such that the move can be done before day $1$, after day $N$ or between any two consecutive days. Moving the shop takes zero time. Chef wants to time the move in a way thay maximises his profit during these $N$ days.\nFor each $i$ ($1 \\le i \\le N$), we know that if Chef's shop is in Chefland on the $i$-th day, he earns $A_i$ coins, while if it is in Chefabad on this day, he earns $B_i$ coins. Find the maximum profit Chef can make if he optimally chooses the time when the shop should move. Note that once the shop has moved to Chefabad, it cannot return to Chefland.\nInput\n\nThe first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\nThe first line of each test case contains a single integer $N$.\nThe second line contains $N$ space-separated integers $A_1, A_2, \\ldots, A_N$.\nThe third line contains $N$ space-separated integers $B_1, B_2, \\ldots, B_N$.\n\nOutput\nFor each test case, print a single line containing one integer \u2015 the maximum profit.\nConstraints\n\n$1 \\le T \\le 1,000$\n$1 \\le N \\le 10^5$\n$1 \\le A_i, B_i \\le 10^4$ for each valid $i$\nthe sum of $N$ over all test cases does not exceed $10^6$\n\nSubtasks\nSubtask #1 (50 points):\n- $1 \\le N \\le 1,000$\n- the sum of $N$ over all test cases does not exceed $10,000$\nSubtask #2 (50 points): original constraints",
            "input_format": "",
            "output_format": "",
            "problem_name": "Fast Food",
            "user_tags": [
                "Suffix Sum"
            ],
            "computed_tags": [
                "Algorithms",
                "Simple Algos"
            ],
            "problem_code_id": "FASTFOOD",
            "difficulty_level": "1530",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 34686374,
                    "submission_date": 1593001882,
                    "language": "PYTH 3",
                    "username": "ayushman_25",
                    "user_rating_star": 3,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.91",
                    "memory": "24.4M",
                    "solution": 34686374,
                    "code": "for _ in range(int(input())):\r\n    n = int(input())\r\n    a, b = list(map(int, input().split())), list(map(int, input().split()))\r\n    A, B = sum(a), sum(b)\r\n    sumsa, sumsb = [], []\r\n    tempa, tempb = 0, 0\r\n    for i in range(n):\r\n        tempa += a[i]\r\n        sumsa.append(tempa)\r\n    for i in range(1, n):\r\n        tempb += b[i - 1]\r\n        sumsb.append(B - tempb)\r\n    sumsb.append(0)\r\n    ans = 0\r\n    for i in range(n):\r\n        sum1 = sumsa[i] + sumsb[i]\r\n        if ans < sum1: ans = sum1\r\n    print(max(ans, A, B))"
                },
                {
                    "id": 33147372,
                    "submission_date": 1589790094,
                    "language": "PYTH 3",
                    "username": "aman_ravan02",
                    "user_rating_star": 3,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.55",
                    "memory": "18.5M",
                    "solution": 33147372,
                    "code": "for j in range(int(input())):\r\n    n=int(input())\r\n    x=list(map(int,input().split()))\r\n    y=list(map(int,input().split()))\r\n    a=sum(y)\r\n    t=a\r\n    for i in range(n):\r\n        a-=y[i]\r\n        a+=x[i]\r\n        if(a>t):\r\n            t=a\r\n    print(t)\r\n"
                }
            ]
        },
        "MEDIC": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "1\n2019:03:31",
                    "output": "1",
                    "explanation": "You can take pill on the right day only on 31st March. Next you will take it on 1st April which is not on the alternate day."
                }
            ],
            "problem_statement": "You visit a doctor on a date given in the format $yyyy:mm:dd$. Your doctor suggests you to take pills every alternate day starting from that day. You being a forgetful person are pretty sure won\u2019t be able to remember the last day you took the medicine and would end up in taking  the medicines on wrong days. \nSo you come up with the idea of taking medicine on the dates whose day is odd or even depending on whether $dd$ is odd or even. Calculate the number of pills you took on right time before messing up for the first time.\nNote:\nEvery year that is exactly divisible by four is a leap year, except for years that are exactly divisible by 100; the centurial years that are exactly divisible by 400 are still leap years. For example, the year 1900 is not a leap year; the year 2000 is a leap year.\nInput:\n\nFirst line will contain $T$, number of testcases. Then the testcases follow. \nEach testcase contains of a single line of input, in the format $yyyy:mm:dd$\n\nOutput:\nFor each testcase, output in a single line the required answer.\nConstraints\n\n$ 1 \\leq T \\leq 1000 $\n$ 1900 \\leq yyyy \\leq\u20092038 $\n$yyyy:mm:dd$ is a valid date",
            "input_format": "",
            "output_format": "",
            "problem_name": "When to take medicine",
            "user_tags": [
                "Basic Maths"
            ],
            "computed_tags": [
                "Mathematics"
            ],
            "problem_code_id": "MEDIC",
            "difficulty_level": "1522",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 36079730,
                    "submission_date": 1595941335,
                    "language": "PYTH 3",
                    "username": "guptaankit",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.02",
                    "memory": "17.6M",
                    "solution": 36079730,
                    "code": "try:\n    months_31 = [1, 3, 5, 7, 8, 10, 12]\n\n    def leap_year(year):\n        if  year % 400 == 0 or (year % 4 == 0 and year % 100 != 0):\n            return True\n        else:\n            return False\n\n    t = int(input())\n    for _ in range(t):\n        y, m, d = map(int, input().split(':'))\n        count = 0\n        if m in months_31:\n            count = (31 - d) // 2 + 1\n        elif m == 2:\n            if leap_year(y):\n                count = (29 - d) // 2 + 1\n            else:\n                if d % 2 == 0:\n                    count = (28 - d) // 2 + 1 + 15\n                else:\n                    count = (28 - d) // 2 + 1 + 16\n        else:\n            if d % 2 == 0:\n                count = (30 - d) // 2 + 1 + 15\n            else:\n                count = (30 - d) // 2 + 1 + 16\n        print(count)\nexcept:\n    pass"
                },
                {
                    "id": 35919195,
                    "submission_date": 1595679318,
                    "language": "PYTH 3",
                    "username": "vaseem_shaik",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.01",
                    "memory": "17.5M",
                    "solution": 35919195,
                    "code": "def isLeap(year):\r\n    if year % 400 == 0 or year % 4 == 0 and year % 100 != 0:\r\n        return True\r\n    return False\r\n\r\n\r\nDAYS = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\r\n\r\n\r\nntests = int(input())\r\n\r\nfor test in range(ntests):\r\n    year, month, day = map(int, input().split(':'))\r\n    count = 0\r\n\r\n    if month == 2:\r\n        if isLeap(year):\r\n            count = (29 - day) // 2 + 1\r\n        else:\r\n            count = (59 - day) // 2 + 1\r\n    elif DAYS[month] == 31:\r\n        count = (31 - day) // 2 + 1\r\n    else:\r\n        count = (61 - day) // 2 + 1\r\n\r\n    print(count)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"
                }
            ]
        },
        "CHSQR": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "2\n1\n3",
                    "output": "1\n3 2 1\n1 3 2\n2 1 3",
                    "explanation": ""
                }
            ],
            "problem_statement": "Read problems statements in Mandarin Chinese, Russian and Vietnamese as well.\n\u00a0\n\nChef has finished his freshman year in college. As a present, his parents gave him a new problem to solve:\n\nChef has to fill a K x K square grid of integers in a certain way. Let us say that such a grid is valid if:\n\nEach cell contains an integer from 1 and K (inclusive). \nNo integer appears twice in the same row or the same column.\n\n\nLet F(K) be maximum possible distance between the center of the square and the closest cell that contains 1, among all possible squares with the side length K.\n\n\nHere, we use the following notions:\n\n The distance between cell (x, y) and (i, j) is equal to |x-i|+|y-j|. \n The center of a K x K square is cell ((K+1)/2, (K+1)/2) for odd K. \n\nInput\n\nThe first line of input contains a single integer T denoting the number of test cases.\nEach test case consists of a single line containing a single odd integer K.\n\n\u00a0\nOutput\nFor each test case, print K lines each consisting of K space separated integers giving some square grid where the distance from the center of the grid to the nearest 1 is exactly F(K). If there's more than 1 possible answer output any of them.\n\u00a0\nConstraints\nKi is odd.\n\nSubtask #1 (10 points)  :\n 1 \u2264 T \u2264 50 \n 1 \u2264 Ki\u2264 5 \n\nSubtask #1 (90 points)  :\n 1 \u2264 T \u2264 10 \n 1 \u2264 Ki 400",
            "input_format": "",
            "output_format": "",
            "problem_name": "Chef and squares",
            "user_tags": [
                "Implementation"
            ],
            "computed_tags": [
                "Algorithms"
            ],
            "problem_code_id": "CHSQR",
            "difficulty_level": "1576",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 67434549,
                    "submission_date": 1655973406,
                    "language": "PYTH 3",
                    "username": "likhitha207",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.44",
                    "memory": "12.1M",
                    "solution": 67434549,
                    "code": "for _ in range(int(input())):\r\n    k=int(input())\r\n    mat=[[0 for i in range(k)] for j in range(k)]\r\n    mat[k//2]=[i for i in range(1,k+1)]\r\n   # print(mat)\r\n    z=[i for i in range(1,k+1)]\r\n    j=1\r\n    for i in range(k//2+1,k,1):\r\n        mat[i]=z[j:]+z[:j]\r\n        j+=1 \r\n   # print(mat)\r\n    j=k-1 \r\n    for i in range(k//2-1,-1,-1):\r\n        mat[i]=z[j:]+z[:j]\r\n        j-=1 \r\n    for i in range(k):\r\n        print(*(mat[i]))"
                },
                {
                    "id": 60996283,
                    "submission_date": 1647925101,
                    "language": "PYTH 3",
                    "username": "sasikumar_22",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.67",
                    "memory": "13M",
                    "solution": 60996283,
                    "code": "for _ in range(int(input())):\r\n   k = int(input()) \r\n   mat = [[0]*k for _ in range(k)]\r\n   start = (k+1)//2 \r\n   for i in range(k):\r\n      for j in range(k):\r\n         val = (start+j)%k\r\n         if val==0: val = k \r\n         mat[i][j] = val \r\n      start-=1 \r\n      if start==0:\r\n         start = k \r\n   for item in mat:\r\n      print(*item)\r\n      \r\n      "
                }
            ]
        },
        "PREDICT": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "1\n0.510",
                    "output": "10098",
                    "explanation": "Look at the following situation:\n\nIf chef  Datta bets 6,000 on team A and 4,000 on team B, the expected amount of money he will have after the bet is settled is 10,018. Apparently that is not the best he can do ;)"
                }
            ],
            "problem_statement": "Chef Datta likes betting in Indian Premier League very much.\nHe has 10000 rupees. Today the match is between team A and team B. The winning probability of team A is PA, and hence winning probability of team B is PB = 1 \u2212 PA. \nDatta is free to bet any integral amount of money on any of the two teams as long as the total amount of money bet is at most 10000 rupees.\nHelp him know the expected amount of money he will eventually have if today he places his bet(s) optimally.\nRules of the game:\nIf team X with winning probability PX actually wins and someone bets M rupees on this team, he will gain (2*(1\u2212PX)) * M rupees.\nIf team X with winning probability PX actually loses and someone bets N rupees on this team, he will just lose N rupees.\nInput\nFirst line contains single integer T, the number of testcases. Then T lines follow, each line contains PA the probability that team A wins.\nOutput\nFor each test case output single line containing the expected amount of money Datta will eventually have today if he places his bet(s) optimally. Your answer will be accepted if the absolute error is less than 10\u22126.\nConstraints\n1 \u2264 T \u2264 100001 (105+1)\n0.0 \u2264  PA \u2264 1.0\nPA has at most 5 digits after the decimal point.",
            "input_format": "",
            "output_format": "",
            "problem_name": "Predictopus",
            "user_tags": [
                "easy",
                "june13",
                "mani_adm",
                "probability"
            ],
            "computed_tags": [],
            "problem_code_id": "PREDICT",
            "difficulty_level": "1510",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 50035988,
                    "submission_date": 1629560889,
                    "language": "PYTH 3",
                    "username": "codetilldawn07",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.64",
                    "memory": "17.6M",
                    "solution": 50035988,
                    "code": "def solve(x, a):\n    gain = 2*(1-x)*a\n    return gain*x-a*(1-x)\n\nfor _ in range(int(input())):\n    p = float(input())\n    print(10000+solve(max(p, 1-p), 10000))"
                },
                {
                    "id": 25354199,
                    "submission_date": 1563564728,
                    "language": "PYTH 3",
                    "username": "rishabh9120",
                    "user_rating_star": 4,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.55",
                    "memory": "17.6M",
                    "solution": 25354199,
                    "code": "def money(p,c=10000):\n    p=max(p,1-p)\n    x=p*(3-2*p)\n    return(c*x)\nt=int(input())\nfor i in range(t):\n    p=float(input())\n    print(money(p))\n"
                }
            ]
        },
        "EVENT": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "3\nsaturday sunday 2 4\nmonday wednesday 1 20\nsaturday sunday 3 5",
                    "output": "2\nmany\nimpossible",
                    "explanation": ""
                }
            ],
            "problem_statement": "Read problems statements Mandarin , Bengali , Hindi , Russian and Vietnamese as well.\nChef is a very experienced and well-known cook. He has participated in many cooking competitions in the past \u2014 so many that he does not even remember them all.\nOne of these competitions lasted for a certain number of days. The first day of the competition was day $S$ of the week (i.e. Monday, Tuesday etc.) and the last day was day $E$ of the week. Chef remembers that the duration of the competition (the number of days between the first and last day, inclusive) was between $L$ days and $R$ days inclusive. Is it possible to uniquely determine the exact duration of the competition? If so, what is this duration?\nInput\n\nThe first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\nThe first and only line of each test case contains two space-separated strings $S$ and $E$, followed by a space and two space-separated integers $L$ and $R$.\n\nOutput\nFor each test case, print a single line containing:\n- the string \"impossible\" if there is no duration consistent with all given information\n- the string \"many\" if there is more than one possible duration\n- one integer \u2014 the duration of the competition, if its duration is unique\nConstraints\n\n$1 \\le T \\le 10,000$\n$1 \\le L \\le R \\le 100$\n$S$ is one of the strings \"saturday\", \"sunday\", \"monday\", \"tuesday\", \"wednesday\", \"thursday\" or \"friday\"\n$E$ is one of the strings \"saturday\", \"sunday\", \"monday\", \"tuesday\", \"wednesday\", \"thursday\" or \"friday\"\n\nSubtasks\nSubtask #1 (100 points): original constraints",
            "input_format": "",
            "output_format": "",
            "problem_name": "Event",
            "user_tags": [
                "Basic Maths",
                "Implementation"
            ],
            "computed_tags": [
                "Mathematics",
                "Algorithms"
            ],
            "problem_code_id": "EVENT",
            "difficulty_level": "1549",
            "ai_solutions": [
                "def solve():\n    T = int(input().strip())\n    days = [\"saturday\", \"sunday\", \"monday\", \"tuesday\", \"wednesday\", \"thursday\", \"friday\"]\n    for _ in range(T):\n        S, E, L, R = input().strip().split()\n        L = int(L)\n        R = int(R)\n        start = days.index(S)\n        end = days.index(E)\n        duration = (end - start + 1) % 7\n        if duration < L:\n            duration += 7\n        if duration > R:\n            print(\"impossible\")\n        elif duration + 7 <= R:\n            print(\"many\")\n        else:\n            print(duration)\n\nsolve()",
                "def solve():\n    T = int(input().strip())\n    days = [\"saturday\", \"sunday\", \"monday\", \"tuesday\", \"wednesday\", \"thursday\", \"friday\"]\n    for _ in range(T):\n        S, E, L, R = input().strip().split()\n        L = int(L)\n        R = int(R)\n        start = days.index(S)\n        end = days.index(E)\n        duration = (end - start + 1) % 7\n        if duration < L:\n            duration += 7\n        if duration > R:\n            print(\"impossible\")\n        elif L <= duration <= R:\n            if duration + 7 <= R:\n                print(\"many\")\n            else:\n                print(duration)\n        else:\n            print(\"impossible\")\n\nsolve()"
            ],
            "human_solutions": [
                {
                    "id": 34836931,
                    "submission_date": 1593331692,
                    "language": "PYTH 3",
                    "username": "anusha_2024",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.11",
                    "memory": "17.6M",
                    "solution": 34836931,
                    "code": "a=int(input())\r\nfor t in range(a):\r\n   s,e,l,r=input().split()\r\n   l,r=[int(j) for j in (l,r)]\r\n   days=[\"saturday\",\"sunday\",\"monday\",\"tuesday\",\"wednesday\",\"thursday\",\"friday\"]\r\n   x=days.index(s)\r\n   y=days.index(e)\r\n   if y>=x:\r\n     diff=y-x+1\r\n   else:\r\n     diff=7-(x-y)+1\r\n   adiff=(r-diff)//7-(l-diff)//7\r\n   c=0\r\n   val=-1\r\n   for k in range(l-diff,r-diff+1):\r\n       if k%7==0:\r\n          c+=1\r\n          val=k+diff\r\n   if c==0:\r\n      print(\"impossible\")\r\n   elif c==1:\r\n      print(val)\r\n   else:\r\n      print(\"many\")"
                },
                {
                    "id": 34737222,
                    "submission_date": 1593192998,
                    "language": "PYTH 3",
                    "username": "susmitha_535",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.09",
                    "memory": "17.6M",
                    "solution": 34737222,
                    "code": "T = int(input())\nfor t in range(T):\n    S,E,L,R = input().split()\n    L,R = [int(i) for i in (L,R)]\n    \n    \n    days= [\"saturday\", \"sunday\", \"monday\", \"tuesday\", \"wednesday\", \"thursday\" ,\"friday\"]\n    S_ind = days.index(S)\n    E_ind = days.index(E)\n    \n    if E_ind >= S_ind:\n        diff = E_ind - S_ind + 1\n    else:\n        diff = 7 - (S_ind-E_ind) + 1\n        \n    ans_diff  = (R-diff)//7 - (L-diff)//7\n    \n\n    count = 0\n    last_val = -1\n    for i in range(L-diff,R-diff+1):\n        if i%7== 0:\n            count +=1\n            last_val = i+diff\n    if count == 0:\n        print('impossible')\n    elif count == 1:\n        print(last_val)\n    else:\n        print('many')\n             "
                }
            ]
        },
        "SPOTWO": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [],
            "problem_statement": "Read problems statements in  Mandarin Chinese  and  Russian.\nCyael is a very gifted girl who loves Magic (she even reached the finals on a very famous tournament in Byteland ;) ) and Computer Science. As we know, CS is a very vast subject and Cyael learns what she can, little by little, by reading the editorials of codechef.com, her favourite programming website.\nToday, she came across a problem that was about calculating powers of two, and she got bored of it really fast, as she considers she knows all there is to know about powers of two. She knows how to compute even very big powers, like powers of 10, so it's obvious that for her, powers of two have no secrets :D\nBut her friend Lira, as she was tired of hearing her boasting about her skills for calculating powers, decided to challenge her with a brand new task: computing what she calls,  SuperPowers of 2 . \n Cyael: \"Okay Lira, tell me about SuperPower of 2 so that I can solve one more problem and prepare for Codechef's November Long Challenge!! It's less than a month away!\"\n Lira: \"I define the Nth Superpower of 2 as being the number (2N_bin)2 , where N_bin stands for the decimal number encoded by the representation in base 2 of the number N.\nSo, for example, the 2nd SuperPower of 2 is then equal to the number:\n(210)2 = 1048576\n because,  N = 2 , and its binary encoding is 10 in decimal it is ten. So 210 = 1024 and 10242 = 1048576 \nSince the answer can be large, you are asked to compute SuperPowers of 2 modulo 1000000007.\"\nAfter some time, Cyael finally solved the problem and decided to call Lira:\n Cyael: \"Well, I admit I struggled more than I'd have expected on this problem... You should consider becoming a problem setter and set this problem for Codechef... Do you want me to call Bruno and ask him to set this problem on your behalf? He always finds a way of writing a fun problem statement!!\" \n Lira: \"Wooow!! That means Codechef community would solve my problem, modified by Bruno himself? Please do so, I'd love it!!!\" \n And now, here I am (yes, Bruno :D ) setting Lira's problem to all of you, but, with some differences regarding Lira's initial version, which hopefully you will appreciate. \nInput\nThe first line of the input contains an integer T denoting the number of test cases.\nThen on the following T lines, there is an integer N, denoting the index of the SuperPower of 2 you need to compute modulo 1000000007.\nOutput\nFor each test case, output a single line containing the required value: the Nth SuperPower of 2 modulo 1000000007.\n\nConstraints\n\n1 \u2264 N \u2264 600000\nT = 100000 on each official test-case file.\nNote: Your code will be judged against several input files.\n\nExample\nInput:\n100000\n1\n2\n(and 99998 more test cases...)\n\nOutput:\n4\n1048576\n(and 99998 more answers...)",
            "input_format": "",
            "output_format": "",
            "problem_name": "Superpowers of 2",
            "user_tags": [
                "Modular Exponentiation",
                "Fermat's Little Theorem"
            ],
            "computed_tags": [
                "Mathematics",
                "Modular Arithmetic"
            ],
            "problem_code_id": "SPOTWO",
            "difficulty_level": "1593",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 35375103,
                    "submission_date": 1594256643,
                    "language": "PYTH 3",
                    "username": "smokeyhom",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "2.16",
                    "memory": "17.6M",
                    "solution": 35375103,
                    "code": "\nmod = 1000000007\n\ndef mod_exp(b, e, m):\n    res = 1\n    b %= m\n    while e:\n        if e&1: res = (res*b) % m\n        e >>= 1\n        b = (b*b) % m\n    return res\n    \nfor _ in range(int(input())):\n    n = int(input())\n    b = int(bin(n)[2:])\n    print (mod_exp(2, 2*b, mod))\n    "
                },
                {
                    "id": 32114550,
                    "submission_date": 1587464459,
                    "language": "PYTH 3",
                    "username": "shubhamiitbh",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "1.26",
                    "memory": "17.6M",
                    "solution": 32114550,
                    "code": "for _ in range(int(input())):print(pow(2,2*int(bin(int(input())).replace(\"0b\", \"\") ),10**9 + 7))"
                }
            ]
        },
        "BIPIN3": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "2\n2 2\n3 3",
                    "output": "2\n12",
                    "explanation": ""
                }
            ],
            "problem_statement": "Read problems statements in Mandarin Chinese, Russian and Vietnamese as well.\nZombies zombies everywhere!!\u00a0\nIn a parallel world of zombies, there are N zombies. There are infinite number of unused cars, each of same model only differentiated by the their colors. The cars are of K colors.\n\n\nA zombie parent can give birth to any number of zombie-children (possibly zero), i.e. each zombie will have its parent except the head zombie which was born in the winters by combination of ice and fire.\n\n\nNow, zombies are having great difficulties to commute to their offices without cars, so they decided to use the cars available. Every zombie will need only one car. Head zombie called a meeting regarding this, in which he will allow each zombie to select a car for him.\n\n\nOut of all the cars, the head zombie chose one of cars for him. Now, he called his children to choose the cars for them. After that they called their children and so on till each of the zombie had a car. Head zombie knew that it won't be a good idea to allow children to have cars of same color as that of parent, as they might mistakenly use that. So, he enforced this rule during the selection of cars.\n\nProfessor James Moriarty is a criminal mastermind and has trapped Watson again in the zombie world. Sherlock somehow manages to go there and met the head zombie. Head zombie told Sherlock that they will let Watson free if and only if Sherlock manages to tell him the maximum number of ways in which the cars can be selected by N Zombies among all possible hierarchies. A hierarchy represents parent-child relationships among the N zombies. Since the answer may be large, output the answer modulo 109 + 7. Sherlock can not compute big numbers, so he confides you to solve this for him.\n\nInput\nThe first line consists of a single integer T, the number of test-cases.\nEach test case consists of two space-separated integers N and K, denoting number of zombies and the possible number of colors of the cars respectively.\n\nOutput\nFor each test-case, output a single line denoting the answer of the problem.\nConstraints\n\n1 \u2264 T \u2264 100\n1 \u2264 N \u2264 10^9\n1 \u2264 K \u2264 10^9\n\nSubtasks\n\nSubtask #1 : (10 points)\n\n\n1 \u2264 T \u2264 20\n1 \u2264 N, K \u2264 10\n\n\n\nSubtask 2 : (20 points) \n\n\n1 \u2264 T \u2264 10\n1 \u2264 N, K \u2264 10000\n\n\n\nSubtask 3 : (70 points) \n\n\n1 \u2264 T \u2264 100\n1 \u2264 N, K \u2264 10^9",
            "input_format": "",
            "output_format": "",
            "problem_name": "Help Watson Escape",
            "user_tags": [
                "Binary Exponentiation",
                "Modular Exponentiation"
            ],
            "computed_tags": [
                "Mathematics",
                "Number Theory",
                "Modular Arithmetic",
                "Exponentiation"
            ],
            "problem_code_id": "BIPIN3",
            "difficulty_level": "1574",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 81565605,
                    "submission_date": 1669965449,
                    "language": "PYTH 3",
                    "username": "divya_8978",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.02",
                    "memory": "9.6M",
                    "solution": 81565605,
                    "code": "\r\nt = int(input())\r\nfor i in range(t):\r\n    n,k = map(int,input().split())\r\n    m = (10**9)+7\r\n    d=((k%m)*pow(k-1,n-1,m)%m)\r\n    print(d)\r\n"
                },
                {
                    "id": 81183827,
                    "submission_date": 1669625280,
                    "language": "PYTH 3",
                    "username": "shivanimehta21",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.02",
                    "memory": "9.6M",
                    "solution": 81183827,
                    "code": "t = int(input())\r\nfor i in range(t):\r\n    n,k = map(int,input().split())\r\n    m = (10**9)+7\r\n    d=((k%m)*pow(k-1,n-1,m)%m)\r\n    print(d)"
                }
            ]
        },
        "CMPRSS": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "3\r\n12\r\n1 2 3 5 6 8 9 10 11 12 15 17\r\n4\r\n4 5 7 8\r\n1\r\n4",
                    "output": "1...3,5,6,8...12,15,17\r\n4,5,7,8\r\n4",
                    "explanation": "Example case 1:\n- $(1, 2, 3)$ is a contiguous subsequence with length $3$, so it is replaced by the string \"1...3\"\n- $(5, 6)$ is a contiguous subsequence, but only with length $2$, so it is not compressed into a range\n- $(8, 9, 10, 11, 12)$ is a contiguous subsequence with length $5$, so it is replaced by \"8...12\"\n- the elements $15$, $17$ are unaffected"
                }
            ],
            "problem_statement": "Read problem statements in Bengali, Mandarin Chinese, Russian, and Vietnamese as well.\nYou are given a strictly increasing sequence of integers $A_1, A_2, \\ldots, A_N$. Your task is to compress this sequence.\nThe compressed form of this sequence is a sequence of ranges separated by commas (characters ','). A range is either an integer or a pair of integers separated by three dots (the string \"...\"). When each range a...b in the compressed form is decompressed into the subsequence $(a, a+1, \\ldots, b)$, we should obtain the (comma-separated) sequence $A$ again.\nFor each maximal contiguous subsequence $(a, a+1, \\ldots, b)$ of $A$ such that $b \\ge a+2$, the compressed form of $A$ must contain the range a...b; if $b \\le a+1$, such a sequence should not be compressed into a range. A contiguous subsequence is maximal if it cannot be extended by at least one element of $A$ next to it. It can be proved that the compressed form of any sequence is unique (i.e. well-defined).\nInput\n\nThe first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\nThe first line of each test case contains a single integer $N$.\nThe second line contains $N$ space-separated integers $A_1, A_2, \\ldots, A_N$.\n\nOutput\nFor each test case, print a single line containing one string \u2015 the compressed form of the given sequence.\nConstraints\n\n$1 \\le T \\le 100$\n$1 \\le N \\le 100$\n$1 \\le A_i \\le 1,000$ for each valid $i$\n$A_1 \\lt A_2 \\lt \\ldots \\lt A_N$\n\nSubtasks\nSubtask #1 (100 points): original constraints",
            "input_format": "",
            "output_format": "",
            "problem_name": "Compress the List",
            "user_tags": [
                "Implementation"
            ],
            "computed_tags": [
                "Algorithms"
            ],
            "problem_code_id": "CMPRSS",
            "difficulty_level": "1519",
            "ai_solutions": [
                "T = int(input())\nfor _ in range(T):\n    N = int(input())\n    A = list(map(int, input().split()))\n    i = 0\n    while i < N:\n        j = i\n        while j < N - 1 and A[j] + 1 == A[j + 1]:\n            j += 1\n        if i == j:\n            print(A[i], end='')\n        elif i + 1 == j:\n            print(A[i], A[j], sep=',', end='')\n        else:\n            print(A[i], A[j], sep='...', end='')\n        if j < N - 1:\n            print(',', end='')\n        i = j + 1\n    print()",
                "T = int(input())\nfor _ in range(T):\n    N = int(input())\n    A = list(map(int, input().split()))\n    i = 0\n    result = []\n    while i < N:\n        j = i\n        while j < N - 1 and A[j] + 1 == A[j + 1]:\n            j += 1\n        if i == j:\n            result.append(str(A[i]))\n        elif i + 1 == j:\n            result.append(str(A[i]))\n            result.append(str(A[j]))\n        else:\n            result.append(str(A[i]) + '...' + str(A[j]))\n        i = j + 1\n    print(','.join(result))"
            ],
            "human_solutions": [
                {
                    "id": 30146958,
                    "submission_date": 1583609665,
                    "language": "PYTH 3",
                    "username": "vanka_mallika",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.01",
                    "memory": "17.6M",
                    "solution": 30146958,
                    "code": "for _ in range(int(input())):\n    n=int(input())\n    x=list(map(int,input().split()))\n    i=0\n    w=[]\n    while(i<n):\n        if(i+2<n and x[i]+2==x[i+2]):\n            a=i+2;\n            s=x[i]\n            l=x[i+2]\n            i+=3\n            while(a+1<n and x[a]+1==x[a+1]):\n                l=x[a+1]\n                a+=1 \n                i=a+1 \n            w.append(str(s)+\"...\"+str(l))\n        else:\n            w.append(str(x[i]))\n            i+=1 \n    print(\",\".join(w))\n"
                },
                {
                    "id": 29951783,
                    "submission_date": 1582972121,
                    "language": "PYTH 3",
                    "username": "codeflinger",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.02",
                    "memory": "17.6M",
                    "solution": 29951783,
                    "code": "def printOutput(isFirst, s, sl):\n    if isFirst==False:\n        print(',',end='')\n    if sl>2:\n        print(str(s) + '...' + str(s+sl-1),end='')\n    elif sl==2:\n        print(str(s) + ',' + str(s+1),end='')\n    else:\n        print(str(s),end='')\n\ntc = int(input())\nfor i in range(tc):\n    n = int(input())\n    x = input().split()\n    s=int(x[0])\n    sl=1\n    isFirst = True\n    for j in range(1,n):\n        if int(x[j])==s+sl:\n            sl = sl + 1\n        else:\n            printOutput(isFirst,s,sl)\n            isFirst=False\n            s = int(x[j])\n            sl = 1\n        if j==n-1:\n            printOutput(isFirst,s,sl)\n    if n==1:\n        printOutput(isFirst,s,sl)\n    print('')\n"
                }
            ]
        },
        "LTM40AB": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "1\n2 3 3 4",
                    "output": "3",
                    "explanation": ""
                },
                {
                    "input": "1\n2 999999 1 1000000",
                    "output": "499998500001",
                    "explanation": ""
                }
            ],
            "problem_statement": "Read problems statements in Mandarin Chinese, Russian and Vietnamese as well.\nChef likes inequalities. Please help him to solve next one.\nGiven four integers a, b, c, d. Find number of solutions x y, where a \u2264 x \u2264 b and c \u2264 y \u2264 d and x, y integers.\n\nInput\nThe first line contains an integer T denoting number of tests.\nFirst line of each test case contains four positive integer numbers a, b, c and d.\nOutput\nFor each test case, output a single number each in separate line denoting number of integer solutions as asked in the problem.\nConstraints\n1 \u2264 T \u2264 20 \n1 \u2264 a, b, c, d \u2264 106\n\nSubtasks\nSubtask #1: (30 points)  1 \u2264 a, b, c, d \u2264 103.\nSubtask #2: (70 points)  Original constraints.",
            "input_format": "",
            "output_format": "",
            "problem_name": "Chef and Inequality",
            "user_tags": [
                "Combinatorics"
            ],
            "computed_tags": [
                "Mathematics"
            ],
            "problem_code_id": "LTM40AB",
            "difficulty_level": "1550",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 35835142,
                    "submission_date": 1595252369,
                    "language": "PYTH 3",
                    "username": "ronencc",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.02",
                    "memory": "17.5M",
                    "solution": 35835142,
                    "code": "def solve(a , b , c , d):\n    x = ( a , min( b , d - 1) )\n    y = ( max( c , a + 1 ) , d )\n    n = x[1] - x[0] + 1\n    m = y[1] - y[0] + 1\n    if n < 0 or m < 0:\n        ans = 0\n    else:\n        ans = n * m\n        cmn = x[1] - y[0] + 1\n        if cmn > 0:\n            ans -= (cmn**2 - cmn) // 2\n            ans -= cmn\n    return ans\n\nT = int(input().strip())\nfor _ in range(T):\n    a , b , c , d = map(int , input().strip().split(' '))\n    ans = solve(a , b , c , d)\n    print(ans)"
                },
                {
                    "id": 35641267,
                    "submission_date": 1594796037,
                    "language": "PYTH 3",
                    "username": "wicked_knight",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.40",
                    "memory": "17.6M",
                    "solution": 35641267,
                    "code": "for _ in range(int(input())):\r\n\ta,b,c,d = map(int , input().split())\r\n\tx = c - a\r\n\tp = b - a + 1\r\n\tq = d - c + 1\r\n\tans = 0\r\n\tif(x <= 0):\r\n\t\tt = q - abs(x) - 1\r\n\t\tfor j in range(t, max(0,d - b - 1), -1):\r\n\t\t\tans += j\r\n\tif(x > 0):\r\n\t\tt = q\r\n\t\tfor j in range(x, max(0, c - b - 1), -1):\r\n\t\t\tans += t\r\n\t\tif(c - b <= 0):\r\n\t\t\tfor j in range(t - 1, max(0, d - b - 1), -1):\r\n\t\t\t\tans += j\r\n\tprint(ans)"
                }
            ]
        },
        "CKISSHUG": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "3\n1\n2\n3",
                    "output": "2\n4\n6",
                    "explanation": "<p>\n    In the first case the possible ways are\n</p>\n<p>\n    K, H\n</p>\n<p>\n    Second case:\n</p>\n<p>\n    KH, HK, HH, KK\n</p>\n<p>\n    Third case:\n</p>\n<p>\n    HHH, HHK, HKH, HKK, KHK, KKK\n</p>"
                }
            ],
            "problem_statement": "Princess Artapoelc greeted her guests by either kissing on the cheek (K) or hugging (H). From the first guest \n\nshe kisses, she has a\ncompulsion to necessarily kiss every alternate guest from that first kissed guest. That is if the guests are G1, \n\nG2, ..., Gi, Gi+1, ..., Gn and if she first kissed Gi then she must necessarily kiss \n\nGi+2, Gi+4, Gi+6 ... till the last\n        possible guest. Your task is to determine in how many ways she can greet N guests.\n    \n\nInput\n\nFirst line of the input contains T (T \u2264 1000) denoting the number of test cases.\n\nT\n        lines follow each containing a single integer N (1 \u2264 N \u2264 10^9) denoting the number of guests.\n    \n\n\n\n\nOutput\n\n\n        For each case the output should be a single integer representing the number of ways Artapoelc can greet N guests. As the \n\nanswer can be large\n        print it modulo 1000000007.",
            "input_format": "",
            "output_format": "",
            "problem_name": "Kisses & Hugs",
            "user_tags": [
                "Modular Exponentiation",
                "GP"
            ],
            "computed_tags": [
                "Mathematics",
                "Modular Arithmetic",
                "Sequences and Progression"
            ],
            "problem_code_id": "CKISSHUG",
            "difficulty_level": "1597",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 37152506,
                    "submission_date": 1598409959,
                    "language": "PYTH 3",
                    "username": "gul2612",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.03",
                    "memory": "17.6M",
                    "solution": 37152506,
                    "code": "import math\nmod=10**9+7\nt=int(input())\nwhile t:\n    n=int(input())\n    p1=math.ceil((n+1)/2)\n    p2=math.floor((n+1)/2)\n    ans1=pow(2,p1,mod)\n    ans2=pow(2,p2,mod)\n    ans=(ans1+ans2-2)%mod\n    print(ans)\n    t-=1\n"
                },
                {
                    "id": 35856973,
                    "submission_date": 1595331759,
                    "language": "PYTH 3",
                    "username": "ghfg345",
                    "user_rating_star": 3,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.03",
                    "memory": "17.5M",
                    "solution": 35856973,
                    "code": "import math\nfor _ in range(int(input())):\n    n=int(input())\n    p=(pow(2,math.ceil((n+1)/2),10**(9)+7)+pow(2,math.floor((n+1)/2),10**(9)+7)-2)%(10**(9)+7)\n    print(p)"
                }
            ]
        },
        "EGBOBRD": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "3\n3 4\n3 1 2\n1 1\n1\n2 4\n8 8",
                    "output": "2\n1\n4",
                    "explanation": "Test case 1 has already been explained in the statement.\n\n\nIn test case 2, we have one day tour and packages with one piece each. In the first day, we have to eat one piece of bread, so we open a package and eat one piece. Tour ended, and our answer is 1.\n\n\nIn test case 3, we have a two days tour, and packages with 4 pieces of bread each. In the first day, we have to eat 8 pieces. We need to open two packages and eat all the pieces. In the second day, we have to eat 8 pieces again. We open two packages and eat all pieces. Tour ended. Answer is 4."
                }
            ],
            "problem_statement": "Read problems statements in Mandarin Chinese  and Russian.\nSome chefs go for a tour lasting N days. They take packages of bread for food. Each package has K pieces of breads. On the ith day, they eat Ai pieces of bread.\nUnfortunately, chefs are very lazy people, and they always forget to close the package of breads, so each day the last piece of bread becomes exposed to mold (a fungus), and is no longer suitable for eating. Such a bad piece is not eaten, and is instead thrown away. \nLet us take an example. If K = 4 and N = 3, then A = {3, 1, 2}. Chefs have packages of bread each having 4 pieces of bread, and their travel lasts 3 days. In the first day, they must eat 3 pieces of bread. So they open new package of bread and eat 3 pieces. They forget to close the package, so the 4th piece becomes bad. In the next day, they want to eat one piece of bread. And in the first package we don't have any good pieces of bread left, so they open a new package of bread and eat one piece from that. On the 3rd day, they want to eat 2 pieces of bread. In the second package, we have three pieces, and one of them is bad; so we have 2 good pieces. They eat 2 pieces from this package. So they must buy 2 packages of bread.\nPlease help chefs in finding out the minimum number of packages of breads they should take with them on the tour.\nInput\nThe first line of input contains a single integer T denoting the number of test cases.\nThe first line of each test contains two space separated integers N and K.\nThe next line of each test case contains N space separated integers denoting the number of pieces of bread the chefs want to eat each day.\n\nOutput\nFor each of the T test cases, output a single line - minimum number of packages of bread the chefs should take.\nConstraints and Subtasks\n1 \u2264 T \u2264 10\n\n \nSubtask 1: 15 points\n1 \u2264 N \u2264 100\n1 \u2264 K \u2264 100\n1 \u2264 Ai \u2264 100\n\n \nSubtask 2: 25 points\n1 \u2264 N \u2264 10^5\n1 \u2264 K \u2264 10^6\n1 \u2264 Ai \u2264 10^6\n\n \nSubtask 3: 60 points\n1 \u2264 N \u2264 10^5\n1 \u2264 K \u2264 10^11\n1 \u2264 Ai \u2264 10^6",
            "input_format": "",
            "output_format": "",
            "problem_name": "Bread",
            "user_tags": [
                "Arithmetic"
            ],
            "computed_tags": [
                "Mathematics",
                "Basic Maths"
            ],
            "problem_code_id": "EGBOBRD",
            "difficulty_level": "1549",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 65948832,
                    "submission_date": 1654152528,
                    "language": "PYTH 3",
                    "username": "mridul474",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.66",
                    "memory": "25.3M",
                    "solution": 65948832,
                    "code": "import math\r\nt = int(input())\r\nfor tc in range(0,t):\r\n\tn, k = [int(i) for i in input().split()]\r\n\ta = [int(i) for i in input().split()]\r\n\t\r\n\tcur = 0\r\n\tans = 0\r\n\t\r\n\tfor i in range(0,n):\r\n\t\tif a[i] < cur:\r\n\t\t\tcur = cur - a[i]\r\n\t\telse:\r\n\t\t\tx = math.ceil((a[i] - cur)/k)\r\n\t\t\tans = ans + int(x)#convert x to int so that answer is an integer\r\n\t\t\tcur = cur + (x * k - a[i])\r\n\t\tif cur > 0:\r\n\t\t\tcur = cur - 1\r\n\tprint(ans)#the final answer should be an integer amount of packages"
                },
                {
                    "id": 59912893,
                    "submission_date": 1646812174,
                    "language": "PYTH 3",
                    "username": "jose_adrian",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.47",
                    "memory": "25.2M",
                    "solution": 59912893,
                    "code": "T=int(input())\nfor ti in range(T):\n    n,k=map(int,input().split())\n    A=list(map(int,input().split()))\n    res=0\n    nump=0\n    for ai in range(len(A)):\n        if(A[ai]>=res):\n            fd=A[ai]-res\n            pi=fd//k\n            nump+=pi\n            #print(\"a\")\n            if pi>0:\n                if fd%k==0:\n                    res=0\n                else:\n                    res=k-fd%k-1\n                    nump+=1\n            else:\n                if fd%k==0:\n                    res=0\n                else:\n                    res=k-fd-1\n                    nump+=1\n        else:\n            fd=res-A[ai]\n            res=fd-1\n        #print(fd)\n        #print(nump)\n    print(nump)"
                }
            ]
        },
        "SMRSTR": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "2\n2 3\n2 3\n5 100 8\n3 2\n2 2 2\n16 8",
                    "output": "0 16 1\n2 1",
                    "explanation": "Example case 1. [[5 / 2] / 3] = 0, [[100 / 2] / 3] = 16, [[8 / 2] / 3] = 1"
                }
            ],
            "problem_statement": "Read problems statements in Mandarin chinese, Russian and Vietnamese as well.\nChef found a very useful open-source code for the current problem. Unfortunately, one fragment of code isn't optimized. Consider that problem: given an array D of size N and Q queries X to the following open-source code:\n\n\nread X\nfor i = 1..N:\n \u2003  X = floor(X / D[i])\nprint X\n\n\nHelp Chef to optimize that code for all possible X, he will be very thankful :)\nInput\n\nThe first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows.  The first line of each test case contains two integers - N and Q. The second line contains array D. The third line contains Q queries - X1, X2, ..., XQ. \n\n\u00a0\nOutput\n\nFor every test case in single line output Q integers - for each Xi output result for this query.\n\n\u00a0\nConstraints\n\n1 \u2264 T \u2264 1000\n1 \u2264 N, Q \u2264 105\n1 \u2264 Xi, Di \u2264 109\n Sum of N over all test cases \u2264 3*105\n Sum of Q over all test cases \u2264 3*105\n\n\u00a0\nSubtasks\n\nSubtask #1: (25 points)  sum of N over all test cases \u2264 3*103 and sum of Q over all test cases \u2264 3*103 \nSubtask #2: (75 points)  Original constraints",
            "input_format": "",
            "output_format": "",
            "problem_name": "Smart Strategy",
            "user_tags": [
                "Basic Maths",
                "Observation"
            ],
            "computed_tags": [
                "Mathematics",
                "Algorithms"
            ],
            "problem_code_id": "SMRSTR",
            "difficulty_level": "1583",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 35321950,
                    "submission_date": 1594179645,
                    "language": "PYTH 3",
                    "username": "sanskritim",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "1.97",
                    "memory": "18.1M",
                    "solution": 35321950,
                    "code": "\"\"\"import math\nt=int(input())\nfor _ in range(t):\n    n,q=map(int,input().split())\n    d=[int(x) for x in input().split()]\n    q=[int(y) for y in input().split()]\n    res=1\n    for i in range(len(q)):\n        res=q[i]\n        for j in range(len(d)):\n            res=(res//d[j])\n            \n        print(res,end=' ')\n    print()\"\"\"\nt=int(input())\nfor i in range(t):\n    n,q=map(int,input().split(' '))\n    d=list(map(int,input().split()))\n    Q=list(map(int,input().split()))\n    j=1\n    for k in d:\n        j*=k\n    for i in Q:\n        x=i//j\n        print(x,end=\" \")\n    print(\"\")    "
                },
                {
                    "id": 35086820,
                    "submission_date": 1593870226,
                    "language": "PYTH 3",
                    "username": "yarlagadda",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.59",
                    "memory": "79.3M",
                    "solution": 35086820,
                    "code": "import numpy\r\nfor _ in range(int(input())):\r\n    n,q=map(int,input().split())\r\n    d=[int(i) for i in input().split()]\r\n    x=[int(j) for j in input().split()]\r\n    result=numpy.prod(d)\r\n    for i in range(q):\r\n        print(x[i]//result,end=' ')"
                }
            ]
        },
        "SDSQUARE": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "2\n1 10\n100 10000",
                    "output": "3\n9",
                    "explanation": ""
                }
            ],
            "problem_statement": "Read problems statements in  Mandarin Chinese  and  Russian.\nRecently Chef become very much interested in perfect squares. We all know Chef and his weird interests. Anyways Chef will be soon writing his masters thesis on perfect squares revealing what-not-known properties of perfect squares.\nWhile doing his research, he happened to be confronted with some interesting perfect squares. These prefect squares consists only of digits which are themselves perfect squares. 0, 1, 4 and 9 are such digits. These are called perfect digits.\nAs we all know Chef also has habit of asking too many questions, he is asking- given two numbers a and b, how many perfect squares exists between these two numbers inclusive, that contains only perfect digits.\u00a0\nInput:\nFirst line of input will contains T, number of test cases. Then T lines follows, each containing two positive integers a and b.\n Constraints:\nT \n1\nOutput:\nFor each input, output number of perfect digit squares between given numbers.\u00a0\nSample",
            "input_format": "",
            "output_format": "",
            "problem_name": "Square Digit Squares",
            "user_tags": [
                "Pre processing",
                "Brute Force"
            ],
            "computed_tags": [
                "Advanced Algorithms",
                "Algorithms"
            ],
            "problem_code_id": "SDSQUARE",
            "difficulty_level": "1521",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 32895124,
                    "submission_date": 1588986253,
                    "language": "PYTH 3",
                    "username": "hpam",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.02",
                    "memory": "17.6M",
                    "solution": 32895124,
                    "code": "n = [0, 1, 4, 9, 49, 100, 144, 400, 441, 900, 1444, 4900, 9409, 10000, 10404, 11449, 14400, 19044, 40000, 40401, 44100, 44944, 90000, 144400, 419904, 490000, 491401, 904401, 940900, 994009, 1000000, 1004004, 1014049, 1040400, 1100401, 1144900, 1440000, 1904400, 1940449, 4000000, 4004001, 4040100, 4410000, 4494400, 9000000, 9909904, 9941409, 11909401, 14010049, 14040009, 14440000, 19909444, 40411449, 41990400, 49000000, 49014001, 49140100, 49999041, 90440100, 94090000, 94109401, 99400900, 99940009, 100000000, 100040004, 100140049, 100400400, 101404900, 101949409, 104040000, 104919049, 110040100, 111049444, 114041041, 114490000, 144000000, 190440000, 194044900, 400000000, 400040001, 400400100, 404010000, 404090404, 409941009, 414000409, 414041104, 441000000, 449440000, 490091044, 900000000, 990990400, 991494144, 994140900, 1190940100, 1401004900, 1404000900, 1409101444, 1444000000, 1449401041, 1490114404, 1990944400, 4014109449, 4019940409, 4041144900, 4199040000, 4900000000, 4900140001, 4901400100, 4914010000, 4914991449, 4941949401, 4999904100, 9044010000, 9409000000, 9409194001, 9410940100, 9900449001, 9940090000, 9994000900, 9999400009, 10000000000, 10000400004]\nfor _ in range(int(input())):\n    count = 0\n    r1, r2 = [int(r1) for r1 in input().split()]\n    for i in n:\n        if i >= r1 and i<=r2:\n            count += 1\n    print(count)"
                },
                {
                    "id": 31659238,
                    "submission_date": 1586548468,
                    "language": "PYTH 3",
                    "username": "aman_ravan02",
                    "user_rating_star": 3,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.02",
                    "memory": "17.6M",
                    "solution": 31659238,
                    "code": "n = [0, 1, 4, 9, 49, 100, 144, 400, 441, 900, 1444, 4900, 9409, 10000, 10404, 11449, 14400, 19044, 40000, 40401, 44100, 44944, 90000, 144400, 419904, 490000, 491401, 904401, 940900, 994009, 1000000, 1004004, 1014049, 1040400, 1100401, 1144900, 1440000, 1904400, 1940449, 4000000, 4004001, 4040100, 4410000, 4494400, 9000000, 9909904, 9941409, 11909401, 14010049, 14040009, 14440000, 19909444, 40411449, 41990400, 49000000, 49014001, 49140100, 49999041, 90440100, 94090000, 94109401, 99400900, 99940009, 100000000, 100040004, 100140049, 100400400, 101404900, 101949409, 104040000, 104919049, 110040100, 111049444, 114041041, 114490000, 144000000, 190440000, 194044900, 400000000, 400040001, 400400100, 404010000, 404090404, 409941009, 414000409, 414041104, 441000000, 449440000, 490091044, 900000000, 990990400, 991494144, 994140900, 1190940100, 1401004900, 1404000900, 1409101444, 1444000000, 1449401041, 1490114404, 1990944400, 4014109449, 4019940409, 4041144900, 4199040000, 4900000000, 4900140001, 4901400100, 4914010000, 4914991449, 4941949401, 4999904100, 9044010000, 9409000000, 9409194001, 9410940100, 9900449001, 9940090000, 9994000900, 9999400009, 10000000000, 10000400004]\r\nfor i in range(int(input())):\r\n  a,b=map(int,input().split())\r\n  c=0\r\n  for j in n:\r\n    if(j>b):\r\n      break\r\n    if(j>=a and j<=b):\r\n      c+=1\r\n  print(c)"
                }
            ]
        },
        "LCKYST": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "2\r\n2 15",
                    "output": "2\r\n60",
                    "explanation": "Example case 1. You can't get any number having zeros at the end multiplying 2 by lucky numbers.\nExample case 2. You can multiply 15 by 4 and get 60, which has one trailing zero."
                }
            ],
            "problem_statement": "Read problems statements in Mandarin Chinese  and Russian.\nA number is called as a lucky number if its decimal representation contains only the lucky digits, 4 and 7. e.g. 47, 744, 4 are lucky numbers, whereas 5, 17, 467 are not.\nRecently, Na2a found a magic stone. With the help of this stone, he can multiply a number by any lucky number. Also, the magic stone can be used any number of times (possibly zero or infinite number of times). For example, if initially he has the number 1, then he can get numbers like 28 (formed by 1*4*7), 14476 (formed as 1*47*77*4) etc.\nNa2a has N numbers in his bag which are denoted by array A. For each number Ai in his bag, he asks you to transform it to a number with maximum possible number of trailing zeroes by using Magic Stone. You have to find the smallest of such numbers, since there can be multiple numbers with the maximum possible number of trailing zeros.\nInput\n\nThere is a single test case.\nFirst line contains a single integer N as stated in the problem.\nThe second line contains N space-separated integers A1, A2, ... , AN where Ai denotes the ith number in the bag.\n\nOutput\n\nOutput N lines, in which ith line contains the answer corresponding to the number Ai.\n\nConstraints\n\n1 \u2264 N \u2264 105\n1 \u2264 Ai \u2264 109 \n\nSubtasks\n Subtask 1(8 points) \n\n1 \u2264 N \u2264 10\n1 \u2264 Ai \u2264 10 \n\n  Subtask 2(22 points) \n\n1 \u2264 N \u2264 102\n1 \u2264 Ai \u2264 103 \n\n  Subtask 3(70 points) \n\nOriginal constraints",
            "input_format": "",
            "output_format": "",
            "problem_name": "Na2a and lucky stone",
            "user_tags": [
                "Integer Division",
                "Arithmetic"
            ],
            "computed_tags": [
                "Mathematics",
                "Basic Maths"
            ],
            "problem_code_id": "LCKYST",
            "difficulty_level": "1543",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 80021094,
                    "submission_date": 1668487040,
                    "language": "PYTH 3",
                    "username": "nagarjuna97",
                    "user_rating_star": 3,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.53",
                    "memory": "20.2M",
                    "solution": 80021094,
                    "code": "def count_zeroes_at_end(num):\r\n    num=list(str(num))\r\n    ans=0\r\n    while num and num[-1]=='0':\r\n        ans+=1 \r\n        num.pop()  \r\n    return ans\r\n\r\ntests=int(input())\r\nnum_arr=list(map(int,input().split()))\r\nfor num in num_arr:\r\n    ans=num \r\n    temp=ans*4\r\n    while count_zeroes_at_end(temp)>count_zeroes_at_end(ans):\r\n        ans=temp\r\n        temp*=4\r\n    print(ans)"
                },
                {
                    "id": 72718837,
                    "submission_date": 1661926256,
                    "language": "PYTH 3",
                    "username": "dscdsc",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.23",
                    "memory": "20.3M",
                    "solution": 72718837,
                    "code": "n = int(input())\r\nl = list(map(int, input().split()))\r\nm = []\r\nfor i in l:\r\n    if i % 5 != 0:\r\n        m.append(i)\r\n    else:\r\n        k = i\r\n        p = i\r\n        c1 = 0\r\n        c2 = 0\r\n        while k % 5 == 0:\r\n            c1 += 1\r\n            k //= 5\r\n        while p % 2 == 0:\r\n            c2 += 1\r\n            p //= 2\r\n        if c2 >= c1:\r\n            m.append(i)\r\n        else:\r\n            m.append(i * (4 ** ((c1 - c2 + 1) // 2)))\r\nfor j in m:\r\n    print(j, end = \"\\n\")"
                }
            ]
        },
        "MAXISUM": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "2\n2 2\n1 2\n-2 3\n3 5\n1 2 -3\n-2 3 -5",
                    "output": "10\n44",
                    "explanation": "In the first example, \nyou can increase value A[2] using two two operations. Now, A would be [1, 4]. The value of interaction will be 1 * -2 + 4 * 3 = -2 + 12 = 10."
                }
            ],
            "problem_statement": "Read problems statements in Mandarin Chinese, Russian and Vietnamese as well.\nYou are given two integer arrays A and B each of size N. Let us define interaction of arrays A and B to be the sum of A[i] * B[i] for each i from 1 to N.\n\n\nYou want to maximize the value of interaction of the arrays. You are allowed to make at most K (possibly zero) operations of following kind.\n\nIn a single operation, you can increase or decrease any of the elements of array A by 1.\n\n\nFind out the maximum value of interaction of the arrays that you can get.\n\nInput\n\nThe first line of input contains a single integer T denoting number of test cases.\nFor each test case:\n    \nFirst line contains two space separated integers N, K.\nSecond line contains N space separated integers denoting array A.\nThird line contains N space separated integers denoting array B.\n\n\n\nOutput\n\nFor each test case, output a single integer denoting the answer of the problem.\n\nConstraints\n\n1 \u2264 T \u2264 10\n1 \u2264 N \u2264 105\n0 \u2264 |A[i]|, |B[i]| \u2264 105\n0 \u2264 K \u2264 109\n\nSubtasks\n\nSubtask #1 : (25 points)\n\n1 \u2264 N \u2264 10\n0 \u2264 |A[i]|, |B[i]| \u2264 10\n0 \u2264 K \u2264 10\n\n\nSubtask #2 : (35 points)\n\n1 \u2264 N \u2264 1000\n0 \u2264 |A[i]|, |B[i]| \u2264 1000\n0 \u2264 K \u2264 105\n\n\nSubtask #3 : (40 points)\n\nNo additional constraints",
            "input_format": "",
            "output_format": "",
            "problem_name": "maximize the sum",
            "user_tags": [
                "Greedy",
                "ad-hoc"
            ],
            "computed_tags": [
                "Algorithms",
                "Constructive"
            ],
            "problem_code_id": "MAXISUM",
            "difficulty_level": "1539",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 38949818,
                    "submission_date": 1602761513,
                    "language": "PYTH 3",
                    "username": "amit1405",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.52",
                    "memory": "20.9M",
                    "solution": 38949818,
                    "code": "for _ in range(int(input())):\r\n    N,k=map(int,input().split())\r\n    arr=list(map(int,input().split()))\r\n    brr=list(map(int,input().split()))\r\n    print(sum([arr[i]*brr[i] for i in range(len(arr))])+(max(map(abs,brr)))*k)"
                },
                {
                    "id": 38320392,
                    "submission_date": 1601387925,
                    "language": "PYTH 3",
                    "username": "kini_varsha18",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.67",
                    "memory": "19M",
                    "solution": 38320392,
                    "code": "t=int(input())\nfor i in range(t):\n    a=[]\n    b=[]\n    n,k =map(int,input().split())\n    a=list(map(int,input().strip().split()))[:n]\n    b=list(map(int,input().strip().split()))[:n]\n    max=abs(b[0])\n    ind=0\n    sum=0\n    for j in range(n):\n        if(abs(b[j])>max):\n            max=abs(b[j])\n            ind=j\n    for j in range(n):\n        sum=sum+(a[j]*b[j])\n    print(sum+(k*abs(b[ind])))       \n            "
                }
            ]
        },
        "CK87QUER": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "4\r\n2\r\n3\r\n4\r\n10000000000",
                    "output": "1\r\n2\r\n3\r\n69999300",
                    "explanation": ""
                }
            ],
            "problem_statement": "Read problems statements in Mandarin chinese, Russian and Vietnamese as well.\nWhen the final results for the employement competition were announced, Nour Eddin Ramadan was thrilled to find his name among the accepted co-Chefs.\nHowever, after a while Nour started wasting time at the kitchen. He would usually spend hours talking to girls, and he even invited a girl to the kitchen pretending that he is the most valuable employer at Chef's restaurant.\nWhen Chef found out about it, he decided that it was time to teach Nour a lesson. Before going home that night, Chef called Nour to his office and asked him to solve the following problem, saying that he better come to work tomorrow with a solution for it, or otherwise, it would be better if he doesn't come at all:\nGiven T queries, where each query contains a single number Y, Nour has to find the number of pairs A and B, such that the following equation holds true:\nA2 + B \u2264 Y\nWhere A is any positive integer, and B holds (1 \u2264 B \u2264 700).\nNour was really busy that night (Yeah he got that girl to go out with him after all!), and he asked for your help.\n\u00a0\nInput\nThe first line contains T denoting the number of test cases.\nT lines follows, Each line contains a single integer Y denoting the right side of the formula.\nOutput\nFor each test print a single line, containing a single number, indicating the answer for the test.\nConstraints\n\n1 \u2264 T \u2264 105\n1 \u2264 Y \u2264 1010\nNote that A must be any positive integer, and B must hold 1 \u2264 B \u2264 700.",
            "input_format": "",
            "output_format": "",
            "problem_name": "Chef and Weird Queries",
            "user_tags": [
                "Basic Maths",
                "Brute Force",
                "Offline Queries"
            ],
            "computed_tags": [
                "Mathematics",
                "Algorithms",
                "Queries"
            ],
            "problem_code_id": "CK87QUER",
            "difficulty_level": "1597",
            "ai_solutions": [
                "import math\nT = int(input())\nfor _ in range(T):\n    Y = int(input())\n    limit = int(math.sqrt(Y))\n    count = 0\n    for A in range(1, limit+1):\n        B = min(700, Y - A*A)\n        count += B\n    print(count)",
                "import math\nT = int(input())\nfor _ in range(T):\n    Y = int(input())\n    limit = int(math.sqrt(Y))\n    count = sum(min(700, Y - A*A) for A in range(1, limit+1))\n    print(count)"
            ],
            "human_solutions": [
                {
                    "id": 68029632,
                    "submission_date": 1656682353,
                    "language": "PYTH 3",
                    "username": "aayush_332",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.58",
                    "memory": "9.6M",
                    "solution": 68029632,
                    "code": "for _ in range(int(input())):\r\n    n=int(input())\r\n    a=int(n**0.5)\r\n    s=0\r\n    while a>0 and a*a>=n-700:\r\n        s+=n-a*a\r\n        a-=1\r\n    print(a*700 +s)"
                },
                {
                    "id": 64978657,
                    "submission_date": 1652712444,
                    "language": "PYTH 3",
                    "username": "itachi_no_1",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.62",
                    "memory": "9.3M",
                    "solution": 64978657,
                    "code": "from math import * \n\nt=int(input())\n\ndef func(y,t):\n    return y*t - int( (t*(t+1)*(2*t+1))/6)\n\n\nfor alpha in range(t):\n    y=int(input())\n    t=int(sqrt(y))\n    ans = func(y,t)\n    \n    if y<=701:\n        print(ans)\n        continue\n    else:\n        z=int(sqrt(y-700))\n        ans=ans + 700 * z\n        ans = ans - func(y,z)\n        print(ans)"
                }
            ]
        },
        "SILLYPRS": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "2\n3\n4 5 6\n1 2 3\n5\n4 8 6 4 1\n2 5 7 4 7",
                    "output": "10\n23",
                    "explanation": "Example case 1: One possible solution is to pair the first chef with the second chefette, the second chef with the first chefette and the third chef with the third chefette. Their children will have heights $3$, $3$ and $4$, respectively."
                }
            ],
            "problem_statement": "Read problem statements in Hindi, Bengali, Mandarin Chinese, Russian, and Vietnamese as well.\nChef and his friend Magda have $2N$ mutual friends: $N$ of these friends are chefs and the other $N$ are chefettes. The chefs are numbered $1$ through $N$ and the chefettes are (independently) also numbered $1$ through $N$. Since Magda wants their friends to be as happy as possible and to preserve traditional family values, she wants to pair them up in such a way that each chef is paired with exactly one chefette and each chefette with exactly one chef.\nThe chefs have heights $A_1, A_2, \\ldots, A_N$ and the chefettes have heights $B_1, B_2, \\ldots, B_N$. For each valid $i, j$, if the $i$-th chef and the $j$-th chefette are paired, they will have exactly one child with height $\\left\\lfloor\\frac{A_i+B_j}{2}\\right\\rfloor$. Magda wants to pair up the chefs and chefettes in such a way that the sum of heights of all their children ($N$ children in total) is maximum possible. Please help her do that.\nInput\n\nThe first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\nThe first line of each test case contains a single integer $N$.\nThe second line contains $N$ space-separated integers $A_1, A_2, \\ldots, A_N$.\nThe third line contains $N$ space-separated integers $B_1, B_2, \\ldots, B_N$.\n\nOutput\nPrint a single line containing one integer \u2015 the maximum sum of heights of the children.\nConstraints\n\n$1 \\le T \\le 10$\n$1 \\le N \\le 10^5$\n$1 \\le A_i \\le 10^9$ for each valid $i$\n$1 \\le B_i \\le 10^9$ for each valid $i$\n\nSubtasks\nSubtask #1 (40 points): $1 \\le N \\le 100$\nSubtask #2 (60 points): original constraints",
            "input_format": "",
            "output_format": "",
            "problem_name": "Magda and Silly Pairs",
            "user_tags": [
                "Basic Maths",
                "ad-hoc"
            ],
            "computed_tags": [
                "Mathematics",
                "Algorithms",
                "Constructive"
            ],
            "problem_code_id": "SILLYPRS",
            "difficulty_level": "1507",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 29515958,
                    "submission_date": 1581391810,
                    "language": "PYTH 3",
                    "username": "rise_and_shine",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.30",
                    "memory": "19.5M",
                    "solution": 29515958,
                    "code": "def count_number_of_odd_pairs(A,B):\n    count_of_A_odd_numbers = len([x for x in A if x % 2 != 0])\n    count_of_B_odd_numbers = len([x for x in B if x % 2 != 0])\n    \n    count_of_A_even_numbers = len(A) - count_of_A_odd_numbers\n    count_of_B_even_numbers = len(B) - count_of_B_odd_numbers\n    \n\n    return min(count_of_A_odd_numbers,count_of_B_odd_numbers) + min(count_of_A_even_numbers, count_of_B_even_numbers)\n\ndef calculate_max_height_of_children(A,B):\n    number_of_odd_pairs = len(A) - count_number_of_odd_pairs(A,B)\n    averageOfPairs = (sum(A) + sum(B))/ 2\n    return int(averageOfPairs - (number_of_odd_pairs*0.5))\n\nt=int(input())\nfor i in range(t):\n    n=int(input())\n    A = list(map(int, input().split()))\n    B = list(map(int, input().split()))\n    \n    print(calculate_max_height_of_children(A,B))"
                },
                {
                    "id": 27568562,
                    "submission_date": 1572080770,
                    "language": "PYTH 3",
                    "username": "rishabh9120",
                    "user_rating_star": 4,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.46",
                    "memory": "17.9M",
                    "solution": 27568562,
                    "code": "import math\nt=int(input())\nfor _ in range(t):\n    n=int(input())\n    a_odd=0\n    a_even=0\n    b_odd=0\n    b_even=0\n    a_sum=0\n    b_sum=0\n    a=list(map(int,input().split()))\n    b=list(map(int,input().split()))\n    for i in range(n):\n        if a[i]%2:\n            a_odd+=1 \n        else:\n            a_even+=1 \n        if b[i]%2:\n            b_odd+=1 \n        else:\n            b_even+=1 \n        a_sum+=a[i]\n        b_sum+=b[i]\n    x=(n-min(a_even,b_even)-min(b_odd,a_odd))*0.5\n    print(math.floor((a_sum+b_sum)/2 - x ))\n        "
                }
            ]
        },
        "CLMBSTRS": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [],
            "problem_statement": "There is a ritual that some monks of Byteland perform every century as a sign of respect and worship towards BOOL, the God of Byteland.\nAll the monks train for many years in order to accomplish an extremely hard task, that is the one of accessing the sacred temple of Byteland, where only the best of the bests monks are allowed to enter and worship their god, BOOL.\nThe training the monks perform, usually consists of several physically and intellectually challenging tasks, trained and perfected over the course of many years, so that one of them can be eligible for the ultimate task that is a combination of both physical effort as well as mental effort.\nThis final task is the actual possibility of trying to access the sacred temple of Byteland, that is located on the top of a very high mountain, where reckless storms and heavy rains usually occur.\nThe access to this mountain is done by climbing an enourmous set of stairs that spiral around the mountain until it ends on the top of the mountain where the sacred temple door is located.\nThe door can only be opened by unlocking it. To unlock the door, the monk only sees a hole in it, a lever, and he also spots a very large amount of little round stones on the ground, and he understands that the only way to open the door is to place an exact pre-determined amount of stones trough that hole, so that when the number is correct, he will push the lever down, and the door will open. If this number is incorrect, the lever will be locked by the incorrect stones and a whole new century must pass so that the storms can erode the stones and a new monk can be selected for the task.\nThis year, YOU were the one selected to climb the huge set of stairs, and you are extremely well prepared... You have done your training very well and you are also aware of two very important facts that will be key for your success... The favourite number base on Byteland is base 2, and Gods favourite number is the largest number on this base. You also know that the number of stones you need to place on the door hole is related to the way everyone climbs the stairs and with the number of stairs itself. \nAs the monks take several supplies for the demanding trip, they can only climb either one or two steps at a time. You understood that the number of stones you need to place on the door is closely related with the way you climb the stairs. Suppose the number of stairs you need to climb is N. Also, let the number of ways you have of climbing those N stairs be M. Now, the number of stones required is equal to the number of 1's in the base-2 representation of (M modulo 1000000007).\nYou won't fail, as you are extremely well ready, but you have made everyone on your town extremely excited with your journey, so, given the number N of steps you are to climb and a guess, G, from the people of your village, you need to see if they are correct or not.\nMore formally, given a number N of steps to climb and a guess G from your village, you need to check if guess G is accordingly to your correct calculations. They are correct if you manage to enter the temple using their guess, or incorrect otherwise. You should output the string \u201cCORRECT\u201d if they are correct, or \u201cINCORRECT\u201d if they are incorrect. (Quotes for clarity only). Please read the section \"Output Explanation\" for some clarification on the example cases.\nInput\nThe first line of each official test case file will contain an integer T, that stands for the number of test cases on that specific test case file.\nThe next T lines contain two-space separated integers, N and G, respectively, the number of steps the monk needs to climb and the guess from the village's population.\nOutput\nOutput will contain the string \"CORRECT\" or \"INCORRECT\" on a single line, as explained above on the problem statement.\nConstraints\nIn each file, T = 100000, i.e., each file will contain 100000 test cases (this value needs to be read from standard input).\n1 \u2264 N \u2264 1000000\n0 \u2264 G \u2264 50\nYour code will be judged against several input files.\nExample\n\nInput:\n100000\n1 1\n7 4\n(and 99998 more test cases...)\n\nOutput:\nCORRECT\nINCORRECT\n(and 99998 more answers...)\n\n \nOutput Explanation:\nOn the first case, when there is only one step to climb, there is only one way to do it. 1 in binary is 1, and as the village's population guess is also 1 the answer is correct.\n On the second case, there are 21 ways of climbing the stairs altogether. 21 in binary is 10101, that contains three ones. As the village's population guess was 4, the answer is therefore incorrect.",
            "input_format": "",
            "output_format": "",
            "problem_name": "Climbing Stairs",
            "user_tags": [
                "ad-hoc"
            ],
            "computed_tags": [
                "Algorithms",
                "Constructive"
            ],
            "problem_code_id": "CLMBSTRS",
            "difficulty_level": "1508",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 62717841,
                    "submission_date": 1649737516,
                    "language": "PYTH 3",
                    "username": "klu_2100080081",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.78",
                    "memory": "47.6M",
                    "solution": 62717841,
                    "code": "\n##########################################\n# DEFINITIONS\ndef trange():\n\treturn range(int(input()))\n\ndef splitMap():\n\treturn map(int,input().split())\n\ndef listOfNumbers():\n\treturn list(map(int,input().split()))\n\ndef number():\n\treturn int(input())\n\n\ndef binary(x):\n\treturn bin(x).replace(\"0b\",\"\")\n\n##########################################\nimport math \nfrom collections import Counter  \nimport functools \n\ndef main():\n\t# PreCompute Fibonacci \n\tfibonaci = [1,2]\n\tmodulo = 10**9  + 7\n\tmaxN = 10**6\n\tfor i in range(maxN):\n\t    fibonaci.append((fibonaci[-1]+fibonaci[-2])%modulo) \n\tfor _ in trange():\n\t\tnumberOfStairs, villageGuess = splitMap()\n\t\tm = fibonaci[numberOfStairs-1]\n\t\tcorrectGuess = binary(m).count('1')\n\t\tif  correctGuess == villageGuess:\n\t\t\tprint(\"CORRECT\")\n\t\telse:\n\t\t\tprint(\"INCORRECT\")\n\n\nif __name__ == '__main__':\n\tmain()\n\texit()"
                },
                {
                    "id": 60064488,
                    "submission_date": 1646906686,
                    "language": "PYTH 3",
                    "username": "uk2459644",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "1.09",
                    "memory": "47.5M",
                    "solution": 60064488,
                    "code": "sli=['0']*1000001\nsli[0]=1\nsli[1]=1\n\nfor i in range(2,1000001):\n    sli[i]=(sli[i-2]+sli[i-1])%1000000007\n\nfor _ in range(int(input())):\n    n,g=map(int,input().split())\n\n    if g==bin(sli[n]).count('1'):\n        print('CORRECT')\n    else:\n        print('INCORRECT')\n"
                }
            ]
        },
        "BINOP": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "2\r\n101\r\n010\r\n1111\r\n1010",
                    "output": "Lucky Chef\r\n2\r\nUnlucky Chef",
                    "explanation": "Example case 1.\n\nApplying XOR operation with indices i = 1 and j = 2. Resulting string will be 011.\nThen, Applying AND operation with indices i = 1 and j = 3. Resulting string will be 010.\n\nExample case 2.\n\nIt is impossible to convert string A to string B."
                }
            ],
            "problem_statement": "Read problems statements in Mandarin Chinese, Russian and Vietnamese as well.\nToday is Chef's birthday. His mom decided to surprise him with a truly fantastic gift: his favourite binary string B. But, unfortunately, all the stocks of binary string B have been sold out, and only a binary string A (A \u2260 B) is available in the market.\nShe purchases the string A and tries to convert it to string B by applying any of following three operations zero or more times.\n\nAND Operation:\nShe will choose a pair of indices i and j such that i != j and perform following sequence of operations.\n\n result = Ai & Aj \n Ai = result & Ai \n Aj = result & Aj \n\n\nOR Operation:\nShe will choose a pair of indices i and j such that i != j and perform following sequence of operations.\n\n result = Ai | Aj \n Ai = result | Ai \n Aj = result | Aj \n\n\nXOR Operation:\nShe will choose a pair of indices i and j such that i != j and perform following sequence of operations.\n\n result = Ai ^ Aj \n Ai = result ^ Ai \n Aj = result ^ Aj \n\nChef's mom is eagerly waiting to surprise him with his favourite gift and therefore, she wants to convert string A to string B as fast as possible. Can you please help her by telling her the minimum number of operations she will require? If it is impossible to do so, then let Chef's mom know about it.\nInput\nFirst line of input contains a single integer T denoting the number of test cases. T test cases follow.\nFirst line of each test case, will contain binary string A.\nSecond line of each test case, will contain binary string B.\nOutput\nFor each test case, Print \"Lucky Chef\" (without quotes) in first line and minimum number of operations required to convert string A to sting B in second line if conversion is possible. Print \"Unlucky Chef\" (without quotes) in a new line otherwise.\nConstraints\n\n1 \u2264 T \u2264 105\n1 \u2264 |A| \u2264 106\n1 \u2264 |B| \u2264 106\nA != B\n|A| = |B|\nsum of |A| over all test cases does not exceed 106\nsum of |B| over all test cases does not exceed 106\n\nSubtasks\n\n Subtask #1 (40 points) : Sum of |A| & |B| over all test cases does not exceed 103\n Subtask #2 (60 points) : Sum of |A| & |B| over all test cases does not exceed 106",
            "input_format": "",
            "output_format": "",
            "problem_name": "Chef And Binary Operation",
            "user_tags": [
                "Bitwise Operation"
            ],
            "computed_tags": [
                "Mathematics",
                "Bit Manipulation"
            ],
            "problem_code_id": "BINOP",
            "difficulty_level": "1544",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 56521510,
                    "submission_date": 1642364004,
                    "language": "PYTH 3",
                    "username": "dscdsc",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.29",
                    "memory": "12.8M",
                    "solution": 56521510,
                    "code": "t = int(input())\n\nfor i in range(t):\n    a = input()\n    b = input()\n    n = len(a)\n    z, o = 0, 0\n    for j in a:\n        if j == '0':\n            z = 1 \n        else:\n            o = 1\n    if z == 0 or o == 0:\n        print('Unlucky Chef')\n    else:\n        n1, n2 = 0, 0\n        for j in range(n):\n            e = a[j]\n            if e == '1' and e != b[j]:\n                n1 += 1\n            elif e == '0' and e != b[j]:\n                n2 += 1\n        print('Lucky Chef')\n        ans = max(n1, n2)\n        print(ans) "
                },
                {
                    "id": 36218023,
                    "submission_date": 1596720283,
                    "language": "PYTH 3",
                    "username": "akshay_murari_",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.35",
                    "memory": "22.5M",
                    "solution": 36218023,
                    "code": "from sys import stdin,stdout\r\nout=stdout.write\r\nraw_input=stdin.readline\r\nfor i in range(int(raw_input())):\r\n        a=list(raw_input().strip('\\n'));a1='';b1=''\r\n        b=list(raw_input().strip('\\n'));m=0;n=0\r\n        for i in range(len(a)):\r\n            if a[i]!=b[i]:n+=1;a1+=a[i];b1+=b[i]\r\n        l1=a1.count('1');l=a1.count('0');l2=min(l,l1)\r\n        if a.count('1')==0 or a.count('0')==0:out(\"Unlucky Chef\\n\")\r\n        else:n-=2*l2;m+=l2+n;out(\"Lucky Chef\\n\"+str(m)+'\\n')"
                }
            ]
        },
        "A1": {
            "constraints": "$1 \\leq T \\leq 100$\n$1 \\leq N \\leq 20$\n$1 \\leq$ value of a single banknote $\\leq 1000$",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "5\n3 3\n1\n1\n1\n5 11\n1\n2\n4\n8\n16\n5 23\n1\n2\n4\n8\n16\n5 13\n1\n5\n5\n10\n10\n20 132\n17\n6\n4\n998\n254\n137\n259\n153\n154\n3\n28\n19\n123\n542\n857\n23\n687\n35\n99\n999",
                    "output": "Yes\nYes\nYes\nNo\nYes",
                    "explanation": "For example, in the last case you have to pay up, since: $6 + 3 + 123 = 132$."
                }
            ],
            "problem_statement": "In the mysterious country of Byteland, everything is quite different from what you'd normally expect. In most places, if you were approached by two mobsters in a dark alley, they would probably tell you to give them all the money that you have. If you refused, or didn't have any - they might even beat you up.\nIn Byteland the government decided that even the slightest chance of someone getting injured has to be ruled out. So, they introduced a strict policy. When a mobster approaches you in a dark alley, he asks you for a specific amount of money. You are obliged to show him all the money that you have, but you only need to pay up if he can find a subset of your banknotes whose total value matches his demand. Since banknotes in Byteland can have any positive integer value smaller than one thousand you are quite likely to get off without paying.\nBoth the citizens and the gangsters of Byteland have very positive feelings about the system. No one ever gets hurt, the gangsters don't lose their jobs, and there are quite a few rules that minimize that \nprobability of getting mugged (the first one is: don't go into dark alleys - and this one is said to work in other places also).",
            "input_format": "The first line contains integer $T$, the number of test cases. Then $T$ test cases follow. \nEach test case starts with $N$, the number of banknotes in your wallet, and $M$, the amount of money the muggers asked of you. \nThen $N$ numbers follow each in a new line, representing values of your banknotes.",
            "output_format": "For each test case output a single line with the word 'Yes' if there is a subset of your banknotes that sums  to $M$, and 'No' otherwise.",
            "problem_name": "Paying up",
            "user_tags": [
                "Bitwise Operation",
                "Top-down",
                "Bottom-up",
                "Brute Force"
            ],
            "computed_tags": [
                "Mathematics",
                "Bit Manipulation",
                "Algorithms",
                "Dynamic Programming",
                "DP Approach"
            ],
            "problem_code_id": "A1",
            "difficulty_level": "1539",
            "ai_solutions": [
                "def isSubsetSum(set, n, sum):\n    if sum == 0:\n        return True\n    if n == 0 and sum != 0:\n        return False\n    if set[n-1] > sum:\n        return isSubsetSum(set, n-1, sum)\n    return isSubsetSum(set, n-1, sum) or isSubsetSum(set, n-1, sum-set[n-1])\n\nT = int(input())\nfor _ in range(T):\n    N, M = map(int, input().split())\n    banknotes = []\n    for _ in range(N):\n        banknotes.append(int(input()))\n    if isSubsetSum(banknotes, N, M):\n        print('Yes')\n    else:\n        print('No')",
                "def isSubsetSum(set, n, sum):\n    subset =([[False for i in range(sum + 1)] for i in range(n + 1)])\n    for i in range(n + 1):\n        subset[i][0] = True\n    for i in range(1, sum + 1):\n        subset[0][i]= False\n    for i in range(1, n + 1):\n        for j in range(1, sum + 1):\n            if j<set[i-1]:\n                subset[i][j] = subset[i-1][j]\n            if j>= set[i-1]:\n                subset[i][j] = (subset[i-1][j] or subset[i - 1][j-set[i-1]])\n    return subset[n][sum]\n\nT = int(input())\nfor _ in range(T):\n    N, M = map(int, input().split())\n    banknotes = []\n    for _ in range(N):\n        banknotes.append(int(input()))\n    if isSubsetSum(banknotes, N, M):\n        print('Yes')\n    else:\n        print('No')"
            ],
            "human_solutions": [
                {
                    "id": 35378539,
                    "submission_date": 1594270671,
                    "language": "PYTH 3",
                    "username": "salvin",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "3.68",
                    "memory": "17.6M",
                    "solution": 35378539,
                    "code": "def ss(ar,l,r,sum=0):\n    if(ar[len(ar)-1]==-1):\n        return\n    if(l>r):\n        if(sum==k):\n            print(\"Yes\")\n            ar.append(-1)\n            return\n        return\n    ss(ar,l+1,r,sum+ar[l])\n    ss(ar,l+1,r,sum)\n    \n\n\n\n\nt=int(input())\nwhile(t>0):\n    n,k=map(int,input().split())\n    ar=[]\n    for i in range(n):\n        ar.append(int(input()))\n    ss(ar,0,n-1)\n    if(ar[len(ar)-1]!=-1):\n        print(\"No\")\n    t=t-1"
                },
                {
                    "id": 34568286,
                    "submission_date": 1592748870,
                    "language": "PYTH 3",
                    "username": "stuti0728",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "2.28",
                    "memory": "17.6M",
                    "solution": 34568286,
                    "code": "import itertools\nT=int(input())\nfor i in range(T):\n    l=[]\n    a,b=map(int,input().split())\n    for j in range(a):\n        n=int(input())\n        l.append(n)\n    q=[]\n    for k in range(len(l)+1):\n        for j in itertools.combinations(l,k):\n            if(sum(j)==b):\n                q.append(sum(j))\n    if(len(q)!=0):\n        print('Yes')\n    else:\n        print('No')\n            \n    "
                }
            ]
        },
        "CLPNT": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "1\n2\n1 3\n5\n0 0\n2 0\n0 4\n1 1\n1 2",
                    "output": "0\n1\n2\n1\n-1",
                    "explanation": "The sample input can be represented by the graph given below:\n\nIf Chef starts from $(0, 0)$, he can reach Dr Doof without destroying any wall.\nIf Chef starts from $(2, 0)$, he has to destroy the $1st$ wall.\nIf Chef starts from $(0, 4)$, he has to destroy both the walls.\nIf Chef starts from $(1, 1)$, he has to destroy the $1st$ wall.\nAs $(1, 2)$ lies on the second wall, the answer is $-1$ for the last query."
                }
            ],
            "problem_statement": "You may have helped Chef and prevented Doof from destroying the even numbers. But, it has only angered Dr Doof even further. However, for his next plan, he needs some time. Therefore, Doof has built $N$ walls to prevent Chef from interrupting him. You have to help Chef by telling him the number of walls he needs to destroy in order to reach Dr Doof.\nFormally, the whole area can be represented as the first quadrant with the origin at the bottom-left corner. Dr. Doof is located at the origin $(0, 0)$. There are $N$ walls, the i-th wall is a straight line segment joining the points $(a_i, 0)$ and $(0, a_i)$. For every initial position of Chef $(x_j, y_j)$, find the number of walls he needs to break before reaching Doof. Obviously, chef can't start from a point on the wall. Therefore, if $(x_j, y_j)$ lies on any of the given walls, print $-1$ in a new line.\nInput\n\nFirst line contains $T$, denoting the number of testcases.\nThe first line of every test case contains a single integer $N$ denoting the number of walls Dr Doof has built.\nThe next line contains $N$ space separated distinct integers each denoting $a_i$.\nThe next line contains a single integer $Q$ denoting the number of times Chef asks for your help.\nThe next $Q$ lines contains two space separated integers $x_j$ and $y_j$, each denoting the co-ordinates of the starting point of Chef.\n\nOutput\nFor each query, print the number of walls Chef needs to break in order to reach Dr Doof in a separate line. If Chef tries to start from a point on any of the walls, print $-1$.\nConstraints\n\n$1 \\leq T \\leq 2 * 10^2$\n$1 \\leq N, Q \\leq 2 * 10^5$\n$1 \\leq a_i \\leq 10^9$\n$0 \\leq x_j, y_j \\leq 10^9$\n$a_1 < a_2 < a_3 < .... < a_N$\nSum of $N$ and $Q$ over all testcases for a particular test file does not exceed $2 * 10^5$",
            "input_format": "",
            "output_format": "",
            "problem_name": "Doof on Cartesian",
            "user_tags": [
                "Cartesian Coordinate System"
            ],
            "computed_tags": [
                "Mathematics"
            ],
            "problem_code_id": "CLPNT",
            "difficulty_level": "1549",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 1017356260,
                    "submission_date": 1693450594,
                    "language": "PYTH 3",
                    "username": "lijessen2016",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.93",
                    "memory": "29.5M",
                    "solution": 1017356260,
                    "code": "import bisect\r\n\r\n'''\r\ndef find_wall(list_wall,num_wall,xi,yi):\r\n    left=0;\r\n    right=num_wall\r\n    while left<right:\r\n        mid=(left+right)//2\r\n        if yi<list_wall[mid]-xi:\r\n            right=mid\r\n        elif yi==list_wall[mid]-xi:\r\n            return mid\r\n        else:\r\n            left=mid+1\r\n    return left\r\n'''\r\n\r\nT=int(input())\r\n\r\nfor _ in range(T):\r\n    N=int(input())\r\n    ai=list(map(int,input().split()))\r\n    Q=int(input())\r\n    for _ in range(Q):\r\n        x,y=map(int,input().split())\r\n        ind=bisect.bisect_left(ai,x+y)\r\n        if ind==N:\r\n            print(N)\r\n        elif ai[ind]==x+y:\r\n            print(\"-1\")\r\n        else:\r\n            print(ind)\r\n        '''\r\n        pos=find_wall(ai,N,x,y)\r\n        if pos==N:\r\n            print(N)\r\n        elif y==ai[pos]-x:\r\n            print(\"-1\")\r\n        else:\r\n            print(pos)\r\n        '''"
                },
                {
                    "id": 96103359,
                    "submission_date": 1683803569,
                    "language": "PYTH 3",
                    "username": "bhargav33333",
                    "user_rating_star": 3,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "1.20",
                    "memory": "31.6M",
                    "solution": 96103359,
                    "code": "import bisect\r\nT=int(input())\r\nfor i in range(T):\r\n    n=int(input())\r\n    A=list(map(int,input().split()))\r\n    b=set(A)\r\n    q=int(input())\r\n    for i in range(q):\r\n        x,y=map(int,input().split())\r\n        if (x+y) in b:\r\n            print(-1)\r\n        else:\r\n            print(bisect.bisect_right(A,x+y))\r\n        \r\n        "
                }
            ]
        },
        "HELLO": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "4\n1.00 200 1\n1 0.50 28\n1.00 200 2\n1 0.75 40\n3 0.60 100\n1.00 50 2\n1 0.75 40\n3 0.60 100\n1.00 100 2\n3 0.50 10\n2 0.10 20",
                    "output": "1\n2\n0\n2",
                    "explanation": "Test Case 1: This test case is same as the example in the problem statement.Test Case 2: This is for you to work out!Test Case 3: Chef's monthly usage is only 50 Rokdas and none of the 2 plans are advantageous, hence the answer is zero '0'.Test Case 4: Again solve it yourself, but NOTE - if Chef had chosen plan 1, he would have to pay 10 Rokdas (Activation cost), after every 3 months and NOT every month. Similarly had he chosen plan 2, he would have to pay 20 Rokdas (Activation cost), after every 2 months."
                }
            ],
            "problem_statement": "Chef talks a lot on his mobile phone. As a result he exhausts his talk-value (in Rokdas) very quickly. One day at a mobile recharge shop, he noticed that his service provider gives add-on plans which can lower his calling rates (Rokdas/minute). One of the plans said \"Recharge for 28 Rokdas and enjoy call rates of 0.50 Rokdas/min for one month\". Chef was very pleased. His normal calling rate is 1 Rokda/min. And he talked for 200 minutes in last month, which costed him 200 Rokdas. If he had this plan activated, it would have costed him: 28 + 0.5*200 = 128 Rokdas only! Chef could have saved 72 Rokdas. But if he pays for this add-on and talks for very little in the coming month, he may end up saving nothing or even wasting money. Now, Chef is a simple guy and he doesn't worry much about future. He decides to choose the plan based upon his last month\u2019s usage.\nThere are numerous plans. Some for 1 month, some for 15 months. Some reduce call rate to 0.75 Rokdas/min, some reduce it to 0.60 Rokdas/min. And of course each of them differ in their activation costs. Note - If a plan is valid for M months, then we must pay for (re)activation after every M months (once in M months). Naturally, Chef is confused, and you (as always) are given the task to help him choose the best plan.\nInput\nFirst line contains T- the number of test cases. In each test case, first line contains D- the default rate (Rokdas/minute, real number), U- the number of minutes Chef talked in last month and N- the number of add-on plans available. Then N lines follow, each containing M- the number of months the plan is valid for, R- the calling rate for the plan (Rokdas/minute, real number) and C- the cost of the plan.\nOutput\nFor each test case, output one integer- the number of the best plan (from 1 to N). Output '0' if no plan is advantageous for Chef. No two plans are equally advantageous.\nConstraints\n1 \u2264 T \u2264 1000.5 \u2264 D \u2264 10.0 (exactly 2 digits after the decimal point)1 \u2264 U \u2264 100001 \u2264 N \u2264 1001 \u2264 M \u2264 360.05 \u2264 R D (exactly 2 digits after the decimal point)1 \u2264 C \u2264 1000",
            "input_format": "",
            "output_format": "",
            "problem_name": "Hello Hello",
            "user_tags": [
                "Basic Maths",
                "Implementation"
            ],
            "computed_tags": [
                "Mathematics",
                "Algorithms"
            ],
            "problem_code_id": "HELLO",
            "difficulty_level": "1517",
            "ai_solutions": [
                "T = int(input())\nfor _ in range(T):\n    D, U, N = map(float, input().split())\n    N = int(N)\n    plans = []\n    for i in range(N):\n        M, R, C = map(float, input().split())\n        M = int(M)\n        C = int(C)\n        plans.append((C/M + R*U, i+1))\n    plans.sort()\n    if D*U <= plans[0][0]:\n        print(0)\n    else:\n        print(plans[0][1])",
                "T = int(input())\nfor _ in range(T):\n    D, U, N = map(float, input().split())\n    N = int(N)\n    min_cost = D * U\n    min_plan = 0\n    for i in range(N):\n        M, R, C = map(float, input().split())\n        M = int(M)\n        C = int(C)\n        cost = C/M + R*U\n        if cost < min_cost:\n            min_cost = cost\n            min_plan = i+1\n    print(min_plan)"
            ],
            "human_solutions": [
                {
                    "id": 31920434,
                    "submission_date": 1587028783,
                    "language": "PYTH 3",
                    "username": "sridattaks",
                    "user_rating_star": 3,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.03",
                    "memory": "17.6M",
                    "solution": 31920434,
                    "code": "for _ in range(int(input())):\r\n    lst = []\r\n    choice = 0\r\n    #print(\"Enter the values of d, u and n\")\r\n    d, u, n = map(float, input().split())\r\n    check = d*u\r\n    #print(\"Enter the \",int(n), \"lines containing m, r and c\")\r\n    for i in range(int(n)):\r\n        m, r, c = map(float, input().split())\r\n        #check1 = (c + (m*r*u))/m\r\n        check1 = (c/m) + (r*u)\r\n        if check> check1:\r\n            check = check1\r\n            choice = i+1\r\n    print(choice)\r\n"
                },
                {
                    "id": 29103180,
                    "submission_date": 1579608623,
                    "language": "PYTH 3",
                    "username": "surojitmaji666",
                    "user_rating_star": 3,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.03",
                    "memory": "17.6M",
                    "solution": 29103180,
                    "code": "for _ in range(int(input())):\n   a, b, c = map(float, input().split())\n   ans = 0\n   tam = a * b\n   for i in range(int(c)):\n      x, y, z = map(float, input().split())\n      if tam > z / x + b * y:\n         ans = i + 1\n         tam = z / x + b * y\n   print(ans)\n         "
                }
            ]
        },
        "BFTT": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "3\n221\n333\n3002",
                    "output": "333\n1333\n3033",
                    "explanation": ""
                }
            ],
            "problem_statement": "Read problems statements in Mandarin chinese\n, Russian and Vietnamese as well.\nIt's well known that our friend Balsa likes the digit $3$ very much. He's so obsessed with this digit that he spends time thinking about it even during holidays.\nToday, Balsa invented an interesting problem: For a positive integer $N$, find the smallest integer greater than $N$ such that its decimal representation contains the digit $3$ at least three times.\nYou are given the integer $N$. Please solve this problem for Balsa.\nInput\n\nThe first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\nThe first and only line of each test case contains a single integer $N$.\n\nOutput\nFor each test case, print a single line containing one integer \u2014 the smallest number greater than $N$ containing the digit $3$ at least three times.\nConstraints\n\n$1 \\le T \\le 40$\n$1 \\le N \\le 2 \\cdot 10^9$",
            "input_format": "",
            "output_format": "",
            "problem_name": "Balsa For The Three",
            "user_tags": [
                "Modular Arithmetic",
                "Basic Maths",
                "Brute Force",
                "Implementation"
            ],
            "computed_tags": [
                "Mathematics",
                "Algorithms"
            ],
            "problem_code_id": "BFTT",
            "difficulty_level": "1572",
            "ai_solutions": [
                "def find_number(T, test_cases):\n    for _ in range(T):\n        N = test_cases[_]\n        while True:\n            N += 1\n            if str(N).count('3') >= 3:\n                print(N)\n                break\n\nT = int(input())\ntest_cases = []\nfor _ in range(T):\n    test_cases.append(int(input()))\nfind_number(T, test_cases)"
            ],
            "human_solutions": [
                {
                    "id": 33630470,
                    "submission_date": 1591292561,
                    "language": "PYTH 3",
                    "username": "amreen",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.02",
                    "memory": "17.6M",
                    "solution": 33630470,
                    "code": "t=int(input())\nwhile t>0:\n    n=int(input())\n    k=str(n+1)\n    while k.count(\"3\")<3:\n        k=int(k)\n        k+=1\n        k=str(k)\n    print(k)\n    t-=1\n"
                },
                {
                    "id": 33542533,
                    "submission_date": 1590993464,
                    "language": "PYTH 3",
                    "username": "prachi_21111",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.01",
                    "memory": "17.6M",
                    "solution": 33542533,
                    "code": "t = int(input())\nfor i in range(t):\n    n = int(input())+1\n    while True:\n        if str(n).count(\"3\") >= 3:\n            break\n        n = n+1\n    print(n)"
                }
            ]
        },
        "DISHLIFE": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "3\n3 4\n3 1 2 3\n2 1 3\n2 1 2\n2 3\n3 1 2 3\n2 1 3\n2 3\n2 1 2\n2 1 3",
                    "output": "sad\nsome\nall",
                    "explanation": "Example 1. The ingredient 4 is not available in any island, so Chef can't make the dish of life. Hence, the answer is \"sad\".\nExample 2. Chef can just go to the first island and collect all the three ingredients required. He does not need to visit the second island. So, the answer is \"some\".\nExample 3. Chef has to visit both the islands in order to obtain all the three ingredients. So, the answer is \"all\"."
                }
            ],
            "problem_statement": "Read problems statements in Mandarin Chinese, Russian and Vietnamese as well.\nChef wants to serve mankind by making people immortal by preparing a dish, a dish of life - a dish with the best taste in the universe, one with the smell and splash of fresh water flowing down the springs of the mountain, one with the smell of the best lily flowers of the garden, one that has contained the very essence of life in a real sense. \nThis dish will contain K ingredients that are found only in remote islands amid mountains. For sake of convenience, we enumerate the ingredients by the integers from 1 to K, both inclusive. There are N islands and each of them offers some ingredients. Chef being a little child did not know how to collect the ingredients for the recipe. He went to all the islands and bought all the ingredients offered in each island. Could he possibly have saved some time by skipping some island? If it was not possible for Chef to collect the required ingredients (i.e. all the K ingredients), output \"sad\". If it was possible for him to skip some islands, output \"some\", otherwise output \"all\".\nInput\nFirst line of the input contains an integer T denoting number of test cases. The description of T test cases follow.\nThe first line of each test case contains two space separated integers N, K.\nThe i-th of the next lines will contain first an integer Pi, denoting the number of ingredients grown in the i-th island, followed by Pi distinct integers in the range [1, K]. All the integers are space separated. \nOutput\nFor each test case, output a single line containing one of the strings \"sad\", \"all\" or \"some\" (without quotes) according to the situation. \nConstraints\n\n1 \u2264 T  \u2264 10\n1 \u2264 N, K \u2264 105\n1 \u2264 Pi \u2264 K\nSum of Pi over all test cases \u2264 106\n\nSubtasks\n\nSubtask #1 (30 points)\n\n1 \u2264 N, K \u2264 50\n\n\nSubtask #2 (30 points)\n\n1 \u2264 K \u2264 50\n\n\nSubtask #3 (40 points)\n\noriginal constraints",
            "input_format": "",
            "output_format": "",
            "problem_name": "Dish Of Life",
            "user_tags": [
                "Arrays",
                "ad-hoc"
            ],
            "computed_tags": [
                "Data Structures",
                "Algorithms",
                "Constructive"
            ],
            "problem_code_id": "DISHLIFE",
            "difficulty_level": "1543",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 62694101,
                    "submission_date": 1649681970,
                    "language": "PYTH 3",
                    "username": "amey1995",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.52",
                    "memory": "49.3M",
                    "solution": 62694101,
                    "code": "for _ in range(int(input())):\r\n    island=[]\r\n    n,k=map(int,input().split())\r\n    for i in range(n):\r\n        l=[int(i) for i in input().split()]\r\n        l=l[1:]\r\n        island.append(l)\r\n    cnt=[0]*(k+1)\r\n    for i in range(n):\r\n        for indigrient in island[i]:\r\n            cnt[indigrient]+=1 \r\n    f=1 \r\n    for i in range(1,k+1):\r\n        if cnt[i]==0:\r\n            f=0 \r\n            break \r\n    if not f:\r\n        print('sad')\r\n        continue \r\n    f1=0 \r\n   # print(island)\r\n    for i in range(n):\r\n        f2=1 \r\n        for j in island[i]:\r\n            if cnt[j]==1:\r\n                f2=0\r\n        if f2:\r\n            f1=1 \r\n            break \r\n    if f1:\r\n        print('some')\r\n    else:\r\n        print('all')"
                },
                {
                    "id": 23617591,
                    "submission_date": 1552912188,
                    "language": "PYTH 3",
                    "username": "pranavgor",
                    "user_rating_star": 3,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.55",
                    "memory": "27.5M",
                    "solution": 23617591,
                    "code": "for _ in range(int(input())):\r\n\tn,k = list(map(int,input().split()))\r\n\tarray = []\r\n\ttot = []\r\n\tfor _ in range(n):\r\n\t\ttemp = list(map(int,input().split()))\r\n\t\taa = temp[0]\r\n\t\tdel(temp[0])\r\n\t\ttemp.sort()\r\n\t\ttemp.insert(0,aa)\r\n\t\tarray.append(temp)\r\n\tdic = {}\r\n\tarray.sort(reverse=True)\r\n\tfor i in array:\r\n\t\tdel(i[0])\r\n\tfor i in range(1,k+1):\r\n\t\tdic[i] = False\r\n\tcount = 0\r\n\tfor i in array:\r\n\t\tcount += 1\r\n\t\t# print(count,tot)\r\n\t\tfor j in i:\r\n\t\t\tif(dic[j]==True):\r\n\t\t\t\tpass\r\n\t\t\telse:\r\n\t\t\t\ttot.append(j)\r\n\t\t\t\tdic[j]=True\r\n\t\tif(len(tot)==k):\r\n\t\t\tbreak\r\n\tif(len(tot)!=k):\r\n\t\tprint(\"sad\")\r\n\telif(count!=n):\r\n\t\tprint(\"some\")\r\n\telse:\r\n\t\tprint(\"all\")"
                }
            ]
        },
        "PERPALIN": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "5\n3 1\n2 2\n3 3\n4 4\n6 3",
                    "output": "impossible\nimpossible\naba\nabba\nabaaba",
                    "explanation": "Example 1: The only strings possible are either aaa or bbb, which Chef doesn't like. So, the answer is impossible.\nExample 2: There are four possible strings, aa, ab, ba, bb. Only aa and bb are palindromic, but Chef doesn't like these strings. Hence, the answer is impossible.\nExample 4: The string abba is a palindrome and has a period of 4.\nExample 5: The string abaaba is a palindrome and has a period of length 3."
                }
            ],
            "problem_statement": "Read problems statements in Mandarin chinese, Russian and Vietnamese as well.\nChef recently learned about concept of periodicity of strings. A string is said to have a period P, if P divides N and for each i, the i-th of character of the string is same as i-Pth character (provided it exists), e.g. \"abab\" has a period P = 2, It also has a period of P = 4, but it doesn't have a period of 1 or 3.\nChef wants to construct a string of length N that is a palindrome and has a period P. It's guaranteed that N is divisible by P. This string can only contain character 'a' or 'b'. Chef doesn't like the strings that contain all a's or all b's.\nGiven the values of N, P, can you construct one such palindromic string that Chef likes? If it's impossible to do so, output \"impossible\" (without quotes)\nInput\nThe first line of the input contains an integer T denoting the number of test cases.\nThe only line of each test case contains two space separated integers N, P.\nOutput\nFor each test case, output a single line containing the answer of the problem, i.e. the valid string if it exists otherwise \"impossible\"  (without quotes). If there are more than possible answers, you can output any.\nConstraints\n\n1 \u2264 T \u2264 20\n1 \u2264 P, N \u2264 105\n\nSubtasks\n\nSubtask #1 (25 points) : P = N\nSubtask #2 (75 points) : No additional constraints",
            "input_format": "",
            "output_format": "",
            "problem_name": "Periodic Palindrome Construction",
            "user_tags": [
                "String",
                "Implementation"
            ],
            "computed_tags": [
                "Data Structures",
                "Algorithms"
            ],
            "problem_code_id": "PERPALIN",
            "difficulty_level": "1567",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 33256626,
                    "submission_date": 1590240644,
                    "language": "PYTH 3",
                    "username": "kunal__verma",
                    "user_rating_star": 3,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.06",
                    "memory": "18.9M",
                    "solution": 33256626,
                    "code": "for i in range(int(input())):\n    n,p = map(int,input().split())\n    if p>2:\n        lst = ['a']\n        \n        for j in range(p-2):\n            lst.append('b')\n        lst.append('a')\n        print((''.join(lst))*(n//p))\n\n    else:\n        \n        print(\"impossible\")"
                },
                {
                    "id": 30609505,
                    "submission_date": 1584789582,
                    "language": "PYTH 3",
                    "username": "msd5299",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.14",
                    "memory": "18.7M",
                    "solution": 30609505,
                    "code": "T=int(input())\nfor i in range(T):\n        n,m=map(int,input().split())\n        if(m<=2):\n                print(\"impossible\")\n        else:\n                l=[0]*m\n\n                if(m%2==0):\n                        a=m//2\n                else:\n                        a=(m//2)+1\n                for j in range(a):\n                        if(j%2==0):\n                                l[j]=\"a\"\n                                l[m-j-1]=\"a\"\n                                \n                        else:\n                                l[j]=\"b\"\n                                l[m-j-1]=\"b\"\n                                \n                \n                r=\"\"\n                s=n//m\n                for e in l:\n                        r=r+e\n                print(r*s)\n                \n                \n\n"
                }
            ]
        },
        "THREEDIF": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "5\n3 3 3\n2 4 2\n1 2 3\n25 12 2012\n1 1 2013",
                    "output": "6\n4\n1\n578880\n0",
                    "explanation": "Example case 1. We have the following triples composed of different numbers up to 3:(1, 2, 3)(1, 3, 2)(2, 1, 3)(2, 3, 1)(3, 1, 2)(3, 2, 1)\nExample case 2. Here the triples are:(1, 3, 2)(1, 4, 2)(2, 3, 1)(2, 4, 1)\nExample case 3. Here the only triple is (1, 2, 3).\nExample case 4. Merry Christmas! \nExample case 5. ... and Happy New Year! By the way here the answer is zero since the only choice for X1 and for is X2 is 1, so any such triple will have equal numbers."
                }
            ],
            "problem_statement": "This is probably the simplest problem ever. You just need to count the number of ordered triples of different numbers (X1, X2, X3), where Xi could be any positive integer from 1 to Ni, inclusive (i = 1, 2, 3).\nNo, wait. I forgot to mention that numbers N1, N2, N3 could be up to 1018. Well, in any case it is still quite simple :)\nBy the way, because of this the answer could be quite large. Hence you should output it modulo 109 + 7. That is you need to find the remainder of the division of the number of required triples by 109 + 7.\nInput\nThe first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. The only line of each test case contains three space-separated integers N1, N2, N3.\nOutput\nFor each test case, output a single line containing the number of required triples modulo 109 + 7.\nConstraints\n1 \u2264 T \u2264 1000\n1 \u2264 Ni \u2264 1018",
            "input_format": "",
            "output_format": "",
            "problem_name": "Three Different Numbers",
            "user_tags": [
                "Modular Arithmetic",
                "Combinatorics"
            ],
            "computed_tags": [
                "Mathematics"
            ],
            "problem_code_id": "THREEDIF",
            "difficulty_level": "1537",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 34381683,
                    "submission_date": 1592154091,
                    "language": "PYTH 3",
                    "username": "joyous_shah",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.02",
                    "memory": "17.6M",
                    "solution": 34381683,
                    "code": "T=int(input())\r\nmod=1000000007\r\nfor k in range(T):\r\n    A,B,C=map(int,input().split())\r\n    q=[A,B,C]\r\n    q.sort()\r\n    c=q[0]*(q[1]-1)*(q[2]-2)\r\n    print(c%mod)"
                },
                {
                    "id": 33202160,
                    "submission_date": 1590035576,
                    "language": "PYTH 3",
                    "username": "gul2612",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.02",
                    "memory": "17.6M",
                    "solution": 33202160,
                    "code": "t=int(input())\nwhile t:\n    a=[int (o) for o in input().split()]\n    a.sort()\n    res=1\n    for i in range(3):\n        res=res*(a[i]-i)\n    print(res%1000000007)    \n        \n    t-=1\n"
                }
            ]
        },
        "CHHAPPY": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "4\n4\n1 1 2 3\n4\n2 1 3 3\n5\n5 4 4 3 1\n5\n3 2 1 1 4",
                    "output": "Truly Happy\nPoor Chef\nPoor Chef\nTruly Happy",
                    "explanation": "Example case 1: Chef is truly happy because $A_{A_3} = A_{A_1}$ and $A_3 \\neq A_1$.\nExample case 2: There is no pair of indices which would make Chef truly happy. For instance, $A_{A_3} = A_{A_4}$, but $A_3 = A_4$,"
                }
            ],
            "problem_statement": "Read problems statements Hindi , Vietnamese , Mandarin Chinese , Russian and Bengali as well.\n\"What do you know about happiness?\" \u2014 Yoda \nChef is happy only if three conditions hold:\n- Chef finished cooking a delicious meal\n- Chef got AC for a programming problem with an almost correct code\n- Chef got a new problem with a sequence of integers\nToday, all three conditions are satisfied. Chef would like you to feel his happiness and provide him with a solution for this new problem with a sequence of integers. The problem is as follows.\nYou are given a sequence $A_1, A_2, \\dots, A_N$. You need to determine if it is possible to choose two indices $i$ and $j$ such that $A_i \\neq A_j$, but $A_{A_i}$ = $A_{A_j}$. (If it was possible, Chef would be truly happy.)\nInput\n\nThe first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\nThe first line of each test case contains a single integer $N$.\nThe second line contains $N$ space-separated integers $A_1, A_2, \\ldots, A_N$.\n\nOutput\nFor each test case, print a single line containing the string \"Truly Happy\" if it is possible to choose required indices or \"Poor Chef\" otherwise.\nConstraints\n\n$1 \\le T \\le 1,000$\n$1 \\le N \\le 10^5$\n$1 \\le A_i \\le N$ for each valid $i$\nthe sum of $N$ over all test cases does not exceed $2 \\cdot 10^5$\n\nSubtasks\nSubtask #1 (27 points): $1 \\le N \\le 1,000$\nSubtask #2 (73 points): original constraints",
            "input_format": "",
            "output_format": "",
            "problem_name": "Chef and Happiness",
            "user_tags": [
                "data-structure",
                "implementation",
                "mgch",
                "nov18",
                "simple",
                "taran_1407"
            ],
            "computed_tags": [],
            "problem_code_id": "CHHAPPY",
            "difficulty_level": "1594",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 56600870,
                    "submission_date": 1642536824,
                    "language": "PYTH 3",
                    "username": "aayuiet068",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.09",
                    "memory": "19.6M",
                    "solution": 56600870,
                    "code": "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    seti1 = set(arr)\n    l = [arr[i-1] for i in arr]\n    seti2 = set(l)\n    if len(seti1)<=len(seti2):\n        print(\"Poor Chef\")\n    else:\n        print(\"Truly Happy\")\n        \n        \n    \n    \n"
                },
                {
                    "id": 43531115,
                    "submission_date": 1615180155,
                    "language": "PYTH 3",
                    "username": "cheerup_storm",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.07",
                    "memory": "19.1M",
                    "solution": 43531115,
                    "code": "t = int(input())\nwhile t:\n    n = int(input())\n    arr = list( map(int,input().split()) )\n    hsh = set()\n    hsh1 = set(arr)\n    f = 0\n    for i in range(1,n+1):\n        if i in hsh1:\n            if arr[i-1] in hsh:\n                print(\"Truly Happy\")\n                f = 1\n                break\n            else:\n                hsh.add(arr[i-1])\n    if not f:\n        print(\"Poor Chef\")\n    t -= 1"
                }
            ]
        },
        "CHEFSIGN": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "4\r\n<<<\r\n<><\r\n<=>\r\n<=<",
                    "output": "4\r\n2\r\n2\r\n3",
                    "explanation": "Here are some possible valid sequences which can be formed with the minimum P for each of the test cases:\n\n1  1  1\n1"
                }
            ],
            "problem_statement": "Read problems statements in Mandarin Chinese, Russian and Vietnamese as well.\nChef found a strange string yesterday - a string of signs s, where each sign is either a ', '=' or a '>'. Let N be the length of this string. Chef wants to insert N + 1 positive integers into this sequence and make it valid. A valid sequence is a sequence where every sign is preceded and followed by an integer, and the signs are correct. That is, if a sign 'a and followed by an integer b, then a should be less than b. Likewise for the other two signs as well. \nChef can take some positive integers in the range [1, P] and use a number in the range as many times as he wants.\nHelp Chef find the minimum possible P with which he can create a valid sequence.\nInput\nThe first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows.\nThe only line of each test case contains the string of signs s, where each sign is either ', '=' or a '>'. \nOutput\nFor each test case, output a single line containing an integer corresponding to the minimum possible P. \nConstraints\n\n1 \u2264 T, |s| \u2264 105\n1 \u2264 Sum of |s| over all test cases in a single test file \u2264 106\n\nSubtasks\nSubtask #1 (30 points)\n\n1 \u2264 T, |s| \u2264 103\n1 \u2264 Sum of |s| over all test cases in a single test file \u2264 104\n\nSubtask #2 (70 points)\n\nOriginal constraints",
            "input_format": "",
            "output_format": "",
            "problem_name": "Chef and Sign Sequences",
            "user_tags": [
                "String",
                "Substring"
            ],
            "computed_tags": [
                "Data Structures",
                "Arrays",
                "Groupings"
            ],
            "problem_code_id": "CHEFSIGN",
            "difficulty_level": "1563",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 31168330,
                    "submission_date": 1586023565,
                    "language": "PYTH 3",
                    "username": "harshits337",
                    "user_rating_star": 4,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.68",
                    "memory": "18.8M",
                    "solution": 31168330,
                    "code": "t=int(input())\r\nfor z in range(t):\r\n    s=input()\r\n    j=1\r\n    ans=1\r\n    a=[]\r\n    for i in s:\r\n        if i!='=':\r\n            a.append(i)\r\n    if len(a)== 0 :\r\n        print(1)\r\n        continue\r\n    for i in range(len(a)-1):\r\n        if a[i]==a[i+1]:\r\n            j+=1\r\n            ans=max(ans,j)\r\n        else:\r\n            j=1\r\n    print(ans+1)\r\n"
                },
                {
                    "id": 25799184,
                    "submission_date": 1565298631,
                    "language": "PYTH 3",
                    "username": "reshad555",
                    "user_rating_star": 3,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.57",
                    "memory": "17.6M",
                    "solution": 25799184,
                    "code": "t=int(input())\r\nfor _ in range(t):\r\n    s=input().replace('=','')\r\n    if len(s)==0:\r\n        print(1)\r\n        continue\r\n    ans,count=0,1\r\n    for i in range(len(s)-1):\r\n        if s[i]==s[i+1]:\r\n            count+=1\r\n        else:\r\n            ans=max(ans,count)\r\n            count=1\r\n    ans=max(count,ans)\r\n    print(ans+1)"
                }
            ]
        },
        "CRAWA": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "3\n3 3\n3 5\n0 0",
                    "output": "YES\nNO\nYES",
                    "explanation": "The points (0, 0) and (3, 3) will be having trace of oil while point (3, 5) will not have any trace of oil because point (3, 5) does not lie on the trajectory of robot."
                }
            ],
            "problem_statement": "Read problems statements in Mandarin Chinese  and Russian.\n\nOh no! Chef\u2019s robot from problem \"Reach The Point\" (RETPO) has broken up. \nIt's old oil tank has got leaked, it is leaking oil now. \n\n\nThe robot start doing the following weird moves. While moving it keeps leaving a trace of oil on the path it's been tracing.\n\nNote that in a single step robot will move by one unit in the current direction it is moving.\n\n\nInitially the robot is at position (0, 0).\nIn the beginning it goes 1 step to the East (i.e. In a single step, its x coordinate will increase by 1 unit.)  \nthen 2 steps to the North, (i.e. In a single step, its y coordinate will increase by 1 unit.) \nthen 3 steps to the West, (i.e. In a single step, its x coordinate will decrease by 1 unit.)\nthen 4 steps to the South, (i.e. In a single step, its y coordinate will decrease by 1 unit.)\nthen 5 steps to the East, \n and so on.\n\n\n\nThus each time the robot turns 90 degrees anti clockwise, and it will go one more step than before. Please view the following image to \nunderstand the moves. The red line in the example shows the path traced by the robot having traces of oil on it.\n\n\n\n\nNow chef wants to know whether the point (X, Y) will have traces of oil on it or not. \n\n\n\nInput\n\nThe first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows.\n\n\nFor each test case, there is a single line containing two space-separated integers X and Y.\n\nOutput\nFor each test case, output a single line containing \u201cYES\u201d (without quotes) if robot will reach point (X, Y) and \u201cNO\u201d otherwise.\nConstraints\n1 \u2264 T \u2264 100000 = 105\n-1000000000 \u2264 X, Y \u2264 1000000000, i.e., -109 \u2264 X, Y \u2264 109",
            "input_format": "",
            "output_format": "",
            "problem_name": "The Leaking Robot",
            "user_tags": [
                "Case work",
                "ad-hoc"
            ],
            "computed_tags": [
                "Special",
                "Algorithms",
                "Constructive"
            ],
            "problem_code_id": "CRAWA",
            "difficulty_level": "1559",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 64104048,
                    "submission_date": 1651557753,
                    "language": "PYTH 3",
                    "username": "neveraboolean",
                    "user_rating_star": 3,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.57",
                    "memory": "9.3M",
                    "solution": 64104048,
                    "code": "tsc = int(input())\nfor i in range(0,tsc):\n    string = input()\n    string = string.split()\n    x = int(string[0])\n    y = int(string[1])\n    if x >= 0:\n        if x % 2 == 1 and abs(y) % 2 == 0:\n            print(\"YES\")\n        elif x % 2 == 1 and abs(y) % 2 == 1:\n            print(\"YES\") if y <= x+1 and y >= 1-x else print(\"NO\")\n        elif x % 2 == 0 and abs(y) % 2 == 0:\n            print(\"YES\") if y > x or y <= -x else print(\"NO\")\n        else:\n            print(\"NO\")\n    elif x < 0:\n        if abs(x) % 2 == 0 and abs(y) % 2 == 0:\n            print(\"YES\")\n        elif abs(x) % 2 == 0 and abs(y) % 2 == 1:\n            print(\"YES\") if abs(y) <= abs(x) else print(\"NO\")\n        elif abs(x) % 2 == 1 and abs(y) % 2 == 0:\n            print(\"YES\") if abs(y) > abs(x) else print(\"NO\")\n        else:\n            print(\"NO\")"
                },
                {
                    "id": 36057450,
                    "submission_date": 1595834185,
                    "language": "PYTH 3",
                    "username": "sdutta_2019",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.58",
                    "memory": "17.5M",
                    "solution": 36057450,
                    "code": "t=int(input())\r\nfor _ in range(t):\r\n    x,y=map(int,input().split())\r\n    if x>=0:\r\n        if not x%2:\r\n            if y>0:\r\n                if y>=2+x and not y%2:\r\n                    print('YES')\r\n                else:\r\n                    print('NO')\r\n            else:\r\n                if -1*y>=x and not y%2:\r\n                    print('YES')\r\n                else:\r\n                    print('NO')\r\n        else:\r\n            if y<=x+1 and y>=-1*(x-1):\r\n                print('YES')\r\n            else:\r\n                if y>=0 and y>=x+1 and not y%2:\r\n                    print('YES')\r\n                elif y<0 and -1*y>=x+1 and not y%2:\r\n                    print('YES')\r\n                else:\r\n                    print('NO')\r\n    else:\r\n        if x%2:\r\n            x=-1*x\r\n            if y>0:\r\n                if y>=1+x and not y%2:\r\n                    print('YES')\r\n                else:\r\n                    print('NO')\r\n            else:\r\n                if -1*y>=1+x and not y%2:\r\n                    print('YES')\r\n                else:\r\n                    print('NO')\r\n        else:\r\n            x=-1*x\r\n            if y>=-1*x and y<=x:\r\n                print('YES')\r\n            else:\r\n                if y<0:\r\n                    y=-1*y\r\n                if not y%2 and y>=x:\r\n                    print('YES')\r\n                else:\r\n                    print('NO')\r\n            \r\n"
                }
            ]
        },
        "RESCALC": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "3\n2\n6 1 2 3 4 5 6\n9 3 3 3 4 4 4 5 5 5\n2\n5 2 3 4 5 6\n7 1 1 2 2 3 3 4\n3\n4 1 1 2 3\n4 1 2 2 3\n4 1 2 3 3",
                    "output": "chef\n2\ntie",
                    "explanation": "Example case 1.\nChef has total 6 cookie, so he gets 6 points for that. Also, he can put all his cookies (as they are all distinct) in a bag of size 6. It will fetch him additional 4 points. So, Chef's total points will be 10.\nThe second player has 9 cookies, he gets 9 points for that. Other than this, he can't create a bag with either 4, 5 or 6 distinct cookies. So, his final score is 9.\n10 > 9 - Chef wins.\nExample case 2.\nChef has 5 + 2 (a bag with 5 different cookies) = 7.\nThe second player has 7 + 1(a bag with 4 different cookies) = 8.\n7 \n\nExample case 3.\nEvery player has 4 cookies and can't create any bag of sweets. So, it's a tie."
                }
            ],
            "problem_statement": "Read problems statements in Mandarin Chinese, Russian and Vietnamese as well.\n\nEvery Friday Chef and his N - 1 friends go for a party. At these parties, they play board games. This Friday, they are playing a game named \"Boats! Boats! Boats!\". In this game players have to transport cookies between Venice and Constantinople. Each player has a personal storage. The players are numbered from 1 to N, Chef is numbered 1. Rules for determining a winner are very difficult, therefore Chef asks you to write a program, which will determine who is a winner. \n\n\nThere are 6 types of cookies. For each cookie in the storage player gets 1 point. Also player gets additional points if he packs his cookies in some boxes as follows: \n\nA box containing 4 different types of cookies fetches 1 additional point.\nA box containing 5 different types of cookies fetches 2 additional points.\nA box containing 6 different types of cookies fetches 4 additional points.\n\nObviously a cookie can be put into a single box.\n\nFor each player, you know the number of cookies in his storage (denoted by c[i]), also the types of cookies in the storage given denoted by type[i][j].\n\nYour task is to determine the winner of this game. Output \"tie\" if there are two or more players with same maximum score, \"chef\" if only Chef has a maximum score, winner's index in all other cases.\nInput\n\nThe first line of input contains a single integer T denoting the number of test cases. This will be followed by T test cases.\nThe first line of each test case contains an integer N denoting the number of players.\nThe second line of each test case contains an integer c[i] denoting the number of cookies in the i-th storage, followed by c[i] space-separated integers type[i][j] which denote the type if j-th cookie in the storage i-th.\nOutput\nFor each test case, output a single line containing the answer as specified in the statement.\nConstraints and Subtasks\nSubtask #1 : (20 points)  \n1 \u2264 T \u2264 10 \n1 \u2264  N  \u2264 100  \n1 \u2264  c[i]  \u2264  100  \n1 \u2264  type[i][j]  \u2264  3  \n\nSubtask #2 : (80 points)  \n1 \u2264 T \u2264 10 \n1 \u2264  N  \u2264 100  \n1 \u2264  c[i]  \u2264  100  \n1 \u2264  type[i][j]  \u2264  6",
            "input_format": "",
            "output_format": "",
            "problem_name": "Chef and calculation",
            "user_tags": [
                "Basic Maths",
                "Bitmasking",
                "Bitwise Operation",
                "ad-hoc"
            ],
            "computed_tags": [
                "Mathematics",
                "Bit Manipulation",
                "Algorithms",
                "Constructive"
            ],
            "problem_code_id": "RESCALC",
            "difficulty_level": "1571",
            "ai_solutions": [
                "def solve():\n    T = int(input())\n    for _ in range(T):\n        N = int(input())\n        scores = []\n        for i in range(N):\n            cookies = list(map(int, input().split()))[1:]\n            types = len(set(cookies))\n            score = len(cookies)\n            if types == 4:\n                score += 1\n            elif types == 5:\n                score += 2\n            elif types == 6:\n                score += 4\n            scores.append(score)\n        max_score = max(scores)\n        winners = [i for i, score in enumerate(scores) if score == max_score]\n        if len(winners) > 1:\n            print(\"tie\")\n        elif winners[0] == 0:\n            print(\"chef\")\n        else:\n            print(winners[0] + 1)\n\nsolve()"
            ],
            "human_solutions": [
                {
                    "id": 60996408,
                    "submission_date": 1647925285,
                    "language": "PYTH 3",
                    "username": "sasikumar_22",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.04",
                    "memory": "9.3M",
                    "solution": 60996408,
                    "code": "t = int(input())\r\nfor _ in range(t):\r\n    n = int(input())\r\n    plyr = []\r\n    for _ in range(n):\r\n        k = list(map(int, input().split(' ')))\r\n        val = len(k[1:])\r\n        p = {}\r\n        for i in k[1:]:\r\n            p.setdefault(i, 0)\r\n            x = p[i]\r\n            p[i] = x + 1\r\n        h = set(p.keys())\r\n        while len(h) > 3:\r\n            if len(h) == 4:\r\n                val += 1\r\n            elif len(h) == 5:\r\n                val += 2\r\n            elif len(h) == 6:\r\n                val += 4\r\n            p = {k1:v1-1 for k1,v1 in p.items() if (v1-1) > 0}\r\n            h = set(p.keys())\r\n        plyr.append(val)\r\n    \r\n    a = max(plyr)\r\n    if plyr.count(a) > 1:\r\n        print('tie')\r\n    elif plyr.index(a) == 0:\r\n        print('chef')\r\n    else:\r\n        print(plyr.index(a) + 1)\r\n        "
                },
                {
                    "id": 42301495,
                    "submission_date": 1612552330,
                    "language": "PYTH 3",
                    "username": "deeshant_gupta",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.03",
                    "memory": "17.7M",
                    "solution": 42301495,
                    "code": "T = int(input())            # Test Cases\r\ndef func():\r\n    global uni ,extra, c\r\n    if len(uni) > 3:\r\n        if len(uni) == 4 or len(uni) == 5:\r\n            extra += len(uni) - 3\r\n        else:\r\n            extra += 4\r\n        for i in uni:\r\n            c.remove(i)\r\n        uni = set(c[1:])\r\n        func()\r\nfor i in range(T):\r\n    n = int(input())        # No. of players\r\n    points = []\r\n    for k in range(n):\r\n        c = list(map(int, input().split()))  # cookies data\r\n        uni = set(c[1:])   # unique cookies data\r\n        extra = c[0]\r\n        func()\r\n        points.append(extra)\r\n    if points.count(max(points)) > 1:print('tie')\r\n    elif points.index(max(points)) == 0:print('chef')\r\n    else: print(points.index(max(points)) + 1)\r\n"
                }
            ]
        },
        "COKE": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "2\n3 2 5 4 6\n1 6\n2 8\n8 10\n3 5 10 20 30\n21 20\n22 22\n23 23",
                    "output": "8\n-1",
                    "explanation": "Example case 1: Chef should buy the second can (with price $8$), even though the first can is cheaper. If Chef bought the first can, its temperature would be $3$ when he got home, and that is outside the range $[4, 6]$.\nExample case 2: No matter which can Chef buys, when he gets home, its temperature will be less than $20$, so there is no suitable can available in the store."
                }
            ],
            "problem_statement": "Read problems statements in Hindi, Mandarin Chinese, Russian, Vietnamese, and Bengali as well.\nChef went to the store in order to buy one can of coke. In the store, they offer $N$ cans of coke (numbered $1$ through $N$). For each valid $i$, the current temperature of the $i$-th can is $C_i$ and its price is $P_i$.\nAfter buying a can of coke, Chef wants to immediately start walking home; when he arrives, he wants to immediately drink the whole can. It takes Chef $M$ minutes to get home from the store.\nThe ambient temperature outside is $K$. When a can of coke is outside, its temperature approaches the ambient temperature. Specifically, if its temperature is $t$ at some point in time:\n- if $t \\gt K+1$, then one minute later, its temperature will be $t-1$\n- if $t \\lt K-1$, then one minute later, its temperature will be $t+1$\n- if $K-1 \\le t \\le K+1$, then one minute later, its temperature will be $K$\nWhen Chef drinks coke from a can, he wants its temperature to be between $L$ and $R$ (inclusive). Find the cheapest can for which this condition is satisfied or determine that there is no such can.\nInput\n\nThe first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\nThe first line of each test case contains five space-separated integers $N$, $M$, $K$, $L$ and $R$.\n$N$ lines follow. For each $i$ ($1 \\le i \\le N$), the $i$-th of these lines contains two space-separated integers $C_i$ and $P_i$.\n\nOutput\nFor each test case, print a single line containing one integer \u2014 the price of the can Chef should buy, or $-1$ if it is impossible to buy a can such that Chef's condition is satisfied.\nConstraints\n\n$1 \\le T \\le 1,000$\n$1 \\le N \\le 100$\n$1 \\le M \\le 100$\n$|C_i| \\le 50$ for each valid $i$\n$|K| \\le 50$\n$-50 \\le L \\le R \\le 50$\n$1 \\le P_i \\le 10^6$ for each valid $i$",
            "input_format": "",
            "output_format": "",
            "problem_name": "Chef Drinks Coke",
            "user_tags": [
                "Basic Maths"
            ],
            "computed_tags": [
                "Mathematics"
            ],
            "problem_code_id": "COKE",
            "difficulty_level": "1511",
            "ai_solutions": [
                "T = int(input())\nfor _ in range(T):\n    N, M, K, L, R = map(int, input().split())\n    cans = [list(map(int, input().split())) for _ in range(N)]\n    cans.sort(key=lambda x: x[1])\n    for C, P in cans:\n        if C > K+1:\n            temp = max(C - M, K+1)\n        elif C < K-1:\n            temp = min(C + M, K-1)\n        else:\n            temp = K\n        if L <= temp <= R:\n            print(P)\n            break\n    else:\n        print(-1)",
                "T = int(input())\nfor _ in range(T):\n    N, M, K, L, R = map(int, input().split())\n    cans = [list(map(int, input().split())) for _ in range(N)]\n    cans.sort(key=lambda x: x[1])\n    min_price = float('inf')\n    for C, P in cans:\n        if C > K+1:\n            temp = max(C - M, K+1)\n        elif C < K-1:\n            temp = min(C + M, K-1)\n        else:\n            temp = K\n        if L <= temp <= R:\n            min_price = min(min_price, P)\n    print(min_price if min_price != float('inf') else -1)"
            ],
            "human_solutions": [
                {
                    "id": 35766475,
                    "submission_date": 1595137021,
                    "language": "PYTH 3",
                    "username": "alisiddiqui",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.18",
                    "memory": "17.6M",
                    "solution": 35766475,
                    "code": "T= int(input())\nfor i in range(T):\n    a=list(map(int,input().split()))\n    l=[]\n    for j in range(a[0]):\n        b=input().split()\n        t=int(b[0])\n        if(t>a[2]+1):\n         t=max(t-a[1],a[2])\n        elif(t<a[2]-1):\n         t=min(t+a[1],a[2])\n        else:\n         t=a[2]\n        if(t >= a[3] and t <= a[4]):\n         l += [int(b[1])]\n    if(len(l)==0):\n        print(\"-1\")\n    else:\n        print(min(l))\n                \n"
                },
                {
                    "id": 35630676,
                    "submission_date": 1594736323,
                    "language": "PYTH 3",
                    "username": "adit2998",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.43",
                    "memory": "17.6M",
                    "solution": 35630676,
                    "code": "def chef_drinks_coke_2():\n    n, m, k, l, r = [int(x) for x in input().split()]    \n    min = 10000000 \n    for i in range(n):\n        c, p = [int(x) for x in input().split()]                       \n\n        for j in range(m):\n            if c>k+1:\n                c -= 1                \n            elif c<k-1:\n                c += 1                \n            else:\n                c = k\n\n\n        if c>=l and c<=r:\n            if p<min:\n                min = p                \n    \n    if min!=10000000:\n        print(min)\n    else:\n        print(-1)\n\nt = int(input())\nwhile t>0:\n    chef_drinks_coke_2()\n    t-=1"
                }
            ]
        },
        "CHEFPATH": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "1\n2 2",
                    "output": "Yes",
                    "explanation": "Example case 1.\nChef can start from (1,1), move down to (2,1), then move right to (2,2) and finally move upwards to reach (1,2). As, he is able to visit all the cells exactly once and sum of absolute differences of corresponding x and y dimension is 1, we can call this path a magical path."
                }
            ],
            "problem_statement": "Read problems statements in Mandarin Chinese, Russian and Vietnamese as well.\n\nChef is stuck in a two dimensional maze having N rows and M columns. He needs to get out of the maze as soon as possible and arrive at the kitchen in order to serve his hungry customers. But, he can get out of the maze only if he is able to successfully find any magical path in the given maze.\n\n\nA path is defined as magical if it starts from any of the cell (a,b) of the maze and ends at the cell (c,d) such that the following conditions are satisfied :-\n\n|a - c| + |b - d| = 1\nAll the cells in the maze are traversed exactly once.\nIt is allowed to move only in the four directions - up, down, left and right from the current cell.\n\nInput\n\nFirst line of the input contains an integer T denoting the number of different types of scenarios.\nEach of the next T lines will contain two integers N, M denoting the dimensions of the maze.\n\nOutput\nFor each of the T scenarios, output a single line containing \"Yes\" or \"No\" (without quotes) denoting whether the Chef can get out of the maze or not.\nConstraints\n\n1 \u2264 T \u2264 105\n1 \u2264 N, M \u2264 1018\n\nSubtasks\n\nSubtask #1 : (30 points)\n\n\n1 \u2264 T \u2264 100\n1 \u2264 N, M \u2264 10\n\n\n\nSubtask #2 : (70 points) \nOriginal Constraints",
            "input_format": "",
            "output_format": "",
            "problem_name": "Chef And Magical Path",
            "user_tags": [
                "april16",
                "hamiltonian-cycle",
                "prateekg603",
                "simple"
            ],
            "computed_tags": [],
            "problem_code_id": "CHEFPATH",
            "difficulty_level": "1503",
            "ai_solutions": [
                "T = int(input())\nfor _ in range(T):\n    N, M = map(int, input().split())\n    if N*M % 2 == 0:\n        print(\"Yes\")\n    else:\n        print(\"No\")",
                "def can_chef_get_out(T, scenarios):\n    results = []\n    for i in range(T):\n        N, M = scenarios[i]\n        if N*M % 2 == 0:\n            results.append(\"Yes\")\n        else:\n            results.append(\"No\")\n    return results\n\nT = int(input())\nscenarios = []\nfor _ in range(T):\n    scenarios.append(list(map(int, input().split())))\nresults = can_chef_get_out(T, scenarios)\nfor result in results:\n    print(result)"
            ],
            "human_solutions": [
                {
                    "id": 59403878,
                    "submission_date": 1646227900,
                    "language": "PYTH 3",
                    "username": "bikram_001",
                    "user_rating_star": 3,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.55",
                    "memory": "9.3M",
                    "solution": 59403878,
                    "code": "for i in range(int(input())):\n    m,n=map(int,input().split())\n    if(n%2==0 or m%2==0):\n        if(n==1 and m>2) or (m==1 and n>2):\n            print(\"No\")\n        else:\n            print(\"Yes\")\n    else:\n        print(\"No\")"
                },
                {
                    "id": 50023197,
                    "submission_date": 1629483529,
                    "language": "PYTH 3",
                    "username": "codetilldawn07",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.63",
                    "memory": "17.6M",
                    "solution": 50023197,
                    "code": "for _ in range(int(input())):\n\tst=input().split()\n\tN=int(st[0])\n\tM=int(st[1])\n\tvalid=False\n\tif N*M==2:\n\t\tvalid=True\n\tif (N*M%2==0) and (min(N,M)>1):\n\t\tvalid=True\n\tif valid:\n\t\tprint('Yes')\n\telse:\n\t\tprint('No')"
                }
            ]
        },
        "RSIGNS": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "1\r\n1",
                    "output": "10",
                    "explanation": ""
                }
            ],
            "problem_statement": "Read problem statements in Hindi, Bengali, Mandarin Chinese, Russian, and Vietnamese as well.\nOn her way to ChefLand, Marichka noticed $10^K$ road signs (numbered $0$ through $10^K - 1$). For each valid $i$, the sign with number $i$ had the integer $i$ written on one side and $10^K-i-1$ written on the other side.\nNow, Marichka is wondering \u2014 how many road signs have exactly two distinct decimal digits written on them (on both sides in total)? Since this number may be large, compute it modulo $10^9+7$.\nFor example, if $K = 3$, the two integers written on the road sign $363$ are $363$ and $636$, and they contain two distinct digits $3$ and $6$, but on the road sign $362$, there are integers $362$ and $637$, which contain four distinct digits \u2014 $2$, $3$, $6$ and $7$. On the road sign $11$, there are integers $11$ and $988$, which contain three distinct digits \u2014 $1$, $9$ and $8$.\nInput\n\nThe first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\nThe first and only line of each test case contains a single integer $K$.\n\nOutput\nFor each test case, print a single line containing one integer \u2014 the number of road signs with exactly two digits, modulo $10^9+7$.\nConstraints\n\n$1 \\le T \\le 10^5$\n$1 \\le K \\le 10^9$\n\nSubtasks\nSubtask #1 (20 points): $1 \\le T, K \\le 5$\nSubtask #2 (80 points): original constraints",
            "input_format": "",
            "output_format": "",
            "problem_name": "Road Signs",
            "user_tags": [
                "Basic Maths",
                "Modular Exponentiation"
            ],
            "computed_tags": [
                "Mathematics",
                "Modular Arithmetic"
            ],
            "problem_code_id": "RSIGNS",
            "difficulty_level": "1592",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 42970805,
                    "submission_date": 1614080007,
                    "language": "PYTH 3",
                    "username": "akshaysraut",
                    "user_rating_star": 3,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "3.04",
                    "memory": "17.7M",
                    "solution": 42970805,
                    "code": "def get_power(n,m,D):\n    if(n==0):\n        return 1\n    elif(n==1):\n        return 2\n    elif(n in D):\n        return D[n]\n    else:\n        D[n] = ((get_power(n//2,m,D)%m)*(get_power(n-n//2,m,D)%m))%m\n        return D[n]\n\nT = int(input())\nans = []\nm = 10**9 + 7\n\nfor _ in range(T):\n    K = int(input())\n\n    ans.append( (get_power(K,m,{})*5)%m )\n\nfor i in ans:\n    print(i)\n"
                },
                {
                    "id": 38963660,
                    "submission_date": 1602860333,
                    "language": "PYTH 3",
                    "username": "prateeksharma7",
                    "user_rating_star": 6,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.74",
                    "memory": "17.5M",
                    "solution": 38963660,
                    "code": "__author__ = 'Prateek'\r\n\r\n\r\ndef test():\r\n    k = int(input())\r\n    ans = (pow(2,k-1,int(10**9+7))*10)%(int(10**9+7))\r\n    print(ans)\r\n\r\n\r\nif __author__ == 'Prateek':\r\n    t = int(input())\r\n    for _ in range(t):\r\n        test()\r\n"
                }
            ]
        },
        "CHEFPTNT": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "2\n4 4 2 4\nEEOO\n4 3 1 4\nEEOO",
                    "output": "yes\nno",
                    "explanation": "Example case 1: The firm can prepare 2 patents per month, so in the first month (odd), workers 3 and 4 can work on 2 patents, and in the second month (even), workers 1 and 2 can work on the remaining 2 patents.\nExample case 2: There is no way for multiple workers to work on the same (even or odd) month. Hence, it's impossible to finish 4 patents in 3 months."
                }
            ],
            "problem_statement": "Read problems statements in Mandarin chinese, Russian and Vietnamese as well.\nChef has decided to start a new firm called PatentChef. However, he's stuck with some big legal issues. Their firm has received offers from a lot of companies, so Chef told his friend Junior Chef to look over some patent cases and solve them as quickly as he can.\nJunior Chef is very smart and has an eye for every little detail. He quickly found a case and went ahead to solve it. The patent case is as follows:\nThere are N patents to be filed for a company. Chef\u2019s firm has the first M months of the year 2018 to finish this task. (The months in a year are numbered 1 through 12.) Chef's firm has K workers (including Junior Chef) available to work on this case. Each worker can prepare exactly one patent per month.\nJunior Chef assigns work to workers starting from the first month of the year. He can have any workers work on this case on any month provided that they're chosen according to the following conditions:\n\nEach worker can only work on this patent case for at most one month.\nEach worker has to work either on an even month or an odd month of the year. You are given a string S with length K and the following meaning: for each valid i, if the i-th character of S is E, worker i has to work on an even month; if it's O, this worker has to work on an odd month.\nAt most X workers can work on this patent case each month.\n\nDetermine whether Chef\u2019s firm and Junior Chef can finish this patent case in time.\nInput\n\nThe first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows.\nThe first line of each test case contains four space-separated integers N, M, X and K.\nThe second line contains a single string S.\n\nOutput\nFor each test case, print a single line containing the string \"yes\" if it's possible to finish the patent case or \"no\" otherwise (without quotes).\nConstraints\n\n1 \u2264 T \u2264 1000\n0 \u2264 X \u2264 106\n1 \u2264 N, K \u2264 106\n0 \u2264 M \u2264 12\n1 \u2264 sum of K over all test cases \u2264 107\n|S| = K\neach character of S is either E or O\n\nSubtasks\nSubtask #1 (20 points): 1 \u2264 N \u2264 M \u2264 12\nSubtask #2 (80 points): original constraints",
            "input_format": "",
            "output_format": "",
            "problem_name": "Chef And The Patents",
            "user_tags": [
                "Arithmetic",
                "ad-hoc"
            ],
            "computed_tags": [
                "Mathematics",
                "Basic Maths",
                "Algorithms",
                "Constructive"
            ],
            "problem_code_id": "CHEFPTNT",
            "difficulty_level": "1517",
            "ai_solutions": [
                "T = int(input())\nfor _ in range(T):\n    N, M, X, K = map(int, input().split())\n    S = input()\n    E = S.count('E')\n    O = S.count('O')\n    for i in range(1, M+1):\n        if i%2 == 0:\n            work = min(E, X)\n            E -= work\n        else:\n            work = min(O, X)\n            O -= work\n        N -= work\n    if N <= 0:\n        print(\"yes\")\n    else:\n        print(\"no\")",
                "T = int(input())\nfor _ in range(T):\n    N, M, X, K = map(int, input().split())\n    S = input()\n    E = S.count('E')\n    O = S.count('O')\n    for i in range(1, M+1):\n        if i%2 == 0:\n            if E > X:\n                N -= X\n                E -= X\n            else:\n                N -= E\n                E = 0\n        else:\n            if O > X:\n                N -= X\n                O -= X\n            else:\n                N -= O\n                O = 0\n    if N <= 0:\n        print(\"yes\")\n    else:\n        print(\"no\")"
            ],
            "human_solutions": [
                {
                    "id": 64761575,
                    "submission_date": 1652358486,
                    "language": "PYTH 3",
                    "username": "harjeetsaini",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.09",
                    "memory": "9.3M",
                    "solution": 64761575,
                    "code": "for _ in range(int(input())):\r\n    n,m,x,k = map(int,input().split())\r\n    string1 =input()\r\n    if k==0 or k<n:\r\n            print('no')\r\n            continue\r\n        \r\n    kaam=n\r\n    emp=k\r\n    \r\n    eval=string1.count('E')\r\n    oval=string1.count('O')\r\n    ww='odd'\r\n    \r\n    for _ in range(0,m):\r\n        if ww=='odd':\r\n                kaam=kaam - min(min(oval,x),emp)\r\n                oval-=min(min(oval,x),emp)\r\n                emp=emp-min(min(oval,x),emp)\r\n                ww='even'\r\n        else:\r\n                kaam=kaam - min(min(eval,x),emp)\r\n                \r\n                k=k-min(min(eval,x),emp)\r\n                eval -= min(min(eval,x),emp)\r\n                ww='odd'\r\n    if kaam<=0:\r\n        print('yes')\r\n    else:\r\n        print('no')"
                },
                {
                    "id": 62006010,
                    "submission_date": 1649092185,
                    "language": "PYTH 3",
                    "username": "pavani_890",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.10",
                    "memory": "9.4M",
                    "solution": 62006010,
                    "code": "import math\nfor _ in range(int(input())):\n    n,m,x,k=map(int,input().split())\n    s=input()\n    ecount=int(s.count('E'))\n    ocount=int(s.count('O'))\n    emonth=math.floor(m/2)\n    omonth=math.ceil(m/2)\n\n    if (min(ocount,x*omonth)+min(ecount,x*emonth))>=n:\n        print('yes')\n    else:\n        print('no')\n\n"
                }
            ]
        },
        "RRECIPE": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "5\n?\n??\nab?\na?c\naba",
                    "output": "26\n26\n1\n0\n1",
                    "explanation": ""
                }
            ],
            "problem_statement": "Chef had an interesting dream last night. He dreamed of a new revolutionary chicken recipe. When he woke up today he tried very hard to reconstruct the ingredient list. But, he could only remember certain ingredients. To simplify the problem, the ingredient list can be represented by a string of lowercase characters 'a' - 'z'.\nChef can recall some characters of the ingredient list, all the others, he has forgotten. However, he is quite sure that the ingredient list was a palindrome.\nYou are given the ingredient list Chef dreamed last night. The forgotten characters are represented by a question mark ('?'). Count the number of ways Chef can replace the forgotten characters with characters 'a' - 'z' in such a way that resulting ingredient list is a palindrome.\nInput\nThe first line of input contains a single integer T, the number of test cases. T lines follow, each containing a single non-empty string - the ingredient list as recalled by Chef. Whatever letters he couldn't recall are represented by a '?'.\nOutput\nFor each test case, output a single line containing the number of valid ways the ingredient list could be completed. Since the answers can be very large, output each answer modulo 10,000,009.\nConstraints\n\n1 \u2264 T \u2264 20\n1 \u2264 sum of length of all input strings \u2264 1,000,000\nEach input string contains only lowercase roman letters ('a' - 'z') or question marks.",
            "input_format": "",
            "output_format": "",
            "problem_name": "Recipe Reconstruction",
            "user_tags": [
                "String"
            ],
            "computed_tags": [
                "Data Structures"
            ],
            "problem_code_id": "RRECIPE",
            "difficulty_level": "1521",
            "ai_solutions": [
                "MOD = 10000009\n\ndef solve(s):\n    n = len(s)\n    cnt = 0\n    for i in range(n//2):\n        if s[i] == '?' and s[n-i-1] == '?':\n            cnt += 1\n        elif s[i] != '?' and s[n-i-1] != '?' and s[i] != s[n-i-1]:\n            return 0\n    if n % 2 and s[n//2] == '?':\n        cnt += 1\n    return pow(26, cnt, MOD)\n\nT = int(input().strip())\nfor _ in range(T):\n    s = input().strip()\n    print(solve(s))",
                "def solve(s):\n    mod = 10000009\n    n = len(s)\n    ans = 1\n    for i in range(n//2):\n        if s[i] == '?' and s[n-i-1] == '?':\n            ans = (ans*26)%mod\n        elif s[i] == '?' or s[n-i-1] == '?':\n            continue\n        elif s[i] != s[n-i-1]:\n            return 0\n    if n%2 and s[n//2] == '?':\n        ans = (ans*26)%mod\n    return ans\n\nT = int(input())\nfor _ in range(T):\n    s = input()\n    print(solve(s))"
            ],
            "human_solutions": [
                {
                    "id": 38774508,
                    "submission_date": 1602256481,
                    "language": "PYTH 3",
                    "username": "vatsal99",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.17",
                    "memory": "17.6M",
                    "solution": 38774508,
                    "code": "t=int(input())\r\nfor _ in range(t):\r\n  s=input()\r\n  n=len(s)\r\n  if n==1 and s[0]=='?':\r\n    print(26)\r\n  else:\r\n    count=1\r\n    left=0\r\n    right=n-1\r\n    while left<=right:\r\n      if s[left]==\"?\" and s[right]==\"?\":\r\n        left+=1\r\n        right-=1\r\n        count=(count*26)%10000009\r\n      elif s[left]=='?' or s[right]=='?' or s[left]==s[right]:\r\n        left+=1\r\n        right-=1\r\n        continue\r\n      else:\r\n        count=0\r\n        break\r\n    print(count)"
                },
                {
                    "id": 36886806,
                    "submission_date": 1597770029,
                    "language": "PYTH 3",
                    "username": "mr_akk",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.18",
                    "memory": "17.6M",
                    "solution": 36886806,
                    "code": "# def recur(a,st,end,ans):\n#     if st<=end:\n#         if a[st] == '?' and a[end] == \"?\":\n#             ans*=26\n#             return recur(a,st+1,end-1,ans)\n#         if a[st]!='?' and a[end]!='?':\n#             if a[st] == a[end]:\n#                 return recur(a,st+1,end-1,ans)\n#             return 0\n#         return recur(a,st+1,end-1,ans)\n#     return ans\n\nfor _ in range(int(input())):\n    a = input()\n    i = 0\n    j = len(a)-1\n    ans = 1\n    mod = (10**7)+9\n    while i<=j:\n        if a[i] == '?' and a[j] == \"?\":\n            ans=((ans%mod)*(26%mod))%mod\n            i+=1\n            j-=1\n        elif a[i] == '?' or a[j] == \"?\" or a[i] == a[j]:\n            i+=1\n            j-=1\n        else:\n            ans = 0\n            break\n    print(ans)\n"
                }
            ]
        },
        "PRDRG": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "2 1 2",
                    "output": "1 2 1 4",
                    "explanation": "Example case 1: We only fold once, so $x=1$ and $y=2$.\nExample case 2: We fold the piece of cardboard twice. The last edge is at $1/4$, so $x=1$ and $y=4$."
                }
            ],
            "problem_statement": "Read problems statements Hindi , Vietnamese , Mandarin Chinese , Russian and Bengali as well.\nWe have a rectangular piece of cardboard with width $1$ (its height is not important). We are going to fold it in the following way:\n- pick up the right side of the piece of cardboard and move it to the left until it touches the left side\n- this way, a smaller piece of cardboard with width $1/2$ is created; if we unfolded it, we could see a vertical ridge formed in the middle\n- pick up the left side of this new piece of cardboard and move it to the right until it touches the (new) right side\n- pick up the right side of the resulting piece of cardboard and move it to the left until it touches the left side, etc.\nWhenever the cardboard is folded, exactly one of its new sides is a newly formed ridge (there may be more, internal ridges formed, but we do not consider these). Let's denote such a ridge created in the $k$-th folding by $R_k$.\nIn total, we fold the piece of cardboard $N$ times. Afterwards, we unfold it and look at the formed ridges. Let's denote the distance of ridge $R_N$ (i.e. the last formed outer ridge) from the left side of the original piece of cardboard by $D_N$. For example, $D_1 = 1/2$ and $D_2 = 1/4$.\nIt is possible to express $D_N$ as an irreducible fraction $x/y$. Find this fraction.\nAssume that it is possible to fold the piece of cardboard as many times as we want.\nInput\nThe first and only line of the input contains a single integer $T$ denoting the number of test cases. For each test case, a space and an integer $N$ follows.\nOutput\nPrint a single line containing $2T$ space-separated integers. For the $i$-th test case ($1 \\le i \\le T$), the $2i-1$-th and $2i$-th integer should denote $x$ and $y$ \u2014 the position of the last ridge as an irreducible fraction.\nConstraints\n\n$1 \\le T \\le 5$\n$1 \\le N \\le 25$\n\nSubtask #1 (10 points):\n- $1 \\le T \\le 5$\n- $1 \\le N \\le 5$\nSubtask #2 (90 points): original constraints",
            "input_format": "",
            "output_format": "",
            "problem_name": "Chef and Ridges",
            "user_tags": [
                "GCD",
                "Implementation",
                "Patterns"
            ],
            "computed_tags": [
                "Mathematics",
                "Number Theory",
                "Algorithms",
                "Observation"
            ],
            "problem_code_id": "PRDRG",
            "difficulty_level": "1505",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 29169471,
                    "submission_date": 1579965682,
                    "language": "PYTH 3",
                    "username": "imdude",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.02",
                    "memory": "17.6M",
                    "solution": 29169471,
                    "code": "a=list(map(int,input().split()))\r\nl=[]\r\nfor i in range (a[0]):\r\n    x=((2**a[i+1])-((-1)**a[i+1]))//3\r\n    y=2**a[i+1]\r\n    l.append(x)\r\n    l.append(y)\r\nfor i in range (len(l)):\r\n    print(l[i], end=\" \")"
                },
                {
                    "id": 25939958,
                    "submission_date": 1565803699,
                    "language": "PYTH 3",
                    "username": "kkhiladi",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.01",
                    "memory": "17.5M",
                    "solution": 25939958,
                    "code": "a = [int(x) for x in input().split()]\nfor i in range(a[0]):\n    m1 = 1\n    m2 = 1\n    for x in range(3,a[i+1]+1):\n        if x%2!=0:\n            m1 = 2*m1 + m2\n        else:\n            m2 = 2*m2 + m1\n    if a[i+1]%2==0:\n        print(m2, end = \" \")\n    else:\n        print(m1, end = \" \")\n    print(pow(2,a[i+1]), end = \" \")"
                }
            ]
        },
        "CHDIGER": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "3\r\n35 4\r\n42 4\r\n24 9",
                    "output": "34\r\n24\r\n24",
                    "explanation": "Example case 1: Chef can remove the digit $5$ and add $4$ to the end of $N$. Then, $N$ becomes $34$.\nExample case 2: Chef can remove the digit $4$ from the beginning of $N$, add $4$ to the end of $N$ and get $N = 24$.\nExample case 3: Chef cannot make his number any smaller."
                }
            ],
            "problem_statement": "Read problem statements in Hindi, Bengali, Mandarin Chinese, Russian, and Vietnamese as well.\nChef Leonardo has a decimal integer $N$ and a non-zero decimal digit $d$. $N$ does not contain the digit zero; specifically, $N$ should always be treated as a decimal integer without leading zeroes.\nChef likes $d$ and does not like any other digit, so he decided to change $N$. He may apply the following operation any number of times (including zero): append the digit $d$ to the decimal representation of $N$ ($d$ becomes the least significant digit of $N$), then remove one occurrence of one digit from the decimal representation of $N$.\nChef has already changed a lot of numbers and he got bored. Now, he wants to know the smallest possible value of $N$ which can be obtained by performing the operation described above. Can you help him?\nInput\n\nThe first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\nThe first and only line of each test case contains two space-separated integers $N$ and $d$.\n\nOutput\nFor each test case, print a single line containing one integer - the minimum number Chef can obtain.\nConstraints\n\n$1 \\le T \\le 1,000$\n$1 \\le N \\le 10^{18}$\n$N$ does not contain the digit $0$\n$1 \\le d \\le 9$\n\nSubtasks\nSubtask #1 (40 points):\n- $1 \\le T \\le 100$\n- $1 \\le N \\le 10^9$\nSubtask #2 (60 points): original constraints",
            "input_format": "",
            "output_format": "",
            "problem_name": "Chef and a Beautiful Digit",
            "user_tags": [
                "Arithmetic",
                "Observation",
                "Implementation"
            ],
            "computed_tags": [
                "Mathematics",
                "Basic Maths",
                "Algorithms"
            ],
            "problem_code_id": "CHDIGER",
            "difficulty_level": "1574",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 31691736,
                    "submission_date": 1586603614,
                    "language": "PYTH 3",
                    "username": "sonaldangi",
                    "user_rating_star": 3,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.03",
                    "memory": "17.6M",
                    "solution": 31691736,
                    "code": "t=int(input())\r\nfor _ in range(t):\r\n    n,k=map(int,input().split())\r\n    s=list(str(n))\r\n    l=len(s)\r\n    s1=\"\"\r\n    if(int(min(s))>k):\r\n        for i in range(l):\r\n            s1+=str(k)\r\n        print(s1)\r\n    else:\r\n        c=min(s)\r\n        while(int(c)!=k and len(s)!=0):\r\n            s1+=c\r\n            ind=s.index(c)\r\n            s=s[ind+1:]\r\n            #print(s)\r\n            for i in range(ind+1):\r\n                s.append(str(k))\r\n                #print(s)\r\n            c=min(s)\r\n        z=len(s1)\r\n        for i in range(l-z):\r\n            s1+=str(k)\r\n        print(s1)\r\n            \r\n                \r\n           \r\n        "
                },
                {
                    "id": 27880063,
                    "submission_date": 1573566690,
                    "language": "PYTH 3",
                    "username": "adarsh_kumar1",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.04",
                    "memory": "17.6M",
                    "solution": 27880063,
                    "code": "T= int(input())\nfor i in range(T):\n    n,d=input().split()\n    d=int(d)\n    a=[]\n    l=len(n)\n    mn=d\n    \n    for j in range(l):\n        a.append(int(n[j]))\n        \n        \n    for k in range(l-1,-1,-1):\n        if(a[k]>mn):\n            a.pop(k)\n            a.append(d)\n        mn=min(mn,a[k])\n        \n        \n    print(*a,sep=\"\",end=\"\\n\")\n    T=T-1    \n        \n    "
                }
            ]
        },
        "FLIP": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "3\r\n100001\r\n110111\r\n1010\r\n1010\r\n000\r\n111",
                    "output": "2\r\n0\r\n2",
                    "explanation": "Example case 1: Initially, $A$ is \"100001\". We choose the substring \"000\" between the $2$-nd and $4$-th character and convert it to \"101\".\nNow $A$ becomes \"110101\". We choose the string \"0\" containing only the $5$-th character and convert it to \"1\".\nFinally, $A$ becomes \"110111\", which is equal to $B$.\nExample case 2: $A$ and $B$ are initially equal, so there is no need to perform any operation."
                }
            ],
            "problem_statement": "Read problems statements in Hindi, Mandarin Chinese, Russian, Vietnamese, and Bengali as well.\nYou are given two binary strings $A$ and $B$ with the same length.\nYou may perform the following operation any number of times (including zero): pick a substring of $A$ with odd length and invert all the bits (change '0' to '1' or vice versa) at odd positions in this substring. For example, if we choose a substring \"01011\", we can convert it to \"11110\" (bits at odd positions are bold).\nDetermine the minimum number of operations required to change the string $A$ to the string $B$.\nInput\n\nThe first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\nThe first line of each test case contains a single string $A$.\nThe second line contains a single string $B$.\n\nOutput\nFor each test case, print a single line containing one integer \u2014 the minimum number of operations required.\nConstraints\n\n$1 \\le T \\le 10^3$\n$1 \\le |A| = |B| \\le 10^5$\n$A$ and $B$ contain only characters '0' and '1'\nthe sum of $|A|$ over all test cases does not exceed $10^5$",
            "input_format": "",
            "output_format": "",
            "problem_name": "Flip the String",
            "user_tags": [
                "String",
                "Greedy",
                "Implementation"
            ],
            "computed_tags": [
                "Data Structures",
                "Algorithms"
            ],
            "problem_code_id": "FLIP",
            "difficulty_level": "1538",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 1027898008,
                    "submission_date": 1698752079,
                    "language": "PYTH 3",
                    "username": "sandeep538srm",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.04",
                    "memory": "8.9M",
                    "solution": 1027898008,
                    "code": "def minOperations(a, b):\r\n    count = 0\r\n    v = [False] * len(a)\r\n\r\n    for i in range(len(a)):\r\n        if a[i] != b[i]:\r\n            v[i] = True\r\n\r\n    for i in range(len(v)):\r\n        if v[i]:\r\n            count += 1\r\n        else:\r\n            continue\r\n\r\n        j = i + 2\r\n        while j < len(v):\r\n            if v[j]:\r\n                v[j] = False\r\n            else:\r\n                break\r\n            j += 2\r\n\r\n    return count\r\n\r\ndef main():\r\n    t = int(input())\r\n    for _ in range(t):\r\n        a = input()\r\n        b = input()\r\n\r\n        result = minOperations(a, b)\r\n        print(result)\r\n\r\nif __name__ == \"__main__\":\r\n    main()\r\n"
                },
                {
                    "id": 1027659001,
                    "submission_date": 1698590362,
                    "language": "PYTH 3",
                    "username": "yuvarajasimha",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.04",
                    "memory": "9.1M",
                    "solution": 1027659001,
                    "code": "t = int(input())\r\nfor _ in range(t):\r\n    a = input()\r\n    b = input()\r\n    \r\n    v = [False] * len(a)  # Create a boolean list initialized with False\r\n    \r\n    for i in range(len(a)):\r\n        if a[i] != b[i]:\r\n            v[i] = True\r\n    \r\n    count = 0\r\n    \r\n    for i in range(len(v)):\r\n        if v[i]:\r\n            count += 1\r\n        else:\r\n            continue\r\n\r\n        j = i + 2\r\n        while j < len(v):\r\n            if v[j]:\r\n                v[j] = False\r\n            else:\r\n                break\r\n            j += 2\r\n    \r\n    print(count)"
                }
            ]
        }
    },
    "3": {
        "MAXSCRAB": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "2   \n10   \n..d.t.D..d    \n10 11 12 9 8 10 11 15   \n22    \ndtDtTD..ddT.TtTdDT..TD      \n12297 5077 28888 17998 12125 27400 31219 21536",
                    "output": "270   \n35629632",
                    "explanation": ""
                }
            ],
            "problem_statement": "Every character in the string \u201cIITMANDI\u201d is given a certain number of points. You are given a scrabble board with only one row. The input contains the positions of score modifiers such as: Double Letter, Triple Letter, Double Word and Triple Word. You need to find the best position to place the string \u201cIITMANDI\u201d such that your score is maximized. \nDouble Letter - Doubles the number of points you get for the letter placed on the double letter.  \nTriple Letter - Triples the number of points you get for the letter placed on the triple letter.   \nDouble Word - Doubles the number of points you get for the word. Applied after applying above modifiers.   \nTriple Word - Triples the number of points you get for the word. Applied after applying the above modifiers.\nThe word has to be read from left to right. You can\u2019t place it in the reverse direction.  \nThe letters have to be placed continuously on the board. \nIf there is no modifier or a double word or triple word modifier before a tile, it's score is added to the total score. The double word and triple modifiers are applied at the end.\nInput Format\n\nFirst line containes a single integer $T$ - the number of test cases.\nFirst line of each test case contains a single integer $N$ - the size of the board.    \nSecond line of each test case contains a string of size $N$ representing the board according to the following convention:   \n'.' - No modifier        \n'd' - Double letter    \n't' - Triple letter   \n'D' - Double word   \n'T' - Triple word     \nThird line of each test case contains 8 integers corresponding to the points associated with each letter of the string \"IITMANDI\". Note that the 3 'I's in IITMANDI cannot be interchanged freely. The score of the first 'I' will be equal to the first integer, score of the second 'I' will be equal to the second integer and the score of the last 'I' will be equal to the last integer.\n\nOutput Format\nFor each test case, output a single integer in a new line, the maximum possible score. \nConstraints\n$ 1 \\leq T \\leq 1000 $ \n$ 8 \\leq N \\leq 100 $    \n$ 0 \\leq $ Points for each character $ \\leq 10^5 $",
            "input_format": "",
            "output_format": "",
            "problem_name": "Maximum Scoring Position",
            "user_tags": [
                "vishal_nnd0"
            ],
            "computed_tags": [],
            "problem_code_id": "MAXSCRAB",
            "difficulty_level": "1675",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 29832831,
                    "submission_date": 1582310310,
                    "language": "PYTH 3",
                    "username": "kukku11",
                    "user_rating_star": 4,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.19",
                    "memory": "17.6M",
                    "solution": 29832831,
                    "code": "try:\r\n    maxpoint=[]\r\n    def maxpoints(n,string,sc):\r\n        i=0\r\n        points=0\r\n        increaser=1\r\n        while i<8:\r\n            if string[i]=='.':\r\n                points+=sc[i]\r\n                i+=1\r\n            elif string[i]=='d':\r\n                points+=sc[i]*2\r\n                i+=1\r\n            elif string[i]=='t':\r\n                points+=sc[i]*3\r\n                i+=1\r\n            elif string[i]=='D':\r\n                increaser=increaser*2\r\n                points+=sc[i]\r\n                i+=1\r\n            elif string[i]=='T':\r\n                increaser=increaser*3\r\n                points+=sc[i]\r\n                i+=1\r\n        points=points*increaser\r\n        maxpoint.append(points)\r\n        return points\r\n    def values(n,string,sc):\r\n        for i in range(n-7):\r\n            maxpoints(n,string[i:],sc)\r\n        return max(maxpoint)\r\n    t=int(input())\r\n    for i in range(t):\r\n        n=int(input())\r\n        string=str(input())\r\n        if n>=8 and n==len(string):\r\n            sc=list(map(int,input().split()))\r\n            print(values(n,string,sc))\r\n            maxpoint=[]\r\n        else:\r\n            print('String is not equals to the length given')\r\n            break\r\nexcept EOFError:\r\n    pass"
                },
                {
                    "id": 26233657,
                    "submission_date": 1567605681,
                    "language": "PYTH 3",
                    "username": "chetanpant123",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.26",
                    "memory": "17.6M",
                    "solution": 26233657,
                    "code": "t=int(input())\nfor i in range(0, t):\n    n=int(input())\n    s=str(input())\n    l=list(map(int, input().split()))\n    sum1=sum(l)\n    finalSum=0\n    for i in range(n-7):\n        sum2 = 0\n        dw=1\n        tw=1\n        for k in range(i,i+8):\n            if s[k]==\"d\":\n                sum2=sum2+2*l[k-i]\n            elif s[k]==\"t\":\n                sum2 = sum2 + 3*l[k-i]\n            elif s[k]==\"D\":\n                dw*=2\n                sum2 = sum2 + l[k - i]\n            elif s[k]==\"T\":\n                tw*=3\n                sum2 = sum2 + l[k - i]\n            else:\n                sum2 = sum2 + l[k - i]\n\n        # print(sum2)\n        finalSum=max(finalSum,sum2*dw*tw)\n\n    print(finalSum)"
                }
            ]
        },
        "MIRTREE": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "2 3\n1 1\n1 4\n2",
                    "output": "38",
                    "explanation": "Initial no of edges = 6 \nAfter the operation 1 1, no of edges = 15 \nAfter the operation 1 4, no of edges = 38 \nAt operation 2, we print the no of edges that is 38."
                }
            ],
            "problem_statement": "Given a Complete Binary Tree of \u2018n\u2019 depth, you can perform 4 types of mirror operation on the tree:- \nMirror on the right. The tree is mirrored to the right and rightmost node on every level is connected with the mirrored corresponding node. \nMirror on the left. The tree is mirrored to the left and leftmost node on every level is connected with the mirrored corresponding node.  \nMirror on the top. The tree is mirrored to the top and topmost nodes are connected with corresponding nodes.  \nMirror on the bottom. The tree is mirrored to the bottom and bottom most nodes are connected with the corresponding nodes.  \nSee the image for details.   \nMirror Right:  \n\nMirror Bottom:   \n\nYou are given \u2018q\u2019 queries, each performing this type of operation or asking for the no of edges in the produced graph. \nQueries are of the form \u201c1 x\u201d or \u201c2\u201d where x is 1 for right, 2 for left, 3 for top or 4 for bottom.  \n1 x:  Perform x operation on the result graph.  \n2:     Print the no of edges in the graph. Since it can be very large, print it modulo 1000000007.   \nInput:\n\nFirst line will contain $n$, the depth of the initial tree and $q$, the number of queries.    \nNext $q$ lines contain queries of the form \"1 $x$\" or \"2\".\n\nOutput:\nFor each query of type \"2\", output a single line containing the no of edges in the graph modulo 1000000007.\nConstraints\n\n$1 \\leq n \\leq 1000$\n$1 \\leq q \\leq 10^5$\n$1 \\leq x \\leq 4$",
            "input_format": "",
            "output_format": "",
            "problem_name": "Weirwood Trees",
            "user_tags": [
                "Basic Maths",
                "Modular Exponentiation",
                "ad-hoc"
            ],
            "computed_tags": [
                "Mathematics",
                "Modular Arithmetic",
                "Algorithms",
                "Constructive"
            ],
            "problem_code_id": "MIRTREE",
            "difficulty_level": "1678",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 1025133097,
                    "submission_date": 1697011970,
                    "language": "PYTH 3",
                    "username": "hanss",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.16",
                    "memory": "9.7M",
                    "solution": 1025133097,
                    "code": "mod = 1000000007\r\nn, q = map(int, input().split())\r\nheight = n\r\ndepth = n + 1\r\ntopwidth = 1\r\nwidth = pow(2, n, mod)\r\nedges = (pow(2, depth, mod) + mod - 2) % mod\r\nfor _ in range(q):\r\n    act = tuple(map(int, input().split()))\r\n    if act[0] == 2:\r\n        print(edges)\r\n    else:\r\n        if act[1] <= 2: # left or right\r\n            edges = ((2 * edges) % mod + depth) % mod\r\n            topwidth = (topwidth * 2) % mod\r\n            width = (width * 2) % mod\r\n        elif act[1] == 3: # top\r\n            edges = ((2 * edges) % mod + topwidth) % mod\r\n            topwidth = width\r\n            depth = (depth * 2) % mod\r\n        else: # bottom\r\n            edges = ((2 * edges) % mod + width) % mod\r\n            width = topwidth\r\n            depth = (depth * 2) % mod\r\n"
                },
                {
                    "id": 80094871,
                    "submission_date": 1668577492,
                    "language": "PYTH 3",
                    "username": "shreejab22",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.12",
                    "memory": "10.2M",
                    "solution": 80094871,
                    "code": "n,q=list(map(int, (input().split(' '))))\r\nans=1000000007\r\nleaves=2**n\r\nedges=((2**(n+1))-2)%ans\r\nheight=n+1\r\nop=[]\r\nroot=1\r\nfor i in range(q):\r\n    s=str(input())\r\n    if s[0]==\"2\":\r\n        op.append(\"disp\")\r\n    else:\r\n        k=list(map(int,s.split()))\r\n        op.append(k[1])\r\nfor j in op:\r\n    if j==\"disp\":\r\n        print(edges)\r\n    elif j==1 or j==2:\r\n        edges=(2*edges+height)%ans\r\n        leaves=(2*leaves)%ans\r\n        root=(root*2)%ans\r\n    elif j==4:\r\n        edges=(2*edges+leaves)%ans\r\n        leaves=(root)\r\n        height=(2*height)%ans\r\n    else:\r\n        edges=(2*edges+root)%ans\r\n        root=leaves\r\n        height=(2*height)%ans\r\n"
                }
            ]
        },
        "TPRODUCT": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "2\n1 2 3\n3\n3 1 5 2 6 4 7\n0",
                    "output": "3\n105",
                    "explanation": "The second test case is constructed as follows:\n\n     3\n    / \\\n   /   \\\n  1     5\n / \\   / \\\n2   6 4   7"
                }
            ],
            "problem_statement": "Given a complete binary tree with the height of H, we index the nodes respectively top-down and left-right from 1. The i-th node stores a positive integer Vi. Define Pi as follows: Pi=Vi if the i-th node is a leaf, otherwise Pi=max(Vi*PL, Vi*PR), where L and R are the indices of the left and right children of i, respectively. Your task is to caculate the value of P1.\n\nInput\nThere are several test cases (fifteen at most), each formed as follows:\n\nThe first line contains a positive integer H (H \u2264 15).\nThe second line contains 2H-1 positive integers (each having a value of 109 at most), the i-th integer shows the value of Vi.\n\nThe input is ended with H = 0.\nOutput\nFor each test case, output on a line an integer which is the respective value of P1 found, by modulo of 1,000,000,007.",
            "input_format": "",
            "output_format": "",
            "problem_name": "Tree Product",
            "user_tags": [
                "Binary Tree",
                "Greedy"
            ],
            "computed_tags": [
                "Data Structures",
                "Tree Data Structure",
                "Algorithms"
            ],
            "problem_code_id": "TPRODUCT",
            "difficulty_level": "1648",
            "ai_solutions": [
                "MOD = 10**9 + 7\ndef solve():\n    H = int(input())\n    if H == 0:\n        return False\n    V = list(map(int, input().split()))\n    P = [0] * (2**H)\n    for i in range(2**H - 1, 0, -1):\n        if i >= 2**(H - 1):\n            P[i] = V[i - 1]\n        else:\n            P[i] = max(V[i - 1] * P[2 * i], V[i - 1] * P[2 * i + 1]) % MOD\n    print(P[1])\n    return True\n\nwhile solve():\n    pass"
            ],
            "human_solutions": [
                {
                    "id": 75855461,
                    "submission_date": 1664769578,
                    "language": "PYTH 3",
                    "username": "hmurugan_13",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.11",
                    "memory": "14.9M",
                    "solution": 75855461,
                    "code": "a=1000000007\r\nwhile(True):\r\n\tN=int(input())\r\n\tif(N==0):\r\n\t    break\r\n\tv=list(map(int,input().split()))\r\n\tlen=(1<<N)-1\r\n\tfor i in range(len//2,-1,-1):\r\n\t\tleft=i*2+1;right=i*2+2\r\n\t\tif(left<len and right<len): \r\n\t\t    v[i]=v[i]*max(v[left],v[right]);\r\n\t\telif(left<len):\r\n\t\t    v[i]=v[i]*v[left]\r\n\tprint(v[0]%a)"
                },
                {
                    "id": 67451293,
                    "submission_date": 1655997309,
                    "language": "PYTH 3",
                    "username": "likhitha207",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.28",
                    "memory": "27.2M",
                    "solution": 67451293,
                    "code": "def makeAdj(arr):\r\n    n = len(arr)\r\n    adj = {i : [] for i in range(n)}\r\n    for i in range(n):\r\n        if 2*i + 2 < n:\r\n            adj[i].append(2*i+1)\r\n            adj[i].append(2*i+2)\r\n            adj[2*i+1].append(i)\r\n            adj[2*i+2].append(i)\r\n        elif 2*i + 1 < n:\r\n            adj[i].append(2*i+1)\r\n            adj[2*i+1].append(i)\r\n    return adj\r\n\r\ndef dfs(node,par,arr,adj,P):\r\n    if len(adj[node]) == 1:\r\n        P[node] = arr[node]\r\n        return\r\n    for child in adj[node]:\r\n        if child == par:\r\n            continue\r\n        dfs(child,node,arr,adj,P)\r\n        P[node] = max(P[child]*arr[node],P[node])\r\n    return P\r\n\r\nwhile True:\r\n    h = int(input())\r\n    if h == 0:\r\n        break\r\n    arr = list(map(int,input().split()))\r\n    adj = makeAdj(arr)\r\n    P = [0]*(len(arr))\r\n    print(dfs(0,-1,arr,adj,P)[0] % 1000000007)\r\n    # print(P[0])\r\n    \r\n\r\n\r\n    \r\n"
                }
            ]
        },
        "IOPC17C": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "1\n2\n1 2",
                    "output": "1",
                    "explanation": "The maximum value is obtained by 1%2 = 1."
                }
            ],
            "problem_statement": "You are given an array A of size N. Output the maximum value of A[i]%A[j] (ie. A[i] mod A[j]) over all 1 \u2264 i, j \u2264 N.\nInput\nFirst line of input contains T, the number of testcases.\nThe first line of each test case contains N, the number of elements in the array.\nSecond line of each testcase contains N space separated integers in which the ith integer is A[i].\nOutput\nFor each testcase output a single integer in a new line: the maximum value of A[i]%A[j].\nConstraints\n1\u2264T\u226410\n1\u2264N\u2264105\n1\u2264A[i]\u2264106",
            "input_format": "",
            "output_format": "",
            "problem_name": "Max Out",
            "user_tags": [
                "varunkhare1234"
            ],
            "computed_tags": [],
            "problem_code_id": "IOPC17C",
            "difficulty_level": "1621",
            "ai_solutions": [
                "T = int(input())\nfor _ in range(T):\n    N = int(input())\n    A = list(map(int, input().split()))\n    A.sort()\n    print(A[-2])",
                "T = int(input())\nfor _ in range(T):\n    N = int(input())\n    A = list(map(int, input().split()))\n    print(sorted(A)[-2])"
            ],
            "human_solutions": [
                {
                    "id": 61898716,
                    "submission_date": 1648922892,
                    "language": "PYTH 3",
                    "username": "lakshmi_735",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.28",
                    "memory": "24.4M",
                    "solution": 61898716,
                    "code": "for _ in range(int(input())):\n    n=int(input())\n    a=list(map(int,input().split()))\n    m=max(a)\n    min=0\n    for i in a:\n        if ((i%m) >min) :\n            min = i%m \n    print(min)\n    i=i+1\n"
                },
                {
                    "code": "t=int(input())\r\nfor i in range(t):\r\n    n=int(input())\r\n    l=list(map(int,input().split()))\r\n    l=list(set(l))\r\n    l.sort()\r\n    a=l[len(l)-1]\r\n    b=l[len(l)-2]\r\n    print(b%a)",
                    "id": 37191796,
                    "submission_date": 1598587527,
                    "language": "PYTH 3",
                    "username": "niharika999",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "\\/misc\\/icons\\/tick-icon.svg",
                    "time": "0.39",
                    "memory": "21M",
                    "solution": 37191796
                }
            ]
        },
        "PNTWLL": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "3\n5 4\n1 2 3 4 5\n3 3 3 3 3\n5 4\n3 5 1 2 3\n1 2 3 4 3\n5 5 \n5 4 3 2 3\n1 2 3 4 5",
                    "output": "1\n2\n3",
                    "explanation": "In the first test case, painted upto height 1, 2, 3, 4, 5 in the five operations, all with the same color. Hence, the number of distinct colors is 1."
                }
            ],
            "problem_statement": "Professor Sahil is a master artist, he always finds creative ways to teach lessons to his students.\nToday in Painting class he took all the students of the class to a wall. Professor Sahil asked every student to paint the wall upto a certain integral height one by one (second boy starts once the first boy finishes painting) from the bottom with any color of their wish, except a student Mudit who was made to stand behind the wall and note down all the data i.e the height upto which each student painted and the color $Ci$ every student used. At the end of the painting session Professor asked Mudit to tell how many distinct colors are there on the wall. Mudit being a weak student asked you for help.\nFormally, given a wall of infinite height, initially unpainted. There occur $N$ operations, and in ith operation, the wall is painted upto height $Hi$ with color $Ci$. Suppose in jth operation (j>i) wall is painted upto height $Hj$ with color $Cj$ such that $Hj$ >= $Hi$, the $Cith$ color on the wall is hidden. At the end of $N$ operations, you have to find the number of distinct colors(>=1) visible on the wall.\nHelp him find out the number of distinct colors on the wall.\nInput:\n\nThe first line consists of single integer $T$ denoting the number of test cases.\nThe second line contains 2 space separated integers $N$ and $M$, denoting the number of students and number of colors available (1 to $M$).\nThe third line contains $N$-space separated integers ($Hi$ ) denoting the height upto which each student painted the wall.\nThe fourth line contains $N$ space separated integers denoting the color ( $Ci$ ) the ith student used.\n\nOutput:\nPrint the number for distinct colors on the wall for each test case.\nConstraints\n\n$1 \\leq T \\leq 100$\n$1 \\leq N ,M \\leq 10^5$\nSum of N over all test cases <= $5*10^5$\nSum of M over all test cases <=$5*10^5$\n$1 \\leq Hi \\leq10^9$\n$1 \\leq Ci \\leq M$\n\nSample Input:\nSample Output:\nEXPLANATION:",
            "input_format": "",
            "output_format": "",
            "problem_name": "Paint the Wall",
            "user_tags": [
                "Observation",
                "Implementation"
            ],
            "computed_tags": [
                "Algorithms"
            ],
            "problem_code_id": "PNTWLL",
            "difficulty_level": "1662",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 61932228,
                    "submission_date": 1648985295,
                    "language": "PYTH 3",
                    "username": "amulya_0408",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.32",
                    "memory": "18.1M",
                    "solution": 61932228,
                    "code": "def snek(i, n, h):\n    for j in range(i  + 1, n):\n        if h[j] >= h[i]:\n            return False\n    return True\nt = int(input())\n\nfor i in range(t):\n    n, c = map(int, input().split())\n    h = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    d = []\n    for j in range(n - 1):\n        if snek(j, n, h) and c[j] not in d:\n            d.append(c[j])\n    if c[n -1] not in d:\n        d.append(c[n - 1])\n    print(len(d))"
                },
                {
                    "id": 35627440,
                    "submission_date": 1594727629,
                    "language": "PYTH 3",
                    "username": "anushdeokar",
                    "user_rating_star": 3,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.35",
                    "memory": "19M",
                    "solution": 35627440,
                    "code": "def check(i, n, height):\r\n    for j in range(i  + 1, n):\r\n        if height[j] >= height[i]:\r\n            return False\r\n    return True\r\nT = int(input())\r\nfor _ in range(T):\r\n    n, c = map(int, input().split())\r\n    height = list(map(int, input().split()))\r\n    colors = list(map(int, input().split()))\r\n    distinct_colors = []\r\n    for i in range(n - 1):\r\n        if check(i, n, height) and colors[i] not in distinct_colors:\r\n            distinct_colors.append(colors[i])\r\n    if colors[n -1] not in distinct_colors:\r\n        distinct_colors.append(colors[n - 1])\r\n    print(len(distinct_colors))"
                }
            ]
        },
        "PNTNG": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "3 4 2\n6 1\n6 2",
                    "output": "18",
                    "explanation": "In the first example, we should paint 6 cells on the first layer and 6 cells on the second layer."
                },
                {
                    "input": "2 2 3\n1 1\n1 2\n1 3",
                    "output": "Impossible",
                    "explanation": "In the second example, there are not enough cells to paint the table properly."
                }
            ],
            "problem_statement": "Read problems statements in Mandarin Chinese and Russian as well.\nYou are given a transparent three-dimensional table, the height equals to H and the base is a two-dimensional table N\u2219M.\nThe layers of the 3D table are numbered from 1 to H. Each layer is a two-dimensional table, the rows are numbered from 1 to N and the columns are numbered from 1 to M. A pair (i, j) (1 \u2264 i \u2264 N, 1 \u2264 j \u2264 M) corresponds to the cell at the intersection of i'th row and j'th column of a two-dimensional table.\nWe can paint cells of the three-dimensional table, but not more than Tk cells on k'th layer can be painted. Painting of one cell on k'th layer costs Ck. Your task is to find the minimum cost of painting the table thus that it can't be seen throught from the top (there is no cell which is unpainted on every layer). Formally you need to find a painting, that for any pair (i, j) (1 \u2264 i \u2264 N, 1 \u2264 j \u2264 M) there is a layer k (1 \u2264 k \u2264 H), where cell (i, j) is painted. If there is no such a painting then the answer is \"Impossible\". \n\n\nInput\nThe first line contains three integers N, M and H.\nEach of the next H lines contains two integers Tk and Ck.\nOutput\nThe output should contain the minimum cost of the painting if there is one, otherwise output Impossible without quotes.\nConstraints\n1 \u2264 N\u2219M \u2264 1012;\n1 \u2264 H \u2264 100000;\n0 \u2264 Tk \u2264 1012, for each layer;\n0 \u2264 Ck \u2264 105, for each layer.",
            "input_format": "",
            "output_format": "",
            "problem_name": "Painting",
            "user_tags": [
                "cook47",
                "easy",
                "greedy",
                "kostya_by",
                "sorting"
            ],
            "computed_tags": [],
            "problem_code_id": "PNTNG",
            "difficulty_level": "1671",
            "ai_solutions": [
                "def min_cost_painting(N, M, H, layers):\n    layers.sort(key=lambda x: x[1])\n    total_cells = N * M\n    total_cost = 0\n    for i in range(H):\n        if total_cells <= layers[i][0]:\n            total_cost += total_cells * layers[i][1]\n            return total_cost\n        else:\n            total_cells -= layers[i][0]\n            total_cost += layers[i][0] * layers[i][1]\n    return \"Impossible\"\n\nN, M, H = map(int, input().split())\nlayers = []\nfor _ in range(H):\n    Tk, Ck = map(int, input().split())\n    layers.append((Tk, Ck))\nprint(min_cost_painting(N, M, H, layers))",
                "def min_cost_painting(N, M, H, layers):\n    layers = sorted(layers, key=lambda x: x[1])\n    total_cells = N * M\n    total_cost = 0\n    for Tk, Ck in layers:\n        if total_cells <= Tk:\n            total_cost += total_cells * Ck\n            return total_cost\n        else:\n            total_cells -= Tk\n            total_cost += Tk * Ck\n    return \"Impossible\"\n\nN, M, H = map(int, input().split())\nlayers = [tuple(map(int, input().split())) for _ in range(H)]\nprint(min_cost_painting(N, M, H, layers))"
            ],
            "human_solutions": [
                {
                    "id": 79013431,
                    "submission_date": 1667462338,
                    "language": "PYTH 3",
                    "username": "aarushi_iitm",
                    "user_rating_star": 3,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.21",
                    "memory": "26.5M",
                    "solution": 79013431,
                    "code": "def solve():\r\n    n,m,h=map(int,input().split())\r\n    Tcells=0\r\n    d=[]\r\n    for _ in range(h):\r\n        t,c=map(int,input().split())\r\n        d.append([t,c])\r\n        Tcells+=t\r\n    d_sorted=sorted(d,key=lambda x:x[1])\r\n    Pcells=0\r\n    cost=0\r\n    k=m*n\r\n    if k<=Tcells:\r\n        for i in d_sorted:\r\n            Pcells+=i[0]\r\n            if Pcells<k:\r\n                cost+=i[0]*i[1]\r\n            else:\r\n                cost+=(k-Pcells+i[0])*i[1]\r\n                print(cost)\r\n                break\r\n    else:\r\n        print('Impossible')\r\nsolve()"
                },
                {
                    "id": 67452747,
                    "submission_date": 1655999061,
                    "language": "PYTH 3",
                    "username": "likhitha207",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.33",
                    "memory": "24.4M",
                    "solution": 67452747,
                    "code": "n,m,h = map(int, input().split())\r\nnumCells = n * m\r\ntk_ck = []\r\ntot=0\r\nfor _ in range(h):\r\n    t,c = map(int, input().split())\r\n    tk_ck.append((t,c))\r\n    tot+=t\r\nif tot < numCells:\r\n    print('Impossible')\r\nelse:\r\n    tk_ck = sorted(tk_ck, key=lambda x:x[1])\r\n    curCost = 0\r\n    i = 0\r\n    while numCells > 0:\r\n        curCost += tk_ck[i][1] * min(tk_ck[i][0], numCells)\r\n        numCells -= tk_ck[i][0]\r\n        i += 1\r\n    print(curCost)"
                }
            ]
        },
        "TOURMAP": {
            "constraints": "1 \u2264 T \u2264 10 \n1 \u2264 N \u2264 5000 \n1 \u2264 length of Ai \u2264 50 \n1 \u2264 length of Bi \u2264 50 \n1 \u2264 Ci \u2264 1000 Ai, Bi will contain only lowercase and uppercase latin characters, no two cities will have same names.\nThe names of cities are case-sensitive. So \"warsaw\" and \"Warsaw\" should be considered as different cities.",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "1\n5\nWarsaw Kiev 120\nMadrid Paris 100\nMunich Warsaw 150\nParis Munich 200\n",
                    "output": "Madrid Paris 100\nParis Munich 200\nMunich Warsaw 150\nWarsaw Kiev 120\n570\n",
                    "explanation": ""
                }
            ],
            "problem_statement": "Sridhar was a seasoned traveler. He liked to visit new places. More than all he was a meticulous planner. This time he was planning to visit Europe. He wrote down his travel itinerary like as follows:\n\nIf he wanted to visit Madrid, Paris, Munich, Warsaw and Kiev in this order, he would write it down like as:\n\n\nMadrid Paris 100\nParis Munich 200\nMunich Warsaw 150\nWarsaw Kiev 120\n\n\nMore formally, if he wanted to go from A to B directly and the price is C dollars, then he would write \n\nA B C\n\n\non a card.\nEach move was written on a different card. Sridhar was a great planner, so he would never visit the same place twice. Just before starting his journey, the cards got shuffled. Help Sridhar figure out the actual order of the cards and the total cost of his journey.",
            "input_format": "The first line of the input contains an integer T, the number of test cases. T test cases follow. Each case contains an integer N, the number of cities Sridhar is planning to visit. N-1 lines follow. Each line is of the form \n\n\nAi Bi Ci\n\n\n\nwhere the i-th line refers to the i-th card after getting shuffled.",
            "output_format": "For each case the output contains N lines, the first N-1 lines should contain the N-1 cards in their proper original order, the N-th line should contain the total cost of the travel.\nSee Example for detailed format.",
            "problem_name": "Sridhar Likes Travelling",
            "user_tags": [
                "Graphs",
                "Sets",
                "Maps",
                "Hashmaps",
                "DFS",
                "Topological Sorting",
                "ad-hoc"
            ],
            "computed_tags": [
                "Data Structures",
                "Algorithms",
                "Graph Algos",
                "Traversals",
                "DAG Algos",
                "Constructive"
            ],
            "problem_code_id": "TOURMAP",
            "difficulty_level": "1656",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 33150296,
                    "submission_date": 1589802085,
                    "language": "PYTH 3",
                    "username": "nav_debug",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.20",
                    "memory": "17.6M",
                    "solution": 33150296,
                    "code": "for t in range(int(input())):\r\n    g={}\r\n    d={}\r\n    tot=0\r\n    f=input()\r\n    f=int(f)\r\n    for _ in range(f-1):\r\n        en=input().strip()\r\n        a,b,c=en.split()\r\n        g[a]=[b,c]\r\n        if a not in d.keys():\r\n            d[a]=1\r\n        else:\r\n            d[a]+=1\r\n        if b not in d.keys():\r\n            d[b]=1\r\n        else:\r\n            d[b]+=1\r\n        tot+=int(c[:-1])\r\n    for i in g.keys():\r\n        if d[i]==1:\r\n            source=i\r\n            break\r\n    while source in g.keys():\r\n        print(source,g[source][0],g[source][1])\r\n        source=g[source][0]\r\n    print(str(tot)+\"$\")\r\n"
                },
                {
                    "id": 20966460,
                    "submission_date": 1539900871,
                    "language": "PYTH 3",
                    "username": "atul13977",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.16",
                    "memory": "17.6M",
                    "solution": 20966460,
                    "code": "for _ in range(int(input())):\r\n    card = {}\r\n    places = {}\r\n    tot_cost = 0\r\n    for i in range(int(input())-1):\r\n        entry = input().strip()\r\n        src,dest,cost = entry.split()\r\n        tot_cost += int(cost[:-1])\r\n        card[src] = entry\r\n        \r\n        if src in places.keys():\r\n            places[src] += 1\r\n        else:\r\n            places[src] = 1\r\n        \r\n        if dest in places.keys():\r\n            places[dest] += 1\r\n        else:\r\n            places[dest] = 1\r\n    \r\n    for src in card.keys():\r\n        if places[src] == 1:\r\n            path = src\r\n            break\r\n        \r\n    while path in card.keys():\r\n        print(card[path])\r\n        path = card[path].split()[1]\r\n    \r\n    print(tot_cost, end = \"$\")\r\n    print()\r\n        "
                }
            ]
        },
        "SNACKUP": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "1\n2",
                    "output": "2\n2\n1 1 2\n2 1 2\n2\n1 1 2\n2 1 2",
                    "explanation": ""
                }
            ],
            "problem_statement": "Read problems statements in mandarin chinese, russian and vietnamese as well.\n\nThis year CodeChef is organizing the SnackUp cooking contest. The favorite to win is of course our beautiful Chef Ada.\n\n\nThere are n judges in the contest, and for simplicity let's enumerate judges from 1 to n. \n\n\nAda has an uncountable repertoire of delicious recipes, but for the contest she choose only n of them. Let's also enumerate the recipes from 1 to n.\n\n\nAda is going to show off her cooking skills in many rounds, and we are going to help her organizing them! One round is structured as follows:\n\n We will choose k distinct recipes and Ada will prepare two identical dishes for each of them.\n We will choose k distinct judges for the round.\n We will send k invitation letters (one for each of the chosen judges). Each letter must contain the number of the judge, and two distinct integers denoting the ids of the recipes that he is going to taste. \nTwo different judges can taste the same recipe, but it must be from different dishes. \nAda does not like to waste food, so the letters must be designed in such a way that every prepared dish is tasted.\n\nYou can arbitrarily decide the number of rounds and the number of invited judges in each round, but as a rule of the contest at the end of all rounds each judge must have tasted every recipe exactly twice.\nInput\n\nThe first line of input contains one number T, the number of test cases.\nEach test case consist of one line containing an integer n, the number of judges.\n\nOutput\n\nFor each testcase, in the first line, print r the number of rounds, then describe each round as follows.\n\n\nIn the first line of each round, print k, the number of invited judges.\nIn the next k lines, print the invitation letters as three space separated integers: j, x, y denoting the id of the judge, and the ids of the recipe that he is going to taste. Note that x should not be equal to y.\n\nConstraints\n1 \u2264 T \u2264 100\n2 \u2264 n \u2264 100",
            "input_format": "",
            "output_format": "",
            "problem_name": "SnackUp",
            "user_tags": [
                "ad-hoc"
            ],
            "computed_tags": [
                "Algorithms",
                "Constructive"
            ],
            "problem_code_id": "SNACKUP",
            "difficulty_level": "1628",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 54546166,
                    "submission_date": 1638245894,
                    "language": "PYTH 3",
                    "username": "dscdsc",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.38",
                    "memory": "9.9M",
                    "solution": 54546166,
                    "code": "t = int(input())\n\nfor i in range(t):\n    n = int(input())\n    s = range(1, n + 1)\n    print(n)\n    for j in range(1, n + 1):\n        print(n)\n        for k in range(1, n + 1):\n            print(k, s[(j + k - 1) % n], s[(j + k) % n])"
                },
                {
                    "id": 51079563,
                    "submission_date": 1631714904,
                    "language": "PYTH 3",
                    "username": "sagar_199",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.39",
                    "memory": "18.1M",
                    "solution": 51079563,
                    "code": "tc = int(input())\nfor _ in range(tc):\n    n = int(input())\n    N = range(1,n+1)\n    print(n)\n    \n    for i in range(1,n+1):\n        print(n)\n        for j in range(1,n+1):\n            print(j,N[(i+j-1)%n],N[(i+j)%n])\n    "
                }
            ]
        },
        "LECARDS": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "2\n3\n1 2 3\n4\n1 1 3 2",
                    "output": "4\n5",
                    "explanation": ""
                }
            ],
            "problem_statement": "Little Elephant from the Zoo of Lviv likes cards. He has N cards, each of which has one of 1000 colors. The colors are numbered from 1 to 1000.\n\nLittle Elephant and Big Hippo are playing the following game. At first Little Elephant takes some subset of cards, and Big Hippo takes the rest of them. Here, Little Elephant can choose to take all of the cards, or none of the cards.\n\nThen they play 1000 rounds: in round k (k = 1, 2, ..., 1000), they count the number of cards each has of the color k. Let Little Elephant has a cards of the color k, and Big Hippo has b cards of the color k. Then if a > b Little Elephant scores |a-b| points, otherwise Big Hippo scores |a-b| points in this round, where |x| denotes the absolute value of x.\n\nYou are given the number of cards N and the array C - list of colors of all N cards. Find the number of subsets (among all 2N subsets) for which Little Elephant wins the game: that is, he gains more points than Big Hippo in total, if Little Elephant takes the subset at first. Since the answer can be large, print it modulo 1000000007 (109+7).\n\n\nInput\nFirst line of the input contains single integer T - the number of test cases. Then T test cases follow.\n\nFirst line of each test case contains single integer N. Second line contains N integers separated by space - the array C.\n\n\nOutput\nFor each test case, print the answer in one line.\n\n\nConstraints\n\n1 \u2264 T \u2264 1001 \u2264 N \u2264 10001 \u2264 Ci \u2264 1000, where Ci denotes the i-th element of the array C",
            "input_format": "",
            "output_format": "",
            "problem_name": "Little Elephant and Cards",
            "user_tags": [
                "Basic Maths",
                "Combinatorics"
            ],
            "computed_tags": [
                "Mathematics"
            ],
            "problem_code_id": "LECARDS",
            "difficulty_level": "1689",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 1027934022,
                    "submission_date": 1698766962,
                    "language": "PYTH 3",
                    "username": "hanss",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.02",
                    "memory": "9.1M",
                    "solution": 1027934022,
                    "code": "from functools import reduce\r\n\r\n\r\ndef binom(n, k, mod=10**9+7):\r\n    \r\n    def mul_mod(x, y):\r\n        return (x * y) % mod\r\n    \r\n    if k in (0, n):\r\n        return 1\r\n    \r\n    if k > n // 2:\r\n        count = reduce(mul_mod, range(k+1, n+1))\r\n        denom = pow(reduce(mul_mod, range(1, n-k+1)), mod-2, mod)\r\n    else: \r\n        count = reduce(mul_mod, range(n-k+1, n+1))\r\n        denom = pow(reduce(mul_mod, range(1, k+1)), mod-2, mod)\r\n    return mul_mod(count, denom)\r\n\r\n\r\nmod=10**9+7\r\nfor _ in range(int(input())):\r\n    n = int(input())\r\n    deck = input()\r\n    \r\n    if n % 2 == 1:\r\n        result = pow(2, n-1, mod)\r\n    else:\r\n        result = (pow(2, n-1, mod) - (binom(n, n//2, mod) * ((mod + 1) // 2)) % mod) % mod\r\n        \r\n    print(result)\r\n    "
                },
                {
                    "id": 79585591,
                    "submission_date": 1668026048,
                    "language": "PYTH 3",
                    "username": "ratnesh_181998",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.20",
                    "memory": "33.2M",
                    "solution": 79585591,
                    "code": "\n\nncr=[[0 for i in range (0,1001)] for j in range (0,1001)]\nmod=1000000007\ndef init():\n    for i in range (1, 1001):\n        ncr[i][1]=i\n        ncr[i][i]=1\n    for i in range (3,1001):\n        for j in range (2,i):\n            ncr[i][j]=(ncr[i-1][j-1] + ncr[i-1][j])%mod\ninit()\nt=int(input())\nwhile t>0:\n    n=int(input())\n    ans=0\n    cards=input()\n    a=n//2 + 1\n    for i in range (a, n+1):\n        ans=(ans+ncr[n][i])%mod\n    print(ans)\n    t-=1\n    \n    "
                }
            ]
        },
        "ORMATRIX": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "1\n3 3\n010\n000\n001",
                    "output": "1 0 1\n2 1 1\n1 1 0",
                    "explanation": ""
                }
            ],
            "problem_statement": "Read problems statements in Mandarin chinese, Russian and Vietnamese as well.\nYou are given a matrix of integers $A$ with $N$ rows (numbered $1$ through $N$) and $M$ columns (numbered $1$ through $M$). Each element of this matrix is either $0$ or $1$.\nA move consists of the following steps:\n- Choose two different rows $r_1$ and $r_2$ or two different columns $c_1$ and $c_2$.\n- Apply the bitwise OR operation with the second row/column on the first row/column. Formally, if you chose two rows, this means you should change $A_{r_1, k}$ to $A_{r_1, k} \\lor A_{r_2, k}$ for each $1 \\le k \\le M$; if you chose two columns, then you should change $A_{k, c_1}$ to $A_{k, c_1} \\lor A_{k, c_2}$ for each $1 \\le k \\le N$.\nFor each element of the matrix, compute the minimum number of moves required to make it equal to $1$ or determine that it is impossible. Note that these answers are independent, i.e. we are starting with the initial matrix for each of them.\nInput\n\nThe first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\nThe first line of each test case contains two space-separated integers $N$ and $M$.\n$N$ lines follow. For each $i$ ($1 \\le i \\le N$), the $i$-th of these lines contains $M$ integers $A_{i, 1}, A_{i, 2}, \\dots, A_{i, M}$ NOT separated by spaces.\n\nOutput\nFor each test case, print $N$ lines. For each valid $i$, the $i$-th of these lines should contain $M$ space-separated integers; for each valid $j$, the $j$-th of these integers should be the minimum number of moves required to make $A_{i, j}$ equal to $1$, or $-1$ if it is impossible.\nConstraints\n\n$1 \\le T \\le 100$\n$1 \\le N, M \\le 1,000$\n$A_{i, j} \\in {0, 1}$ for each valid $i, j$\nthe sum of $N \\cdot M$ for all test cases does not exceed $1,000,000$",
            "input_format": "",
            "output_format": "",
            "problem_name": "OR Matrix",
            "user_tags": [
                "2D Arrays",
                "Bitwise Operation",
                "Observation",
                "Implementation"
            ],
            "computed_tags": [
                "Data Structures",
                "Arrays",
                "Mathematics",
                "Bit Manipulation",
                "Algorithms"
            ],
            "problem_code_id": "ORMATRIX",
            "difficulty_level": "1656",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 45049024,
                    "submission_date": 1618499776,
                    "language": "PYTH 3",
                    "username": "its_ak_04",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.92",
                    "memory": "27.1M",
                    "solution": 45049024,
                    "code": "t = int(input())\nfor _ in range(t):\n    n,m = map(int,input().split())\n    a = {}\n    b = {}\n    l = []\n    for i in range(n):\n        a[i] = 0\n    for i in range(m):\n        b[i] = 0\n    for i in range(n):\n        l.append(input())\n    for i in range(n):\n        for j in range(m):\n            if l[i][j] == '1':\n                a[i]=1\n                b[j]=1\n    if sum(a.values()) + sum(b.values()) == 0:\n        for i in range(n):\n            for j in range(m):\n                print(-1,end=' ')\n            print()\n    else:\n      \n        ans = []\n        for i in range(n):\n            ans.append([0]*m)\n        for i in range(n):\n            for j in range(m):\n                if l[i][j] == '1':\n                    ans[i][j] = 0\n                else:\n                    if(a[i] or b[j]):\n                        ans[i][j] = 1\n                    else:\n                        ans[i][j] = 2\n        for i in range(n):\n            for j in range(m):\n                print(ans[i][j],end=\" \")\n            print()\n                \n            \n        \n"
                },
                {
                    "id": 30793313,
                    "submission_date": 1585372278,
                    "language": "PYTH 3",
                    "username": "aayush_1607",
                    "user_rating_star": 3,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "1.82",
                    "memory": "33.2M",
                    "solution": 30793313,
                    "code": "'''\nExample Input\n1\n3 3\n010\n000\n001\nExample Output\n1 0 1\n2 1 1\n1 1 0\n'''\nt=int(input())\nfor i in range(t):\n    n,m=map(int,input().split())\n    l=[]\n    for j in range(n):\n        mat=list(input())\n        for k in range(len(mat)):\n            mat[k]=int(mat[k])\n        l.append(mat)\n\n    l1=[]\n    \n    q1=[]\n    q2=[]\n    for j in range(n):\n        q1.append(sum(l[j]))\n    for j in range(m):\n        s=0\n        for k in range(n):\n            s+=l[k][j]\n        q2.append(s)\n    p=[]\n    for j in range(n):\n        p1=[]\n        for k in range(m):\n            p1.append([q1[j],q2[k]])\n        p.append(p1)\n    check1=0\n    check2=0\n    for j in q1:\n        if(j!=0):\n            check1=1\n    for j in q2:\n        if(j!=0):\n            check2=1\n    if(check1==0 and check2==0):\n        for j in range(n):\n            for k in range(m):\n                print(\"-1\",end=' ')\n            print()\n    else:\n        for j in range(n):\n            f=[]\n            for k in range(m):\n                if(p[j][k][0]>0 or p[j][k][1]>0):\n                    if(l[j][k]==1):\n                        f.append(0)\n                    else:\n                        f.append(1) \n                elif(p[j][k][0]==0 and p[j][k][1]==0):\n                    f.append(2)\n            l1.append(f)\n                    \n        for j in range(n):\n            for k in range(m):\n                print(l1[j][k],end=' ')\n            print()\n                \n      \n    "
                }
            ]
        },
        "CLORGIRD": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "2\r\n3 3\r\n..#\r\n...\r\n...\r\n3 3\r\n...\r\n.#.\r\n...",
                    "output": "YES\r\nNO",
                    "explanation": ""
                }
            ],
            "problem_statement": "Read problems statements Mandarin , Bengali , Hindi , Russian and Vietnamese as well.\nYou are given a grid with $N$ rows and $M$ columns; each cell of this grid is either empty or contains an obstacle. Initially, all cells are colorless.\nYou may perform the following operation an arbitrary number of times (including zero): choose a $2\\times 2$ square in the grid and color all four of its cells. Each cell may be colored any number of times.\nYou want all empty cells to be colored and all cells containing obstacles to be colorless. Find out if this state can be achieved.\nInput\n\nThe first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\nThe first line of each test case contains two space-separated integers $N$ and $M$. \nThe following $N$ lines describe the grid. Each of these lines contains a string with length $M$ containing only characters '.' (denoting an empty cell) and '#' (denoting a cell with an obstacle).\n\nOutput\nFor each test case, print a single line containing the string \"YES\" if it possible to color the grid in the required way or \"NO\" if it is impossible (without quotes).\nConstraints\n\n$1 \\le T \\le 10,000$\n$2 \\le N, M \\le 10^3$\nthe sum of $N\\cdot M$ over all test cases does not exceed $5,000,000$\n\nSubtasks\nSubtask #1 (30 points): only the first row of the grid may contain obstacles\nSubtask #2 (70 points): original constraints",
            "input_format": "",
            "output_format": "",
            "problem_name": "Coloring the Grid",
            "user_tags": [
                "Constructive"
            ],
            "computed_tags": [
                "Algorithms"
            ],
            "problem_code_id": "CLORGIRD",
            "difficulty_level": "1674",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 39547443,
                    "submission_date": 1605209614,
                    "language": "PYTH 3",
                    "username": "prsb2408",
                    "user_rating_star": 3,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "3.80",
                    "memory": "22.1M",
                    "solution": 39547443,
                    "code": "for _ in range(int(input())):\n    n,m=map(int,input().split(\" \"))\n    matrix=[]\n    num_dots=0\n    num_has=0\n    for i in range(n):\n        temp=list(input())\n        matrix.append(temp)\n        num_dots+=temp.count('.')\n        num_has+=temp.count('#')\n    \n    for i in range(n):\n        if i+1==n:\n            break\n        for j in range(m):\n            if j+1==m:\n                break\n            elem1=matrix[i][j]\n            elem2=matrix[i][j+1]\n            elem3=matrix[i+1][j]\n            elem4=matrix[i+1][j+1]\n\n            if elem1=='#' or elem2=='#' or elem3=='#' or elem4=='#':\n                pass\n            else:\n                matrix[i][j]='c'\n                matrix[i][j+1]='c'\n                matrix[i+1][j]='c'\n                matrix[i+1][j+1]='c'\n    \n    num_cs=0\n    for i in range(n):\n        num_cs+=matrix[i].count('c')\n    \n    if num_dots==num_cs:\n        print(\"YES\")\n    else:\n        print(\"NO\")"
                },
                {
                    "id": 35913960,
                    "submission_date": 1595658803,
                    "language": "PYTH 3",
                    "username": "rummy_1999",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "4.20",
                    "memory": "22.1M",
                    "solution": 35913960,
                    "code": "for t in range(int(input())):\n    n,m=map(int,input().split())\n    mat=[ ]\n    dots=0\n    has=0\n    for i in range(n):\n        l=list(input())\n        mat.append(l)\n        dots+=l.count('.')\n        has+=l.count('#')\n    for i in range(n):\n        if i+1==n:\n            break\n        for j in range(m):\n            if j+1==m:\n                break\n            e1=mat[i][j]\n            e2=mat[i+1][j]\n            e3=mat[i][j+1]\n            e4=mat[i+1][j+1]\n            if e1=='#'or e2=='#' or e3=='#' or e4=='#':\n                continue\n            else:\n                mat[i][j]='g'\n                mat[i+1][j]='g'\n                mat[i][j+1]='g'\n                mat[i+1][j+1]='g'\n    org=0\n    for i in range(n):\n        org+=mat[i].count('g')\n    if org==dots:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n    \n    "
                }
            ]
        },
        "WCOUNT": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "4\nab\naa\naA\nAAbaz",
                    "output": "2\n1\n2\n60",
                    "explanation": "In first case \"ab\" & \"ba\" are two different words. In third case, note that A & a are different alphabets and hence \"Aa\" & \"aA\" are different words."
                }
            ],
            "problem_statement": "Chef has decided to retire and settle near a peaceful beach. He had always been interested in literature & linguistics. Now when he has leisure time, he plans to read a lot of novels and understand structure of languages. Today he has decided to learn a difficult language called Smeagolese. Smeagolese is an exotic  language whose alphabet is lowercase and uppercase roman letters. Also every word on this alphabet is a meaningful word in Smeagolese. Chef, we all know is a fierce learner - he has given himself a tough exercise. He has taken a word and wants to determine all possible anagrams of the word which mean something in Smeagolese.  Can you help him ?\n\n\nInput\n Input begins with a single integer T, denoting the number of test cases. After that T lines follow each containing a single string S - the word chef has chosen. You can assume that 1 \nOutput\nOutput one line per test case - the number of different words that are anagrams of the word that chef has chosen. As answer can get huge, print it modulo 10^9 + 7",
            "input_format": "",
            "output_format": "",
            "problem_name": "Word Couting",
            "user_tags": [
                "Integer Factorisation",
                "Modulo Multiplicative Inverse",
                "Combinatorics",
                "Arithmetic"
            ],
            "computed_tags": [
                "Mathematics",
                "Number Theory",
                "Modular Arithmetic",
                "Basic Maths"
            ],
            "problem_code_id": "WCOUNT",
            "difficulty_level": "1640",
            "ai_solutions": [
                "from math import factorial\nfrom collections import Counter\n\nMOD = 10**9 + 7\n\ndef solve(word):\n    freq = Counter(word)\n    total = factorial(len(word))\n    for letter in freq:\n        total //= factorial(freq[letter])\n    return total % MOD\n\nT = int(input().strip())\nfor _ in range(T):\n    word = input().strip()\n    print(solve(word))",
                "from math import factorial\nfrom collections import Counter\n\nMOD = 10**9 + 7\n\ndef solve(word):\n    freq = Counter(word)\n    total = 1\n    for letter in freq:\n        total = (total * factorial(freq[letter])) % MOD\n    return (factorial(len(word)) // total) % MOD\n\nT = int(input().strip())\nfor _ in range(T):\n    word = input().strip()\n    print(solve(word))"
            ],
            "human_solutions": [
                {
                    "id": 30590779,
                    "submission_date": 1584708699,
                    "language": "PYTH 3",
                    "username": "navjeet8877",
                    "user_rating_star": 3,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.16",
                    "memory": "17.6M",
                    "solution": 30590779,
                    "code": "mod = 1000000007\r\ndef fact(n):\r\n    if n <= 1:\r\n        return 1\r\n    else:\r\n        i = 1\r\n        for p in range(2,n+1):\r\n            i *= p\r\n        return i\r\nfor _ in range(int(input())):\r\n    S = input()\r\n    N = len(S)\r\n    dic = {}\r\n    for i in range(N):\r\n        p = S[i]\r\n        if p in dic.keys():\r\n            dic[p] += 1\r\n        else:\r\n            dic[p] = 1\r\n    f = fact(N)\r\n    for t in dic.keys():\r\n        f = f // fact(dic[t])\r\n    print(f % mod)\r\n"
                },
                {
                    "id": 29116508,
                    "submission_date": 1579702914,
                    "language": "PYTH 3",
                    "username": "ankit022",
                    "user_rating_star": 3,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.12",
                    "memory": "17.6M",
                    "solution": 29116508,
                    "code": "import math\nfor _ in range(int(input())):\n    s=input()\n    a=[0]*26\n    b=[0]*26\n    for i in range(len(s)):\n        if s[i].islower():\n            a[97-ord(s[i])]+=1\n        else:\n            b[65-ord(s[i])]+=1\n    sum = math.factorial(len(s))\n    su=sum\n    for i in range(26):\n        su=su//(math.factorial(a[i])*math.factorial(b[i]))\n    print(su%(10**9+7))        "
                }
            ]
        },
        "LIKECS02": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "3\n1\n2\n3",
                    "output": "1\n1 2\n1 2 3",
                    "explanation": "For test case 3, the subarrays and their median are as follows: \n{1}, median = 1\n{2}, median = 2\n{3}, median = 3\n{1, 2}, median = 1.5\n{2, 3}, median = 2.5\n{1, 2, 3}, median = 2\n\nThe mean of the medians is 2 which lies in the range [2, 4]"
                }
            ],
            "problem_statement": "Read problems statements in Mandarin chinese, Russian and Vietnamese as well.\nChef Tobby asked Bhuvan to brush up his knowledge of statistics for a test. While studying some distributions, Bhuvan learns the fact that for symmetric distributions, the mean and the median are always the same.\nChef Tobby asks Bhuvan out for a game and tells him that it will utilize his new found knowledge. He lays out a total of 109 small tiles in front of Bhuvan. Each tile has a distinct number written on it from 1 to 109.\nChef Tobby gives Bhuvan an integer N and asks him to choose N distinct tiles and arrange them in a line such that the mean of median of all subarrays lies between [N-1, N+1], both inclusive. The median of subarray of even length is the mean of the two numbers in the middle after the subarray is sorted\nBhuvan realizes that his book didn\u2019t teach him how to solve this and asks for your help. Can you solve the problem for him?\nIn case, no solution exists, print -1.\nInput section\nFirst line contains, T, denoting the number of test cases.\nEach of the next T lines, contain a single integer N.\nOutput section\nIf no solution, exists print -1.\nIf the solution exists, output N space separated integers denoting the elements of the array A such that above conditions are satisfied. In case, multiple answers exist, you can output any one them.\nInput constraints\n\n1 \u2264 T \u2264 20\n1 \u2264 N \u2264 100",
            "input_format": "",
            "output_format": "",
            "problem_name": "Statistics Construction",
            "user_tags": [
                "Arithmetic",
                "ad-hoc"
            ],
            "computed_tags": [
                "Mathematics",
                "Basic Maths",
                "Algorithms",
                "Constructive"
            ],
            "problem_code_id": "LIKECS02",
            "difficulty_level": "1666",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 35529698,
                    "submission_date": 1594541591,
                    "language": "PYTH 3",
                    "username": "umang_garg",
                    "user_rating_star": 3,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.02",
                    "memory": "17.6M",
                    "solution": 35529698,
                    "code": "t=int(input())\nwhile t:\n    n=int(input())\n    for i in range(n-int(n/2),2*n-int(n/2)):\n        print(i,end=' ')\n    print('')\n    t-=1"
                },
                {
                    "id": 30972889,
                    "submission_date": 1585814937,
                    "language": "PYTH 3",
                    "username": "aarushi1",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.01",
                    "memory": "17.6M",
                    "solution": 30972889,
                    "code": "from math import ceil\ndef fun(n):\n\tif(n==1):\n\t\tprint(1)\n\t\treturn\n\tans= (n/2)+0.5\n\tx=ceil(n-1-ans)\n\tseq= list(range(1+x,1+x+n))\n\tprint(*seq)\ntest=int(input())\nfor i in range(test):\n\tn=int(input())\n\tfun(n)"
                }
            ]
        },
        "DEADEND": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "1\r\n3\r\n2 7 4",
                    "output": "2",
                    "explanation": "Example case 1: Kerim should plant trees at the positions $3$ and $6$ to make the grid beautiful, so the answer is $2$."
                }
            ],
            "problem_statement": "Read problem statements in Bengali, Mandarin Chinese, Russian, and Vietnamese as well.\nKerim is an environment-friendly guy. Today, he accepted Samir's challenge of planting 20 million trees by 2020. Currently, there are $N$ trees (numbered $1$ through $N$) planted at distinct positions on a line; for each valid $i$, the position of the $i$-th tree is $A_i$.\nA set of trees is beautiful if for each tree in this set (let's denote its position by $x$), there is a tree at the position $x-1$ and/or a tree at the position $x+1$.\nKerim's task is to plant some (possibly zero) trees in such a way that the resulting set of all planted trees (the initial $N$ trees and those planted by Kerim) is beautiful. It is only allowed to plant trees at integer (possibly negative) positions. Find the minimum number of trees he needs to plant in order to achieve that.\nInput\n\nThe first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\nThe first line of each test case contains a single integer $N$.\nThe second line contains $N$ space-separated integers $A_1, A_2, \\ldots, A_N$.\n\nOutput\nFor each test case, print a single line containing one integer \u2015 the minimum number of trees Kerim needs to plant.\nConstraints\n\n$1 \\le T \\le 1,000$\n$1 \\le N \\le 10^5$\n$1 \\le A_i \\le 10^9$ for each valid $i$\n$A_1, A_2, \\ldots, A_N$ are pairwise distinct\nthe sum of $N$ over all test cases does not exceed $10^6$\n\nSubtasks\nSubtask #1 (50 points):\n- $N \\le 1,000$\n- $A_i \\le 2,000$ for each valid $i$\n- the sum of $N$ over all test cases does not exceed $10^4$\nSubtask #2 (50 points): original constraints",
            "input_format": "",
            "output_format": "",
            "problem_name": "Planting Trees",
            "user_tags": [
                "Sorting"
            ],
            "computed_tags": [
                "Algorithms"
            ],
            "problem_code_id": "DEADEND",
            "difficulty_level": "1656",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 30772361,
                    "submission_date": 1585274152,
                    "language": "PYTH 3",
                    "username": "divyasimhadri",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.85",
                    "memory": "19.7M",
                    "solution": 30772361,
                    "code": "t=int(input())\nfor _ in range(t):\n    n=input()\n    lis=list(map(int,input().split()))\n    lis.append(-1)\n    lis.sort()\n    lis.append(-1)\n    count=0\n    for i in range(1,len(lis)-1):\n        if (( lis[i+1] == lis[i]+1 )  or  ( lis[i-1] == lis[i]-1)):\n            x=0\n        else:\n            lis[i]=lis[i]+1\n            count=count+1 \n    print(count)\n        "
                },
                {
                    "id": 29942418,
                    "submission_date": 1582911851,
                    "language": "PYTH 3",
                    "username": "kira_1234",
                    "user_rating_star": 7,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.92",
                    "memory": "20.6M",
                    "solution": 29942418,
                    "code": "def numoftree(arr,n):\n    di=dict()\n    di[arr[0]]=1 \n    count=0\n    for i in range(n):\n        di[arr[i]]=1 \n\n    for i in range(n):\n        if(( arr[i]-1 not in di)and(arr[i]+1 not in di)):\n            di[arr[i]+1]=1\n            \n            count+=1\n    return count\nt=int(input())\nfor you in range(t):\n    n=int(input())\n    l=input().split()\n    li=[int(i) for i in l]\n    li.sort()\n    print(numoftree(li,n))"
                }
            ]
        },
        "UWCOI21B": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "5 3\n10 5 2 5 4\n3 1 2",
                    "output": "5",
                    "explanation": "Salmon can reorder $A$ to be $[2, 10, 5, 4, 5]$ and $B$ to be $[1, 2, 3]$."
                }
            ],
            "problem_statement": "Salmon received an array $A$ of size $N$ and an array $B$ of size $M$ for Christmas. He would like to move all the elements in $B$ to $A$ using a special method described below.\nWhile $B$ is not empty, Salmon does the following operations in order:\n\nRemove and store the leftmost element off of B (let's call this element $X$).\nPlace $X$ at the start of $A$.\nKeep swapping $X$ and the element to the right of it repeatedly until $X$ is at the rightmost position of $A$ or $X$ is greater or equal to the element to the right of it.\n\nBefore performing the operations, Salmon can rearrange both A and B in any order once. He would like to do as little work as possible -- determine the minimum possible amount of swaps.\nInput:\nThe first line of input will consist of a two space-separated integers, $N$ and $M$ ($1 \\le N, M \\le 2*10^5$).\nThe next line will consist of $N$ space-separated integers, with the $i$-th input representing $A[i]$ ($-10^9 \\le A[i] \\le 10^9$).\nThe next line will consist of $M$ space-separated integers, with the $i$-th input representing $B[i]$ ($-10^9 \\le B[i] \\le 10^9$).\nOutput:\nOutput a single integer, the minimum number of swaps required.\nSubtasks:\n\nSubtask 1 [15 points]: $A[i] = 1, B[i] = 1$ for all $i$.\nSubtask 2 [30 points]: $N, M \\le 10^3$.\nSubtask 3 [55 points]: No additional constraints.\n\nNote:\nThe answer may be greater than the limit for a 32-bit integer. Use long long instead of int for C++ and long for Java. Please check your language documentation for other languages on how to use 64-bit integers. Note that Python solutions won't encounter a problem as it uses BigIntegers by default.",
            "input_format": "",
            "output_format": "",
            "problem_name": "Array Swaps",
            "user_tags": [
                "ad-hoc"
            ],
            "computed_tags": [
                "Algorithms",
                "Constructive"
            ],
            "problem_code_id": "UWCOI21B",
            "difficulty_level": "1619",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 1015018390,
                    "submission_date": 1692509652,
                    "language": "PYTH 3",
                    "username": "sourin_21",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.18",
                    "memory": "34.5M",
                    "solution": 1015018390,
                    "code": "import bisect\r\nn,m=map(int,input().split())\r\na=list(map(int,input().split()))\r\nb=list(map(int,input().split()))\r\na.sort()\r\nb.sort()\r\nans=0\r\nfor i in b:\r\n    ind=bisect.bisect_right(a,i)\r\n    if(ind==0 and a[ind]>i):\r\n        ans=ans+n\r\nprint(ans)"
                },
                {
                    "id": 96664161,
                    "submission_date": 1684729808,
                    "language": "PYTH 3",
                    "username": "klu_2000031885",
                    "user_rating_star": 3,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.24",
                    "memory": "35.6M",
                    "solution": 96664161,
                    "code": "\r\nimport bisect\r\n\r\nnum,m=map(int,input().split())\r\nv=list(map(int,input().split()))\r\nw=list(map(int,input().split()))\r\nv.sort()\r\nw.sort()\r\na=0\r\nfor i in w:\r\n    f=bisect.bisect_right(v,i)\r\n    if(f==0 and v[f]>i):\r\n        a=a+num\r\nprint(a)"
                }
            ]
        },
        "RECVSEQ": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "3\r\n4\r\n1 3 10 7\r\n5\r\n-10 -5 0 5 10\r\n4\r\n2 2 2 10",
                    "output": "1 3 5 7\r\n-10 -5 0 5 10\r\n2 2 2 2",
                    "explanation": "Example case 1: Rafsan changed the third element from $5$ to $10$.\nExample case 2: No elements were changed.\nExample case 3: Rafsan changed the fourth element from $2$ to $10$."
                }
            ],
            "problem_statement": "Read problems statements in Hindi, Mandarin Chinese, Russian, Vietnamese and Bengali as well.\nIstiak is learning about arithmetic progressions. Today, he wrote an arithmetic sequence on a piece of paper. Istiak was very happy that he managed to write an arithmetic sequence and went out for lunch.\nIstiak's friend Rafsan likes to irritate him by playing silly pranks on him. This time, he could have chosen one element of Istiak's sequence and changed it. When Istiak came back, he was devastated to see his sequence ruined \u2014 it became a sequence $a_1, a_2, \\ldots, a_N$ (possibly identical to the original sequence, if Rafsan did not change anything, in which case Istiak is just overreacting). Help him recover the original sequence.\nFormally, you have to find an arithmetic sequence $b_1, b_2, \\ldots, b_N$ which differs from $a$ in at most one position. $b$ is said to be an arithmetic sequence if there is a real number $d$ such that $b_i - b_{i-1} = d$ for each $i$ ($2 \\le i \\le N$). If there are multiple valid solutions, you may find any one.\nInput\n\nThe first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\nThe first line of each test case contains a single integer $N$.\nThe second line contains $N$ space-separated integers $a_1, a_2, \\ldots, a_N$.\n\nOutput\nFor each test case, print a single line containing $N$ space-separated integers $b_1, b_2, \\ldots, b_N$. It is guaranteed that a valid solution exists.\nConstraints\n\n$4 \\le N \\le 10^5$\n$|a_i| \\le 10^9$ for each valid $i$\nthe sum of $N$ over all test cases does not exceed $5 \\cdot 10^5$",
            "input_format": "",
            "output_format": "",
            "problem_name": "Recover the Sequence",
            "user_tags": [
                "AP",
                "ad-hoc"
            ],
            "computed_tags": [
                "Mathematics",
                "Sequences and Progression",
                "Algorithms",
                "Constructive"
            ],
            "problem_code_id": "RECVSEQ",
            "difficulty_level": "1694",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 34476341,
                    "submission_date": 1592373039,
                    "language": "PYTH 3",
                    "username": "vittal_161",
                    "user_rating_star": 3,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.63",
                    "memory": "19.9M",
                    "solution": 34476341,
                    "code": "for j in range(int(input())):\n    n=int(input())\n    x=list(map(int,input().split()))\n    w=x.copy()\n    t=x.copy()\n    d=x[1]-x[0]\n    z=[x[0],x[1]]\n    for i in range(2,n):\n        x[i]=x[i-1]+d\n        z.append(x[i])\n    e=t[-1]-t[-2]\n    y=[t[-1],t[-2]]\n    for i in range(n-2):\n        t[n-2-i-1]=t[n-2-i]-e\n        y.append(t[n-2-i-1])\n    y.reverse()\n    am,bm=0,0\n    for i in range(n):\n        if(w[i]!=y[i]):\n            am+=1\n            if(am>1):\n                break\n        if(w[i]!=z[i]):\n            bm+=1\n            if(bm>1):\n                break\n    if(am==1):\n        print(*y)\n    else:\n        print(*z)\n"
                },
                {
                    "id": 33053918,
                    "submission_date": 1589353142,
                    "language": "PYTH 3",
                    "username": "thedeep",
                    "user_rating_star": 3,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.42",
                    "memory": "18.7M",
                    "solution": 33053918,
                    "code": "for _ in range(int(input())):\r\n    n = int(input())\r\n    a = list(map(int, input().split()))\r\n    f = False\r\n    d = 0\r\n    for i in range(1, n - 3):\r\n        if a[i] - a[i - 1] != a[i + 1] - a[i]:\r\n            d = a[i + 3] - a[i + 2]\r\n            a[i + 1] = a[i + 2] - d\r\n            a[i] = a[i + 1] - d\r\n            a[i - 1] = a[i] - d\r\n            f = True\r\n            break\r\n\r\n    if (not f):\r\n        if (a[n - 1] - a[n - 4]) / 3 == (a[n - 1] - a[n - 2]):\r\n            d = a[n - 1] - a[n - 2]\r\n            a[n - 3] = a[n - 2] - d\r\n        elif (a[n - 1] - a[n - 4]) / 3 == (a[n - 1] - a[n - 3]) / 2:\r\n            d = a[n - 3] - a[n - 4]\r\n            a[n - 2] = a[n - 3] + d\r\n        elif a[n - 1] - a[n - 2] == a[n - 2] - a[n - 3]:\r\n            d = a[n - 1] - a[n - 2]\r\n            a[n-4] = a[n-3]-d\r\n        else:\r\n            d = a[n - 3] - a[n - 4]\r\n            a[n - 1] = a[n - 2] + d\r\n\r\n    [print(x, end=\" \") for x in a]\r\n    print()\r\n"
                }
            ]
        },
        "POGOSTCK": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "2\n5 2\n3 6 4 7 2\n5 3\n3 -5 6 3 10",
                    "output": "13\n10",
                    "explanation": ""
                }
            ],
            "problem_statement": "Read problems statements Mandarin , Bengali , Hindi , Russian and Vietnamese as well.\nChef is participating in a pogo stick race. In this competition, there are $N$ squares (numbered $1$ through $N$) in a row. Chef must choose a starting square, enter this square and start jumping on his pogo stick. In each jump, if Chef is at a square $s$, then he can only jump to the square $s+K$. If square $s+K$ does not exist, Chef jumps out of the row of squares and the race ends for him. It is not allowed to stop jumping any earlier.\nEach square has a value; let's denote the value of the $i$-th square by $A_i$. Initially, Chef has $0$ points. When he jumps in some square (including the initial square), he is awarded a number of points equal to the value of this square, exactly once. Note that if this value is negative, the number of Chef's points is decreased.\nDetermine the maximum possible total number of points Chef can get if he selects the initial cell optimally.\nInput\n\nThe first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\nThe first line of each test case contains two space-separated integers $N$ and $K$.\nThe second line contains $N$ space-separated integers $A_1, A_2, \\ldots, A_N$.\n\nOutput\nFor each test case, print a single line containing one integer \u2015 the maximum number of points.\nConstraints\n\n$1 \\le T \\le 1,000$\n$1 \\le N \\le 10^5$\n$1 \\le K \\le 10^5$\n$|A_i| \\le 10,000$ for each valid $i$\nthe sum of $N$ over all test cases does not exceed $10^6$\n\nSubtasks\nSubtask #1 (30 points):\n- $N \\le 1,000$\n- the sum of $N$ over all test cases does not exceed $10,000$\nSubtask #2 (70 points): original constraints",
            "input_format": "",
            "output_format": "",
            "problem_name": "Pogo Stick Competition",
            "user_tags": [
                "1D Arrays",
                "Dynamic Programming"
            ],
            "computed_tags": [
                "Data Structures",
                "Arrays",
                "Algorithms"
            ],
            "problem_code_id": "POGOSTCK",
            "difficulty_level": "1685",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 29453281,
                    "submission_date": 1581241646,
                    "language": "PYTH 3",
                    "username": "rise_and_shine",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.36",
                    "memory": "19.3M",
                    "solution": 29453281,
                    "code": "t=int(input())\nfor i in range(t):\n    n,k=map(int, input().split())\n    squareValues = input().split()\n    A = list(map(int, squareValues))\n\n    for i in range(n-k-1, -1, -1):\n        A[i] = A[i] + A[i+k]\n    \n    print(max(A)) \n    \n    \n    \n            \n        "
                },
                {
                    "id": 28044063,
                    "submission_date": 1575378922,
                    "language": "PYTH 3",
                    "username": "udayps055",
                    "user_rating_star": 3,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.43",
                    "memory": "20.3M",
                    "solution": 28044063,
                    "code": "for _ in range (int(input())):\r\n\tn, m = map(int, input().split())\r\n\tl = list(map(int, input().split()))\r\n\t#print(l)\r\n\tl1 = []\r\n\tif m > n:\r\n\t\tprint(max(l))\r\n\telse:\r\n\t\tfor i in range (m):\r\n\t\t\ta = l[i]\r\n\t\t\tfor j in range (i + m, n, m):\r\n\t\t\t\ta = max((l[j] + a), l[j])\r\n\t\t\t\t#print(l[i], l[j])\r\n\t\t\tl1.append(a)\r\n\t\tprint(max(l1))\r\n\t"
                }
            ]
        },
        "MIXGA": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "2\n2 1\n1 0\n3 5\n0 1 0",
                    "output": "1\n2",
                    "explanation": "Example case 1: $K = 1$, so if Vanja replaces the first $*$ by $+$, the value of the final expression will be $V = 1$; then, $K \\le |V|$, so the winner is Vanja.\nExample case 2: $K = 5$, but the absolute value of the final expression cannot be greater than $1$. The winner is Miksi."
                }
            ],
            "problem_statement": "Read problems statements in Mandarin chinese\n, Russian and Vietnamese as well.\nVanja and Miksi have already finished everything for this year at their university, so they decided to spend their free time playing a game with a binary sequence $A_1, A_2, \\dots, A_N$ (i.e. a sequence containing only integers $0$ and $1$).\nAt the beginning of the game, Vanja and Miksi write down the expression $ A_1 * A_2 * A_3 * \\ldots * A_N$ (note below that each $$ is a placeholder and does not denote multiplication).\nThe players take turns alternately, starting with Vanja. The game lasts $N$ turns. In each turn, the current player must replace the first (leftmost) remaining $*$ by the sign $+$ or $-$ (or, equivalently, by the operation of addition or subtraction).\nAfter the last turn, the boys calculate the resulting value $V$ of the expression. If $|V| \\ge K$, the winner is Vanja; otherwise, the winner is Miksi.\nPlease predict the winner of the game if both players play optimally. \nInput\n\nThe first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\nThe first line of each test case contains two space-separated integers $N$ and $K$.\nThe second line contains $N$ space-separated integers $A_1, A_2, \\dots, A_N$.\n\nOutput\nFor each test case, print a single line containing one integer \u2014 $1$ if Vanja (the first player) is the winner or $2$ if Miksi (the second player) is the winner.\nConstraints\n\n$1 \\le T \\le 50$\n$1 \\le N \\le 3 \\cdot 10^4$\n$0 \\le K \\le 3 \\cdot 10^4$\n$0 \\le A_i \\le 1$ for each valid $i$",
            "input_format": "",
            "output_format": "",
            "problem_name": "Mixi Game",
            "user_tags": [
                "Observation",
                "Implementation"
            ],
            "computed_tags": [
                "Algorithms"
            ],
            "problem_code_id": "MIXGA",
            "difficulty_level": "1637",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 34722195,
                    "submission_date": 1593146985,
                    "language": "PYTH 3",
                    "username": "manimala123",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.42",
                    "memory": "17.9M",
                    "solution": 34722195,
                    "code": "for i in range(int(input())):\n    n,k=map(int,input().split())\n    a=list(map(int,input().split()))\n    v=0\n    for j,i in enumerate(a):\n        if j%2==0:\n            if v<0:\n                v-=i\n            else:\n                v+=i\n        else:\n            if v>=0:\n                v-=i\n            else:\n                v+=i\n    if abs(v)>=k:\n        print(1)\n    else:\n        print(2)"
                },
                {
                    "id": 33129665,
                    "submission_date": 1589702221,
                    "language": "PYTH 3",
                    "username": "aman_ravan02",
                    "user_rating_star": 3,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.41",
                    "memory": "17.9M",
                    "solution": 33129665,
                    "code": "for j in range(int(input())):\r\n    n,k=map(int,input().split())\r\n    x=list(map(int,input().split()))\r\n    c=0\r\n    for i in range(n):\r\n        if(i%2==0):\r\n            if(c<0):\r\n                c-=x[i]\r\n            else:\r\n                c+=x[i]\r\n        else:\r\n            if(c<0):\r\n                c+=x[i]\r\n            else:\r\n                c-=x[i]\r\n    if(abs(c)>=k):\r\n        print(1)\r\n    else:\r\n        print(2)"
                }
            ]
        },
        "AMIFIB": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "3\n3\n4\n5",
                    "output": "YES\nNO\nYES",
                    "explanation": "Example case 1. The first few fibonacci numbers are 0 , 1 , 1 , 2 , 3 ,5 , 8 , 13 and so on and the series is increasing . Only 3 and 5 appear in this series while 4 does not appear in the series ."
                }
            ],
            "problem_statement": "Read problems statements in Russian here\nThe Head Chef has been playing with Fibonacci numbers for long . He has learnt several tricks related to Fibonacci numbers . Now he wants to test his chefs in the skills .  \nA fibonacci number is defined by the recurrence : \nf(n) = f(n-1) + f(n-2) for n > 2 and f(1) = 0 and f(2) = 1 .  \nGiven a number  A   , determine if it is a fibonacci number.\nInput\nThe first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows.\nThe only line of each test case contains a single integer  A  denoting the number to be checked .\n\nOutput\nFor each test case, output a single line containing \"YES\" if the given number is a fibonacci number , otherwise output a single line containing \"NO\" . \n\nConstraints\n1 \u2264 T \u2264 1000\n1 \u2264 number of digits in A  \u2264 1000\n  The sum of number of digits in A in all test cases",
            "input_format": "",
            "output_format": "",
            "problem_name": "Am I a Fibonacci Number",
            "user_tags": [
                "Fibonacci Series",
                "Big Integer",
                "Offline Queries"
            ],
            "computed_tags": [
                "Mathematics",
                "Sequences and Progression",
                "Arbitrary Precision",
                "Algorithms",
                "Queries"
            ],
            "problem_code_id": "AMIFIB",
            "difficulty_level": "1663",
            "ai_solutions": [
                "import math\n\ndef is_perfect_square(n):\n    return n == math.isqrt(n) ** 2\n\ndef is_fibonacci(n):\n    return is_perfect_square(5*n*n + 4) or is_perfect_square(5*n*n - 4)\n\nT = int(input().strip())\nfor _ in range(T):\n    A = int(input().strip())\n    print(\"YES\" if is_fibonacci(A) else \"NO\")",
                "import math\n\ndef is_fibonacci(n):\n    x = 0\n    y = 1\n    while y < n:\n        z = x + y\n        x = y\n        y = z\n    return y == n or n == 0\n\nT = int(input().strip())\nfor _ in range(T):\n    A = int(input().strip())\n    print(\"YES\" if is_fibonacci(A) else \"NO\")"
            ],
            "human_solutions": [
                {
                    "id": 38010602,
                    "submission_date": 1600488862,
                    "language": "PYTH 3",
                    "username": "rajath_pai",
                    "user_rating_star": 4,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.06",
                    "memory": "20.9M",
                    "solution": 38010602,
                    "code": "# I know I can do this in python\r\n# still want to solve this is c++\r\n\r\na = [0,1]\r\n\r\nfor i in range (2, 10001):\r\n    a.append(a[i-1] + a[i-2])\r\n    \r\nfor t in range (int(input())):\r\n    n = int(input())\r\n    if n in a:\r\n        print(\"YES\")\r\n    else:\r\n        print(\"NO\")\r\n        \r\n#this probably works fine"
                },
                {
                    "id": 34041941,
                    "submission_date": 1591687557,
                    "language": "PYTH 3",
                    "username": "om_patre7",
                    "user_rating_star": 3,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.02",
                    "memory": "17.6M",
                    "solution": 34041941,
                    "code": "def bis(a,key,p,q):\n\n    if q==p+1 and a[p]!=key:\n        return False\n\n    mid=(p+q)//2\n    if a[mid]==key:\n        return True\n    if a[mid]<key:\n        return bis(a,key,mid,q)\n    else:\n        return bis(a,key,p,mid)\n\n\n\nquery=[]\nfor _ in range(int(input())):\n    query.append(int(input()))\n\nmaxi=max(query)\n\nseq=[0,1]\nwhile seq[-1]+seq[-2]<=maxi:\n    seq.append(seq[-1]+seq[-2])\n\nlens=len(seq)\n\nfor i in query:\n    if bis(seq,i,0,lens):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n"
                }
            ]
        },
        "RRCODE": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "3\n3 1 0\n1 2 3\nXOR\n3 1 0\n1 2 3\nAND\n3 1 0\n1 2 3\nOR",
                    "output": "0\n0\n3",
                    "explanation": "0 xor 1 xor 2 xor 3 = 0\n0 and 1 and 2 and 3 = 0\n0 or 1 or 2 or 3 = 3"
                }
            ],
            "problem_statement": "You are given a simple code of a function and you would like to know what it will return. \n\n F(N, K, Answer, Operator, A[N]) returns int;\n  begin\n      for i=1..K do\n         for j=1..N do\n            Answer=(Answer operator Aj)\n       return Answer\n  end\n\n\nHere N, K, Answer and the value returned by the function F are integers; A is an array of N integers numbered from 1 to N; Operator can be one of the binary operators XOR, AND or OR. If you are not familiar with these terms then better have a look at following articles: XOR, OR, AND.\nInput\nThe first line of input contains an integer T - the number of test cases in file. Description of each test case consists of three lines. The first one contains three integers N, K and initial Answer. Array A is given in the second line and Operator is situated on the third one. Operators are given as strings, of capital letters. It is guaranteed that there will be no whitespaces before or after Operator. \nOutput\nOutput one line for each test case - the value that is returned by described function with given arguments.\nConstraints\n1\u2264T\u2264100\n1\u2264N\u22641000\n0\u2264Answer, K, Ai\u2264109\nOperator is one of these: \"AND\", \"XOR\", \"OR\".",
            "input_format": "",
            "output_format": "",
            "problem_name": "Code",
            "user_tags": [
                "Bitwise Operation",
                "Implementation"
            ],
            "computed_tags": [
                "Mathematics",
                "Bit Manipulation",
                "Algorithms"
            ],
            "problem_code_id": "RRCODE",
            "difficulty_level": "1688",
            "ai_solutions": [
                "def solve(T, test_cases):\n    for _ in range(T):\n        N, K, Answer, A, Operator = test_cases[_]\n        for _ in range(K):\n            for j in range(N):\n                if Operator == \"AND\":\n                    Answer &= A[j]\n                elif Operator == \"OR\":\n                    Answer |= A[j]\n                else:\n                    Answer ^= A[j]\n        print(Answer)\n\nT = int(input())\ntest_cases = []\nfor _ in range(T):\n    N, K, Answer = map(int, input().split())\n    A = list(map(int, input().split()))\n    Operator = input().strip()\n    test_cases.append((N, K, Answer, A, Operator))\nsolve(T, test_cases)",
                "def solve(T, test_cases):\n    for _ in range(T):\n        N, K, Answer, A, Operator = test_cases[_]\n        if Operator == \"AND\":\n            for _ in range(K):\n                for j in range(N):\n                    Answer &= A[j]\n        elif Operator == \"OR\":\n            for _ in range(K):\n                for j in range(N):\n                    Answer |= A[j]\n        else:\n            for _ in range(K):\n                for j in range(N):\n                    Answer ^= A[j]\n        print(Answer)\n\nT = int(input())\ntest_cases = []\nfor _ in range(T):\n    N, K, Answer = map(int, input().split())\n    A = list(map(int, input().split()))\n    Operator = input().strip()\n    test_cases.append((N, K, Answer, A, Operator))\nsolve(T, test_cases)"
            ],
            "human_solutions": [
                {
                    "id": 35650866,
                    "submission_date": 1594825145,
                    "language": "PYTH 3",
                    "username": "abhi084",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.04",
                    "memory": "17.6M",
                    "solution": 35650866,
                    "code": "import functools\nfor _ in range(int(input())):\n    n,k,ans=map(int,input().split())\n    l=list(map(int,input().split()))\n    op=input().strip()\n    if k>0:\n        # AND\n        if op[0]=='A':\n            for i in range(len(l)):\n                ans=ans&l[i]\n            print(ans)\n        #OR\n        elif op[0]=='O':\n            for i in range(len(l)):\n                ans=ans|l[i]\n            print(ans)\n        #XOR\n        else:\n            if k%2==0:\n                print(ans)\n            else:\n                for i in range(len(l)):\n                    ans=ans^l[i]\n                print(ans)\n    elif(k==0):\n        print(ans)"
                },
                {
                    "id": 33923986,
                    "submission_date": 1591539713,
                    "language": "PYTH 3",
                    "username": "vittal_161",
                    "user_rating_star": 3,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.04",
                    "memory": "17.6M",
                    "solution": 33923986,
                    "code": "from functools import reduce\nops = {\"XOR\": lambda x,y : x^y, \"AND\": lambda x,y : x&y, \"OR\": lambda x,y : x|y}\nfor _ in range(int(input())):\n    n, k, ans = map(int, input().split())\n    arr = list(map(int, input().split()))\n    op = input().strip()\n    tot = reduce(ops[op], arr)\n    if k == 0:\n        print (ans)\n        continue\n    if op == \"XOR\":\n        if k % 2 == 0:\n            print (ans)\n        else:\n            print (ans ^ tot)\n    elif op == \"AND\":\n        print (ans & tot)\n    else:\n        print (ans | tot)"
                }
            ]
        },
        "OBTTRNGL": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "3\n6 1 3\n6 1 4\n10 1 5",
                    "output": "1\n0\n3",
                    "explanation": "Example case 1. Only candle with number 2 is suitable.\nExample case 2. No matter how we choose C the angle would have 90 degrees.\nExample case 3. Candles with numbers 2,3,4 are suitable."
                }
            ],
            "problem_statement": "Read problems statements in mandarin chinese, russian and vietnamese as well.\nOn the occasion of the birthday, Chef bought a large circular cake and decorated it with  k  candles placed equally spaced around the circumference of the cake, i.e. the lengths of the arcs that connect any two adjacent candles are equal. \n Chef enumerated the candles from  1 to  k  in clockwise manner. He then chose two candles, say  A  and  B  and lit them up. Now, he left the kitchen and decided to come back in some time with friends to celebrate the birthday.\nMeanwhile Chef's little brother came to the kitchen and saw the cake. He wants to light up one of the not lit candles C such that angle  ACB  is an obtuse angle. He believes that such a pattern of lit candles will be auspicious. Can you find out how many candles C he can light up?\nInput\nThe first line contains a single integer T, the number of test cases. Each test case is described by a single line containing three space-separated integers k, A, B. \nOutput\nFor each test case, output a single line containing one integer: the answer for the test case.\nConstraints\n\n1 \u2264 T \u2264  105 \n3 \u2264 k \u2264  109 \n1 \u2264 A, B \u2264 k \n A \u2260 B",
            "input_format": "",
            "output_format": "",
            "problem_name": "Real obtuse",
            "user_tags": [
                "Geometry"
            ],
            "computed_tags": [
                "Mathematics"
            ],
            "problem_code_id": "OBTTRNGL",
            "difficulty_level": "1647",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 61017387,
                    "submission_date": 1647959434,
                    "language": "PYTH 3",
                    "username": "sasikumar_22",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.60",
                    "memory": "8.9M",
                    "solution": 61017387,
                    "code": "try:\r\n    for _ in range(int(input())):\r\n        k,a,b=map(int, input().split())\r\n        if a>b:\r\n            t=a\r\n            a=b \r\n            b=t\r\n        if b-a == k/2:\r\n            print(0)\r\n        elif b-a < k/2:\r\n            print(b-a-1)\r\n        else:\r\n            print(k+a-b-1)\r\nexcept EOFError: pass\r\n\r\n            "
                },
                {
                    "id": 57101574,
                    "submission_date": 1643204347,
                    "language": "PYTH 3",
                    "username": "bharath22702",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.60",
                    "memory": "9.3M",
                    "solution": 57101574,
                    "code": "try:\n    for _ in range(int(input())):\n        k,a,b=map(int, input().split())\n        if a>b:\n            t=a\n            a=b \n            b=t\n        if b-a == k/2:\n            print(0)\n        elif b-a < k/2:\n            print(b-a-1)\n        else:\n            print(k+a-b-1)\nexcept EOFError: pass\n\n            "
                }
            ]
        },
        "CPERM": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "2\n2\n3",
                    "output": "0\n2",
                    "explanation": "Test case 1:\nNo permutation satisfies.\nTest case 2:\nPermutations [1, 3, 2] and [2, 3, 1] satisfy the property."
                }
            ],
            "problem_statement": "Read problems statements in Mandarin Chinese, Russian and Vietnamese as well.\nGiven N, count how many permutations of [1, 2, 3, ..., N] satisfy the following property.\n\n\n\nLet P1, P2, ..., PN denote the permutation. The property we want to satisfy is that there exists an i between 2 and n-1 (inclusive) such that\n\nPj > Pj + 1\u00a0\u00a0\u2200  \u00a0\u00a0i \u2264 j \u2264 N - 1.\nPj > Pj - 1\u00a0\u00a0\u2200  \u00a0\u00a02 \u2264 j \u2264 i.\n\nInput\nFirst line contains T, the number of test cases. Each test case consists of N in one line.\nOutput\nFor each test case, output the answer modulo 109+7.\nConstraints\n1 \u2264 T \u2264 100\n1 \u2264 N \u2264 109\n\nSubtasks\nSubtask #1(40 points): 1 \u2264 N \u2264 1000\nSubtask #2(60 points): original constraints",
            "input_format": "",
            "output_format": "",
            "problem_name": "Count Permutations",
            "user_tags": [
                "Modular Exponentiation"
            ],
            "computed_tags": [
                "Mathematics",
                "Modular Arithmetic"
            ],
            "problem_code_id": "CPERM",
            "difficulty_level": "1650",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 36160635,
                    "submission_date": 1596347382,
                    "language": "PYTH 3",
                    "username": "reetam_123",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.02",
                    "memory": "17.6M",
                    "solution": 36160635,
                    "code": "try:\n    \n    for _ in range(int(input())):\n        n = int(input())\n        print(0) if(n==1) else print(pow(2,n-1,10**9+7)-2)        \nexcept EOFError:\n    pass\n\n        "
                },
                {
                    "id": 14764257,
                    "submission_date": 1501735056,
                    "language": "PYTH 3",
                    "username": "phben",
                    "user_rating_star": 7,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.01",
                    "memory": "27.1M",
                    "solution": 14764257,
                    "code": "MOD=10**9+7\nfor _ in range(int(input())):\n    a=int(input())\n    if a==0 or a==1 or a==2:\n        print(0)\n    else:\n        print((pow(2,a-1,MOD)-2)%(MOD))"
                }
            ]
        },
        "RKS": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "2\n4 2\n1 4\n2 2\n4 0",
                    "output": "2 3 1 4 3\n4 1 1 2 2 3 3 4 4",
                    "explanation": ""
                }
            ],
            "problem_statement": "Read problems statements Mandarin , Bengali , Hindi , Russian and Vietnamese as well.\nArya has a chessboard with $N$ rows (numbered $1$ through $N$) and $N$ columns (numbered $1$ through $N$); a square in row $r$ and column $c$ is denoted by $(r, c)$.\nArya has already placed $K$ rooks on the chessboard in such a way that no two rooks attack each other. Note that two rooks attack each other if they are in the same row or in the same column and there is no rook between them. She is busy learning how to tame a dragon right now, so she asked you to place as many other rooks as possible on the chessboard in such a way that afterwards, no two rooks on the chessboard attack each other. Help Arya and choose the positions of these rooks.\nInput\n\nThe first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\nThe first line of each test case contains two space-separated integers $N$ and $K$.\nEach of the next $K$ lines contains two space-separated integers $r$ and $c$ denoting that Arya placed a rook on the square $(r, c)$.\n\nOutput\nFor each test case:\n- Let's assume that you placed $P$ rooks on squares $(r_1, c_1), (r_2, c_2), \\ldots, (r_P, c_P)$.\n- You should print a single line containing $2P+1$ space-separated integers $P, r_1, c_1, \\ldots, r_P, c_P$.\n- $P$ must be maximum possible.\n- If there are multiple possible answers, the sequence $r_1, c_1, \\ldots, r_P, c_P$ should be lexicographically smallest.\nConstraints\n\n$1 \\le T \\le 100$\n$1 \\le N \\le 10^6$\n$0 \\le K \\le N$\n$1 \\le r_i, c_i \\le N$ for each valid $i$\nno two initially placed rooks attack each other\nthe positions of all initially placed rooks are pairwise distinct\nthe sum of $N$ over all test cases does not exceed $10^6$\n\nSubtasks\nSubtask #1 (10 points):\n- $T = 10$\n- $N \\le 8$\nSubtask #2 (20 points):\n- $T = 10$\n- $N \\le 1,000$\nSubtask #3 (70 points): original constraints",
            "input_format": "",
            "output_format": "",
            "problem_name": "Rooks",
            "user_tags": [
                "Sets",
                "Chess"
            ],
            "computed_tags": [
                "Data Structures",
                "Special"
            ],
            "problem_code_id": "RKS",
            "difficulty_level": "1624",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 38667447,
                    "submission_date": 1602054308,
                    "language": "PYTH 3",
                    "username": "the_noob_pro",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "1.47",
                    "memory": "17.9M",
                    "solution": 38667447,
                    "code": "from math import ceil\nfor i in range(int(input())):\n    n,k=list(map(int,input().split()))\n    data=[0]*(n+1)\n    memo=[0]*(n+1)\n    for j in range(k):\n        x,y=map(int,input().split())\n        data[x]=True\n        memo[y]=True\n    print(n-k,end=\" \")\n    k=1\n    for j in range(1,n+1):\n        if data[j]==False:\n            for l in range(k,n+1):\n                if memo[l]==False:\n                    print(j,l,end=\" \")\n                    data[j]=True\n                    memo[l]=True\n                    k=l+1\n                    break\n    print(\"\")\n\n"
                },
                {
                    "id": 35550929,
                    "submission_date": 1594567621,
                    "language": "PYTH 3",
                    "username": "sharp_quagga",
                    "user_rating_star": 3,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "1.24",
                    "memory": "18.7M",
                    "solution": 35550929,
                    "code": "tc = int(input())\r\nfor _ in range(tc):\r\n    n,k = list(map(int,input().split()))\r\n    rows,cols = set(),set()\r\n    cfull = rfull = set(i for i in range(1,n+1))\r\n    for kk in range(k):\r\n        x,y = list(map(int,input().split()))\r\n        rows.add(x)\r\n        cols.add(y)\r\n\r\n    rfull = list(rfull - rows)\r\n    cfull = list(cfull - cols)\r\n\r\n    rfull.sort()\r\n    cfull.sort()\r\n    ans = []\r\n    for i in range(len(rfull)):\r\n        ans.append(rfull[i])\r\n        ans.append(cfull[i])\r\n\r\n    ans.insert(0,len(rfull))\r\n    ans = list(map(str,ans))\r\n    print(\" \".join(ans))\r\n"
                }
            ]
        },
        "INTEG": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "3\n-1 -2 -3\n2",
                    "output": "5",
                    "explanation": "Example case 1: Use the first type operation twice and the second type once."
                }
            ],
            "problem_statement": "Chef has an array of N integers. He wants to play a special game. In this game he needs to make all the integers in the array greater than or equal to 0. \nChef can use two types of operations. The first type is to  increase all the integers of the given array by 1, but it costs X coins. The operation of the second type is to add 1 to only one integer of the given array and to use this operation you need to pay 1 coin. You need to calculate the minimal cost to win this game (to make all integers greater than or equal to 0)  \nInput\nThe first line of the input contains an integer N denoting the number of elements in the given array. The second line contains N space-separated integers A1, A2, ..., AN denoting the given array. The third line contains number X - cost of the first type operation. \nOutput\nFor each test case, output a single line containing minimal cost required to make all the integers greater than or equal to zero.\nConstraints\n\n1 \u2264 N \u2264 105\n-109 \u2264 Ai \u2264  109\n0 \u2264 X  \u2264 109",
            "input_format": "",
            "output_format": "",
            "problem_name": "Chef and Integers ",
            "user_tags": [
                "Arithmetic",
                "ad-hoc"
            ],
            "computed_tags": [
                "Mathematics",
                "Basic Maths",
                "Algorithms",
                "Constructive"
            ],
            "problem_code_id": "INTEG",
            "difficulty_level": "1642",
            "ai_solutions": [
                "def min_cost(n, arr, x):\n    arr.sort()\n    cost = 0\n    for i in range(n):\n        if arr[i] < 0:\n            cost += min(-arr[i], x)\n    return cost\n\nn = int(input())\narr = list(map(int, input().split()))\nx = int(input())\nprint(min_cost(n, arr, x))",
                "def min_cost(n, arr, x):\n    cost = sum([min(-i, x) for i in arr if i < 0])\n    return cost\n\nn = int(input())\narr = list(map(int, input().split()))\nx = int(input())\nprint(min_cost(n, arr, x))"
            ],
            "human_solutions": [
                {
                    "id": 29990287,
                    "submission_date": 1583046132,
                    "language": "PYTH 3",
                    "username": "shubhamiitbh",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.10",
                    "memory": "19.2M",
                    "solution": 29990287,
                    "code": "n=int(input())\narr=list(map(int, input().split()))\nx=int(input())\nl=[]\nfor i in arr:\n    if i<0:\n        l.append(i)\nl.sort(reverse=True)\ns=0\ninc=0\nz=len(l)\nfor i in range(len(l)):\n    if x<=z:\n        l[i]+=inc\n        s+=abs(l[i])*x\n        inc+=abs(l[i])\n        z-=1\n    else:\n        l[i]+=inc\n        s+=abs(l[i])\nprint(s)"
                },
                {
                    "id": 27549916,
                    "submission_date": 1571853301,
                    "language": "PYTH 3",
                    "username": "shivanshsethi",
                    "user_rating_star": 3,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.08",
                    "memory": "19.2M",
                    "solution": 27549916,
                    "code": "\nn=int(input())\nl=[int(i) for i in input().split()]\nx=int(input())\nl.sort()\nif(l[0]>=0):\n    print(0)\nelse:\n        cnt = 0\n        cost = 0\n        for i in l:\n            if(i<0):\n                cnt+=1\n            else:\n                break\n        l = l[0:cnt]\n        if(x>=len(l)):\n            print(sum(l)*-1)\n        else:\n            k = min(l[x:len(l)])\n            cost+=-1*k*x\n            tmp = l[0:x]\n            tmp = [i-k for i in tmp]\n            for i in tmp:\n                cost+= max(0,-1*i)\n            print(cost)"
                }
            ]
        },
        "MAXCOMP": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "2\n4\n1 2 100\n2 3 200\n3 4 1600\n1 3 2100\n3\n1 10 2000\n2 5 100\n6 9 400",
                    "output": "3700\n2000",
                    "explanation": "Case 1. The best choice here is to conduct 3rd and 4th events. The total compensation is equal to 1600 + 2100 = 3700. These events do not overlap since 3rd event starts just after the finish of the 4th one. Alternatively we can conduct first three events that also do not overlap. But in this case compensation will be only 100 + 200 + 1600 = 1900.\n\n\nCase 2. Note that first event overlaps with both second and third events, while the last two events do not overlap. Hence there are two reasonable choices available for Chef. One is to take just the first order with total compensation 2000 and the second one is to take the last two orders with total compensation 100 + 400 = 500. Clearly the first choice is better. Hence the answer is 2000."
                }
            ],
            "problem_statement": "Chef Po has given an online advertisement to provide Event organizing services. Chef got a huge response for his advertisement. He got various orders to conduct the events from different organizations. In turn, Chef will receive a compensation depend upon the type of event and the total numbers of persons in the event. Chef has received N orders for conducting events in this weekend in all. As weekend consists of two days all events will take place during the period of 48 hours. For the i-th order the corresponding event will start at Si hours, ends at Ei hours and Chef will receive a compensation Ci for this event. For example, if Si = 17 and Ei = 22 then duration of event is 22 \u2013 17 = 5 hours and its time period is 17:00 \u2013 22:00 of Saturday. Hours of Sunday are numbered by numbers from 24 to 48. So, for example, 10:00 of Sunday will be represented as 10 + 24 = 34. Because Chef is a newbie, the organizations had put a condition that Chef will receive a compensation for the event if and only if he is available for the entire duration of the event. It means that he can not choose overlapping events. Note, however, that if some event starts just in the moment another event has finished the Chef can safely conduct them both.\n\n\nIn general Chef will obey the orders on first come first serve basis. But on weekends Chef will select the orders in such a way that the total compensation for all the events he will conduct will be the maximal. Now your task is to help Chef and find this maximal total compensation.\n\nInput\n\nThe first line of the input contains an integer T, the number of test cases. T test cases follow. The first line of each test case contains an integer N, the number of received orders for conducting events. Each of the next N lines contains three space separated integers Si, Ei, Ci, the parameters of the i-th event described in the problem statement.\n\nConstraints\n\n1 \u2264 T \u2264 101 \u2264 N \u2264 20000 \u2264 Si i \u2264 480 \u2264 Ci \u2264 106\n\nOutput\n\nOutput for each test case should contain a single integer in a separate line, the maximal compensation Chef Po can get.",
            "input_format": "",
            "output_format": "",
            "problem_name": "Event Organizer",
            "user_tags": [
                "Dynamic Programming",
                "Sorting",
                "Implementation"
            ],
            "computed_tags": [
                "Algorithms"
            ],
            "problem_code_id": "MAXCOMP",
            "difficulty_level": "1611",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 49654936,
                    "submission_date": 1628525244,
                    "language": "PYTH 3",
                    "username": "codetilldawn07",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.08",
                    "memory": "17.8M",
                    "solution": 49654936,
                    "code": "for _ in range(int(input())):\n\tN = int(input())\n\tR = [0 for x in range(49)]\n\tA = []\n\tfor k in range(N):\n\t\tst =input().split()\n\t\tS = int(st[0])\n\t\tE = int(st[1])\n\t\tC = int(st[2])\n\t\tA.append([S,E,C])\n\tA.sort()\n\tfor x in A:\n\t\tS = x[0]\n\t\tE = x[1]\n\t\tC = x[2]\n\t\tnc = R[S] + C\n\t\tif nc > R[E]:\n\t\t\tfor k in range(E,49):\n\t\t\t\tif nc > R[k]:\n\t\t\t\t\tR[k] = nc\n\tprint(R[48])"
                },
                {
                    "id": 33205754,
                    "submission_date": 1590049276,
                    "language": "PYTH 3",
                    "username": "shanu_26",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.16",
                    "memory": "17.8M",
                    "solution": 33205754,
                    "code": "for _ in range(int(input())):\n    N=int(input())\n    events=[]\n    for i in range(N):\n        s,e,c=map(int,input().split())\n        events.append([s,e,c])\n    \n    events.sort()\n    plan=[0]*49\n    for i in events:\n        check_before=i[0]\n        for j in range(check_before,-1,-1):\n            plan[i[1]]=max(plan[i[1]] ,plan[j] + i[2])\n\n    print(max(plan))"
                }
            ]
        },
        "CIELDIST": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "4\n15 15 50\n15 15 18\n43 88 200\n2013 2013 2013",
                    "output": "20.000\n0.0\n69.00000\n0",
                    "explanation": "Example case 1. The distance between markets S and T is 50. Assume for simplicity that S has coordinates (0, 0) and T has coordinates (50, 0). Then Ciel could build her first restaurant RS at the point (15, 0) and the second restaurant RT at the point (35, 0). This will ensure that the distance between S and RS is DS = 15 and the distance between T and RT is DT = 15. The distance between restaurants appear to be 20 in this scenario. One can prove that this is the minimum possible distance.\nExample case 2. Here Ciel can locate both her restaurants at the same place. Indeed, if S = (0, 0) and T = (18, 0) then Ciel could locate both her restaurants at the point R = (9, 12). To check this note that Dist(R, S) = ((9 ? 0)2 + (12 ? 0)2)1/2 = (81 + 144)1/2 = 2251/2 = 15. Similarly it can be verified that Dist(R, T) = 15.\nExample case 3. It is similar to the example case 1. If S = (0, 0) and T = (200, 0) then the best way is to locate Ciel's restaurants at the points RS = (43, 0) and RT = (112, 0). You can easily check by yourself that Dist(S, RS) = 43, Dist(T, RT) = 88 and Dist(RS, RT) = 69."
                }
            ],
            "problem_statement": "In Wolf town there are 2 big markets S and T. The distance between these markets is D. Chef Ciel would like to run 2 restaurants in Wolf town, where the first restaurant will be supplied by the market S and the second one will be supplied by the market T. The markets run delivery service without charge within some distance, DS and DT respectively. Near these markets there are many rival restaurants. So Ciel decides to build one of her restaurants exactly at the distance DS from the market S, and build the other restaurant exactly at the distance DT from the market T.\nChef Ciel would like to build her restaurants as close as possible to each other for convenient communication. Your task is to calculate the minimum distance that could be achieved between her restaurants.\nNote. Wolf town can be considered as an infinite 2D Cartesian plane. The markets and Ciel's restaurants should be considered as points on a plane. The distance between the two points A and B, whose coordinates are (Ax, Ay) and (Bx, By) respectively, is defined by Dist(A, B) = ((Ax \u2212 Bx)2 + (Ay \u2212 By)2)1/2.\nInput\nThe first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. The only line of each test case contains three space-separated integers DS, DT and D.\nOutput\nFor each test case, output a single line containing the minimum possible distance between Ciel's restaurants that could be achieved. The output must have an absolute or relative error at most 0.000001 (10\u22126). Please, note that your output should not have more than 1000 digits after the decimal point, otherwise you may (or may not) get wrong answer or runtime error (SIGXFSZ).\nNote also that the answer could be 0, which means that two Ciel's restaurants should be located at the same building.\nConstraints\n1 \u2264 T \u2264 2013\n1 \u2264 DS, DT, D \u2264 2013\n\nJust to reiterate, your output can have any number of digits after the decimal point unless it is too long (more than 1000 digits after decimal point). However your output must have an absolute or relative error at most 10\u22126.",
            "input_format": "",
            "output_format": "",
            "problem_name": "Minimum Distance",
            "user_tags": [
                "Basic Maths",
                "Geometry",
                "ad-hoc"
            ],
            "computed_tags": [
                "Mathematics",
                "Algorithms",
                "Constructive"
            ],
            "problem_code_id": "CIELDIST",
            "difficulty_level": "1646",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 39355029,
                    "submission_date": 1604716613,
                    "language": "PYTH 3",
                    "username": "amit1405",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.02",
                    "memory": "17.5M",
                    "solution": 39355029,
                    "code": "for i in range(int(input())):\n    d1,d2,d=map(int,input().split())\n    print(max(0,d-d1-d2,d1-d-d2,d2-d-d1))"
                },
                {
                    "id": 37788663,
                    "submission_date": 1599839561,
                    "language": "PYTH 3",
                    "username": "ayan_codechef",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.02",
                    "memory": "17.5M",
                    "solution": 37788663,
                    "code": "for _ in range(int(input())):\n\ta,b,c=map(int,input().split())\n\tif (a+b<=c):print(\"{:.4f}\".format(round(c-(a+b),5)))\n\telse:\n\t\tif(max(a,b)>c+min(a,b)):print(\"{:.4f}\".format(round(max(a,b)-(c+min(a,b)),5)))\n\t\telse:print(0.0000)"
                }
            ]
        },
        "PUPPYGM": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "2\r\n1 1\r\n1 2",
                    "output": "Vanka\r\nTuzik",
                    "explanation": "In the first test case Tuzik can't finish even the first move, so Vanka wins.\nIn the second test case Tuzik eats the first stack (with 1 nut), then splits the second stack (with 2 nuts) into two stacks, and Vanka loses."
                }
            ],
            "problem_statement": "Read problems statements in Mandarin Chinese  and Russian.\nTuzik and his master Vanka are playing some unusual game. Initially there are two stacks of nuts. The first stack contains A nuts and the second contains B nuts. A player's move consists of two steps:\n\nChoose one stack and eat it. \nSplit the other stack into two new stacks. If a player can't split it he loses (if stack contains only 1 nut).\n\nTuzik starts the game. Tell who wins if both players play optimally.\nInput\nThe first line of the input contains an integer T, denoting the number of test cases. The following T lines each contain 2 space-separated integers - A and B - for this test case.\nOutput\nFor each test case, output a single line containing the word \"Tuzik\" or \"Vanka\" (without quotes) depending on the winner in this test case.\nConstraints\n\n1 \u2264 T \u2264 1000\n1 \u2264 A, B \u2264 104\nSubtask #1[26 points]:1 \u2264 A, B \u2264 10\nSubtask #2[30 points]:1 \u2264 A, B \u2264 100\nSubtask #3[44 points]: 1 \u2264 A, B \u2264 104",
            "input_format": "",
            "output_format": "",
            "problem_name": "Puppy and game",
            "user_tags": [
                "Game Theory"
            ],
            "computed_tags": [
                "Algorithms"
            ],
            "problem_code_id": "PUPPYGM",
            "difficulty_level": "1666",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 36183060,
                    "submission_date": 1596476702,
                    "language": "PYTH 3",
                    "username": "jiteshbhansali",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.02",
                    "memory": "17.6M",
                    "solution": 36183060,
                    "code": "for _ in range(int(input())):\n    a,b=map(int,input().split())\n    if(a%2!=0 and b%2!=0):\n        print(\"Vanka\")\n    else:\n        print(\"Tuzik\")"
                },
                {
                    "id": 35920896,
                    "submission_date": 1595684127,
                    "language": "PYTH 3",
                    "username": "akshaykalucha",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.02",
                    "memory": "17.6M",
                    "solution": 35920896,
                    "code": "try:\n    for _ in range(int(input())):\n        n,k=map(int,input().split())\n        if(n%2==0 or k%2==0):\n            print('Tuzik')\n        else:\n            print('Vanka')\nexcept:\n    pass"
                }
            ]
        },
        "RAINBOWB": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "10",
                    "output": "0",
                    "explanation": ""
                },
                {
                    "input": "13",
                    "output": "1",
                    "explanation": ""
                },
                {
                    "input": "14",
                    "output": "1",
                    "explanation": ""
                },
                {
                    "input": "15",
                    "output": "7",
                    "explanation": ""
                }
            ],
            "problem_statement": "Read problems statements in Mandarin Chinese  and Russian.\n\u00a0\nChef loves arrays. But he really loves a specific kind of them - Rainbow Arrays. \nThe array is a Rainbow Array if it has such a structure:\nThe first a1 elements equal to 1. \nThe next a2 elements equal to  2. \nThe next a3 elements equal to  3. \nThe next a4 elements equal to  4. \nThe next a5 elements equal to  5. \nThe next a6 elements equal to  6. \nThe next a7 elements equal to  7. \nThe next a6 elements equal to  6. \nThe next a5 elements equal to  5. \nThe next a4 elements equal to  4. \nThe next a3 elements equal to  3. \nThe next a2 elements equal to  2. \nThe next a1 elements equal to  1. \nai is a positive integer, the variables with the same index (a1 in the first statement and a1 in the last one, for example) are equal. \nThere are no any other elements in array. \n\n\n For example, {1,1,2,2,2,3,4,5,5,6,7,7,7,6,5,5,4,3,2,2,2,1,1} is a Rainbow Array.\nThe array {1,2,3,4,5,6,7,6,6,5,4,3,2,1} is not a Rainbow Array, because the sizes of the blocks with the element 6 are different. \nPlease help Chef to count the number of different Rainbow Arrays that contain exactly N elements. \nInput\nThe first line contains a single integer N. \nOutput\nOutput the number of different Rainbow Arrays with N elements, modulo 10^9+7. \nConstraints\n1 \u2264 N \u2264 106",
            "input_format": "",
            "output_format": "",
            "problem_name": "Chef and Rainbow Array - 2",
            "user_tags": [
                "Arithmetic"
            ],
            "computed_tags": [
                "Mathematics",
                "Basic Maths"
            ],
            "problem_code_id": "RAINBOWB",
            "difficulty_level": "1672",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 1024916738,
                    "submission_date": 1696871430,
                    "language": "PYTH 3",
                    "username": "hanss",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.05",
                    "memory": "10.9M",
                    "solution": 1024916738,
                    "code": "from operator import mul\r\nfrom functools import reduce\r\n\r\n\r\ndef binom_n_6(n, mod):\r\n    x = reduce(mul, [n-i for i in range(6)]) % mod\r\n    y = pow(reduce(mul, range(1,7)), mod-2, mod)\r\n    return (x * y) % mod    \r\n   \r\n   \r\nmod = 10**9 + 7\r\nn = int(input())\r\n#print(n)\r\n\r\nif n < 13:\r\n    count = 0\r\nelse:\r\n    # Find number of different combinations\r\n    # comb of length 7 with sum(comb) == (n+1)//2\r\n    theSum = (n+1)//2\r\n    \"\"\"\r\n    count = 0\r\n    for a1 in range(1, theSum - 5):\r\n        for a2 in range(a1 + 1, theSum - 4):\r\n            for a3 in range(a2 + 1, theSum - 3):\r\n                for a4 in range(a3 + 1, theSum - 2):\r\n                    for a5 in range(a4 + 1, theSum - 1):\r\n                        for a6 in range(a5 + 1, theSum - 0):\r\n                            print(a1, a2, a3, a4, a5, a6, \r\n                                  #theSum - sum([a1, a2, a3, a4, a5, a6])\r\n                                  )\r\n                            count += 1\r\n    count = summands(theSum, 7, mod)\r\n    if n % 2 == 1:\r\n        pass\r\n    \"\"\"\r\n    count = binom_n_6(theSum - 1, mod)\r\n    \r\nprint(count)\r\n    "
                },
                {
                    "id": 89286391,
                    "submission_date": 1676348916,
                    "language": "PYTH 3",
                    "username": "rs5228127",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.02",
                    "memory": "9.6M",
                    "solution": 89286391,
                    "code": "x=int(input(\"\"))\r\nans=0\r\nif(x<13):\r\n    ans=0\r\nif(x>=13):\r\n    if(x%2==0):\r\n        x=int(x-2)\r\n    if(x%2==1):\r\n        x=int(x-1)\r\n    x=x//2\r\n    ans=x*(x-1)*(x-2)*(x-3)*(x-4)*(x-5)//720\r\n    ans=int(ans%(1000000007))\r\nprint(\"\",(ans))"
                }
            ]
        },
        "SEBIHWY": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "2\n100 180 200 20 60\n130 131 132 1 72",
                    "output": "SEBI\nFATHER",
                    "explanation": "Example case 1.\nThere are total 20 - 1 = 19 markers in between the Sebi's car and the other car. So, the distance between those cars at time T is 20 * 50 = 1000 meters = 1 km.\nAs T = 60 seconds, i.e. 1 minutes. So, the other car goes 1 km more than Sebi's car in 1 minute. So, the other car will go 60 km more than Sebi's car in 1 hour. So, its speed is 60 kmph more than Sebi's car, i.e. 160 kmph.\nSebi had made a guess of 180 kmph, while his father of 200 kmph. Other car's real speed is 160 kmph. So, Sebi's guess is better than his father. Hence he wins the game.\nExample case 2.\nThe situation of this example is depicted in the image provided in the statement. You can find the speed of other car and see that Father's guess is more accurate."
                }
            ],
            "problem_statement": "Read problems statements in Mandarin Chinese, Russian and Vietnamese as well.\nSebi goes to school daily with his father. They cross a big highway in the car to reach to the school. Sebi sits in front seat beside his father at driving seat. To kill boredom, they play a game of guessing speed of other cars on the highway. Sebi makes a guess of other car's speed being SG kph, his father FG kph. \n\nThe highway is usually empty, so the drivers use cruise control, i.e. vehicles run at a constant speed. There are markers on the highway at a gap of 50 meters. Both father-son duo wants to check the accuracy of their guesses. For that, they start a timer at the instant at which their car and the other car (which speed they are guessing) are parallel to each other (they need not to be against some marker, they can be in between the markers too). After some T seconds, they observe that both the cars are next to some markers and the number of markers in between the markers of their car and the other car is D - 1 (excluding the markers next to both the cars). Also, they can observe these markers easily because the other car is faster than their. Speed of Sebi's father's car is S. Using this information, one can find the speed of the other car accurately.\n\n\nAn example situation when Sebi's father starts the timer. Notice that both the car's are parallel to each other.\n\n\n\n\nExample situation after T seconds. The cars are next to the markers. Here the value of D is 1. The green car is Sebi's and the other car is of blue color.\n\n\n\n\nSebi's a child, he does not know how to find the check whose guess is close to the real speed of the car. He does not trust his father as he thinks that he might cheat. Can you help to resolve this issue between them by telling whose guess is closer. If Sebi's guess is better, output \"SEBI\". If his father's guess is better, output \"FATHER\". If both the guess are equally close, then output \"DRAW\".\n\nInput\nThe first line of the input contains an integer T denoting the number of test cases. \nEach of the next T lines contain five space separated integers S, SG, FG, D, T corresponding to the Sebi's car speed, Sebi's guess, his father's guess, D as defined in the statement and the time at which both the cars at against the markers (in seconds), respectively.\nOutput\nOutput description.\nFor each test case, output a single line containing \"SEBI\", \"FATHER\" or \"DRAW\" (without quotes) denoting whose guess is better.\nConstraints\n\n1 \u2264 T \u2264 10000\n0 \u2264 S \u2264 130\n0 \u2264 SG, FG \u2264 300\n1 \u2264 D \u2264 30\n1 \u2264 T \u2264 300\n The other car speed doesn't exceed 300 kph.",
            "input_format": "",
            "output_format": "",
            "problem_name": "Sebi and the highway",
            "user_tags": [
                "Basic Maths"
            ],
            "computed_tags": [
                "Mathematics"
            ],
            "problem_code_id": "SEBIHWY",
            "difficulty_level": "1621",
            "ai_solutions": [
                "T = int(input())\nfor _ in range(T):\n    S, SG, FG, D, T = map(int, input().split())\n    other_car_speed = S + (D*50*18)/(5*T)\n    if abs(SG - other_car_speed) < abs(FG - other_car_speed):\n        print(\"SEBI\")\n    elif abs(SG - other_car_speed) > abs(FG - other_car_speed):\n        print(\"FATHER\")\n    else:\n        print(\"DRAW\")",
                "def guess_winner(S, SG, FG, D, T):\n    other_car_speed = S + (D*50*18)/(5*T)\n    if abs(SG - other_car_speed) < abs(FG - other_car_speed):\n        return \"SEBI\"\n    elif abs(SG - other_car_speed) > abs(FG - other_car_speed):\n        return \"FATHER\"\n    else:\n        return \"DRAW\"\n\nT = int(input())\nfor _ in range(T):\n    S, SG, FG, D, T = map(int, input().split())\n    print(guess_winner(S, SG, FG, D, T))"
            ],
            "human_solutions": [
                {
                    "id": 39152822,
                    "submission_date": 1603729637,
                    "language": "PYTH 3",
                    "username": "shreya0610",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.08",
                    "memory": "17.5M",
                    "solution": 39152822,
                    "code": "t = int(input())\nfor i in range(t):\n    s,sg,fg,d,T = map(int,input().split())\n   \n\n    \n    v = s + (d*180)/T\n\n    if abs(sg-v) > abs(fg-v):\n        print(\"FATHER\")\n    elif abs(sg-v) < abs(fg-v):\n        print(\"SEBI\")\n    else:\n        print(\"DRAW\")"
                },
                {
                    "id": 38975657,
                    "submission_date": 1602932685,
                    "language": "PYTH 3",
                    "username": "blackpanther42",
                    "user_rating_star": 3,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.08",
                    "memory": "17.5M",
                    "solution": 38975657,
                    "code": "for _ in range(int(input())):\r\n    s,sg,fg,d,t=map(int,input().split())\r\n    s+=(180*d)/t\r\n    if abs(sg-s)==abs(fg-s):\r\n        print('DRAW')\r\n    elif abs(sg-s)<abs(fg-s):\r\n        print('SEBI')\r\n    elif abs(sg-s)>abs(fg-s):\r\n        print('FATHER')\r\n"
                }
            ]
        },
        "INVYCNT": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "2\n3 3\n2 1 3\n4 100\n99 2 1000 24",
                    "output": "12\n30000",
                    "explanation": ""
                }
            ],
            "problem_statement": "Read problem statements in Hindi, Bengali, Mandarin Chinese, Russian, and Vietnamese as well.\nAlmir had a small sequence $A_1, A_2, \\ldots, A_N$. He decided to make $K$ copies of this sequence and concatenate them, forming a sequence $X_1, X_2, \\ldots, X_{NK}$; for each valid $i$ and $j$ ($0 \\le j \\lt K$), $X_{j \\cdot N + i} = A_i$.\nFor example, if $A = (1, 2, 3)$ and $K = 4$, the final sequence is $X = (1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3)$.\nA pair $(i, j)$, where $1 \\le i \\lt j \\le N$, is an inversion if $X_i \\gt X_j$. Find the number of inversions in the final sequence $X$.\nInput\n\nThe first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\nThe first line of each test case contains two space-separated integers $N$ and $K$.\nThe second line contains $N$ space-separated integers $A_1, A_2, \\ldots, A_N$.\n\nOutput\nFor each test case, print a single line containing one integer \u2015 the number of inversions in the sequence $X$.\nConstraints\n\n$1 \\le T \\le 1,000$\n$1 \\le N \\le 100$\n$1 \\le K \\le 10^6$\n$1 \\le A_i \\le 10^9$ for each valid $i$\n\nSubtasks\nSubtask #1 (100 points): original constraints",
            "input_format": "",
            "output_format": "",
            "problem_name": "Counting Inversions Revisited",
            "user_tags": [
                "1D Arrays",
                "Arithmetic",
                "Observation"
            ],
            "computed_tags": [
                "Data Structures",
                "Arrays",
                "Mathematics",
                "Basic Maths",
                "Algorithms"
            ],
            "problem_code_id": "INVYCNT",
            "difficulty_level": "1607",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 28980926,
                    "submission_date": 1578924219,
                    "language": "PYTH 3",
                    "username": "i_ravi",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "2.19",
                    "memory": "17.6M",
                    "solution": 28980926,
                    "code": "for _ in range(int(input())):\n    N,K=map(int,input().split())\n    ll=list(map(int,input().split()))\n    c1=0\n    c2=0\n    for i in range(N):\n        for j in range(i+1,N):\n            if ll[i]>ll[j]:\n                c1+=1\n    for i in range(N):\n        for j in range(N):\n            if ll[i]>ll[j]:\n                c2+=1\n    print(c1*K+c2*K*(K-1)//2)"
                },
                {
                    "id": 28469154,
                    "submission_date": 1577168527,
                    "language": "PYTH 3",
                    "username": "bechara_123",
                    "user_rating_star": 4,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.39",
                    "memory": "17.6M",
                    "solution": 28469154,
                    "code": "def main():\r\n    t = int(input())\r\n    \r\n    while t>0:\r\n        n,k = map(int,input().split())\r\n        l = list(map(int,input().split()))\r\n        \r\n        ll = sorted(l)\r\n        count1 = 0\r\n        \r\n        for i,val in enumerate(ll):\r\n            count1 = count1 + ( i - (ll[:i]).count(val) )\r\n        \r\n        ans = 0\r\n        \r\n        ans = ans + ( count1 * k * (k-1) ) // 2\r\n        \r\n        count2 = 0\r\n        \r\n        for i,val in enumerate(l):\r\n            temp = sum( 1 for j in l[i+1:] if j < val)\r\n            count2 = count2 + ( temp )\r\n        \r\n        ans = ans + count2*k\r\n        \r\n        print(ans)\r\n        t-=1\r\n    \r\nif __name__ == \"__main__\":\r\n    main()"
                }
            ]
        },
        "TWODOGS": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "5 5\n2 4 3 2 1",
                    "output": "2",
                    "explanation": "In the first example, if Chef leaves the first dog from left and gives it integer 4, and the second dog from right and gives it integer 1, then the first dog takes 2 seconds and the second dog takes 1 second to get the apples. Thus Chef needs to wait 2 seconds. In any other way, Chef can't get the desired apples in less than 2 seconds."
                },
                {
                    "input": "5 5\n2 4 9 2 5",
                    "output": "-1",
                    "explanation": "In the second example, Chef cannot get two apples such that the sum of their types is 5 so the answer is \"-1\"."
                }
            ],
            "problem_statement": "Read problems statements in Mandarin Chinese  and Russian.\nIn Chef's house there are N apples lying in a row on the floor. These apples are numbered from 1 (left most one) to N (right most one). The types of apples are also numbered by positive integers, and the type of apple i is Ti.\nChef has recently brought two trained dogs. Both of the dogs are too intelligent to know the smell of each type of apple. If Chef gives a dog an integer x, and releases it at one end of the row of apples, then the dog smells each apple one by one. Once the dog find an apple of type x, the dog picks the apple and back to Chef's room immidiately. If there is no apple of type x, then the dog will back without any apples.\nNow Chef wants to eat two apples as soon as possible. Here the apples must have distinct types, and the sum of the types must be equal to K. Chef can release the dogs from either of the ends, namely, he can leave (both at left end) or (both at right end) or (one at left end and one at right end) and he can release them at the same time. The dogs take one second to smell each apple. However the dogs can run rapidly, so the time for moving can be ignored. What is the minimum time (in seconds) to get the desired apples from his dogs?\nInput\nThe first line of input contains two space-separated integers N and K, denoting the number of apples and the required sum respectively. Then the next line contains N space-separated integers T1, T2, ..., TN, denoting the types of the apples.\nOutput\nPrint one integer describing the minimum number of seconds that Chef needs to wait till he gets the desired apples. If Chef cannot get the desired apples, then output \"-1\" without quotes.\nConstraints\n2 \u2264 N \u2264 500000 (5 \u00d7 105)\n1 \u2264 K \u2264 1000000 (106)\n1 \u2264 Ti \u2264 1000000 (106)",
            "input_format": "",
            "output_format": "",
            "problem_name": "Make Him Happy",
            "user_tags": [
                "Brute Force"
            ],
            "computed_tags": [
                "Algorithms"
            ],
            "problem_code_id": "TWODOGS",
            "difficulty_level": "1659",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 91465559,
                    "submission_date": 1678113588,
                    "language": "PYTH 3",
                    "username": "sid_114",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.78",
                    "memory": "115.4M",
                    "solution": 91465559,
                    "code": "\r\nimport bisect, sys\r\n\r\n\r\nMAX = 1000000\r\n\r\nif __name__ == '__main__':\r\n\tN, K = list(map(int, sys.stdin.readline().split()))\r\n\tT = list(map(int, sys.stdin.readline().split()))\r\n\tL, R = {}, {}\r\n\r\n\tfor i, x in enumerate(T):\r\n\t\tif x not in L:\r\n\t\t\tL[x] = i\r\n\t\tR[x] = i\r\n\r\n\r\n\tT = frozenset(T)\r\n\tmin_idx = N\r\n\r\n\tfor x in sorted(T):\r\n\t\tif 2 * x >= K:\r\n\t\t\tbreak\r\n\t\telif (K - x) in T:\r\n\t\t\tmin_idx = min(min_idx, max(L[x] + 1, L[K - x] + 1))\r\n\t\t\tmin_idx = min(min_idx, max(L[x] + 1, N - R[K - x]))\r\n\t\t\tmin_idx = min(min_idx, max(N - R[x], N - R[K - x]))\r\n\t\t\tmin_idx = min(min_idx, max(N - R[x], L[K - x] + 1))\r\n\r\n\tprint(min_idx if min_idx < N else -1)"
                },
                {
                    "id": 79584012,
                    "submission_date": 1668022259,
                    "language": "PYTH 3",
                    "username": "ratnesh_181998",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.67",
                    "memory": "123.9M",
                    "solution": 79584012,
                    "code": "\nn,k=map(int,input().split())\nA=map(int,input().split())\nD,dist={}, {}\nfor i,a in enumerate(A):\n    D[a]=0\n    dist[a] = min(dist.get(a, float(\"inf\")), i, n - i - 1)\n\nhk = k / 2\nc = float(\"inf\")\nfor a in D:\n    if a < hk:\n        b = k - a\n        if b in D:\n            c = min(c, max(dist[a], dist[b]))\nprint(-1 if c == float(\"inf\") else c + 1)"
                }
            ]
        },
        "UCL": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "2\r\nmanutd 8 vs. 2 arsenal\r\nlyon 1 vs. 2 manutd\r\nfcbarca 0 vs. 0 lyon\r\nfcbarca 5 vs. 1 arsenal\r\nmanutd 3 vs. 1 fcbarca\r\narsenal 6 vs. 0 lyon\r\narsenal 0 vs. 0 manutd\r\nmanutd 4 vs. 2 lyon\r\narsenal 2 vs. 2 fcbarca\r\nlyon 0 vs. 3 fcbarca\r\nlyon 1 vs. 0 arsenal\r\nfcbarca 0 vs. 1 manutd\r\na 3 vs. 0 b\r\na 0 vs. 0 c\r\na 0 vs. 0 d\r\nb 0 vs. 0 a\r\nb 4 vs. 0 c\r\nb 0 vs. 0 d\r\nc 0 vs. 0 a\r\nc 0 vs. 0 b\r\nc 1 vs. 0 d\r\nd 3 vs. 0 a\r\nd 0 vs. 0 b\r\nd 0 vs. 0 c",
                    "output": "manutd fcbarca\r\nd b",
                    "explanation": "Example case 1: The total number of points and goal difference for each team is as follows:\n- manutd: $16$ points, goal difference $12$\n- fcbarca: $8$ points, goal difference $4$\n- manutd: $5$ points, goal difference $-5$\n- lyon: $4$ points, goal difference $-11$\nExample case 2: The total number of points and goal difference for each team is as follows:\n- d: $7$ points, goal difference $2$\n- b: $7$ points, goal difference $1$\n- a: $7$ points, goal difference $0$\n- c: $7$ points, goal difference $-3$\nNote that in this test case, all teams have the same number of points, but teams with higher goal difference are ranked higher."
                }
            ],
            "problem_statement": "Read problems statements in Hindi, Mandarin Chinese, Russian, Vietnamese and Bengali as well.\nThe UEFA Champions League is the most prestigious annual sports competition in the world. In the group stage of this competition, European football clubs are divided into 8 groups; there are four teams in each group. The teams in each group are ranked based on the matches they play against each other, according to the following rules:\n- Based on the results of matches, teams are awarded points. Each football match is played between a home team and an away team. If one of the teams scores more goals than the other, this team gains $3$ points and the other team gains $0$ points. In case of a tie (if both teams score the same number of goals), each of those teams gains $1$ point.\n- The goal difference of a team is the number of goals it scored minus the number of goals it received, regardless if it scored/received them as the home team or as the away team.\n- Between any two teams, the team with more points is ranked higher.\n- If they have the same number of points (in case of a tie), the team with higher goal difference is ranked higher.\nEach team plays two matches against every other team in its group \u2015 one match as the home team and one match as the away team. You are given the number of goals scored by each team for all twelve matches in one group. Determine the leaders of this group \u2015 the first and second top-ranked team. It is guaranteed that there are no ties for either of these places (for the given results of the matches).\nInput\n\nThe first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\nFor each test case, $12$ lines follow. Each of these lines describes the result of one match in the format HomeTeamName HomeTeamGoals vs. AwayTeamGoals AwayTeamName, where HomeTeamName and AwayTeamName are strings and HomeTeamGoals and AwayTeamGoals are integers denoting the number of goals scored by the respective teams in this match.\n\nOutput\nFor each scenario, print a single line containing two space-separated strings \u2015 the name of the top-ranked team and the name of the second top-ranked team.\nConstraints\n\n$1 \\le T \\le 50$\nthe length of the name of each team does not exceed $10$\nthe name of each team contains only lowercase English letters\n$0 \\le$ number of goals scored by each team $\\le 100$",
            "input_format": "",
            "output_format": "",
            "problem_name": "UEFA Champions League",
            "user_tags": [
                "Maps",
                "ad-hoc",
                "Sorting",
                "Brute Force",
                "Implementation"
            ],
            "computed_tags": [
                "Data Structures",
                "Algorithms",
                "Constructive"
            ],
            "problem_code_id": "UCL",
            "difficulty_level": "1633",
            "ai_solutions": [
                "def solve():\n    T = int(input().strip())\n    for _ in range(T):\n        teams = {}\n        for _ in range(12):\n            home_team, home_goals, _, away_goals, away_team = input().strip().split()\n            home_goals, away_goals = int(home_goals), int(away_goals)\n            if home_team not in teams:\n                teams[home_team] = [0, 0]\n            if away_team not in teams:\n                teams[away_team] = [0, 0]\n            if home_goals > away_goals:\n                teams[home_team][0] += 3\n            elif home_goals < away_goals:\n                teams[away_team][0] += 3\n            else:\n                teams[home_team][0] += 1\n                teams[away_team][0] += 1\n            teams[home_team][1] += home_goals - away_goals\n            teams[away_team][1] += away_goals - home_goals\n        teams = sorted(teams.items(), key=lambda x: (-x[1][0], -x[1][1]))\n        print(teams[0][0], teams[1][0])\n\nsolve()",
                "def solve():\n    T = int(input().strip())\n    for _ in range(T):\n        teams = {}\n        for _ in range(12):\n            home_team, home_goals, _, away_goals, away_team = input().strip().split()\n            home_goals, away_goals = int(home_goals), int(away_goals)\n            if home_team not in teams:\n                teams[home_team] = [0, 0]\n            if away_team not in teams:\n                teams[away_team] = [0, 0]\n            if home_goals > away_goals:\n                teams[home_team][0] += 3\n            elif home_goals < away_goals:\n                teams[away_team][0] += 3\n            else:\n                teams[home_team][0] += 1\n                teams[away_team][0] += 1\n            teams[home_team][1] += home_goals - away_goals\n            teams[away_team][1] += away_goals - home_goals\n        teams = sorted(teams.items(), key=lambda x: (-x[1][0], -x[1][1]))\n        print(' '.join([team[0] for team in teams[:2]]))\n\nsolve()"
            ],
            "human_solutions": [
                {
                    "id": 29479612,
                    "submission_date": 1581312454,
                    "language": "PYTH 3",
                    "username": "jay2110",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.01",
                    "memory": "17.6M",
                    "solution": 29479612,
                    "code": "for _ in range(int(input())):\n    team={}\n    for i in range(12):\n        x=list(input().split(\" \"))\n        team1=x[0]\n        score1=int(x[1])\n        team2=x[-1]\n        score2=int(x[-2])\n\n        if team1 not in team:\n            team[team1]=[0,0]\n        if team2 not in team:\n            team[team2]=[0,0]\n        if score1>score2:\n            team[team1][0]+=3\n        if score2>score1:\n            team[team2][0]+=3\n        if score1==score2:\n            team[team1][0]+=1\n            team[team2][0]+=1\n        team[team1][1]+= score1-score2\n        team[team2][1]+= score2-score1\n\n    winner=sorted(team.values(),reverse=True)\n    for key,values in team.items():\n        if values==winner[0]:\n            first=key\n        if values==winner[1]:\n            second=key\n    print(first,second)"
                },
                {
                    "id": 29273384,
                    "submission_date": 1580489353,
                    "language": "PYTH 3",
                    "username": "kenedy_kids",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.02",
                    "memory": "17.6M",
                    "solution": 29273384,
                    "code": "def main():\n    n = int(input())\n    if n < 0 or n > 50 :\n        print(\"Invalid number of test case\")\n        exit()\n    else:\n        for i in range(n):\n            get_winner()\n\n\ndef get_winner():\n    team = {}\n    for x in range(12):\n        x = input().split(\" \")\n        hometeam = x[0]\n        hometeamgoal = int(x[1])\n        awayteamgoal = int(x[-2])\n        awayteam = x[-1]\n\n        if hometeam not in team:\n            team[hometeam] = [0,0]\n        if awayteam not in team:\n            team[awayteam] = [0,0]\n        if hometeamgoal > awayteamgoal:\n            team[hometeam][0] +=3\n        elif awayteamgoal > hometeamgoal:\n            team[awayteam][0] += 3\n        else:\n            team[hometeam][0] += 1\n            team[awayteam][0] += 1\n        team[hometeam][1] += (hometeamgoal - awayteamgoal)\n        team[awayteam][1] += (awayteamgoal - hometeamgoal)\n\n\n    sorted_team = sorted(team.values(),reverse = True)\n    for key, values in team.items():\n        if values == sorted_team[0]:\n            firstteam = key\n        if values == sorted_team[1]:\n            secondteam = key\n    print(firstteam,secondteam)\n\nmain()\n"
                }
            ]
        },
        "FORGETPW": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "4\n2\n5 3\n3 1\n5\n0\n01800.00\n0\n0.00100\n3\nx 0\nd 3\n# .\n0xd21#dd098x",
                    "output": "3\n1800\n.001\n321.33098",
                    "explanation": ""
                }
            ],
            "problem_statement": "Read problems statements in Mandarin Chinese  and Russian.\nChef changed the password of his laptop a few days ago, but he can't remember it today. Luckily, he wrote the encrypted password on a piece of paper, along with the rules for decryption.\nThe encrypted password is a string S consists of ASCII printable characters except space (ASCII 33 - 126, in decimal notation, the same below). Read here for more details: ASCII printable characters.\nEach rule contains a pair of characters ci, pi, denoting that every character ci appears in the encrypted password should be replaced with pi. Notice that it is not allowed to do multiple replacements on a single position, see example case 1 for clarification.\nAfter all the character replacements, the string is guaranteed to be a positive decimal number. The shortest notation of this number is the real password. To get the shortest notation, we should delete all the unnecessary leading and trailing zeros. If the number contains only non-zero fractional part, the integral part should be omitted (the shortest notation of \"0.5\" is \".5\"). If the number contains zero fractional part, the decimal point should be omitted as well (the shortest notation of \"5.00\" is \"5\").\nPlease help Chef to find the real password.\n \nInput\nThe first line of the input contains an interger T denoting the number of test cases.\nThe description of T test cases follows.\nThe first line of each test case contains a single interger N, denoting the number of rules.\nEach of the next N lines contains two space-separated characters ci and pi,\ndenoting a rule.\nThe next line contains a string S, denoting the encrypted password.\n \nOutput\nFor each test case, output a single line containing the real password.\n \nConstraints\n1 \u2264 T \u2264 1000\n0 \u2264 N \u2264 94\nAll characters in S and ci may be any ASCII printable character except space. (ASCII 33 - 126)\nAll ci in a single test case are distinct.\npi is a digit (\"0\" - \"9\") or a decimal point \".\" (ASCII 46).\nThe total length of S in a single input file will not exceed 106.",
            "input_format": "",
            "output_format": "",
            "problem_name": "Forgot Password",
            "user_tags": [
                "Implementation"
            ],
            "computed_tags": [
                "Algorithms"
            ],
            "problem_code_id": "FORGETPW",
            "difficulty_level": "1686",
            "ai_solutions": [
                "T = int(input())\nfor _ in range(T):\n    N = int(input())\n    rules = {}\n    for _ in range(N):\n        c, p = input().split()\n        rules[c] = p\n    S = input()\n    password = \"\"\n    for char in S:\n        if char in rules:\n            password += rules[char]\n        else:\n            password += char\n    password = password.lstrip('0')\n    if '.' in password:\n        password = password.rstrip('0').rstrip('.')\n    print(password)"
            ],
            "human_solutions": [
                {
                    "id": 95305231,
                    "submission_date": 1682587900,
                    "language": "PYTH 3",
                    "username": "gaurav_1423",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.52",
                    "memory": "12.1M",
                    "solution": 95305231,
                    "code": "case=int(input())\r\nfor _ in range(case):\r\n    n = int(input())\r\n    replacement = {}\r\n    for i in range(n):\r\n        v,r = input().split(\" \")\r\n        replacement[v] = r\r\n    s = input()\r\n    news = \"\"\r\n    point = False\r\n    for i in range(len(s)):\r\n        if s[i] in replacement:\r\n            if replacement[s[i]]=='.':\r\n                point = True\r\n            news+=replacement[s[i]]\r\n        else:\r\n            if s[i]=='.':\r\n                point = True\r\n            news+=s[i]\r\n    \r\n    i = 0\r\n    while i<len(news):\r\n        if news[i]!='0':\r\n            break\r\n        i+=1\r\n    news = news[i:]\r\n    if point:\r\n        j = len(news)-1\r\n        while j>=0:\r\n            if news[j]!='0':\r\n                break\r\n            j-=1\r\n        if j>=0 and news[j]=='.':\r\n            j-=1\r\n        news = news[:j+1]\r\n    if len(news)==0:\r\n        print(0)\r\n    else:\r\n        print(news)\r\n        "
                },
                {
                    "id": 80116584,
                    "submission_date": 1668602277,
                    "language": "PYTH 3",
                    "username": "shreejab22",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.27",
                    "memory": "18.2M",
                    "solution": 80116584,
                    "code": "T = int(input())\r\nfor _ in range(T):\r\n    N = int(input())\r\n    data = dict() \r\n    for __ in  range(N):\r\n        ci, pi = input().split() \r\n        data[ci] = pi\r\n    S = list(input())\r\n    for i in range(len(S)):\r\n        if S[i] in data.keys():\r\n            S[i] = data[S[i]] \r\n    S = \"\".join(S)\r\n    if '.' in S:\r\n        S = S.strip('0').rstrip('.')\r\n    else:\r\n        S = S.lstrip('0')\r\n    print(S or '0')"
                }
            ]
        },
        "CENS20G": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "1\nRLUDRLUD\n1 2\n2\n2 3\n1 -2",
                    "output": "YES 2\nNO",
                    "explanation": "Given String is \"RLUDRLUD\", $(x_1,y_1)$ is $(1,2)$. We can move from $(1,2)$ to $(2,3)$ in just two operations if we choose subsequence as \"RU\" or \"UR\".\nSuppose we choose \"RU\" as a subsequence. 'R' means moving from $(1,2)$ to $(2,2)$. 'U' means moving from $(2,2)$ to $(2,3)$.\nIn the second query, we can't move from (1,2) to (1,-2) using operations of the given string."
                }
            ],
            "problem_statement": "Jonas asked Martha to stand at point $(x_1,y_1)$ on an infinite cartesian plane. He gave her a string $S$ which consists of operations in the form of characters 'R', 'L', 'U', and \n'D'.\nEach character of the string corresponds to the following movements: \n\n'R' means moving right by $1$ unit i.e, $(x,y)$ to $(x+1,y)$.\n'L' means moving left by $1$ unit i.e, $(x,y)$ to $(x-1,y)$.\n'U' means moving up by $1$ unit i.e, $(x,y)$ to $(x,y+1)$.\n'D' means moving down by $1$ unit i.e, $(x,y)$ to $(x,y-1)$.\n\nNow, Jonas asks Martha $Q$ queries. In each query, coordinates are given of form $(x_2,y_2)$. Martha needs to tell if it is possible to move from $(x_1,y_1)$ to $(x_2,y_2)$ by choosing a subsequence of given string $S$ and performing the operations in sequential order.Starting point $(x_1,y_1)$ remains same for all queries.\nIf it is possible, print \"YES\" and the length of the smallest possible subsequence of string, else print \"NO\".\nRecall that string $a$ is a subsequence of a string $b$ if $a$ can be obtained from $b$ by deletion of several (possibly zero or all) characters. For example, for the string $a$=\"codechef\", the following strings are subsequences: \"code\", \"ee\", \"odchef\", \"df\", \"\", and others, but the following are not subsequences: \"ced\", \"eehc\", \"cofe\".\nNote: Use of Fast IO is recommended.\nInput:\n\nFirst line will contain $T$, number of test cases. Then test cases follow.\nFor each test case, first line will contain string $S$, string of operations.\nSecond line will contain coordinates $x_1$ and $y_1$.\nThird line will contain $Q$, number of queries.\n$Q$ lines follow. Each line will contain coordinates $x_2$ and $y_2$.\n\nOutput:\nFor each query if subsequence exists then print \"YES\" (without quotes) and length of smallest possible subsequence separated by a space in new line, else print \"NO\" (without quotes) in new line.\nConstraints\n\n$1 \\leq T \\leq 10$\n$1 \\leq |S| \\leq 10^6$\n$-10^8 \\leq x_1,x_2,y_1,y_2 \\leq 10^8$\n$1 \\leq Q \\leq 10^5$",
            "input_format": "",
            "output_format": "",
            "problem_name": "Help Martha",
            "user_tags": [
                "String",
                "Basic Maths",
                "Cartesian Coordinate System",
                "Subsequence"
            ],
            "computed_tags": [
                "Data Structures",
                "Arrays",
                "Mathematics",
                "Groupings"
            ],
            "problem_code_id": "CENS20G",
            "difficulty_level": "1676",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 1025047282,
                    "submission_date": 1696952489,
                    "language": "PYTH 3",
                    "username": "hanss",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "1.82",
                    "memory": "22.9M",
                    "solution": 1025047282,
                    "code": "import io, os, sys\r\nfrom collections import Counter\r\n\r\ndef fast_io(): \r\n    \r\n    # Reinitialize the Input function \r\n    # to take input from the Byte Like  \r\n    # objects \r\n    input = io.BytesIO(os.read(0, os.fstat(0).st_size)).readline \r\n  \r\n    # Taking input as string  \r\n    s = input().decode() \r\n    return s \r\n    \r\ninput = io.BytesIO(os.read(0, os.fstat(0).st_size)).readline \r\ns = input().decode()\r\nt = int(s)\r\n#print(t)\r\nfor _ in range(t):\r\n    s = input().decode()\r\n    c = Counter(s)\r\n    #print(s)\r\n    #print(input().decode())\r\n    x1, y1 = map(int, input().decode().split())\r\n    #print(x1, y1)\r\n    q = int(input().decode())\r\n    #print(q)\r\n    for i in range(q):\r\n        (x2, y2) = map(int, input().decode().split())\r\n        if (x1, y1) == (x2, y2):\r\n            sys.stdout.write(\"YES 0\\n\")\r\n        else:\r\n            dist_x = x1 - x2\r\n            req_x = abs(dist_x)\r\n            dir_x = \"R\" if dist_x < 0 else \"L\"\r\n            dist_y = y1 - y2\r\n            req_y = abs(dist_y)\r\n            dir_y = \"U\" if dist_y < 0 else \"D\"\r\n            \r\n            count_dir_x = c[dir_x]\r\n            count_dir_y = c[dir_y]\r\n            \"\"\"\r\n            count_dir_y = 0\r\n            for d in s:\r\n                if d == dir_x:\r\n                    if count_dir_x < req_x:\r\n                        count_dir_x += 1\r\n                elif d == dir_y:\r\n                    if count_dir_y < req_y:\r\n                        count_dir_y += 1\r\n                if count_dir_x >= req_x and count_dir_y >= req_y:\r\n                    break\r\n            \"\"\"\r\n            if count_dir_x >= req_x and count_dir_y >= req_y:\r\n                sys.stdout.write(\"YES \"+ str(req_x + req_y) + \"\\n\")\r\n            else:\r\n                sys.stdout.write(\"NO\\n\")"
                },
                {
                    "id": 89287610,
                    "submission_date": 1676350063,
                    "language": "PYTH 3",
                    "username": "rs5228127",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "1.30",
                    "memory": "11.9M",
                    "solution": 89287610,
                    "code": "\r\nfrom collections import defaultdict\r\nimport sys\r\nfor q in range(int(sys.stdin.readline())):\r\n    s=sys.stdin.readline()\r\n    x1, y1=map(int,sys.stdin.readline().split())\r\n    Q=int(sys.stdin.readline())\r\n    dict=defaultdict(int)\r\n    for i in s:\r\n        dict[i]+=1\r\n    for _ in range(Q):\r\n        x2, y2=map(int,sys.stdin.readline().split())\r\n        c=0\r\n        f=0\r\n        if x2-x1>=0:\r\n            if dict[\"R\"]>=x2-x1:\r\n                c+=x2-x1\r\n            else:\r\n                f=1\r\n        else:\r\n            if dict[\"L\"]>=x1-x2:\r\n                c+=x1-x2\r\n            else:\r\n                f=1\r\n        if y2-y1>0:\r\n            if dict[\"U\"]>=y2-y1:\r\n                c+=y2-y1\r\n            else:\r\n                f=1\r\n        else:\r\n            if dict[\"D\"]>=y1-y2:\r\n                c+=y1-y2\r\n            else:\r\n                f=1\r\n        if f==1:\r\n            sys.stdout.write(\"NO\")\r\n        else:\r\n            sys.stdout.write(\"YES\"+\" \"+str(c))\r\n        sys.stdout.write(\"\\n\")"
                }
            ]
        },
        "CHEFSEG": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "4\n10 1\n10 2\n10 3\n1000000000 1234567",
                    "output": "5.0000\n2.5000\n7.5000\n177375316.6198730500000000",
                    "explanation": "You can see the points coordinates for the third sample from first two samples."
                }
            ],
            "problem_statement": "Read problems statements in Mandarin Chinese  and Russian.\n\u00a0\nChef loves to play games. Now he plays very interesting game called \"Segment\". At the beginning Chef has segment [0, X] and no points on it. On each step Chef chooses the subsegment of maximal length possible such as it contains no points on it. If there are more than one such subsegment Chef chooses the one with the minimal left coordinate. Once Chef chosed the subsegment he put the point in it's middle and the step is over.\nHelp Chef to define the coordinate of the point he will put on the K-th step. \n\u00a0\nInput\nThe first line contains integer T - number of test cases. \nEach of next T lines contains two integers X and K. \n\n\u00a0\nOutput\nFor each test case in a single line print single double number - the coordinate of the K-th point Chef will put. Answer will be considered as correct if absolute difference between the answer and correct answer is less or equal 10^(-6). \n\n\u00a0\nConstraints\n1 \u2264 T \u2264 10^5\n1 \u2264 X \u2264 10^9\n1 \u2264 K \u2264 10^12\n\nSubtasks\nSubtask 1: T \u2264 10; X, K \u2264 20. Points: 15 \nSubtask 2: T \u2264 10; X \u2264 10^6, K \u2264 2*10^5. Points: 25\nSubtask 3: T \u2264 10^5; X \u2264 10^9, K \u2264 10^12. Points: 60",
            "input_format": "",
            "output_format": "",
            "problem_name": "Chef and Segment Game",
            "user_tags": [
                "Arithmetic",
                "Fractions"
            ],
            "computed_tags": [
                "Mathematics",
                "Basic Maths"
            ],
            "problem_code_id": "CHEFSEG",
            "difficulty_level": "1632",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 65510205,
                    "submission_date": 1653476933,
                    "language": "PYTH 3",
                    "username": "zaurez",
                    "user_rating_star": 4,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.75",
                    "memory": "9.4M",
                    "solution": 65510205,
                    "code": "import math\r\nT = int(input())\r\nfor _ in range(T):\r\n    x,k = map(int,input().split())\r\n    y = int(math.log2(k))\r\n    z = 2**y\r\n    m = k - z\r\n    print((2*m+1)*(x)/(2**(y+1)))\r\n    "
                },
                {
                    "id": 61975417,
                    "submission_date": 1649060839,
                    "language": "PYTH 3",
                    "username": "ayush2606",
                    "user_rating_star": 3,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "1.09",
                    "memory": "9.3M",
                    "solution": 61975417,
                    "code": "t = int(input())\n\nfor i in range(t):\n    x, k = map(int, input().split())\n    x1, y1 = 2, 1 \n    while x1 <= k:\n        x1, y1 = x1 * 2, x1 \n    print(x / x1 * (1 + 2 * (k - y1)))"
                }
            ]
        },
        "RESERVOI": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "7\n2 2\nWW\nBB\n2 3\nBWB\nBBB\n2 3\nAWA\nBBB\n2 3\nBAA\nABB\n3 5\nBWAAB\nBWBWB\nBBBBB\n3 3\nBBB\nBAB\nBBB\n3 3\nBBB\nBWB\nBBB",
                    "output": "no\nyes\nno\nno\nno\nno\nno",
                    "explanation": "All the examples are explained in the problem statement itself."
                }
            ],
            "problem_statement": "Read problems statements in Mandarin Chinese, Russian and Vietnamese as well.\nYou are given a structure of a water reservoir. The reservoir is a 2 dimensional structure of height N and width M. It can be thought of divided into M vertical sections, each of equal width. The reservoir height is of N blocks. Each block of the reservoir can contain either water, brick or air. We will denote the water by character 'W', brick by 'B' and air by 'A'.\n\nYou are given representation of reservoir at a fixed instant. Can you tell whether the current state of reservoir is stable, i.e. it will remain on the same state forever or not?\n\n\nFor example, let the reservoir be \n\n\n\nWW\nBB\n\nThis is not stable, as the water in the block (1, 1) can overflow to the left, similarly water in block (1, 2) can overflow to the right too.\n\n\n\nBWB\nBBB\n\nThis is stable, as the water at block (1, 2) is entrapped between bricks from all sides.\n\n\n\nAWA\nBBB\n\nThis is not stable, as the water at block (1, 2) might overflow to the left or the right.\n\n\n\nBAA\nABB\n\nThis is not stable, as there is a brick at block (1, 1) and air at (2, 1). The brick will go down and air will come up, so its not stable too.\n\n\n\nBWAAB\nBWBWB\nBBBBB\n\nThis is not stable too, as there is water at block (1, 2) and air at (1, 3), and (1, 4). The water will move towards those blocks.\n\n\n\nBBB\nBAB\nBBB\n\nSo brick at (1, 2) is loose and without support, and hence will fill the space beneath it, which is right now filled with air. That is, the brick will go down and replace the air\n\n\n\nBBB\nBWB\nBBB\n\nThis is also unstable due to the same reason as the above.\nNow, you are given description of reservoir. Can you tell whether the current state of reservoir is stable or not?\nInput\nThe first line of input contains an integer T denoting number of test cases. Description of T test cases follows.\nThe first line of each test case, contains two integers N and M denoting the height and width of reservoir, respectively.\nEach of the next N lines a string of length M. The j-th character in the i-th of the line denotes content at block (i, j). The characters can be 'B' denoting brick, 'A' denoting air, 'W' denoting water.\nOutput\nFor each test case, output a line containing \"yes\" or \"no\" (without quotes) corresponding to the situation whether the reservoir is stable or not?\nConstraints\n1 \u2264 T \u2264 50\n1 \u2264 N, M \u2264 1000\n\n\nSubtask #1: (15 points)\n\nThere is no water in the reservoir.\n\n\nSubtask #2: (25 points)\n\n1 \u2264 N, M \u2264 100\n\nSubtask #3: (60 points)\noriginal constraints",
            "input_format": "",
            "output_format": "",
            "problem_name": "Reservior",
            "user_tags": [
                "Matrices",
                "Implementation"
            ],
            "computed_tags": [
                "Mathematics",
                "Algorithms"
            ],
            "problem_code_id": "RESERVOI",
            "difficulty_level": "1677",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 78996223,
                    "submission_date": 1667433230,
                    "language": "PYTH 3",
                    "username": "davenh99",
                    "user_rating_star": 3,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "1.44",
                    "memory": "9.7M",
                    "solution": 78996223,
                    "code": "# by David Ham\r\nfrom sys import stdin, stdout\r\n# Faster I/O ======================\r\npr = lambda i : stdout.write(f'{i}\\n')\r\ninp = lambda : stdin.readline().strip()\r\nim = lambda : map(int, stdin.readline().strip().split()) # int map\r\n# =================================\r\ndef main():\r\n    t = int(inp())\r\n    for _ in range(t):\r\n        n, m = im()\r\n        prevrow = ''\r\n        s = 'yes'\r\n\r\n        for i in range(n):\r\n            row = inp()\r\n            if s == 'yes':\r\n                if row[0] == 'W' or row[-1] == 'W' or 'WA' in row or 'AW' in row:\r\n                    s = 'no'\r\n                    continue\r\n\r\n                if prevrow:\r\n                    for pval, nval in zip(prevrow, row):\r\n                        if (pval == 'B' and nval == 'A') or (pval == 'B' and nval == 'W') or (pval == 'W' and nval == 'A'):\r\n                            s = 'no'\r\n                            break\r\n                \r\n                prevrow = row\r\n\r\n        pr(s)\r\n# =================================\r\nif __name__ == '__main__':\r\n    main()\r\n"
                },
                {
                    "id": 67453642,
                    "submission_date": 1656000062,
                    "language": "PYTH 3",
                    "username": "likhitha207",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "3.29",
                    "memory": "11.1M",
                    "solution": 67453642,
                    "code": "def solution():\r\n    h, w = map(int, input().split())\r\n\r\n    R = [list('A'*(w+2)) for i in range(h+2)]\r\n    R[-1] = list('B'*(w+2))\r\n\r\n    for r in range(1, h+1):\r\n        row = input();\r\n        for c in range(1, w+1):\r\n            R[r][c] = row[c-1]\r\n    \r\n    for r in range(1, h+1):\r\n        for c in range(1, w+1):\r\n            if R[r][c] == 'W':\r\n                if R[r][c-1] == 'A' or R[r][c+1] == 'A' or R[r+1][c] == 'A':\r\n                    print(\"no\")\r\n                    return\r\n            if R[r][c] == 'B':\r\n                if R[r+1][c] == 'A' or R[r+1][c] == 'W':\r\n                    print(\"no\")\r\n                    return\r\n    print(\"yes\")\r\n\r\nT = int(input())\r\nwhile(T > 0):\r\n    T = T - 1\r\n    solution()"
                }
            ]
        },
        "WGHTNUM": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "1\n2 3",
                    "output": "6",
                    "explanation": "Example case 1: Remember that the digits are arranged from most significant to least significant as $D_1, D_2$. The two-digit integers with weight $3$ are $14, 25, 36, 47, 58, 69$. For example, the weight of $14$ is $D_2-D_1 = 4-1 = 3$. We can see that there are no other possible numbers."
                }
            ],
            "problem_statement": "Read problems statements in Mandarin chinese, Russian and Vietnamese as well.\nVK gave a problem to Chef, but Chef is too lazy, so he asked you to solve the problem for him. The statement of the problem follows.\nConsider an integer with $N$ digits (in decimal notation, without leading zeroes) $D_1, D_2, D_3, \\dots, D_N$. Here, $D_1$ is the most significant digit and $D_N$ the least significant. The weight of this integer is defined as $$\\sum_{i=2}^N (D_i - D_{i-1})\\,.$$\nYou are given integers $N$ and $W$. Find the number of positive integers with $N$ digits (without leading zeroes) and weight equal to $W$. Compute this number modulo $10^9+7$.\nInput\n\nThe first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\nThe first and only line of each test case contains two space-separated integers $N$ and $W$ denoting the number of digits and the required weight.\n\nOutput\nFor each test case, print a single line containing one integer \u2014 the number of $N$-digit positive integers with weight $W$, modulo $10^9+7$.\nConstraints\n\n$1 \\le T \\le 10^5$\n$2 \\le N \\le 10^{18}$\n$|W| \\le 300$\n\nSubtasks\nSubtask #1 (20 points):\n- $1 \\le T \\le 10^3$\n- $2 \\le N \\le 10^3$\nSubtask #2 (80 points): original constraints",
            "input_format": "",
            "output_format": "",
            "problem_name": "Weight of Numbers",
            "user_tags": [
                "Modular Exponentiation"
            ],
            "computed_tags": [
                "Mathematics",
                "Modular Arithmetic"
            ],
            "problem_code_id": "WGHTNUM",
            "difficulty_level": "1682",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 33396781,
                    "submission_date": 1590667340,
                    "language": "PYTH 3",
                    "username": "mukul_79",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "2.08",
                    "memory": "17.6M",
                    "solution": 33396781,
                    "code": "\r\nm=int(pow(10,9)+7)\r\nfor i in range(int(input())):\r\n    n,w=map(int,input().split())\r\n    s=0\r\n    for i in range(1,10):\r\n        for j in range(10):\r\n            if(j-i==w):\r\n                s+=1\r\n    print((s*pow(10,n-2,m))%m)\r\n"
                },
                {
                    "id": 31945978,
                    "submission_date": 1587050433,
                    "language": "PYTH 3",
                    "username": "munch_01",
                    "user_rating_star": 5,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "2.13",
                    "memory": "17.6M",
                    "solution": 31945978,
                    "code": "from math import ceil\r\nm=int(pow(10,9)+7)\r\nt=int(input())\r\nwhile(t):\r\n    t-=1\r\n    n,w=map(int,input().split())\r\n    ss=0\r\n    for i in range(1,10):\r\n        for j in range(10):\r\n            if(j-i==w):\r\n                ss+=1\r\n    print((ss*pow(10,n-2,m))%m)\r\n"
                }
            ]
        },
        "CHPLGNS": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "1\n3\n6\n-2 2 -1 1 2 2 2 -1 1 -2 -2 -2\n3\n-1 -1 1 -1 1 1\n4\n3 3 -3 3 -3 -3 3 -3",
                    "output": "1 0 2",
                    "explanation": "In the picture the first polygon is marked in green, second - in red and third in blue color."
                }
            ],
            "problem_statement": "Read problems statements in Mandarin Chinese  and Russian.\nChef has N simple polygons (non self intersecting polygons) in which no two of them intersect with each other. For any two polygons P1, P2, either P1 lies inside P2 or vice versa. \nChef wants you to count number of polygons lying strictly inside each of the polygons.\nInput\nFirst line of the input contains an integer T denoting the number of test cases. First line of each test case contains a single integer N denoting the number of polygons.\nThe description of N polygons is as follows:\n\nThe first line contains an integer Mi denoting the number of vertices in the ith polygon\nThe second line contains Mi pairs of integers Xi, j, Yi, j representing coordinates of vertices of ith  polygon in clockwise or counterclockwise order\n\nOutput\nFor each test case, output a single line containing N space-separated integers such that ith of them represents number of polygons lying inside the ith polygon.\nConstraints\n\n1 \u2264 T \u2264 105\n2 \u2264 N \u2264 105\n3 \u2264 Mi \u2264 105\nThe sum of Mi (or total amount of given points) over all test cases in one test file does not exceed 2*105\nAbsolute value of each coordinate doesn't exceed 109\n\n\nSubtask 1: (10 points)\n\nT \u2264 6\n2 \u2264 N \u2264 10\n3 \u2264 Mi \u2264 10\nAbsolute value of each coordinate doesn't exceed 30\n\n \nSubtask 2: (20 points)\n\nAll polygons are  convex polygons .\n\n \nSubtask 3: (70 points)\n\nOriginal constraints",
            "input_format": "",
            "output_format": "",
            "problem_name": "Chef and Polygons",
            "user_tags": [
                "antoniuk1",
                "cakewalk",
                "geometry",
                "june15",
                "sorting"
            ],
            "computed_tags": [],
            "problem_code_id": "CHPLGNS",
            "difficulty_level": "1691",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 89290744,
                    "submission_date": 1676352594,
                    "language": "PYTH 3",
                    "username": "rs5228127",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.23",
                    "memory": "31.2M",
                    "solution": 89290744,
                    "code": "for _ in range(int(input())):\r\n    n=int(input())\r\n    arr=[]\r\n    ans=[0]*n \r\n    for i in range(n):\r\n        m=int(input())\r\n        po=[int(i) for i in input().split()][::2]\r\n        arr.append([i,max(po)])\r\n    arr.sort(key=lambda x:x[1])\r\n    for x in range(n):\r\n        ans[arr[x][0]]=x \r\n    print(*ans)"
                },
                {
                    "id": 66260608,
                    "submission_date": 1654605452,
                    "language": "PYTH 3",
                    "username": "vjudge1",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.32",
                    "memory": "37.9M",
                    "solution": 66260608,
                    "code": "\ndef run():\n    T = int(input())\n    for _ in range(T):\n        N = int(input())\n        polygons = []\n        for i in range(N):\n            M = int(input())\n            polygon = list(map(int, input().split()))\n            polygons.append(polygon)\n        print(f(polygons))\n        \ndef f(polygons):\n    highest = []\n    for i, polygon in enumerate(polygons):\n        hi = float('-inf')\n        for x in range(0, len(polygon), 2):\n            px, py = polygon[x], polygon[x+1]\n            hi = max(hi, py)\n        highest.append((i, hi))\n    \n    highest = sorted(highest, key=lambda x: x[1])\n    ans = [0] * len(polygons)\n    for n, (i, hi) in enumerate(highest):\n        ans[i] = str(n)\n    return \" \".join(ans)\n        \nif __name__ == \"__main__\":\n    \n    run()\n\n"
                }
            ]
        },
        "ADMAG": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "2\n1\n4",
                    "output": "1\n3",
                    "explanation": "In example 1, only 1 card containing {1} will work.\nIn example 2, make 3 cards containing {1,4}, {2} and {3,4}.\n\nAssume you thought of 1, then you will select the 1st card {1,4}, then she will correctly figure out the integer you thought being 1.\nAssume you thought of 2, then you will select the 2nd card {2}, then she will correctly figure out the integer you thought being 2.\nAssume you thought of 3, then you will select the 3rd card {3,4}, then she will correctly figure out the integer you thought being 3.\nAssume you thought of 4, then you will select 1st card {1,4} and 3rd card {3,4}, then she will calculate the sum of the first integers of the two card 1 + 3 = 4, and she will answer it.\n\nThus her trick will work well in every case. And we can check it easily that the cards are sorted in lexicographical order and two consecutive cards have no common integers."
                }
            ],
            "problem_statement": "Read problems statements in Mandarin Chinese  and Russian.\nAditi recently discovered a new magic trick. First, she gives you an integer N and asks you to think an integer between 1 and N. Then she gives you a bundle of cards each having a sorted list (in ascending order) of some distinct integers written on it. The integers in all the lists are between 1 and N. Note that the same integer may appear in more than one card. Now, she shows you these cards one by one and asks whether the number you thought is written on the card or not. After that, she immediately tells you the integer you had thought of.\nSeeing you thoroughly puzzled, she explains that she can apply the trick so fast because she is just adding the first integer written on the cards that contain the integer you had thought of, and then gives the sum as the answer. She calls a bundle interesting if when the bundle is lexicographically sorted, no two consecutive cards have any number in common. Now she challenges you to find out the minimum number of cards she will need for making an interesting bundle such that the magic trick will work every time.\nInput\n\nThe first line of the input contains an integer T denoting the number of test cases.\nEach test case contains a line with a single integer N.\n\nOutput\nFor each test case, output a line containing a single integer denoting the minimum number of cards required.\nConstraints\n\n1 \u2264 T \u2264 105\n1 \u2264 N \u2264 1018\n\nSub tasks\n\nSubtask #1: 1 \u2264 T \u2264 10, 1 \u2264 N \u2264 10 (5 points)\nSubtask #2: 1 \u2264 T \u2264 100, 1 \u2264 N \u2264 1000 (10 points)\nSubtask #3: Original Constraints (85 points)",
            "input_format": "",
            "output_format": "",
            "problem_name": "Aditi and Magic Trick",
            "user_tags": [
                "zeckendorf Theorem",
                "Fibonacci Series"
            ],
            "computed_tags": [
                "Mathematics",
                "Number Theory",
                "Sequences and Progression"
            ],
            "problem_code_id": "ADMAG",
            "difficulty_level": "1658",
            "ai_solutions": [
                "import math\ndef min_cards(T, test_cases):\n    for i in range(T):\n        N = test_cases[i]\n        ans = 0\n        while N > 0:\n            N = N // 2\n            ans += 1\n        print(ans)\n\nT = int(input())\ntest_cases = []\nfor _ in range(T):\n    N = int(input())\n    test_cases.append(N)\nmin_cards(T, test_cases)",
                "import math\ndef min_cards(T, test_cases):\n    for i in range(T):\n        N = test_cases[i]\n        ans = math.floor(math.log2(N)) + 1\n        print(ans)\n\nT = int(input())\ntest_cases = []\nfor _ in range(T):\n    N = int(input())\n    test_cases.append(N)\nmin_cards(T, test_cases)"
            ],
            "human_solutions": [
                {
                    "id": 1021557214,
                    "submission_date": 1695136157,
                    "language": "PYTH 3",
                    "username": "hanss",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.83",
                    "memory": "9.5M",
                    "solution": 1021557214,
                    "code": "def num_decks(n):\r\n    if n <= 2:\r\n        return n    \r\n    \r\n    fib1, fib2 = 1, 1\r\n    i = 1\r\n    while fib2 < n: \r\n        fib1, fib2 = fib2, fib2 + fib1\r\n        i += 1\r\n    return i - (fib2 != n)\r\n\r\n\r\nfor _ in range(int(input())):\r\n    n = int(input())\r\n    \r\n    print(num_decks(n))\r\n    "
                },
                {
                    "id": 79583943,
                    "submission_date": 1668022148,
                    "language": "PYTH 3",
                    "username": "ratnesh_181998",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "1.84",
                    "memory": "9.6M",
                    "solution": 79583943,
                    "code": "\n\nfib=[1,1]\nfor i in range(100):\n    fib.append(fib[-1]+fib[-2])\nfrom bisect import bisect_left as bl\nfor _ in range(int(input())):\n    n=int(input())\n    ind=bl(fib,n)\n    if n==1:\n        print(1)\n    else:\n        i=0 \n        while i<100 and fib[i]<=n:\n            ans=fib[i]\n            i+=1 \n        print(i-1)"
                }
            ]
        },
        "CHEARMY": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "2\r\n2\r\n5",
                    "output": "2\r\n8",
                    "explanation": "Example case 1.\n2 is the 2nd magical number, since it satisfies the property of the magical number. The first magical number will be of course 0."
                }
            ],
            "problem_statement": "Read problems statements in Mandarin Chinese, Russian and Vietnamese as well.\n\nThe Head Chef is receiving a lot of orders for cooking the best of the problems lately. For this, he organized an hiring event to hire some talented Chefs. He gave the following problem to test the skills of the participating Chefs. Can you solve this problem and be eligible for getting hired by Head Chef.\n\n\nA non-negative number n is said to be magical if it satisfies the following property. Let S denote the multi-set of numbers corresponding to the non-empty subsequences of the digits of the number n in decimal representation. Please note that the numbers in the set S can have leading zeros. Let us take an element s of the multi-set S, prod(s) denotes the product of all the digits of number s in decimal representation. \nThe number n will be called magical if sum of prod(s) for all elements s in S, is even. \n\nFor example, consider a number 246, its all possible non-empty subsequence will be S = {2, 4, 6, 24, 46, 26, 246}. Products of digits of these subsequences will be {prod(2) = 2, prod(4) = 4, prod(6) = 6, prod(24) = 8, prod(46) = 24, prod(26) = 12, prod(246) = 48, i.e. {2, 4, 6, 8, 24, 12, 48}. Sum of all of these is 104, which is even. Hence 246 is a magical number.\n\nPlease note that multi-set S can contain repeated elements, e.g. if number is 55, then S = {5, 5, 55}. Products of digits of these subsequences will be {prod(5) = 5, prod(5) = 5, prod(55) = 25}, i.e. {5, 5, 25}. Sum of all of these is 35 which is odd. Hence 55 is not a \n magical number.\n\nConsider a number 204, then S = {2, 0, 4, 20, 04, 24, 204}. Products of digits of these subsequences will be {2, 0, 4, 0, 0, 8, 0}. Sum of all these elements will be 14 which is even. So 204 is a magical number.\n\n\nThe task was to simply find the Kth magical number.\n\nInput\n\nFirst line of the input contains an integer T denoting the number of test cases.\nEach of the next T lines contains a single integer K.\n\nOutput\nFor each test case, print a single integer corresponding to the Kth magical number.\nConstraints\n\n1 \u2264 T \u2264 105\n1 \u2264 K \u2264 1012.\n\nSubtasks\n\nSubtask #1 : (20 points)\n\n1 \u2264 T \u2264 100\n1 \u2264 K \u2264 104.\n\n\nSubtask 2 : (80 points) \nOriginal Constraints",
            "input_format": "",
            "output_format": "",
            "problem_name": "Chef And The Hiring Event",
            "user_tags": [
                "Number System",
                "Basic Maths",
                "ad-hoc",
                "Observation"
            ],
            "computed_tags": [
                "Mathematics",
                "Algorithms",
                "Constructive"
            ],
            "problem_code_id": "CHEARMY",
            "difficulty_level": "1613",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 67435916,
                    "submission_date": 1655975483,
                    "language": "PYTH 3",
                    "username": "likhitha207",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.95",
                    "memory": "9.3M",
                    "solution": 67435916,
                    "code": "t = int(input())\r\n \r\nfor _ in range(t):\r\n\t\r\n\t# n, k  = list(map(int, input().split()))\r\n\t# lst = list(map(int, input().split()))\r\n\tn = int(input())\r\n\r\n\r\n\tn = n - 1\r\n\r\n\tmul = 1 \r\n\tres = 0\r\n\r\n\twhile n:\r\n\t\tres += 2*(n%5)*mul\r\n\t\tn = n//5\r\n\t\tmul *= 10\r\n\tprint(res)"
                },
                {
                    "id": 63942726,
                    "submission_date": 1651319384,
                    "language": "PYTH 3",
                    "username": "jasraj176",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "1.24",
                    "memory": "9.3M",
                    "solution": 63942726,
                    "code": "def MagicalNum(k):\n    if 1 <= k <= 5:\n        return 2*(k-1) \n    elif k == 0:\n        return 0\n    elif k % 5 == 0:\n        v1 = k // 5\n        return 10*MagicalNum(v1) + 8\n    else:\n        v1 = k//5\n        v2 = k % 5\n        return 10*MagicalNum(v1 + 1) + MagicalNum(v2)     \nT = int(input())\nfor _ in range(T):\n    k = int(input())\n    print(MagicalNum(k))"
                }
            ]
        },
        "PIANO1": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "2 \r\nTTTT\r\n1\r\nTTSTTTS\r\n3",
                    "output": "4\r\n36",
                    "explanation": "Example case 1. In the first case there is only one octave and Chef can play scale (not in cycle each time) starting with notes C, C#, D, D# - four together."
                }
            ],
            "problem_statement": "Read problems statements in Mandarin Chinese  and Russian.\nRecently, Chef got obsessed with piano. He is a just a rookie in this stuff and can not move his fingers from one key to other fast enough. He discovered that the best way to train finger speed is to play scales.\n\nThere are different kinds of scales which are divided on the basis of their interval patterns. For instance, major scale is defined by pattern T-T-S-T-T-T-S, where \u2018T\u2019 stands for a whole tone whereas \u2018S\u2019 stands for a semitone. Two semitones make one tone. To understand how they are being played, please refer to the below image of piano\u2019s octave \u2013 two consecutive keys differ by one semitone.\n\nIf we start playing from first key (note C), then we\u2019ll play all white keys in a row (notes C-D-E-F-G-A-B-C \u2013 as you can see C and D differ for a tone as in pattern, and E and F differ for a semitone).\n\nThis pattern could be played some number of times (in cycle).\n\n\n\nEach time Chef takes some type of a scale and plays using some number of octaves. Sometimes Chef can make up some scales, so please don\u2019t blame him if you find some scale that does not exist in real world.\n\nFormally, you have a set of 12 keys (i.e. one octave) and you have N such sets in a row. So in total, you have 12*N keys. You also have a pattern that consists of letters 'T' and 'S', where 'T' means move forward for two keys (from key x to key x + 2, and 'S' means move forward for one key (from key x to key x + 1).\n\nNow, you can start playing from any of the 12*N keys. In one play, you can repeat the pattern as many times as you want, but you cannot go outside the keyboard.\n\nRepeating pattern means that if, for example, you have pattern STTST, you can play STTST as well as STTSTSTTST, as well as STTSTSTTSTSTTST, as well as any number of repeating. For this pattern, if you choose to repeat it once, if you start at some key x, you'll press keys: x (letter 'S')-> x + 1 (letter 'T')-> x + 3 (letter 'T')-> x + 5 (letter 'S') -> x + 6 (letter 'T')-> x + 8. Also 1 \u2264 x, x + 8 \u2264 12*N so as to avoid going off the keyboard.\n\nYou are asked to calculate number of different plays that can be performed. Two plays differ if and only if they start at different keys or patterns are repeated different number of times.\n\nInput\nThe first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows.\nFirst line of each test case contains scale\u2019s pattern \u2013 string s consisting of letters \u2018T\u2019 and \u2018S\u2019 only.\nSecond line contains one integer N \u2013 number of octaves he\u2019ll be using.\n\nOutput\nFor each test case output a single number in a line corresponding to number of different scales he\u2019ll play.\u00a0\nConstraints\n\n1 \u2264 T \u2264 105\n1 \u2264 |S| \u2264 100\n1 \u2264 n \u2264 7\n\nSubtasks\nSubtask 1: T 4, N = 1 \n\nSubtask 2: No additional constraints.",
            "input_format": "",
            "output_format": "",
            "problem_name": "Chef and Piano Scales",
            "user_tags": [
                "Brute Force"
            ],
            "computed_tags": [
                "Algorithms"
            ],
            "problem_code_id": "PIANO1",
            "difficulty_level": "1606",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 61796303,
                    "submission_date": 1648887621,
                    "language": "PYTH 3",
                    "username": "lakshmi_735",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.14",
                    "memory": "9.3M",
                    "solution": 61796303,
                    "code": "steps = {\n    \"T\": 2,\n    \"S\": 1\n}\n\noctave = 12             # 12 keys per octave\n\ndef length(phrase):\n    return sum([steps[s] for s in phrase])\n\n# Each phrase produces X results, where\n#\n# X = max((total keys available - length of phrase) + 1, 0)\n#\n# Keep repeating the phrase and recalculating X until X < 0\ndef results(keys, l):\n    return keys - l\n\nfor t in range(int(input())):\n    s = str(input())\n    n = int(input())\n    ans = 0\n    repeat = 1\n    number_of_keys = octave * n\n    r = results(number_of_keys, length(s * repeat))\n    while r >= 0:\n        ans += r\n        repeat += 1\n        r = results(number_of_keys, length(s * repeat))\n    print(ans)\n"
                },
                {
                    "id": 60911649,
                    "submission_date": 1647779086,
                    "language": "PYTH 3",
                    "username": "nairobiny",
                    "user_rating_star": 4,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.14",
                    "memory": "9.3M",
                    "solution": 60911649,
                    "code": "\nsteps = {\n    \"T\": 2,\n    \"S\": 1\n}\n\noctave = 12             # 12 keys per octave\n\ndef length(phrase):\n    return sum([steps[s] for s in phrase])\n\n# Each phrase produces X results, where\n#\n# X = max((total keys available - length of phrase) + 1, 0)\n#\n# Keep repeating the phrase and recalculating X until X < 0\ndef results(keys, l):\n    return keys - l\n\nfor t in range(int(input())):\n    s = str(input())\n    n = int(input())\n    ans = 0\n    repeat = 1\n    number_of_keys = octave * n\n    r = results(number_of_keys, length(s * repeat))\n    while r >= 0:\n        ans += r\n        repeat += 1\n        r = results(number_of_keys, length(s * repeat))\n    print(ans)"
                }
            ]
        },
        "CPLAY": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "10100101111011111111\r\n00000000000000000000\r\n01011101110110101111",
                    "output": "TEAM-A 12\r\nTIE\r\nTEAM-B 7",
                    "explanation": "Example case 1: After 5 turns, the result was a tie and after the 6th turn, the score was 4:3, so Chef's team was the winner and the number of shots required to decide the result was 12.\nExample case 2: Both teams didn't score any goal, so the match resulted in a tie after 10 turns (20 shots). \nExample case 3: After 7 shots i.e. 0101110, the score was 1:3. Now, regardless of the following shots, we can say that the winner will always be TEAM-B, so only 7 shots are needed to say that TEAM-B is the winner."
                }
            ],
            "problem_statement": "Read problems statements in Mandarin chinese, Russian and Vietnamese as well.\n\u00a0Chef likes to play football with his friends. They played a number of matches and surprisingly, every match was a tie, so they decided to declare the winner with penalty shoot-out. As they didn't know the penalty shoot-out rules, they just decided to take 20 shots alternatively (each team takes 10 shots).\nOne day, Chef's friend Shivam heard about the matches and got confused. Later Shivam went to Chef and his friends and explained the shoot-out rules. Then, they all decided to calculate and once again declare the winner of each match as per the standard football penalty shoot-out rules.\nThe standard rules are:\n\nThe teams will take shots alternatively.\nAt first, each team will take five penalty shots.\nIf one team does not have more goals than the other after these five shots, the shoot-out will proceed to sudden death.\nIn between of first 10 kicks, If one team has an advantage over other which can't be compensated, then the team with the advantage will be declared winner at that instant i.e. before the completion of 10 kicks.\nIn sudden death, each team will take at most five more shots. Everytime after both teams take a shot, the following rule is used: if one team has scored more goals than the other, that team is the winner.\nIf each team has taken 10 shots and the winner still cannot be decided, the result will be a tie.\n\nThe result of the shoot-out for each game is given as a binary string where '1' represents GOAL and '0' represents MISS. Chef's team always starts first. Keep in mind that the teams alternate when taking the shots \u2014 the first character corresponds to the first shot of Chef's team, the second character to the first shot of the opposing team, the third character to the second shot of Chef's team etc.\nAs there are many matches to evaluate, Chef and his friends are unable to do so and they require your help. You have to tell them the winner of each match.\nIf a match ended in a tie, print \"TIE\". If Chef's team won, print \"TEAM-A\", otherwise print \"TEAM-B\". Also, if the match didn't end in a tie, print the minimum number of kicks required to decide the result, so that they can also know how much times they shot in vain.\n\nNote: Input/Output files are large, use fast reading/writing methods\n\nInput\n\nThe input consists of several lines.\nEach line contains the record of the shoot-out for a single match in the form of a binary string where '1' represents GOAL and '0' represents MISS, starting from Chef's team alternatively.\n\nOutput\nOn each line, print the winner of the corresponding match (\"TEAM-A\" or \"TEAM-B\") and the number of shots required to decide the result, separated by a space. If there is no winner, print \"TIE\" instead.\nConstraints\n\neach line contains a 20-bit binary string\nnumber of matches \u2264 106\n\nSubtasks\n\nSubtask 1 (20 points):\n\nthe first 10 kicks always result in a tie, i.e. the shoot-out will always go to sudden death\nnumber of matches \u2264 103\n\n\nSubtask 2 (80 points): original constraints",
            "input_format": "",
            "output_format": "",
            "problem_name": "Penalty Shoot-out",
            "user_tags": [
                "String",
                "Implementation"
            ],
            "computed_tags": [
                "Data Structures",
                "Algorithms"
            ],
            "problem_code_id": "CPLAY",
            "difficulty_level": "1609",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 61225519,
                    "submission_date": 1648132679,
                    "language": "PYTH 3",
                    "username": "mounika_7600",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "4.88",
                    "memory": "9.2M",
                    "solution": 61225519,
                    "code": "\nwhile True:\n    try:\n        n=input()\n    except:\n        exit()\n    if n.count('1')==20 or n.count('0')==20:\n       print(\"TIE\")\n    else:\n        gc=0\n        go=0\n        c=0\n        a=False\n        b=True\n        fnal=0\n        for i in range(20):\n            if c<10:    \n                c+=1\n                if i%2==0:\n                    if n[i]=='1':\n                        gc+=1\n                else:\n                    if n[i]=='1':\n                        go+=1\n                if i%2==0:\n                    if gc>go:\n                        if (go+(10-c)//2+1)<gc:\n                            a=True\n                            fnal=c\n                            break\n                    else:\n                        if (gc+(10-c)//2)<go:\n                            fnal=c\n                            break\n                else:\n                    if gc>go:\n                        if (go+(10-c)//2)<gc:\n                            a=True\n                            fnal=c\n                            break\n                    else:\n                        if (gc+(10-c)//2)<go:\n                            fnal=c\n                            break\n            else:\n                c+=1\n                if i%2==0:\n                    if n[i]=='1':\n                        gc+=1\n                else:\n                    if n[i]=='1':\n                        go+=1\n                if c%2==0:\n                    if gc>go:\n                        fnal=c\n                        a=True\n                        break\n                    elif go>gc:\n                        fnal=c\n                        break\n        \n        if c!=20:\n            if a:\n                print(\"TEAM-A\",+fnal)\n            else:\n                print(\"TEAM-B\",+fnal)\n        elif c==20:\n            if gc==go:\n                print('TIE')\n            elif gc>go:\n                print(\"TEAM-A\",+fnal)\n            else:\n                print(\"TEAM-B\",+fnal)\n            \n                "
                },
                {
                    "id": 32143486,
                    "submission_date": 1587563911,
                    "language": "PYTH 3",
                    "username": "nikhilsiwach28",
                    "user_rating_star": 3,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "5.57",
                    "memory": "17.6M",
                    "solution": 32143486,
                    "code": "while True:\n    try:\n        n=input()\n    except:\n        exit()\n    if n.count('1')==20 or n.count('0')==20:\n       print(\"TIE\")\n    else:\n        gc=0\n        go=0\n        c=0\n        a=False\n        b=True\n        fnal=0\n        for i in range(20):\n            if c<10:    \n                c+=1\n                if i%2==0:\n                    if n[i]=='1':\n                        gc+=1\n                else:\n                    if n[i]=='1':\n                        go+=1\n                if i%2==0:\n                    if gc>go:\n                        if (go+(10-c)//2+1)<gc:\n                            a=True\n                            fnal=c\n                            break\n                    else:\n                        if (gc+(10-c)//2)<go:\n                            fnal=c\n                            break\n                else:\n                    if gc>go:\n                        if (go+(10-c)//2)<gc:\n                            a=True\n                            fnal=c\n                            break\n                    else:\n                        if (gc+(10-c)//2)<go:\n                            fnal=c\n                            break\n            else:\n                c+=1\n                if i%2==0:\n                    if n[i]=='1':\n                        gc+=1\n                else:\n                    if n[i]=='1':\n                        go+=1\n                if c%2==0:\n                    if gc>go:\n                        fnal=c\n                        a=True\n                        break\n                    elif go>gc:\n                        fnal=c\n                        break\n        \n        if c!=20:\n            if a:\n                print(\"TEAM-A\",+fnal)\n            else:\n                print(\"TEAM-B\",+fnal)\n        elif c==20:\n            if gc==go:\n                print('TIE')\n            elif gc>go:\n                print(\"TEAM-A\",+fnal)\n            else:\n                print(\"TEAM-B\",+fnal)\n            \n                \n                \n                    \n                \n            "
                }
            ]
        },
        "XORNUBER": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "1\r\n3",
                    "output": "1",
                    "explanation": "First Example :  M desired in the problem would be 1. As bitwise XOR of 1 and 2 is equal to 3."
                }
            ],
            "problem_statement": "Read problems statements in Mandarin Chinese and Russian as well.\nGiven an integer N, Chef wants to find the smallest positive integer M such that the bitwise XOR of M and M+1 is N. If no such M exists output -1.\n\nInput\nThe first line of input contain an integer T denoting the number of test cases. Each of the following T lines contains an integer N for that test case.\nOutput\nFor each test case, output a single line containing the number M or -1 as described above.\nConstraints\n\n1 \u2264 T \u2264 5000\n1 \u2264 N \u2264 230",
            "input_format": "",
            "output_format": "",
            "problem_name": "Chef and the XORed Number ",
            "user_tags": [
                "Bitwise Operation",
                "Observation"
            ],
            "computed_tags": [
                "Mathematics",
                "Bit Manipulation",
                "Algorithms"
            ],
            "problem_code_id": "XORNUBER",
            "difficulty_level": "1661",
            "ai_solutions": [
                "T = int(input())\nfor _ in range(T):\n    N = int(input())\n    if N == 1:\n        print(0)\n    elif N & (N + 1) == 0:\n        print(N // 2)\n    else:\n        print(-1)",
                "def find_M(N):\n    if N == 1:\n        return 0\n    elif N & (N + 1) == 0:\n        return N // 2\n    else:\n        return -1\n\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    print(find_M(N))"
            ],
            "human_solutions": [
                {
                    "id": 32144487,
                    "submission_date": 1587565479,
                    "language": "PYTH 3",
                    "username": "amrtya",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.04",
                    "memory": "17.6M",
                    "solution": 32144487,
                    "code": "t = int(input())\nwhile t!=0:\n    n = int(input())\n    b = bin(n)[2:]\n    \n    if n==1:\n        print(2)\n    else:\n        if '0' in b:\n            print(-1)\n        else:\n            print((n-1)//2)\n    t-=1"
                },
                {
                    "id": 29222863,
                    "submission_date": 1580189440,
                    "language": "PYTH 3",
                    "username": "yashrajsinghal",
                    "user_rating_star": 4,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.08",
                    "memory": "17.6M",
                    "solution": 29222863,
                    "code": "from sys import *\ntest = int(input())\nfor tt in range(test):\n    n = int(input())\n    t = -1\n    for i in range(30):\n        if(n == 2**i-1):\n            t = i\n            break\n    if (t == 1):\n        print(2)\n    elif(t == -1):\n        print(-1)\n    else:\n        print(2**(t-1) -1)\n\n"
                }
            ]
        },
        "ADIGIT": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "10 3\n0324152397\n1\n4\n7",
                    "output": "0\n7\n9",
                    "explanation": "For index 1 there are no indexes which are less, so B1 = B2 = 0 and the answer is 0.\nFor index 4 we have \n\nb1 = 4-0=4, \nb2 = 4-3=1, \nb3 = 4-2=2, \n\nso B1 = 4+1+2 = 7, B2 = 0 \nand the answer is 7.\nFor index 7 we have\n\nb1 = 2-0=2, \nb2 = 2-3=-1, \nb3 = 2-2=0, \nb4 = 2-4=-2, \nb5 = 2-1=1, \nb6 = 2-5=-3, \n\nso B1 = 2 + 1 = 3,\n     B2 = -1 -2 -3 = -6 \nand the answer is 9."
                }
            ],
            "problem_statement": "Read problems statements in Mandarin Chinese  and Russian.\n\u00a0\n Yesterday Chef had a great party and doesn't remember the way he celebreated it. But he found a strange paper in his kitchen containing n digits (lets give them indices from 1 to n and name them a1, a2 ... aN). \n Chef remembers that he played such game:\n\n On each step he choose an index x from 1 to n.\n For all indices y (y  he calculated the difference by = ax - ay. \n Then he calculated B1 - sum of all by which are greater than 0 and B2 - sum of all by which are less than 0. \n The answer for this step is B1 - B2. \n\nChef remembers the game, but forgot the answer. Please, help him!\nInput\nThe first line contains two integers n, m denoting the number of digits and number of steps. The second line contains n digits (without spaces) a1, a2, ..., an. \n Each of next m lines contains single integer x denoting the index for current step. \n\n\u00a0\nOutput\nFor each of m steps print single number in a line - answer of the step.\n\n\u00a0\nConstraints\n1 \u2264 n, m \u2264 10^5\n0 \u2264 ai \u2264 9\n1 \u2264 x \u2264 n",
            "input_format": "",
            "output_format": "",
            "problem_name": "Chef and Digits",
            "user_tags": [
                "Frequency Arrays",
                "Pre processing",
                "ad-hoc"
            ],
            "computed_tags": [
                "Data Structures",
                "Arrays",
                "Advanced Algorithms",
                "Algorithms",
                "Constructive"
            ],
            "problem_code_id": "ADIGIT",
            "difficulty_level": "1614",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 47324555,
                    "submission_date": 1622593421,
                    "language": "PYTH 3",
                    "username": "tailwind",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.92",
                    "memory": "17.7M",
                    "solution": 47324555,
                    "code": "nums,cases= map(int,input().split())\n\ninpL = list(map(int,list(input().strip())))\npopn = [[]for i in range(10)] #differences in all possible pairs of 1 to 9\n\nfor n in range(10):\n myBin=0\n for j in inpL:\n  myBin+=abs(int(j)-n)\n  popn[n]+=[myBin]\n \nfor c in range(cases):\n q=int(input())\n queried=inpL[q-1]\n print(popn[int(queried)][q-1])"
                },
                {
                    "id": 40731623,
                    "submission_date": 1608906129,
                    "language": "PYTH 3",
                    "username": "vittal_161",
                    "user_rating_star": 3,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.86",
                    "memory": "17.6M",
                    "solution": 40731623,
                    "code": "n,m=map(int,input().split())\ns=input().strip()\nl=[int(i) for i in s]\nd=[0]*(10)\nans=[0]*(n+193)\nfor i in range(n):\n    curr=l[i]\n    less=0 \n    big=0 \n    c1=0 \n    c2=0 \n    for j in range(10):\n        if j<curr:\n            c1+=d[j]\n            less+=d[j]*j \n        if j>curr:\n            c2+=d[j]\n            big+=d[j]*j \n    ans[i]=big-less+curr*(c1-c2)\n    d[l[i]]+=1 \nfor _ in range(m):\n    x=int(input())\n    print(ans[x-1])"
                }
            ]
        },
        "ROWSOLD": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "4\n10100\n1100001\n000000000111\n001110100011010",
                    "output": "8\n10\n0\n48",
                    "explanation": "Test case 1.\nThe initial string is 10100.\nThere are N = 5 cells.\nThere is one soldier in the first cell, and one soldier in the third cell.\nThe following scenario maximizes the total time:\n\nLimak chooses the soldier in the first cell.\nThis soldier can move only one cell to the right.\nIt takes 1 second to choose a soldier and 1 second for a soldier to move to the next cell (2 seconds in total).\nThe string is 01100 now.\nLimak has only one choice.\nHe must choose the soldier in the third cell because the other soldier can't move at all (the soldier in the second cell can't move to the right because the next cell is already occupied).\nChoosing a soldier takes 1 second.\nThe chosen soldier moves from the third cell to the fifth cell, which takes 2 seconds.\nThis operation takes 1 + 2 = 3 seconds in total.\nThe string is 01001 now.\nLimak has only one choice again.\nSince the soldier in the last row can't move further to the right, the soldier in the second cell must be chosen.\nHe will move 2 cells to the right.\nThis operation takes 1 + 2 = 3 seconds in total.\nThe string become 00011 and the game is over.\n\nThe total time is 2 + 3 + 3 = 8.\nTest case 2.\nThe initial string is 1100001.\nThere is only one possible scenario:\n\n1100001 is changed to 1000011 in 5 seconds (1 second to choose a soldier and 4 seconds for the soldier to move 4 cells to the right).\n1000011 is changed to 0000111 in 5 seconds.\n\nThe total time is 5 + 5 = 10 seconds.\nTest case 3.\nThe game is over immediately because all soldiers occupy rightmost cells already.\nThe answer is 0."
                }
            ],
            "problem_statement": "Read problems statements in Mandarin Chinese, Russian and Vietnamese as well.\nLimak is a little polar bear.\nHe is playing a video game and he needs your help.\nThere is a row with N cells, each either empty or occupied by a soldier, denoted by '0' and '1' respectively.\nThe goal of the game is to move all soldiers to the right (they should occupy some number of rightmost cells).\nThe only possible command is choosing a soldier and telling him to move to the right as far as possible.\nChoosing a soldier takes 1 second, and a soldier moves with the speed of a cell per second.\nThe soldier stops immediately if he is in the last cell of the row or the next cell is already occupied.\nLimak isn't allowed to choose a soldier that can't move at all (the chosen soldier must move at least one cell to the right).\nLimak enjoys this game very much and wants to play as long as possible.\nIn particular, he doesn't start a new command while the previously chosen soldier moves.\nCan you tell him, how many seconds he can play at most?\nInput\nThe first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows.\n\nThe only line of each test case contains a string S describing the row with N cells.\nEach character is either '0' or '1', denoting an empty cell or a cell with a soldier respectively.\n\nOutput\nFor each test case, output a single line containing one integer \u2014 the maximum possible number of seconds Limak will play the game.\nConstraints\n\n1 \u2264 T \u2264 5\n1 \u2264 N \u2264 105 (N denotes the length of the string S)\n\nSubtasks\n\nSubtask #1 (25 points): 1 \u2264 N \u2264 10\nSubtask #2 (25 points): 1 \u2264 N \u2264 2000\nSubtask #3 (50 points): Original constraints.",
            "input_format": "",
            "output_format": "",
            "problem_name": "Bear and Row 01",
            "user_tags": [
                "Prefix Sum"
            ],
            "computed_tags": [
                "Algorithms",
                "Simple Algos"
            ],
            "problem_code_id": "ROWSOLD",
            "difficulty_level": "1638",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 31695728,
                    "submission_date": 1586606873,
                    "language": "PYTH 3",
                    "username": "vjudge9",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.24",
                    "memory": "17.7M",
                    "solution": 31695728,
                    "code": "for i in range(int(input())):\n  s = input()\n  n = len(s)\n  arr = [0]*n\n  for i in range(n):\n    arr[i] = int(s[i])\n  total = 0\n  count = 0\n  lastIdx = n-1\n  curr = n-1\n  while(arr[curr]==1 and curr>=0):\n    lastIdx-=1\n    curr-=1\n  while curr>=0:\n    if arr[curr]==1:\n      if arr[curr+1]==0:\n        count+=1\n      total+=count+(lastIdx-curr)\n      lastIdx-=1\n    curr-=1\n  print(total)"
                },
                {
                    "id": 25137452,
                    "submission_date": 1562567090,
                    "language": "PYTH 3",
                    "username": "mohit_2707",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.10",
                    "memory": "17.6M",
                    "solution": 25137452,
                    "code": "# from itertools import groupby\nt = int(input())\nfor _ in range(t):\n    s = input()\n    n = len(s)\n    i = n - 1\n    ones = s.count('1')\n    c = 0\n    ans = 0\n    while i >= 0:\n        if s[i] == '0':\n            c += 1\n            i -= 1\n        else:\n            if c:\n                ans += ones * (c + 1)\n                c = 0\n            while i >= 0 and s[i] == '1':\n                ones -= 1\n                i -= 1\n    print(ans)"
                }
            ]
        },
        "DONUTS": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "2\n11 3\n4 3 4\n6 3\n3 2 1",
                    "output": "2\n1",
                    "explanation": "Example 1: We could cut 2 doughnut from any \"chain\" and use them to connect chains to the one.  For example, let's cut it from the first chain. After this we will have chains of sizes 2, 3, 4 and two doughnuts that have been cut. So we could connect the first chain with second and second with third using these two doughnuts.\nExample 2: We cut doughnut from the last \"chain\" and connect the first two chains.\n\nImage for second example. Yellow doughnut has been cut."
                }
            ],
            "problem_statement": "Read problems statements in Mandarin and Russian. Translations in Vietnamese to be uploaded soon.\nThere is new delicious item in Chef's menu - a doughnut chain. Doughnuts connected successively in line forming a chain.\n\n\nChain of 3 doughnuts\n\nChef has received an urgent order for making a chain of N doughnuts. He noticed that there are exactly N cooked doughnuts in the kitchen, some of which are already connected in chains. The only thing he needs to do is connect them in one chain.\nHe can cut one doughnut (from any position in a chain) into two halves and then use this cut doughnut to link two different chains.\nHelp Chef determine the minimum number of cuts needed to complete the order.\n\nInput\n\nThe first line of the input contains an integer T denoting the number of test cases.\nThe first line of each test case contains two integer N and M denoting the size of order and number of cooked chains respectively.\nThe second line contains M space-separated integers A1, A2, ..., AM denoting the size of the chains.\n\nIt is guaranteed that N is equal to the sum of all Ai's over 1i.\nOutput\nFor each test case, output a single line containing an integer corresponding to the number of cuts needed Chef to make the order.\nConstraints and Subtasks\n\n1 \u2264 T \u2264 200\n1 \u2264 N \u2264 2*109\n1 \u2264 Ai \u2264 105\n\nSubtask 1: 10 points\n\n1 \u2264 M \u2264 2*104\nAi = 1\n\nSubtask 2: 30 points\n\n1 \u2264 M \u2264 100\n\nSubtask 3: 60 points\n\n1 \u2264 M \u2264 2*104",
            "input_format": "",
            "output_format": "",
            "problem_name": "Chain of Doughnuts",
            "user_tags": [
                "easy",
                "greedy",
                "m0stik",
                "sept15",
                "sorting"
            ],
            "computed_tags": [],
            "problem_code_id": "DONUTS",
            "difficulty_level": "1611",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 61899132,
                    "submission_date": 1648923270,
                    "language": "PYTH 3",
                    "username": "lakshmi_735",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "2.91",
                    "memory": "11.5M",
                    "solution": 61899132,
                    "code": "for _ in range(int(input())):\n    N, M = input().split()\n    N = int(N)\n    M = int(M)\n    a = []\n    count = 0\n    \n    a = list(map(int,input().split()))\n    lun = len(a)\n    a.sort()\n    \n    while len(a)>1:\n        \n        a[0] -= 1\n        if a[0] == 0:\n            a.pop(0)\n        \n        a.pop(len(a)-1)\n        \n        count += 1 \n     \n       \n            \n    print(count)"
                },
                {
                    "id": 61015026,
                    "submission_date": 1647956685,
                    "language": "PYTH 3",
                    "username": "sasikumar_22",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "2.99",
                    "memory": "11.6M",
                    "solution": 61015026,
                    "code": "for _ in range(int(input())):\r\n    k,n = map(int,input().split())\r\n    lst = list(map(int,input().split()))\r\n    cnt = 0\r\n    x = 0\r\n    lst.sort()\r\n    while len(lst) > 2:\r\n        while lst[0] != 0:\r\n            if len(lst) == 2:\r\n                break\r\n            lst[-2] += lst[-1]\r\n            del lst[-1]\r\n            cnt += 1\r\n            lst[0] -= 1\r\n            if lst[0] == 0:\r\n                del lst[0]\r\n                break\r\n    if lst[0] == 0:\r\n        del lst[0]\r\n    if len(lst) == 2:\r\n        print(cnt+1)\r\n    else:\r\n        print(cnt)\r\n    "
                }
            ]
        },
        "PRPALN": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "4\naaa\nabc\nabdbca\nabba",
                    "output": "YES\nNO\nYES\nYES",
                    "explanation": "Example case 1. Delete any one 'a', resulting string is \"aa\" which is a palindrome.\nExample case 2. It is not possible to delete exactly one character and having a palindrome.\nExample case 3. Delete 'c', resulting string is \"abdba\" which is a palindrome. \nExample case 4. Delete 'b', resulting string is \"aba\" which is a palindrome."
                }
            ],
            "problem_statement": "Read problems statements in Mandarin Chinese  and Russian.\nGiven a string s. Can you make it a palindrome by deleting exactly one character? Note that size of the string after deletion would be one less than it was before. \nInput\nFirst line of the input contains a single integer T denoting number of test cases.\nFor each test case, you are given a single line containing string  s. \nOutput\nFor each test case, print YES or NO depending on the answer of the problem. \nConstraints\n\n Subtask 1, 35 points \n\n 1 \u2264 T \u2264 100\n2 \u2264  size of string s \u2264 1000\n String s contains lowercase English alphabets (ie. from 'a' to 'z').\n\n\n Subtask 2, 65 points \n\n2 \u2264  size of string s \u2264 10^5\n Sum of size of string s over all the input test cases won't exceed 10^6\n String s contains lowercase English alphabets (ie. from 'a' to 'z').",
            "input_format": "",
            "output_format": "",
            "problem_name": "Let us construct palindrome",
            "user_tags": [
                "String",
                "Greedy",
                "ad-hoc"
            ],
            "computed_tags": [
                "Data Structures",
                "Algorithms",
                "Constructive"
            ],
            "problem_code_id": "PRPALN",
            "difficulty_level": "1620",
            "ai_solutions": [
                "def is_palindrome(s):\n    return s == s[::-1]\n\ndef can_form_palindrome(s):\n    if is_palindrome(s):\n        return \"YES\"\n    for i in range(len(s)):\n        t = s[:i] + s[i+1:]\n        if is_palindrome(t):\n            return \"YES\"\n    return \"NO\"\n\nT = int(input().strip())\nfor _ in range(T):\n    s = input().strip()\n    print(can_form_palindrome(s))",
                "def can_form_palindrome(s):\n    i, j = 0, len(s) - 1\n    while i < j:\n        if s[i] != s[j]:\n            one, two = s[i:j], s[i + 1:j + 1]\n            return \"YES\" if one == one[::-1] or two == two[::-1] else \"NO\"\n        i, j = i + 1, j - 1\n    return \"YES\"\n\nT = int(input().strip())\nfor _ in range(T):\n    s = input().strip()\n    print(can_form_palindrome(s))"
            ],
            "human_solutions": [
                {
                    "id": 64567958,
                    "submission_date": 1652128087,
                    "language": "PYTH 3",
                    "username": "bhaveshsp",
                    "user_rating_star": 3,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.28",
                    "memory": "9.9M",
                    "solution": 64567958,
                    "code": "# Imports\nfrom sys import stdin,stdout \nimport math \nfrom collections import Counter  \nimport functools \nimport time \n##########################################\n# DEFINITIONS\ndef tr():\n    return range(int(line()))\n\ndef sm():\n    return map(int,line().split())\n\ndef ln():\n    return list(sm())\n\ndef nl():\n    return int(line())\n\ndef ssm():\n    return map(str,line().split())\n\ndef line():\n    return stdin.readline().rstrip()\n\ndef b(x):\n    return bin(x).replace(\"0b\",\"\")\n\ndef o(x):\n    if type(x) != type(\"\"):\n        x = str(x)\n    stdout.write(x + \"\\n\")\ndef osp(x):\n    if type(x) != type(\"\"):\n        x = str(x)\n    stdout.write(x + \" \")\ndef ol(x):\n    stdout.write(\" \".join(map(str,x)))\n\n\n##########################################\n# Main Code and Functions \n\ndef checkPalindrome(s):\n    return s == s[::-1]\ndef main():\n    for _ in tr():\n        s = line()\n        if checkPalindrome(s):\n            print(\"YES\")\n            continue \n        possible = False\n        n = len(s)\n        for i in range(n//2):\n            if s[i]!=s[n-i-1]:\n                if checkPalindrome(s[:i] + s[i+1:]):\n                    possible = True \n                elif checkPalindrome(s[:n-i-1]+s[n-i:]):\n                    possible = True \n                else:\n                    break\n        print(\"YES\" if possible else \"NO\")\n                \n                \n        \n    \nmain()\n"
                },
                {
                    "id": 61898547,
                    "submission_date": 1648922745,
                    "language": "PYTH 3",
                    "username": "lakshmi_735",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.86",
                    "memory": "9.3M",
                    "solution": 61898547,
                    "code": "\ndef solve():\n    s=input().strip()\n    i=0\n    j=len(s)-1\n    a=''\n    b=''\n    while i<=j:\n        if s[i]!=s[j]:\n            a=s[:i]+s[i+1:]\n            b=s[:j]+s[j+1:]\n            break\n        i+=1\n        j-=1\n    if a==a[::-1]  or b==b[::-1]:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\ntest=int(input())\nfor _ in range(test):\n    solve()\n"
                }
            ]
        },
        "PRLADDU": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "3\n2\n5 -5\n2\n-5 5\n3\n1 2 -3",
                    "output": "5\n5\n4",
                    "explanation": "Example case 1. Each villager in village 1, need to walk 1 km to reach to the dinosaur in 2nd village.\nExample case 2. Each villager in village 2, need to walk 1 km to reach to the dinosaur 1st village.\nExample case 3. Each villager in village 1, need to walk 2 km to reach to the dinosaur in 3rd village whereas Each villager in village 2, \nneed to walk 1 km to reach to the dinosaur in 3rd village."
                }
            ],
            "problem_statement": "Read problems statements in Mandarin Chinese  and Russian.\n\n    DevuLand is a very strange place. There are n villages in it. Some of the villages are occupied by dinosaurs while the remaining ones by villagers.\n    You are given the information of DevuLand \n    by an array D of size n. If D[i] is non-negative, it means that there are D[i] villagers in that village. \n    Otherwise, it means that are -D[i] \n    dinosaurs in that village.\n\n\n    It is also guaranteed that total number of villagers in DevuLand is equal to total number of dinosaurs.\n\n\nOnce dinosaurs got very hungry and started eating villagers. Frightened villagers gathered immediately and met their Sarpanch Deviji. Deviji, being a very daring and negotiable person, met to the head\nof dinosaurs. Soon both parties called a truce. It was decided that the villagers will provide laddus to \nthe dinosaurs. So everyday, each villager will take exactly one laddu to one of the dinosaurs in such a way that no dinosaur remains hungry (note that this is possible because number of villagers is the same as the number of dinosaurs).\n\n\nActually, carrying laddus is a quite a tough job. Villagers have to use a bullock cart for that. It takes one unit of grass a bullock to \ncarry a cart with 1 laddu for 1 kilometre. Laddus used to be very heavy in DevuLand, so a bullock cart can not carry more than one laddu.\n\nIt is also given distance between village indexed i and j is |j - i| (the absolute value) kilometres.\n\n\nNow villagers sat down and found a strategy to feed laddus to dinosaurs so that they need to buy the least amount of grass from the nearby market. \nThey are not very good in \ncalculations, please find out what is the minimum number of units of grass they need to buy.\n\nInput\n\nFirst line of the input contains an integer T denoting number of test cases.\n\n\nFor each test case, there are two lines. \n\n\nFirst line contains a single integer denoting n: number of villages. \n\n\nSecond line contains n space separated integers denoting the array D.\n\nOutput\n\nFor each test case, print a single line containing the integer corresponding to answer of the problem.\n\nConstraints\n\n 1 \u2264 T \u2264 10^5 \n 1 \u2264 n \u2264 10^5 \n -10^4 \u2264 D[i] \u2264 10^4 \n Sum of n over all the test cases will be \u2264 10^6 \n It is guaranteed that sum of D[i] is zero for a single test case which ensures that there are equal number of villagers and dinosaurs.",
            "input_format": "",
            "output_format": "",
            "problem_name": "DevuLand, Dinosaurs and Laddus",
            "user_tags": [
                "Constructive"
            ],
            "computed_tags": [
                "Algorithms"
            ],
            "problem_code_id": "PRLADDU",
            "difficulty_level": "1683",
            "ai_solutions": [
                "def min_grass(T, test_cases):\n    for _ in range(T):\n        n, D = test_cases[_]\n        villagers = []\n        dinosaurs = []\n        for i in range(n):\n            if D[i] >= 0:\n                villagers.append((D[i], i))\n            else:\n                dinosaurs.append((-D[i], i))\n        villagers.sort(reverse=True)\n        dinosaurs.sort(reverse=True)\n        i = j = 0\n        grass = 0\n        while i < len(villagers) and j < len(dinosaurs):\n            laddus = min(villagers[i][0], dinosaurs[j][0])\n            grass += laddus * abs(villagers[i][1] - dinosaurs[j][1])\n            villagers[i] = (villagers[i][0] - laddus, villagers[i][1])\n            dinosaurs[j] = (dinosaurs[j][0] - laddus, dinosaurs[j][1])\n            if villagers[i][0] == 0:\n                i += 1\n            if dinosaurs[j][0] == 0:\n                j += 1\n        print(grass)\n\nT = int(input())\ntest_cases = []\nfor _ in range(T):\n    n = int(input())\n    D = list(map(int, input().split()))\n    test_cases.append((n, D))\nmin_grass(T, test_cases)",
                "def min_grass(T, test_cases):\n    for _ in range(T):\n        n, D = test_cases[_]\n        villagers = []\n        dinosaurs = []\n        for i in range(n):\n            if D[i] >= 0:\n                villagers.append((D[i], i))\n            else:\n                dinosaurs.append((-D[i], i))\n        villagers.sort(reverse=True)\n        dinosaurs.sort(reverse=True)\n        grass = 0\n        while villagers and dinosaurs:\n            laddus = min(villagers[-1][0], dinosaurs[-1][0])\n            grass += laddus * abs(villagers[-1][1] - dinosaurs[-1][1])\n            if villagers[-1][0] == laddus:\n                villagers.pop()\n            else:\n                villagers[-1] = (villagers[-1][0] - laddus, villagers[-1][1])\n            if dinosaurs[-1][0] == laddus:\n                dinosaurs.pop()\n            else:\n                dinosaurs[-1] = (dinosaurs[-1][0] - laddus, dinosaurs[-1][1])\n        print(grass)\n\nT = int(input())\ntest_cases = []\nfor _ in range(T):\n    n = int(input())\n    D = list(map(int, input().split()))\n    test_cases.append((n, D))\nmin_grass(T, test_cases)"
            ],
            "human_solutions": [
                {
                    "id": 89289494,
                    "submission_date": 1676351622,
                    "language": "PYTH 3",
                    "username": "rs5228127",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.50",
                    "memory": "11.3M",
                    "solution": 89289494,
                    "code": "for _ in range(int(input())):\r\n    n=int(input())\r\n    d = list(map(int, input().split()))\r\n    tot=ans=0\r\n    for i in range(0,n-1):\r\n        tot+=d[i]\r\n        ans+=abs(tot)\r\n\r\n    print(ans)"
                },
                {
                    "id": 76415006,
                    "submission_date": 1665201760,
                    "language": "PYTH 3",
                    "username": "dhruvgautam_16",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.51",
                    "memory": "11.3M",
                    "solution": 76415006,
                    "code": "\r\nfor _ in range(int(input())):\r\n    n=int(input())\r\n    d = list(map(int, input().split()))\r\n    tot=ans=0\r\n    for i in range(0,n-1):\r\n        tot+=d[i]\r\n        ans+=abs(tot)\r\n\r\n    print(ans)"
                }
            ]
        },
        "EXAMCHT": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "1\r\n2 6",
                    "output": "3",
                    "explanation": "Example case 1: They can cheat for $p = 1$, $p = 2$ or $p = 4$."
                }
            ],
            "problem_statement": "Read problems statements in Hindi, Mandarin Chinese, Russian, Vietnamese, and Bengali as well.\nRam and Shyam are sitting next to each other, hoping to cheat on an exam. However, the examination board has prepared $p$ different sets of questions (numbered $0$ through $p-1$), which will be distributed to the students in the following way:\n- The students are assigned roll numbers \u2014 pairwise distinct positive integers.\n- If a student's roll number is $r$, this student gets the $((r-1)\\%p)$-th set of questions.\nObviously, Ram and Shyam can cheat only if they get the same set of questions.\nYou are given the roll numbers of Ram and Shyam: $A$ and $B$ respectively. Find the number of values of $p$ for which they can cheat, or determine that there is an infinite number of such values.\nInput\n\nThe first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\nThe first and only line of each test case contains two space-separated integers $A$ and $B$.\n\nOutput\nFor each test case, print a single line \u2014 the number of values of $p$ for which Ram and Shyam can cheat, or $-1$ if there is an infinite number of such values.\nConstraints\n\n$1 \\le T \\le 100$\n$1 \\le A, B \\le 10^8$",
            "input_format": "",
            "output_format": "",
            "problem_name": "Exam Cheating",
            "user_tags": [
                "Modular Arithmetic",
                "Divisors"
            ],
            "computed_tags": [
                "Mathematics",
                "Number Theory",
                "Integer Factorisation"
            ],
            "problem_code_id": "EXAMCHT",
            "difficulty_level": "1639",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 1021065233,
                    "submission_date": 1694870216,
                    "language": "PYTH 3",
                    "username": "hanss",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.10",
                    "memory": "9.4M",
                    "solution": 1021065233,
                    "code": "for _ in range(int(input())):\r\n    a, b = map(int, input().split())\r\n    \r\n    if a == b:\r\n        result = -1\r\n    else:\r\n        diff = abs(a-b)\r\n        result = 1 + (diff > 1)\r\n        for i in range(2, diff):\r\n            j = i*i\r\n            if j < diff:\r\n                if diff % i == 0:\r\n                    result += 2\r\n                continue\r\n            if j == diff:\r\n                result += 1\r\n            break\r\n    print(result)\r\n    "
                },
                {
                    "id": 1018361999,
                    "submission_date": 1693879179,
                    "language": "PYTH 3",
                    "username": "josedono",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.03",
                    "memory": "7.6M",
                    "solution": 1018361999,
                    "code": "from math import sqrt\r\n\r\ndef solve():\r\n    a, b = map(int, input().split())\r\n    if a == b: return -1\r\n    t = max(a, b) - min(a, b)\r\n    res = 0\r\n    for i in range(1, int(sqrt(t) + 1)):\r\n        if not t % i: res += 1 + (i != (t // i))\r\n    return res\r\n    \r\n\r\ndef main():\r\n    T = int(input())\r\n    for _ in range(T):\r\n        print(solve())\r\n\r\nmain()"
                }
            ]
        },
        "RGAME": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "2\r\n1\r\n1 2\r\n2\r\n1 2 1",
                    "output": "4\r\n14",
                    "explanation": "There are 2 possible gameplays. A0A1 which gives score of 2 and  A1A0 which also gives score of 2. So the answer is 2 + 2 = 4"
                }
            ],
            "problem_statement": "Read problems statements in Mandarin Chinese, Russian and Vietnamese as well.\nPrincess Rupsa saw one of her friends playing a special game. The game goes as follows:\n\nN+1 numbers occur sequentially (one at a time) from A0 to AN.\nYou must write the numbers on a sheet of paper, such that A0 is written first. The other numbers are written according to an inductive rule \u2014 after Ai-1 numbers have been written in a row, then Ai can be written at either end of the row. That is, you first write A0, and then A1 can be written on its left or right to make A0A1 or A1A0, and so on.\nAi must be written before writing Aj, for every i .\nFor a move in which you write a number Ai (i>0), your points increase by the product of Ai and its neighbour. (Note that for any move it will have only one neighbour as you write the number at an end).\nTotal score of a game is the score you attain after placing all the N + 1 numbers.\nPrincess Rupsa wants to find out the sum of scores obtained by all possible different gameplays. Two gameplays are different, if after writing down all N + 1 numbers, when we read from left to right, there exists some position i, at which the gameplays have aj and ak written at the ith position such that j \u2260 k. But since she has recently found her true love, a frog Prince, and is in a hurry to meet him, you must help her solve the problem as fast as possible. Since the answer can be very large, print the answer modulo 109 + 7.\nInput\n\nThe first line of the input contains an integer T denoting the number of test cases.\nThe first line of each test case contains a single integer N. \nThe second line contains N + 1 space-separated integers denoting A0 to AN.\n\nOutput\n\nFor each test case, output a single line containing an integer denoting the answer.\n\nConstraints\n\n1 \u2264 T \u2264 10\n1 \u2264 N \u2264 105\n1 \u2264 Ai \u2264 109\n\nSub tasks\n\nSubtask #1: 1 \u2264 N \u2264 10 (10 points)\nSubtask #2: 1 \u2264 N \u2264 1000 (20 points)\nSubtask #3: Original Constraints (70 points)",
            "input_format": "",
            "output_format": "",
            "problem_name": "Rupsa and the Game",
            "user_tags": [
                "Combinatorics",
                "ad-hoc"
            ],
            "computed_tags": [
                "Mathematics",
                "Algorithms",
                "Constructive"
            ],
            "problem_code_id": "RGAME",
            "difficulty_level": "1692",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 34337648,
                    "submission_date": 1592101865,
                    "language": "PYTH 3",
                    "username": "ardeorajankit",
                    "user_rating_star": 3,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.78",
                    "memory": "21M",
                    "solution": 34337648,
                    "code": "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int,input().split()))\n    mod = 10**9+7\n    n=n+1\n    ans=0\n    l = a[0]*2\n    d = 1\n    for i in range(1,n):\n        ans =(2*ans +l*a[i])%mod\n        d = (2*d)%mod\n        l = (l+a[i]*d)%mod\n    print(ans)"
                },
                {
                    "id": 34151096,
                    "submission_date": 1591811797,
                    "language": "PYTH 3",
                    "username": "luser2425",
                    "user_rating_star": 3,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.64",
                    "memory": "21.1M",
                    "solution": 34151096,
                    "code": "\ndef main():\n    for _ in range(int(input())):\n        t,b,c=0,1,10**9+7\n        l=int(input())\n        a=list(map(int,input().split()))\n        p=a[0]*2\n        for i in range(1,l+1):\n            t=(t*2+p*a[i])%c\n            b=(b*2)%c\n            p=(p+a[i]*b)%c\n        print(t)\nif __name__==\"__main__\":\n    main()"
                }
            ]
        },
        "GCAC": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "1\r\n5 6\r\n5000 10000 3000 20 100\r\n10000 2\r\n800 2\r\n600 1\r\n10 8\r\n1000 9\r\n2000 10\r\n111111\r\n100000\r\n000000\r\n000001\r\n100100",
                    "output": "3 22000 4",
                    "explanation": "There are 5 candidates and 6 companies. \nThe first candidate wants a job that pays at least 5000 Rs. He has qualified in all the companies, so he will choose the 1st company that provides him the maximum money, 10000 Rs.\nThe second candidate will get a job offer of 10000 Rs from 1st company.\nThe third candidate has not qualified in any company, so he won't get any job.\nThe fourth candidate has qualified only in 6-th company which provides a salary of 2000 Rs which is greater than or equal to 20, the minimum salary expected by the fourth candidate.\nThe fifth candidate wants minimum salary 100 Rs. He has qualified in company 1st and 4th. The 1st company won't hire him as it has already filled the quota of hiring two people. 4th company is providing the candidate less than 100 Rs, so he won't join that too.\nSo, overall there are three candidates that got the job (first, second and fourth). Total amount of salary is 10000 + 10000 + 2000 = 22000. Only first and 6-th companies are able to select some candidates, so there are 4 companies that are not able to hire any candidate. Hence, the answer will be 3 22000 4."
                }
            ],
            "problem_statement": "Read problems statements in mandarin chinese, russian and vietnamese as well.\nThe placements/recruitment season is going on in various colleges. The interviews are over, and each company has selected some students. But since each student can end up finally in at most one company, a student might have to reject a company which selected him. The companies know this, and hence, the companies usually select more students than it can actually employ. So now, the exact pairings should be done. We talk about one such session in a famous college.\nThere are a total of N candidates (numbered from 1 to N) and M companies (numbered from 1 to M) taking part in it. Each candidate has a certain minimum expectation of salary, which is given by the array minSalary (All the arrays are 1-indexed). For each candidate, you are also given the information regarding the companies which have selected him. This information is given by an array qual of size N * M, where qual[i][j] = 1 if and only if the i-th candidate has qualified for a job in the j-th company. A company will provide a fixed salary to the candidates it employs, which is given by the array offeredSalary. Also, a company has an upper bound on the number of candidates it can employ and finally give an offer to. This information is provided by array maxJobOffers.\nThe D-day has come. Each candidate from 1, 2, .. N (in this order) will go to the placements coordinator. When the i-th student goes, among the companies which have selected him, and which still haven't reached their maxJobOffers limit, he picks the company which provides the maximum offeredSalary, provided that it is at least his minSalary.\nYou have to find the number of the candidates that will end up with a job, the total amount of salaries that the candidates will get, and the number of companies that won't be able to employ even a single candidate. This information is very crucial for the placement coordinator, so as to analyze whether it makes sense to invite a company to come to the placements session next year or not. Please help the coordinator!\nInput\n\nThe first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows\nFirst line of each test case contains two space separated integer N, M.\nThe next line contains N space separated integers denoting the array minSalary.\nEach of the next M lines contains two space separated integers denoting offeredSalary[i] and maxJobOffers[i].\nThe next N lines will contain the description of the 2-D array qual. Each of the N lines will contain M binary integers (without any space): j-th integer in the i-th line will denote qual[i][j].\n\nOutput\n\nFor each test case, output three integers in a new line, denoting the number of the candidates that will get a job, the total amount of salaries that the candidates will get, and the number of companies that won't be able to hire even a single candidate.\n\nConstraints\n\n 1 \u2264 T \u2264 10\n 1 \u2264 N, M \u2264 103\n 0 \u2264 minSalary[i] \u2264 109\n 0 \u2264 qual[i][j] \u2264 1\n 1 \u2264 offeredSalary[i] \u2264 109\n 1 \u2264 maxJobOffers[i] \u2264 106\nAll elements of the array offeredSalary are distinct\n\nSubtasks\n\nSubtask 1 (30 points): 1 \u2264 N, M \u2264 200\nSubtask 2 (70 points): Original Constraints",
            "input_format": "",
            "output_format": "",
            "problem_name": "Greedy Candidates",
            "user_tags": [
                "ad-hoc"
            ],
            "computed_tags": [
                "Algorithms",
                "Constructive"
            ],
            "problem_code_id": "GCAC",
            "difficulty_level": "1678",
            "ai_solutions": [
                "T = int(input().strip())\nfor _ in range(T):\n    N, M = map(int, input().strip().split())\n    minSalary = list(map(int, input().strip().split()))\n    offeredSalary = []\n    maxJobOffers = []\n    for _ in range(M):\n        o, m = map(int, input().strip().split())\n        offeredSalary.append(o)\n        maxJobOffers.append(m)\n    qual = []\n    for _ in range(N):\n        qual.append(list(map(int, list(input().strip()))))\n    company = [0]*M\n    student = [0]*N\n    total = 0\n    for i in range(N):\n        max_salary = -1\n        max_index = -1\n        for j in range(M):\n            if qual[i][j] == 1 and maxJobOffers[j] > 0 and offeredSalary[j] > max_salary:\n                max_salary = offeredSalary[j]\n                max_index = j\n        if max_index != -1 and max_salary >= minSalary[i]:\n            maxJobOffers[max_index] -= 1\n            company[max_index] = 1\n            student[i] = 1\n            total += max_salary\n    print(sum(student), total, M - sum(company))\n"
            ],
            "human_solutions": [
                {
                    "id": 94463765,
                    "submission_date": 1681495307,
                    "language": "PYTH 3",
                    "username": "bikram_001",
                    "user_rating_star": 3,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "1.76",
                    "memory": "12M",
                    "solution": 94463765,
                    "code": "for _ in range(int(input())):\r\n    n,m=map(int,input().split())\r\n    sal=list(map(int,input().split()))\r\n    c={}\r\n    ma=[]\r\n    com=[0]*m\r\n    tms=0\r\n    count=0\r\n    for i in range(m):\r\n        v=list(map(int,input().split()))\r\n        ma.append(v[1])\r\n        c[i]=v[0]\r\n    l=[input() for i in range(n)]\r\n    s=-1\r\n    for i in l:\r\n        s+=1\r\n        ms=0\r\n        val=-1\r\n        for k in range(m):\r\n            if(i[k]=='1' and ma[k]>0):\r\n                if(ms<c[k]):\r\n                    ms=c[k]\r\n                    val=k\r\n        if(val!=-1 and sal[s]<=c[val]):\r\n            tms+=ms\r\n            count+=1\r\n            ma[val]-=1\r\n            com[val]=1\r\n    print(count,tms,m-sum(com))\r\n        \r\n                \r\n                \r\n                "
                },
                {
                    "id": 61933738,
                    "submission_date": 1648987050,
                    "language": "PYTH 3",
                    "username": "amulya_0408",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "1.70",
                    "memory": "18M",
                    "solution": 61933738,
                    "code": "def solution():\n    N, M = map(int, input().split())\n    \n    minSalary = list(map(int, input().split()))\n    offeredSalary = []\n    maxJobOffers = []\n    \n    for i in range(M):\n        salary, offer = map(int, input().split())\n        offeredSalary.append(salary)\n        maxJobOffers.append(offer)\n    \n    qual = []\n\n    for i in range(N):\n        qual.append([ c == '1' for i, c in enumerate(input())])\n\n    placements_count = 0\n    total_salary = 0\n    \n    hiring_companies = set()\n\n    for i in range(N):\n        selected = -1;\n        for j in range(M):\n            if qual[i][j] and maxJobOffers[j] > 0 and offeredSalary[j] >= minSalary[i]:\n                if selected == -1 or offeredSalary[selected] < offeredSalary[j]:\n                    selected = j;\n        if selected >= 0:\n            maxJobOffers[selected] -= 1\n            placements_count += 1\n            total_salary += offeredSalary[selected]\n            hiring_companies.add(selected)\n    \n    print(placements_count, end = \" \")\n    print(total_salary, end = \" \")\n    print(M - len(hiring_companies))\n\n\nT = int(input())\nwhile(T > 0):\n    T = T - 1\n    solution()\n"
                }
            ]
        },
        "CHEFMOVR": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "3\r\n5 2\r\n1 4 5 2 3\r\n3 1\r\n1 4 1\r\n4 2\r\n3 4 3 5",
                    "output": "3\r\n2\r\n-1",
                    "explanation": "Testcase 1:\nHere is a possible sequence of usages of the mover:\n\nMove 1 from A3 to A1\nMove 1 from A3 to A1\nMove 1 from A2 to A4\n\nAt the end, the array becomes (3, 3, 3, 3, 3), which Snuffles likes. And you cannot achieve this in fewer moves. Hence the answer is 3.\nTestcase 2:\nHere is a possible sequence of usages of the mover:\n\nMove 1 from A2 to A1\nMove 1 from A2 to A3\n\nAt the end, the array becomes (2, 2, 2), which Snuffles likes. And you cannot achieve this in fewer moves. Hence the answer is 2.\nTestcase 3:\nIt is impossible to make all the elements equal. Hence the answer is -1."
                }
            ],
            "problem_statement": "Read problems statements in mandarin chinese, russian and vietnamese as well.\nChef's dog Snuffles has so many things to play with! This time around, Snuffles has an array A containing N integers: A1, A2, ..., AN.\nBad news: Snuffles only loves to play with an array in which all the elements are equal.\nGood news: We have a mover of size D. ! \nA mover of size D is a tool which helps to change arrays. Chef can pick two existing elements Ai and Aj from the array, such that i + D = j and subtract 1 from one of these elements (the element should have its value at least 1), and add 1 to the other element. In effect, a single operation of the mover, moves a value of 1 from one of the elements to the other.\nChef wants to find the minimum number of times she needs to use the mover of size D to make all the elements of the array A equal. Help her find this out.\nInput\n\nThe first line of the input contains an integer T, denoting the number of test cases. The description of T test cases follows.\nThe first line of each test case contains two integers N and D, denoting the number of elements in the array and the size of the mover. \nThe second line of each testcase contains N space-separated integers: A1, A2, ..., AN, denoting the initial elements of the array. \n\nOutput\n\nFor each test case, output a single line containing the minimum number of uses or -1 if it is impossible to do what Snuffles wants.\n\nConstraints\n\n1 \u2264 T \u2264 10\n2 \u2264 N \u2264 105\n1 \u2264 D N\n1 \u2264 Ai \u2264 109\n\nSubtasks\n\nSubtask 1 (30 points) : N \u2264  103\nSubtask 2 (70 points) : Original constraints",
            "input_format": "",
            "output_format": "",
            "problem_name": "Chef and Mover",
            "user_tags": [
                "Observation"
            ],
            "computed_tags": [
                "Algorithms"
            ],
            "problem_code_id": "CHEFMOVR",
            "difficulty_level": "1674",
            "ai_solutions": [
                "def min_moves(T, test_cases):\n    for _ in range(T):\n        N, D, A = test_cases[_]\n        total = sum(A)\n        if total % N != 0:\n            print(-1)\n            continue\n        target = total // N\n        moves = 0\n        for i in range(D):\n            j = i\n            temp = 0\n            while j < N:\n                temp += A[j] - target\n                moves += abs(temp)\n                j += D\n            if temp != 0:\n                print(-1)\n                break\n        else:\n            print(moves)\n\nT = int(input())\ntest_cases = []\nfor _ in range(T):\n    N, D = map(int, input().split())\n    A = list(map(int, input().split()))\n    test_cases.append((N, D, A))\nmin_moves(T, test_cases)"
            ],
            "human_solutions": [
                {
                    "id": 94117881,
                    "submission_date": 1681119762,
                    "language": "PYTH 3",
                    "username": "prathmeshjiraf",
                    "user_rating_star": 3,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.58",
                    "memory": "25.8M",
                    "solution": 94117881,
                    "code": "for _ in range(int(input())):\r\n    n,d=map(int,input().split())\r\n    a=list(map(int,input().split()))\r\n    y=sum(a)/n \r\n    if y%1!=0:\r\n        print(-1)\r\n    else:\r\n        ans=0\r\n        flag=0\r\n        for i in range(n-d):\r\n            r=a[i]-y\r\n            a[i]=y\r\n            a[i+d]+=r \r\n            ans+=abs(r)\r\n        \r\n        if a.count(y)==n:\r\n            print(int(ans))\r\n        else:\r\n            print(-1)\r\n            "
                },
                {
                    "id": 80094340,
                    "submission_date": 1668576825,
                    "language": "PYTH 3",
                    "username": "shreejab22",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.79",
                    "memory": "25.9M",
                    "solution": 80094340,
                    "code": "T = int(input())\r\nfor i in range(T):\r\n    N, D = map(int,input().split())\r\n    arr = list(map(int,input().split()))\r\n    \r\n    total = sum(arr)\r\n    if(total % len(arr) != 0):\r\n        print(-1)\r\n    else:\r\n        div = total // len(arr)\r\n        j = 0\r\n        count = 0\r\n        while j + D < len(arr):\r\n            if (arr[j] < div):\r\n                diff = div - arr[j]\r\n                count += diff\r\n                arr[j] += diff\r\n                arr[j+D] -= diff\r\n            elif (arr[j] > div):\r\n                diff = arr[j] - div\r\n                count += diff\r\n                arr[j] -= diff\r\n                arr[j+D] += diff  \r\n            j+=1\r\n        while j < len(arr):\r\n            if arr[j] != div:\r\n                count = -1\r\n                break\r\n            j+=1\r\n        print(count)"
                }
            ]
        },
        "NEO01": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "1\n3\n-8 0 -2",
                    "output": "-10",
                    "explanation": "Example case 1. You can eat the first dish in the first step,\n the second dish in the second step and the third dish in the third step.\ntotal happiness = 1*(-8) + 1*0 + 1*(-2) = -10"
                },
                {
                    "input": "1\n3\n1 2 3",
                    "output": "18",
                    "explanation": ""
                }
            ],
            "problem_statement": "Read problems statements in Russian.\nChef has prepared a feast with N dishes for you. You like Chef's cooking, and so you want to eat all the dishes he has prepared for you. You are also given an array A of size N, where Ai represents the happiness you get by eating the i-th dish.You will eat all the dishes in a series of steps. In each step, you pick a non empty subset of the remaining dishes and eat them. The happiness you get from eating these dishes is the size of the subset multiplied by the sum of the individual happiness from the dishes in the subset. You want to maximize the happiness you get from the entire feast, which is the sum of happiness in each step.\nInput\n The first line contains T, the number of test cases.\nThe first line of each test case contains a single integer N, denoting the number of dishes prepared by the Chef.\nThe second line of each test case contains contains N space-separated integers: A1, A2, ..., AN denoting the happiness gained by eating the dishes.\nOutput\nOutput a single number denoting the maximum happiness you can get from the feast.\nConstraints\n1 \u2264 T \u2264 8\n1 \u2264 N \u2264 105\n-108 \u2264 Ai \u2264 108\n\nSubtasks\nSubtask #1: Ai \u2264 0 (30 points)\nSubtask #2: Original Constraints (70 points)",
            "input_format": "",
            "output_format": "",
            "problem_name": "Chef and the Feast",
            "user_tags": [
                "Sorting",
                "Brute Force"
            ],
            "computed_tags": [
                "Algorithms"
            ],
            "problem_code_id": "NEO01",
            "difficulty_level": "1633",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 61967061,
                    "submission_date": 1649045255,
                    "language": "PYTH 3",
                    "username": "artificialmind",
                    "user_rating_star": 3,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.37",
                    "memory": "26M",
                    "solution": 61967061,
                    "code": "def max_happiness(arr):\r\n    pos = []\r\n    neg = []\r\n    for y in arr:\r\n        if y > 0:\r\n            pos.append(y)\r\n        else:\r\n            neg.append(y)\r\n    if len(pos) == len(arr):\r\n        return sum(pos)*len(pos)\r\n    elif len(neg) == len(arr):\r\n        return sum(neg)\r\n    else:\r\n        arr.sort()\r\n        arr.reverse()\r\n        i = 0\r\n        s = arr[i]\r\n        current = arr[i]\r\n        j = 1\r\n        while j < len(arr):\r\n            current += arr[j]\r\n            happiness = current*(j - i + 1)\r\n            if happiness >= s:\r\n                s = happiness\r\n                j += 1\r\n            else:\r\n                return s + sum(arr[j: len(arr)])\r\n        return s\r\n\r\n\r\ntest_cases = int(input())\r\nwhile test_cases != 0:\r\n    data = input()\r\n    data2 = list(map(int, input().split()))\r\n    print(max_happiness(data2))\r\n    test_cases -= 1\r\n"
                },
                {
                    "id": 61788469,
                    "submission_date": 1648875612,
                    "language": "PYTH 3",
                    "username": "niharikagottam",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.67",
                    "memory": "25.7M",
                    "solution": 61788469,
                    "code": "for _ in range(int(input())):\n    n = int(input())\n    A = list(map(int, input().split())) \n    A = sorted(A)[::-1]\n    left = 0\n    summ = sum(A)\n    right = summ\n    ans = -float('inf')\n    for i in range(n):\n        left += A[i]\n        right -= A[i]\n        ans = max(ans, (i+1)*left + right)\n    print(ans)"
                }
            ]
        },
        "BEAUTGAR": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "3\r\nRG\r\nRRGG\r\nRR",
                    "output": "yes\r\nyes\r\nno",
                    "explanation": "Example case 1: The garland is already beautiful.\nExample case 2: We can cut the garland between flowers 1 and 2 and between flowers 3 and 4. After reversing the part containing flowers 2 and 3 and rejoining, we obtain \"RGRG\"."
                }
            ],
            "problem_statement": "Read problems statements in Hindi, Mandarin Chinese, Russian, Vietnamese and Bengali as well.\nThere is a garland \u2014 a cyclic rope with red and green flowers on it in some order. The sequence of flower colours is described by a string $s$; since the rope is cyclic, each two consecutive flowers are adjacent and the first and last flower are also adjacent.\nThe garland is beautiful if there is no pair of adjacent flowers with identical colours.\nYou want the garland to be beautiful. To achieve that, you may perform the following operation at most once:\n- Make two cuts on the rope (not intersecting the flowers), splitting the garland into two parts.\n- Reverse one of these two parts.\n- Tie together corresponding endpoints of the two parts, creating one whole garland again.\nCan you find out whether it is possible to make the garland beautiful?\nInput\n\nThe first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\nThe first and only line of each test case contains a single string $s$ describing the garland. Each character of $s$ is either 'R' or 'G', denoting a red or green flower respectively.\n\nOutput\nFor each test case, print a single line containing the string \"yes\" if the garland can be made beautiful or \"no\" otherwise.\nConstraints\n\n$1 \\le T \\le 10^5$\n$2 \\le |s| \\le 10^5$\nthe sum of $|s|$ over all test cases does not exceed $10^6$",
            "input_format": "",
            "output_format": "",
            "problem_name": "Beautiful Garland",
            "user_tags": [
                "admin2",
                "cook100",
                "observation",
                "simple",
                "taran_1407"
            ],
            "computed_tags": [],
            "problem_code_id": "BEAUTGAR",
            "difficulty_level": "1601",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 37334341,
                    "submission_date": 1598870970,
                    "language": "PYTH 3",
                    "username": "mohil1698",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.36",
                    "memory": "17.6M",
                    "solution": 37334341,
                    "code": "def solve():\r\n    s = input()\r\n    rs, gs = s.count('R'), s.count('G')\r\n    if rs != gs:\r\n        return 'no'\r\n\r\n    count_g, count_r = 0, 0\r\n\r\n    if s[0] == s[len(s)-1]:\r\n        if s[0] == 'R':\r\n            count_r += 1\r\n        else:\r\n            count_g += 1\r\n\r\n    for i in range(1, len(s)):\r\n        if s[i] == s[i-1]:\r\n            if s[0] == 'R':\r\n                count_r += 1\r\n            else:\r\n                count_g += 1\r\n\r\n    if count_g+count_r == 2 or count_r+count_g == 0:\r\n        return 'yes'\r\n    else:\r\n        return 'no'\r\n\r\n\r\ntc = int(input())\r\nfor _ in range(tc):\r\n    print(solve())\r\n"
                },
                {
                    "id": 33131870,
                    "submission_date": 1589708709,
                    "language": "PYTH 3",
                    "username": "shanu_26",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.33",
                    "memory": "17.6M",
                    "solution": 33131870,
                    "code": "for _ in range(int(input())):\n    string=input()\n    if(len(string) % 2 == 1):\n        print(\"no\")\n    elif(string.count('R') != string.count('G')):\n        print(\"no\")\n    else:\n        count=0\n        for i in range(1,len(string)):\n            if(string[i] == string[i-1]):\n                count+=1\n        if(count<=2):\n            print(\"yes\")\n        else:\n            print(\"no\")        \n        "
                }
            ]
        },
        "GRID": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "2\n3\n#..\n#..\n#..\n3\n#.#\n#.#\n#.#",
                    "output": "6\n0",
                    "explanation": "Example case 1. All places where rock are not there are valid positions.Example case 2. No valid positions."
                }
            ],
            "problem_statement": "Read problems statements in English, Mandarin Chinese and Russian as well.\nSherlock is stuck. There is a N X N grid in which some cells are empty (denoted by \u2018.\u2019), while some cells have rocks in them (denoted by \u2018#\u2019). Sherlock is on the South of the grid. He has to watch what is happening on the East of the grid. He can place a mirror at 45 degrees on an empty cell in the grid, so that he'll see what is happening on East side by reflection from the mirror.\nBut, if there's a rock in his line of sight, he won't be able to see what's happening on East side. For example, following image shows all possible cells in which he can place the mirror.\n\n\nYou have to tell Sherlock in how many possible cells he can place the mirror and see what's happening on East side.\nInput\nFirst line, T, the number of testcases. Each testcase will consist of N in one line. Next N lines each contain N characters.\nOutput\nFor each testcase, print the number of possible options where mirror can be placed to see on the East side.\nConstraints\n1 \u2264 T \u2264 10\n1 \u2264 N \u2264 1000\n\n\u00a0\nNote: Large input data. Use fast input/output.\nTime limit for PYTH and PYTH 3.1.2 has been set 8s.",
            "input_format": "",
            "output_format": "",
            "problem_name": "Sherlock and the Grid",
            "user_tags": [
                "Bottom-up"
            ],
            "computed_tags": [
                "Algorithms",
                "Dynamic Programming",
                "DP Approach"
            ],
            "problem_code_id": "GRID",
            "difficulty_level": "1693",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 34458964,
                    "submission_date": 1592292059,
                    "language": "PYTH 3",
                    "username": "joyous_shah",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "4.37",
                    "memory": "20.6M",
                    "solution": 34458964,
                    "code": "T=int(input())\r\nfor i in range(T):\r\n    N=int(input())\r\n    A=list()\r\n    for j in range(N):\r\n        A.append(input())\r\n    B=['.'*N]*N\r\n    C=['.'*N]*N\r\n    for k in range(N):\r\n        for l in range(N-1,-1,-1):\r\n            if A[k][l]=='#':\r\n                B[k]='#'*(l+1)+\".\"*(N-1-l)\r\n                break\r\n        for m in range(N-1,-1,-1):\r\n            if A[m][k]=='#':\r\n                C[k]='#'*(m+1)+'.'*(N-1-m)\r\n                break\r\n    sum=0\r\n    for u in range(N):\r\n        for v in range(N):\r\n            if B[u][v]==C[v][u]=='.':\r\n                sum+=1\r\n    print(sum)\r\n"
                },
                {
                    "id": 33382889,
                    "submission_date": 1590596997,
                    "language": "PYTH 3",
                    "username": "anjalinair2226",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "2.36",
                    "memory": "18.6M",
                    "solution": 33382889,
                    "code": "from sys import stdin\ntc=int(stdin.readline())\nfor i in range(tc):\n    n=int(stdin.readline())\n    list1=[]\n    for j in range(n):\n        s1=stdin.readline()\n        list1.append(s1)\n    f_n=[1]*n\n    f_e=[1]*n\n    count=0\n    for k in range(n-1,-1,-1):\n        for l in range(n-1,-1,-1):\n            if list1[k][l]==\"#\":\n                f_n[k]=0\n                f_e[l]=0\n            elif f_e[l] and f_n[k]:\n                count+=1\n    print(count)\n    "
                }
            ]
        },
        "SURVIVE": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "2\n16 2 10\n50 48 7",
                    "output": "2\n-1",
                    "explanation": "Example case 1: One possible solution is to buy a box on day 1 (Monday); it's sufficient to eat from this box up to day 8 (Monday) inclusive. Now, on day 9 (Tuesday), you buy another box and use the chocolates in it to survive days 9 and 10.\nExample case 2: You will not be able to survive even if you buy from the shop everyday except every 7-th day."
                }
            ],
            "problem_statement": "Read problems statements in Mandarin chinese, Russian and Vietnamese as well.\n\nYou are a poor person in ChocoLand. Here, people eat chocolates daily instead of normal food. There is only one shop near your home; this shop is closed on Sunday, but open on all other days of the week. You may buy at most one box of N chocolates from this shop on each day when it is open.\n\n\nCurrently, it's Monday, and you need to survive for the next S days (including the current day). You have to eat K chocolates everyday (including the current day) to survive. Do note that you are allowed to buy the a chocolate box and eat from it on the same day.\n\n\nCompute the minimum number of days on which you need to buy from the shop so that you can survive the next S days, or determine that it isn't possible to survive.\n\nInput\n\nThe first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows.\nThe first and only line of each test case contains 3 integers N, K and S denoting the number of chocolates in a box, the number of chocolates you have to eat everyday to survive and the number of days you need to survive.\n\nOutput\nFor each test case, print a single line containing one integer \u2014 the minimum number of days on which you need to buy from the shop to survive, or -1 if you will not be able to survive S days.\nConstraints\n\n1 \u2264 T \u2264 100\n1 \u2264 N \u2264 100\n1 \u2264 K \u2264 100\n1 \u2264 S \u2264 1000",
            "input_format": "",
            "output_format": "",
            "problem_name": "Survive in ChocoLand",
            "user_tags": [
                "Basic Maths",
                "Greedy"
            ],
            "computed_tags": [
                "Mathematics",
                "Algorithms"
            ],
            "problem_code_id": "SURVIVE",
            "difficulty_level": "1616",
            "ai_solutions": [
                "T = int(input())\nfor _ in range(T):\n    N, K, S = map(int, input().split())\n    if K > N:\n        print(-1)\n    elif K * S > N * ((S // 7) * 6 + min(S % 7, 6)):\n        print(-1)\n    else:\n        print((K * S + N - 1) // N)",
                "T = int(input())\nfor _ in range(T):\n    N, K, S = map(int, input().split())\n    if K * S <= N * S - (S // 7) * N:\n        print((K * S + N - 1) // N)\n    else:\n        print(-1)"
            ],
            "human_solutions": [
                {
                    "id": 34938616,
                    "submission_date": 1593713690,
                    "language": "PYTH 3",
                    "username": "hrohilla97",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.01",
                    "memory": "17.5M",
                    "solution": 34938616,
                    "code": "test = int(input())\n\ndef checkSurvival(n,k,s):\n    \n    if n<k:\n        return -1\n    \n    elif s>=7 and ((n-k)*6)<k:\n        return -1\n    \n    else:\n        choco = k*s\n        present = 0\n        daysMin = 0\n        \n        for i in range(1,s+1):\n            if i%7!=0:\n                present+=n\n                daysMin+=1\n            else:\n                continue\n            if present>=choco:\n                return daysMin\n                \nfor _ in range(test):\n    n,k,s = map(int, input().split())\n    \n    result = checkSurvival(n,k,s)\n    print(result)    "
                },
                {
                    "id": 34858800,
                    "submission_date": 1593406567,
                    "language": "PYTH 3",
                    "username": "noore4",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.02",
                    "memory": "17.6M",
                    "solution": 34858800,
                    "code": "for i in range(int(input())):\n    n,k,s = list(map(int,input().split()))\n    total = k*s\n    count = 0\n    k = 0\n    y = False\n    for i in range(1,s+1):\n        #print(i)\n        if i%7!=0:\n            count+=n\n            k+=1\n        else:\n            continue\n        if count>=total:\n            y = True\n            break\n    #print(count,total)\n    if y:\n        print(k)\n    else:\n        print(-1)"
                }
            ]
        },
        "PRPOTION": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "3\n1 1 1 1\n1\n2\n3\n1 1 1 1\n2\n4\n6\n3 2 2 2\n1 2 3\n2 4\n6 8",
                    "output": "2\n4\n4",
                    "explanation": "Example case 1. Magical girl can pick the blue potion and make its liquid amount half. So the potions will now have amounts 1 2 1. Maximum of these values is 2. Hence answer is 2."
                }
            ],
            "problem_statement": "Read problems statements in Mandarin Chinese  and Russian.\n\nNaturally, the magical girl is very good at performing magic. She recently met her master wizard Devu, who gifted her R potions of red liquid, \nB potions of blue liquid, and G potions of green liquid.\n\n\n\n\nThe red liquid potions have liquid amounts given by r[1], ..., r[R] liters. \n\n\nThe green liquid potions have liquid amounts given by g[1], ..., g[G] liters. \n\n\nThe blue liquid potions have liquid amounts given by b[1], ..., b[B] liters. \n\n\n\nShe want to play with the potions by applying magic tricks on them. In a single magic trick, she will choose a particular color. Then she will pick all the potions of the chosen color and decrease the amount of liquid in them to half (i.e. if initial amount \nof liquid is x, then the amount after decrement will be x / 2  where division is integer division, e.g. 3 / 2 = 1 and 4 / 2 = 2). \n\nBecause she has to go out of station to meet her uncle Churu, a wannabe wizard, only M minutes are left for her. In a single minute, she can perform at most one magic trick. Hence, she can perform at most M magic tricks.\n\n\nShe would like to minimize the maximum amount of liquid among all of Red, Green and Blue colored potions. Formally Let v be the maximum value of amount of liquid in any potion. We want to minimize the value of v.\nPlease help her.\n\nInput\n\nFirst line of the input contains an integer T denoting the number of test cases.\nThen for each test case, we have four lines.\n\nThe first line contains four space separated integers R, G, B, M. The next 3 lines will describe the amount of different color liquids (r, g, b), which are separated by space.\n\nOutput\nFor each test case, print a single integer denoting the answer of the problem.\nConstraints\n 1 \u2264 T \u2264 1000 \n 1 \u2264 R, G, B, M \u2264 100 \n 1 \u2264 r[i], g[i], b[i] \u2264 10^9",
            "input_format": "",
            "output_format": "",
            "problem_name": "Magical Girl and Colored Liquid Potions",
            "user_tags": [
                "Basic Maths",
                "ad-hoc"
            ],
            "computed_tags": [
                "Mathematics",
                "Algorithms",
                "Constructive"
            ],
            "problem_code_id": "PRPOTION",
            "difficulty_level": "1609",
            "ai_solutions": [
                "T = int(input())\nfor _ in range(T):\n    R, G, B, M = map(int, input().split())\n    r = list(map(int, input().split()))\n    g = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    for _ in range(M):\n        max_val = max(max(r), max(g), max(b))\n        if max_val == max(r):\n            r = [i//2 for i in r]\n        elif max_val == max(g):\n            g = [i//2 for i in g]\n        else:\n            b = [i//2 for i in b]\n    print(max(max(r), max(g), max(b)))",
                "T = int(input())\nfor _ in range(T):\n    R, G, B, M = map(int, input().split())\n    r = max(map(int, input().split()))\n    g = max(map(int, input().split()))\n    b = max(map(int, input().split()))\n    for _ in range(M):\n        max_val = max(r, g, b)\n        if max_val == r:\n            r = r//2\n        elif max_val == g:\n            g = g//2\n        else:\n            b = b//2\n    print(max(r, g, b))"
            ],
            "human_solutions": [
                {
                    "id": 38954635,
                    "submission_date": 1602784675,
                    "language": "PYTH 3",
                    "username": "niladriclw",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.61",
                    "memory": "17.5M",
                    "solution": 38954635,
                    "code": "for _ in range(int(input())):\n    r,g,b,m=list(map(int, input().split()))\n    l=[]\n    for i in range(3):\n        l1=list(map(int, input().split()))\n        l.append(l1)\n            \n    for i in range(m+1):\n        a=0\n        b=0\n        for j in range(3):\n            m=max(l[j])\n            if m>a:\n                a=m \n                b=j \n                \n        for k in range(len(l[b])):\n            l[b][k]=l[b][k]//2\n                \n    print(a)"
                },
                {
                    "id": 35613005,
                    "submission_date": 1594661250,
                    "language": "PYTH 3",
                    "username": "niteshk2",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.56",
                    "memory": "17.6M",
                    "solution": 35613005,
                    "code": "t=int(input())\nwhile(t>0):\n    r,g,q,m=map(int,input().split())\n    a=list(map(int,input().split()))\n    b=list(map(int,input().split()))\n    c=list(map(int,input().split()))\n    for i in range(m):\n        x=max(a)\n        y=max(b)\n        z=max(c)\n        if(x>=y)and(x>=z):\n            for j in range(r):\n                a[j]//=2\n        elif(y>=x)and(y>=z):\n            for j in range(g):\n                b[j]//=2\n        else:\n            for j in range(q):\n                c[j]//=2\n    x=max(a)\n    y=max(b)\n    z=max(c)\n    print(max(x,max(y,z)))\n    t-=1"
                }
            ]
        },
        "CHEFBRO": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "1\n1\n2 2",
                    "output": "MasterChef",
                    "explanation": "The Chef can move the coin on the board from (1,1)->(2,2). This coin cannot be moved any further. And so, the Chef wins.\nNotice that if the Chef moves it to any other valid position, i.e. either to (1,2) or (2,1) he will lose!"
                }
            ],
            "problem_statement": "Chef's younger brother is in town. He's a big football fan and has a very important match to watch tonight. But the Chef wants to watch the season finale of MasterChef which will be aired at the same time. Now they don't want to fight over it like they used to when they were little kids. They want to decide it in a fair way. So they agree to play a game to make a decision. Their favourite childhood game!\nThe game consists of C boards. Each board i is a grid of dimension ni x mi.\n\nRules of the game:\n- A coin is placed at (1,1) on every board initially.\n- Each one takes a turn alternatively.\n- In one turn, a player can choose any one board and move a coin from a cell (i,j) to one of the following cells:\n    (i+1,j) OR (i+2,j) OR (i,j+1) OR (i,j+2) OR (i+1,j+1) OR (i+2,j+2).\n- A coin cannot be moved out of the board at any point during the game.\n- A coin cannot be moved once it reaches the cell (n,m) where n and m are the dimensions of the board of that coin.\n- A player MUST make one valid move.\n- The player who makes the last move gets to watch TV. \n\nBoth of them are passionate about their interests and want to watch their respective shows. So they will obviously make optimal moves in every turn. The Chef, being the elder brother, takes the first turn.\nYour task is to predict which show they will be watching tonight.\nInput:\nThe first line of input contains a single integer T, the number of test cases. T tests follow.Each test case starts with a single line containing C, the number of boards in the game.\nThen follow C lines: each containing 2 integers ni and mi, the dimensions of the ith board.\nOutput:\nGiven the number and dimensions of boards, for each test case, output in a single line: \"MasterChef\" if the Chef wins or \"Football\" if his brother wins.\nConstraints:\n1<=T<=10000\n1<=C<=20\n2<=ni,mi<=1000",
            "input_format": "",
            "output_format": "",
            "problem_name": "Younger Brother",
            "user_tags": [
                "Game Theory",
                "Sprague Grundy Theorem",
                "ad-hoc"
            ],
            "computed_tags": [
                "Algorithms",
                "Constructive"
            ],
            "problem_code_id": "CHEFBRO",
            "difficulty_level": "1689",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 40462688,
                    "submission_date": 1608036299,
                    "language": "PYTH 3",
                    "username": "arin17",
                    "user_rating_star": 3,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.20",
                    "memory": "10.4M",
                    "solution": 40462688,
                    "code": "# region fastio\nimport os\nimport sys\nfrom io import BytesIO, IOBase\n\nBUFSIZE = 8192\n\n\nclass FastIO(IOBase):\n    newlines = 0\n\n    def __init__(self, file):\n        self._fd = file.fileno()\n        self.buffer = BytesIO()\n        self.writable = \"x\" in file.mode or \"r\" not in file.mode\n        self.write = self.buffer.write if self.writable else None\n\n    def read(self):\n        while True:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            if not b:\n                break\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines = 0\n        return self.buffer.read()\n\n    def readline(self):\n        while self.newlines == 0:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            self.newlines = b.count(b\"\\n\") + (not b)\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines -= 1\n        return self.buffer.readline()\n\n    def flush(self):\n        if self.writable:\n            os.write(self._fd, self.buffer.getvalue())\n            self.buffer.truncate(0), self.buffer.seek(0)\n\n\nclass IOWrapper(IOBase):\n    def __init__(self, file):\n        self.buffer = FastIO(file)\n        self.flush = self.buffer.flush\n        self.writable = self.buffer.writable\n        self.write = lambda s: self.buffer.write(s.encode(\"ascii\"))\n        self.read = lambda: self.buffer.read().decode(\"ascii\")\n        self.readline = lambda: self.buffer.readline().decode(\"ascii\")\n\n\nsys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\n\n# endregion\n\n\nif __name__ == '__main__':\n    for _ in range(int(input())):\n        x = 0\n        for c in range(int(input())):\n            n, m = map(int, input().split())\n            g = (m + n - 2) % 3\n            x = x ^ g\n        if x:\n            ans = \"MasterChef\"\n        else:\n            ans = \"Football\"\n        print(ans)\n"
                },
                {
                    "id": 37364192,
                    "submission_date": 1598957984,
                    "language": "PYTH 3",
                    "username": "maths_man",
                    "user_rating_star": 3,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.19",
                    "memory": "17.6M",
                    "solution": 37364192,
                    "code": "res=\"\"\nfor _ in range(int(input())):\n    ans=0\n    c=int(input())\n    for i in range(c):\n        n,m=map(int,input().split( ))\n        ans^=(n+m-2)%3\n    if ans:\n        res+=\"MasterChef\\n\"\n    else:\n        res+=\"Football\\n\"\nprint(res)\n        \n        \n        "
                }
            ]
        },
        "PRIMES2": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "81\n85\n155\n0",
                    "output": "5 7 3\n73 2 2\n5 5 5",
                    "explanation": ""
                }
            ],
            "problem_statement": "Chef has been exploring prime numbers lately, and has recently made a conjecture resembling\none of Goldbach's conjectures.\nChef's conjecture is that any odd number greater than 61 can be expressed as the sum of\na prime, a square of a prime, and a cube of a prime.\nHe wants you to help verify his conjecture for small numbers.\nNote: negative numbers are never considered to be prime, nor are 0 and 1.\nInput\nInput will consist of a series of odd numbers greater than 61 and less than 106, \none per line, terminated by the number 0 on a line by itself.\nThere will be at most 1000 lines.\nOutput\nFor each odd number in the input, print 3 primes P1, P2, P3 on a line,\nwhere P1 + P22 + P33 is equal to the number from the input.\nIf no such primes exist, print \"0 0 0\" instead (quotes for clarity).\nIf there are multiple triplets of primes that satisfy the equation, print any such triplet.",
            "input_format": "",
            "output_format": "",
            "problem_name": "A Prime Conjecture",
            "user_tags": [
                "Sieve of Eratosthenes",
                "ad-hoc",
                "Brute Force",
                "Primes"
            ],
            "computed_tags": [
                "Mathematics",
                "Number Theory",
                "Algorithms",
                "Constructive"
            ],
            "problem_code_id": "PRIMES2",
            "difficulty_level": "1619",
            "ai_solutions": [
                "from math import sqrt\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef chef_conjecture(n):\n    for i in range(2, n):\n        if is_prime(i):\n            for j in range(2, n):\n                if is_prime(j):\n                    for k in range(2, n):\n                        if is_prime(k):\n                            if i + j**2 + k**3 == n:\n                                return i, j, k\n    return 0, 0, 0\n\nwhile True:\n    n = int(input())\n    if n == 0:\n        break\n    p1, p2, p3 = chef_conjecture(n)\n    print(p1, p2, p3)",
                "from math import sqrt\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef chef_conjecture(n):\n    primes = [i for i in range(2, n) if is_prime(i)]\n    for i in primes:\n        for j in primes:\n            for k in primes:\n                if i + j**2 + k**3 == n:\n                    return i, j, k\n    return 0, 0, 0\n\nwhile True:\n    n = int(input())\n    if n == 0:\n        break\n    p1, p2, p3 = chef_conjecture(n)\n    print(p1, p2, p3)"
            ],
            "human_solutions": [
                {
                    "id": 39809313,
                    "submission_date": 1606233068,
                    "language": "PYTH 3",
                    "username": "vittal_161",
                    "user_rating_star": 3,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.16",
                    "memory": "17.5M",
                    "solution": 39809313,
                    "code": "from math import sqrt\ndef is_prime(n):\n    for i in range(2,int(sqrt(n))+1):\n        if n%i==0:\n            return False\n    return True\nl=[]\nfor i in range(2,1000):\n    z=is_prime(i)\n    if z==True:\n        l.append(i)\nba=[]\nwhile True:\n    c=int(input())\n    if c!=0:\n     ba.append(c)\n    else:\n        break\nfor m in ba:\n  flg=0\n  for i in l:\n     for j in l:\n        k=m-(i**2+j**3)\n        if k>1:\n            if is_prime(k)==True:\n                print(k,i,j)\n                flg=1\n                break\n     if flg==1:\n        break\n  if flg==0:\n      print(0,0,0)"
                },
                {
                    "id": 30591860,
                    "submission_date": 1584712230,
                    "language": "PYTH 3",
                    "username": "navjeet8877",
                    "user_rating_star": 3,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "1.27",
                    "memory": "17.6M",
                    "solution": 30591860,
                    "code": "from math import sqrt\r\ndef checkPrime(n):\r\n    prime = True\r\n    if n <= 1:\r\n        return False\r\n    elif n == 2:\r\n        return True\r\n    else:\r\n        for i in range(2,int(sqrt(n)) + 1):\r\n            if n % i == 0:\r\n                prime = False\r\n                break\r\n        return prime\r\nprimes100 = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97,]\r\nprimes1000 = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\r\ntakeInput = True\r\nwhile takeInput:\r\n    N = int(input())\r\n    if N == 0:\r\n        takeInput = False\r\n    else:\r\n        found = False\r\n        array = []\r\n        for i in primes100:\r\n            for j in primes1000:\r\n                k = N - i*i*i - j*j\r\n                if checkPrime(k):\r\n                    array = [k,j,i]\r\n                    found = True\r\n                    break\r\n        if found:\r\n            print(*array)\r\n        else:\r\n            print('0 0 0')\r\n"
                }
            ]
        },
        "A2": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "2\n3\n0 1 2\n3\n0 0 3",
                    "output": "Yes\nNo",
                    "explanation": ""
                }
            ],
            "problem_statement": "One evening Johnny found some funny looking beens in his grandfather's garden shed, and decided to plant one of them. Next morning, to his surprise he found an enormous beanstalk growing in his back yard. Undaunted by its size, he decided to count its leaves.\n\n\nYou must know that beanstalks in Byteland grow in a very special way. At the lowest (1st) level, there is exactly one stem. At any level(including the 1st), a stem can end (forming exactly one leaf), or branch into exactly two stems which grow into the next level, following the same rules.\n\n\nJohnny believes he has managed to count the number of leaves at each of the levels of the beanstalk. However, you must know that before he began to count, Johnny ate one or two of the other beans he found in his grandfather's shed, and that's why he is not quite sure of his results. Please verify whether Johnny's results may possibly be correct, at least in theory.\n\n\n\nInput\nThe input starts with a line containing integer t, the number of test cases (1t t test cases follow.\n\nEach test case starts with an integer k, representing the number of levels of the beanstalk (1k6). The next k non-negative space-separated integers (not greater than 106) represent the number of leaves of the beanstalk at successive levels, starting from level 1.\n\n\nOutput\n\nFor each test case, output a line containing exactly one of the words 'Yes' or 'No', depending on whether a beanstalk having the stated leaf counts can grow in accordance with the Bytelandian rules.",
            "input_format": "",
            "output_format": "",
            "problem_name": "Johnny and the Beanstalk",
            "user_tags": [
                "Trees",
                "Basic Maths",
                "ad-hoc"
            ],
            "computed_tags": [
                "Data Structures",
                "Graphs",
                "Mathematics",
                "Algorithms",
                "Constructive"
            ],
            "problem_code_id": "A2",
            "difficulty_level": "1616",
            "ai_solutions": [
                "t = int(input())\nfor _ in range(t):\n    k = int(input())\n    leaves = list(map(int, input().split()))\n    stems = 1\n    for i in range(k):\n        if stems < leaves[i]:\n            print('No')\n            break\n        stems = stems - leaves[i]\n        stems *= 2\n    else:\n        if stems == 0:\n            print('Yes')\n        else:\n            print('No')",
                "def is_possible(leaves, k):\n    stems = 1\n    for i in range(k):\n        if stems < leaves[i]:\n            return 'No'\n        stems = stems - leaves[i]\n        stems *= 2\n    return 'Yes' if stems == 0 else 'No'\n\nt = int(input())\nfor _ in range(t):\n    k = int(input())\n    leaves = list(map(int, input().split()))\n    print(is_possible(leaves, k))"
            ],
            "human_solutions": [
                {
                    "id": 38093237,
                    "submission_date": 1600692396,
                    "language": "PYTH 3",
                    "username": "wicked_knight",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.28",
                    "memory": "22.9M",
                    "solution": 38093237,
                    "code": "for _ in range(int(input())):\n    k = int(input());arr = list(map(int,input().split()));d=0.5\n    for i in arr: d = d*2 - i\n    print(\"Yes\") if(d == 0) else print(\"No\")"
                },
                {
                    "id": 32313420,
                    "submission_date": 1587909269,
                    "language": "PYTH 3",
                    "username": "vjudge4",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.36",
                    "memory": "19.4M",
                    "solution": 32313420,
                    "code": "T=int(input())\nfor i in range(T):\n    k=int(input())\n    N=input().split(' ')\n    x=1/2\n    for j in range(k):\n        x=x*2-int(N[j])\n    if(x==0):\n        print('Yes')\n    else:\n        print('No')"
                }
            ]
        }
    },
    "3*": {
        "BINDIF": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "1110000",
                    "output": "10000000 10000",
                    "explanation": "1110000 is 112 in decimal.\n10000000 is 128 in decimal. 10000 is 16 in decimal. 128 - 16 = 112. Hence the given output is valid. The sum of the number of 1's in $A$ and $B$ is 1 + 1 = 2. You can check that this cannot be decreased. Hence this is a correct answer."
                }
            ],
            "problem_statement": "Given a binary number $S$ containing only of 1's and 0's, find two binary numbers $A$ and $B$ such that the sum of the number of 1's in $A$ and $B$ is minimum and $A-B=S$. If there are many such numbers, you can print any.\nThe binary number $S$ has some properties. See the Constraints section for details.\nInput:\n\nThe only line of input contains a single binary number $S$ without leading zeroes. \n\nOutput:\nPrint two numbers $A$ and $B$ in one line without leading zeroes. If any number is zero, just print $0$.\nConstraints\n\n$2 \\leq$ number of bits in $S \\leq 10^6$\nThe string $S$ has at least 1 one and 1 zero and has exactly two parts: all 1's followed by all 0's.",
            "input_format": "",
            "output_format": "",
            "problem_name": "Strings",
            "user_tags": [
                "avi224"
            ],
            "computed_tags": [],
            "problem_code_id": "BINDIF",
            "difficulty_level": "1769",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 100020710,
                    "submission_date": 1688882213,
                    "language": "PYTH 3",
                    "username": "vishalkeerthan",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.03",
                    "memory": "11M",
                    "solution": 100020710,
                    "code": "a=str(input().strip())\nif a.count('1')==1:\n    print(a,'0')\nelse:\n    print('1'+'0'*len(a),'1'+'0'*a.count('0'))"
                },
                {
                    "id": 89393525,
                    "submission_date": 1676441298,
                    "language": "PYTH 3",
                    "username": "rs5228127",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.03",
                    "memory": "10.9M",
                    "solution": 89393525,
                    "code": "s=str(input().strip())\r\nif s.count('1')==1:\r\n    print(s,'0')\r\nelse:\r\n    print('1'+'0'*len(s),'1'+'0'*s.count('0'))"
                }
            ]
        },
        "CHEFANUP": {
            "constraints": "1 \u2264 T \u2264 10\nL will not exceed the total number of possible dishes.",
            "subtasks": "For 20 points : N = 3, 2 \u2264 K \u2264 102, 1 \u2264 L \u2264 106\nFor 30 points : 1 \u2264 N \u2264 102, 2 \u2264 K \u2264 102, 1 \u2264 L \u2264 104\nFor 50 points : 1 \u2264 N \u2264 103, 2 \u2264 K \u2264 103, 1 \u2264 L \u2264 1018",
            "sample_test_cases": [
                {
                    "input": "4\n3 3 1\n3 3 2\n3 3 3\n3 3 4",
                    "output": "1 1 1\n1 1 2\n1 1 3\n1 2 1",
                    "explanation": "First 4 dishes in order have ingredients (1,1,1), (1,1,2), (1,1,3), and (1,2,1)."
                },
                {
                    "input": "4\n4 3 1\n4 3 2\n4 3 3\n4 3 4",
                    "output": "1 1 1 1\n1 1 1 2\n1 1 1 3\n1 1 2 1",
                    "explanation": "First 4 dishes in order have ingredients (1,1,1,1), (1,1,1,2), (1,1,1,3), and (1,1,2,1)."
                }
            ],
            "problem_statement": "Read problems statements in Mandarin Chinese  and Russian.\nChef Anup is making dishes. Each dish consists of N ingredients, and quantity of each ingredient is an integer between 1 and K inclusive.\nRelative quality of 2 dishes is determined by their lexicographic order. Dish A is of lower quality than dish B if there is a position i (1Aj = Bj for all j Ai Bi. E.g., if N = 2 and K = 2, then the possible dishes in lexicographic order are (1,1), (1,2), (2,1), (2,2). \nGiven an integer L, determine the Lth possible dish in increasing order of quality.",
            "input_format": "The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows.\nEach test case description consists of a single line containing three integers N, K and L as described above.",
            "output_format": "For each test case, print N space-separated integers in a single line describing the quantities of the ingredients for the Lth dish.",
            "problem_name": "Chef Anup",
            "user_tags": [
                "Number System"
            ],
            "computed_tags": [
                "Mathematics"
            ],
            "problem_code_id": "CHEFANUP",
            "difficulty_level": "1718",
            "ai_solutions": [
                "from itertools import product\n\ndef dish_ingredients(T, test_cases):\n    for i in range(T):\n        N, K, L = test_cases[i]\n        dishes = list(product(range(1, K+1), repeat=N))\n        dishes.sort()\n        print(' '.join(map(str, dishes[L-1])))\n\nT = int(input())\ntest_cases = []\nfor _ in range(T):\n    N, K, L = map(int, input().split())\n    test_cases.append((N, K, L))\ndish_ingredients(T, test_cases)",
                "def dish_ingredients(T, test_cases):\n    for i in range(T):\n        N, K, L = test_cases[i]\n        dish = [1]*N\n        for _ in range(L-1):\n            for j in range(N-1, -1, -1):\n                if dish[j] < K:\n                    dish[j] += 1\n                    break\n                else:\n                    dish[j] = 1\n        print(' '.join(map(str, dish)))\n\nT = int(input())\ntest_cases = []\nfor _ in range(T):\n    N, K, L = map(int, input().split())\n    test_cases.append((N, K, L))\ndish_ingredients(T, test_cases)"
            ],
            "human_solutions": [
                {
                    "id": 69363799,
                    "submission_date": 1658306457,
                    "language": "PYTH 3",
                    "username": "notmotivated",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.02",
                    "memory": "9.4M",
                    "solution": 69363799,
                    "code": "import sys\r\nsys.setrecursionlimit(10**6)\r\n\r\n\r\n\r\nfor _ in range(int(input())):\r\n    n, k, l = [int(x) for x in input().split()]\r\n    l = l - 1\r\n    ans = []\r\n    while l:\r\n        ans.append(l % k)\r\n        l = l//k\r\n    \r\n\r\n    while len(ans) != n:\r\n        ans.append(0)\r\n    \r\n    ans = ans[::-1]\r\n    ans = [x+1 for x in ans]\r\n    \r\n    print(*ans)\r\n    \r\n    \r\n    \r\n    "
                },
                {
                    "id": 63354947,
                    "submission_date": 1650494206,
                    "language": "PYTH 3",
                    "username": "dscdsc",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.03",
                    "memory": "9.2M",
                    "solution": 63354947,
                    "code": "t = int(input())\n\nfor i in range(t):\n    n, k, l = map(int, input().split())\n    l -= 1\n    a = []\n    while l != 0:\n        a.insert(0, l % k)\n        l //= k \n    while len(a) != n:\n        a.insert(0, 0)\n    for j in a:\n        print(j + 1, end=\" \")\n    print()"
                }
            ]
        },
        "ONCHESS": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "1\n7\n5 1 10 15 rated random\n11 1 20 15 rated random\n10 3 30 15 rated random\n2 5 15 15 rated random\n30 20 60 60 unrated white\n50 20 40 60 unrated random\n50 20 40 60 unrated black",
                    "output": "wait\nwait\n1\n2\nwait\nwait\n5",
                    "explanation": "Example case 1.\n\nplayer 1 has to wait because there are no other players yet\nplayer 2 has to wait because he can't play with player 1 because player 2 has rating 11 while player 1 want opponent rating to be 10 at max\nplayer 3 can be with player 1 or player 2, so he will play with player 1 because he created a game first\nplayer 4 can be with player 1 or player 2, but player 1 already entered a game with player 3 so he is unavailable now so player 4 will play with player  2\nplayer 5 has to wait because there are no other players\nplayer 6 has to wait because he can't play with player 5 because player 6 wants colored to be selected at random, while player 5 wants to take white\nplayer 7 will play with player 5"
                }
            ],
            "problem_statement": "Read problems statements in Russian and Vietnamese as well.\nThere is a website for playing chess online with other people, whenever you want to play a game, you can either create new game and wait for an opponent to join, or you can join already created game.\nEach player has a number representing his rating, after each game the winner will take some rating points from the loser, unless the players agreed to make the game unrated before the start\nWhenever you create a game you have first to choose some parameters for this game:\n\n\nminimum and maximum rating for the opponent that you would like to play with\nwhether this game will be rated or not\nthe total thinking time allowed for each player\nwhether you would like to play with white, black or let the server choose a random color random\n\n\nafter choosing those parameters and creating the game you will wait for an opponent to join your game, after someone joins the game will start.\n\nif you would like to join a game you can see the list of already created games that are still waiting for an opponent and you can see the parameters for each game after that you can select one of them to join.\n\n\n\nChef is one of the developers of this website and today he thought that it's good idea to add new feature to it, the feature is that whenever a player creates a new game before asking the player to wait for an opponent the website will try to automatically find suitable opponent among those who already have created a game and still waiting for opponent, the website should choose the opponent such that all parameters specified by both players must be satisfied, if more than one suitable match exists then the player who just created a game will  be matched with the suitable player who created a game first, if there's no match at all then the website will ask the player to wait for an opponent. \n\n\nrules applied to check whether two players can be matched:\n\n\nrating of each player is inside the range of rating that the other player selected\nboth players selected the game to be rated, or both of them selected the game to be unrated\ntotal thinking time chosen by both players are equal\nboth players chose random color, or one of them chose white while the other chose black\n\n\nNow, given a list of players who created a new game, in the same order of creating, for each player find out if this player should be matched with another player who is at that time waiting for an opponent , if there are more than one possible match, then choose the one who created a game first (thus has waited more), if there is no match then ask the player to wait.\n\n\nnote that once a player is matched with another one then both players can no longer be matched with other players. also in this problem no player will join a game manually, all of them will create new game.\n\n\u00a0\nInput\nFirst line of input contains a single integer T denoting the number of test-cases.\nFirst line of each test-case contains a single integer N denoting the number of players who will create a new game\neach of the following N lines contains a description of a player, Ri Mini Maxi Timei isRatedi Colori\nRi is rating of player i, Mini Maxi is minimum and maximum rating of the opponent that this player would like to play with, Timei is the total thinking time for each player it can be only one of the following 5 15 30 60, isRatedi can be one of the values \"rated\" or \"unrated\", Colori can be one of the following \"white\", \"black\" or \"random\"\n\n\u00a0\nOutput\nFor each test-case output N lines, i-th line should be the number of the player that player i is matched when he created a new game, or word \"wait\" if there's no match. players are numbered from 1 to N in same order as input\n\u00a0\nConstraints\n\n1 \u2264 T \u2264 100\n1 \u2264 N \u2264 100\n1 \u2264 Ri  \u2264 1,000,000\n1 \u2264 Mini \u2264 Maxi  \u2264 1,000,000\nColori can only be \"white\", \"black\" or \"random\"\nisRatedi can only be \"rated\" or \"unrated\"\nTimei can only be 5, 15, 30, 60",
            "input_format": "",
            "output_format": "",
            "problem_name": "Online Chess",
            "user_tags": [
                "Implementation"
            ],
            "computed_tags": [
                "Algorithms"
            ],
            "problem_code_id": "ONCHESS",
            "difficulty_level": "1778",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 95000010,
                    "submission_date": 1682271748,
                    "language": "PYTH 3",
                    "username": "navyasri2003",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.03",
                    "memory": "9.7M",
                    "solution": 95000010,
                    "code": "import sys\r\nimport math\r\n\r\ndef main(arr):\r\n    \r\n    \r\n    \r\n    for e in arr:\r\n        e[0]=int(e[0])\r\n        e[2]=int(e[2])\r\n        e[1]=int(e[1])\r\n        e[3]=int(e[3])\r\n        e+=[True]\r\n\r\n    ans=['wait']\r\n    for i in range(1,len(arr)):\r\n        p1=arr[i]\r\n        for j in range(0,i):\r\n            p2=arr[j]\r\n            if p2[-1]:\r\n                if p2[1]<=p1[0] and p1[0]<=p2[2] and p1[1]<=p2[0] and p2[0]<=p1[2]:\r\n                    if p2[3]==p1[3] and p2[4]==p1[4]:\r\n                        if (p1[5]=='random' and p2[5]=='random') or (p1[5]=='black' and p2[5]=='white') or ((p2[5]=='black' and p1[5]=='white')):\r\n                            ans+=[j+1] \r\n                            p1[-1]=False \r\n                            p2[-1]=False\r\n                            \r\n                            break\r\n            if j==i-1:\r\n                ans+=['wait'] \r\n    for e in ans:\r\n        print(e)\r\nt=int(input())\r\n\r\nfor i in range(t):\r\n    n=int(input())\r\n    arr=[]\r\n    for j in range(n):\r\n        arr.append(list(map(str,input().split())))\r\n    (main(arr))\r\n        \r\n        "
                },
                {
                    "id": 89421547,
                    "submission_date": 1676459799,
                    "language": "PYTH 3",
                    "username": "pullo",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.04",
                    "memory": "9.7M",
                    "solution": 89421547,
                    "code": "import sys\r\nimport math\r\n\r\ndef main(arr):\r\n    \r\n    \r\n    \r\n    for e in arr:\r\n        e[0]=int(e[0])\r\n        e[2]=int(e[2])\r\n        e[1]=int(e[1])\r\n        e[3]=int(e[3])\r\n        e+=[True]\r\n\r\n    ans=['wait']\r\n    for i in range(1,len(arr)):\r\n        p1=arr[i]\r\n        for j in range(0,i):\r\n            p2=arr[j]\r\n            if p2[-1]:\r\n                if p2[1]<=p1[0] and p1[0]<=p2[2] and p1[1]<=p2[0] and p2[0]<=p1[2]:\r\n                    if p2[3]==p1[3] and p2[4]==p1[4]:\r\n                        if (p1[5]=='random' and p2[5]=='random') or (p1[5]=='black' and p2[5]=='white') or ((p2[5]=='black' and p1[5]=='white')):\r\n                            ans+=[j+1] \r\n                            p1[-1]=False \r\n                            p2[-1]=False\r\n                            \r\n                            break\r\n            if j==i-1:\r\n                ans+=['wait'] \r\n    for e in ans:\r\n        print(e)\r\nt=int(input())\r\n\r\nfor i in range(t):\r\n    n=int(input())\r\n    arr=[]\r\n    for j in range(n):\r\n        arr.append(list(map(str,input().split())))\r\n    (main(arr))\r\n        \r\n        \r\n    \r\n\r\n        "
                }
            ]
        },
        "TAAPLUSB": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "3\n1\n2\n3",
                    "output": "0.45\n0.945\n1.4445",
                    "explanation": "Example case 1.\nWe have 10*10 = 100 cases of adding two 1-digit number.\nThe carry appears when adding 1 and 9, 2 and 9, 3 and 9 ... and so on, \nthere are 45 cases in total and in each case, the carry appears exactly once."
                }
            ],
            "problem_statement": "Have you ever implemented a program adding two big integers that cannot be represented by the primitive data type of your programming language? The algorithm is just simulation of the column addition method that we have been taught in elementary school. Sometimes we forget the carry and the result is incorrect. \n In this problem, you need to evaluate the expected value of the number of times we have non-zero carry when adding two non-negative integers that contain at most N digits each. Note that we are adding the numbers in their base 10 representation.\n\nFor example, the following table shows the number of carries when adding some pairs of numbers: \nA\nB\nNumber of carries\n20\n4\n0\n111\n119\n1\n123\n923\n1\n1235\n98765\n5\n\nInput\nThe first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. \nEach test case has a single line containing an integer N.\nOutput\nFor each test case, output a single line containing the required expected value. \nYour answer will be accepted if the error is less than 10 -6.\nConstraints\n1 \u2264 T \u2264 100,000(105)\n1 \u2264 N \u2264 100,000(105)",
            "input_format": "",
            "output_format": "",
            "problem_name": "A Plus B Again!",
            "user_tags": [
                "DP Approach"
            ],
            "computed_tags": [
                "Algorithms",
                "Dynamic Programming"
            ],
            "problem_code_id": "TAAPLUSB",
            "difficulty_level": "1796",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 80711046,
                    "submission_date": 1669170485,
                    "language": "PYTH 3",
                    "username": "aarushi_iitm",
                    "user_rating_star": 3,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.51",
                    "memory": "9.5M",
                    "solution": 80711046,
                    "code": "def solve():\n    n = int(input())\n    if (n == 1):\n        return 0.45\n    if (n==2):\n        return 0.945\n    if (n==3):\n        return 1.4445\n    if (n==4):\n        return 1.94445\n    if (n==5):\n        return 2.444445\n    if (n==6):\n        return 2.9444445\n    if (n%2 == 1):\n        return n//2 + 0.444444444\n    else:\n        return n//2-1 + 0.944444444\nfor _ in range(int(input())):\n    print(solve())"
                },
                {
                    "id": 76268836,
                    "submission_date": 1665116231,
                    "language": "PYTH 3",
                    "username": "hmurugan_13",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.55",
                    "memory": "13.4M",
                    "solution": 76268836,
                    "code": "dp = [0] * 100000\r\ndp[0] = 0.45\r\nfor i in range(1, 100000):\r\n    dp[i] = dp[i - 1] + 0.5 - (5 * pow(10, -(i + 2)))\r\nt = int(input())\r\nwhile(t > 0):\r\n    t -= 1\r\n    n = int(input())\r\n    print('{0:.6f}\\n'.format(dp[n - 1]))"
                }
            ]
        },
        "ICL1903": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "2     \n28 6 2       \n78 5 3",
                    "output": "2\n1",
                    "explanation": "Test case 1: There are 28 candies and 6 friends. He can distribute 24 candies fairly among his friends, each getting 4 candies. He then throws away the remaining 4 candies 2 at a time."
                }
            ],
            "problem_statement": "Luke, an intergalactic traveller went on a trip across the universe and got candies from the different planets he visited. He comes back with $N$ candies and decides to distribute them among his $M$ friends. However, Luke only wants a fair distribution of the candies as he loves everyone equally. (A fair distribution is one in which each of his friends receive an equal number of candies and each friend receives at least one candy.) If a fair distribution is not possible, he might throw away some candies and try to distribute the remaining candies in a similar manner.\nIf he can throw away exactly $K$ candies at a time (he can throw away candies multiple times), what is the minimum number of times he will need to throw away candies before achieving a fair distribution?\nInput:\n\nFirst line will contain $T$, number of testcases. Then the testcases follow.\nEach testcase contains of a single line of input, three integers $N, M, K$.\n\nOutput:\nFor each testcase, output a single integer denoting the minimum number of times he will need to throw away candies before achieving a fair distribution. If a fair distribution is not possible, print   -1.\nConstraints\n\n$1 \\leq T \\leq 10^5$\n$2 \\leq N,M,K \\leq 10^9$",
            "input_format": "",
            "output_format": "",
            "problem_name": "Too Many Candies",
            "user_tags": [
                "GCD"
            ],
            "computed_tags": [
                "Mathematics",
                "Number Theory"
            ],
            "problem_code_id": "ICL1903",
            "difficulty_level": "1754",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 63884144,
                    "submission_date": 1651179113,
                    "language": "PYTH 3",
                    "username": "dscdsc",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.93",
                    "memory": "9.3M",
                    "solution": 63884144,
                    "code": "def gcd(a, b):\n    if b > a:\n        return gcd(b, a)\n    if b == 0:\n        return a\n    return gcd(b, a % b)\ndef snek(a, b):\n    if b == 0:\n        return 1, 0\n    s = snek(b, a % b)\n    x = s[1]\n    y = s[0] - (a // b) * s[1]\n    return x, y\ndef snak(a, b):\n    ans = snek(a, b)\n    return (ans[0] + b) % b\n    \nt = int(input())\n\nfor i in range(t):\n    n, m, k = map(int, input().split())\n    ans = 0\n    if n < m or n % gcd(m, k) != 0:\n        ans = -1\n    else:\n        g = gcd(m, k)\n        n //= g\n        m //= g\n        k //= g\n        c = ((n) * snak(k, m)) % m\n        if n - k * c < m:\n            ans = -1\n        else:\n            ans = c\n    print(ans)"
                },
                {
                    "id": 39929991,
                    "submission_date": 1606764573,
                    "language": "PYTH 3",
                    "username": "rohit523",
                    "user_rating_star": 3,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.73",
                    "memory": "17.5M",
                    "solution": 39929991,
                    "code": "for _ in range(int(input())):\n    n, m, k = map(int, input().split())\n    \n    x = n % m\n    flag = False\n    cnt = 0\n    \n    while n > 0:\n        if n % m == 0:\n            flag = True\n            break\n        cnt += 1\n        n -= k\n        \n    if flag:\n        print(cnt)\n    else:\n        print(-1)"
                }
            ]
        },
        "TAPALIN": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "5\n1\n2\n3\n4\n100",
                    "output": "26\n52\n728\n1404\n508533804",
                    "explanation": "The first three examples are explained in the problem statement above."
                }
            ],
            "problem_statement": "Do you know that The Chef has a special interest in palindromes? Yes he does! Almost all of the dishes in his restaurant is named by a palindrome strings. The problem is that a name of a dish should not be too long, so The Chef has only limited choices when naming a new dish.\n\n\nFor the given positive integer N, your task is to calculate the number of palindrome strings of length not exceeding N, that contain only lowercase letters of English alphabet (letters from 'a' to 'z', inclusive). Recall that a palindrome is a string that reads the same left to right as right to left (as in \"radar\").\n\n\nFor example:\n\nFor N = 1, we have 26 different palindromes of length not exceeding N: \"a\", \"b\", ..., \"z\".\nFor N = 2 we have 52 different palindromes of length not exceeding N: \"a\", \"b\", ..., \"z\", \"aa\", \"bb\", ..., \"zz\".\nFor N = 3 we have 728 different palindromes of length not exceeding N: \"a\", \"b\", ..., \"z\", \"aa\", \"bb\", ..., \"zz\", \"aaa\", \"aba\", ..., \"aza\", \"bab\", \"bbb\", ..., \"bzb\", ..., \"zaz\", \"zbz\", ..., \"zzz\".\n\n\nSince the answer can be quite large you should output it modulo 1000000007 (109 + 7). Yes, we know, most of you already hate this modulo, but there is nothing we can do with it :)\n\nInput\n\nThe first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. The only line of each test case contains a single integer N.\n\nOutput\n\nFor each test case, output a single line containing the answer for the corresponding test case.\n\nConstrains\n\n1 \u2264 T \u2264 1000\n1 \u2264 N \u2264 109",
            "input_format": "",
            "output_format": "",
            "problem_name": "Palindrome",
            "user_tags": [
                "String",
                "Modular Exponentiation",
                "Fermat's Little Theorem",
                "Modulo Multiplicative Inverse",
                "GP",
                "Matrix Exponentiation"
            ],
            "computed_tags": [
                "Data Structures",
                "Mathematics",
                "Modular Arithmetic",
                "Sequences and Progression",
                "Matrices",
                "Matrix Multiplication"
            ],
            "problem_code_id": "TAPALIN",
            "difficulty_level": "1788",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 45492559,
                    "submission_date": 1619553174,
                    "language": "PYTH 3",
                    "username": "jpdotcom",
                    "user_rating_star": 5,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.05",
                    "memory": "17.9M",
                    "solution": 45492559,
                    "code": "import sys\nimport math\nfrom queue import Queue \nimport heapq\ndef powermod(a, b, n):\n    \n    if b==0:\n        return 1%n\n    if b == 1:\n        return a % n\n    r = powermod(a, b // 2, n)\n    r = r * r % n\n    if (b & 1) == 1: \n        r = r * a % n\n    return r\ndef main(n):\n    exp=None\n    mult=0\n    mod=10**9+7\n    if n&1==1:\n        exp=(n-1)//2\n        s=powermod(26,(n+1)//2,mod)\n        mult=int(s)\n    else:\n        exp=n//2 \n    a=(52*powermod(25,1000000005,mod))%mod\n    b=(powermod(26,exp,mod)-1)%mod\n    c=mult \n    \n    return ((a*b)%mod+c%mod)%mod\n\nt=int(input())\nfor i in range(t):\n    n=int(input())\n    print(main(n))"
                },
                {
                    "id": 33074140,
                    "submission_date": 1589441673,
                    "language": "PYTH 3",
                    "username": "poornateja_29",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.01",
                    "memory": "22.8M",
                    "solution": 33074140,
                    "code": "inv = 280000002\nmod = 1000000007\nfor _ in range(int(input())):\n\tn = int(input())\n\tif n % 2 == 0:\n\t\tn = n // 2 + 1\n\t\ta = (2 * ((pow(26,n, mod) - 1) * inv - 1) ) % mod\n\t\tprint(a)\n\telse:\n\t\tn = n // 2 + 2\n\t\ta = (2 * ((pow(26,n,mod) - 1) * inv - 1)) % mod\n\t\ta = (a - pow(26, n - 1, mod)) % mod\n\t\tprint(a)"
                }
            ]
        },
        "DUMPLING": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "3\n2 4 3 6 7\n1 2 4 5 1\n10 12 3 9 16",
                    "output": "3\n3\n5",
                    "explanation": "For the second case,\nChef Po jumps 2 units to the right and then 1 unit to the left.\nChef Shifu jumps 5 units to the right and then 4 units to the left \nto reach 1 unit right from the center.\nChef Po jumps 2 units to the left and then 1 unit to the right.\nChef Shifu jumps 5 units to the left and then 4 units to the right \nto reach 1 unit left from the center.\nDumpling can also be placed at the center as a chef can reach it in 2 moves.\nThus, there are three different positions at most 1 unit away from the center \nthat are reachable by both the chefs in one or more moves."
                }
            ],
            "problem_statement": "Chef Shifu and Chef Po are participating in the Greatest Dumpling Fight of 2012.\nOf course, Masterchef Oogway has formed the rules of the fight.\n\n\nThere is a long horizontal rope of infinite length with a center point P.\nInitially both Chef Shifu and Chef Po will stand on the center P of the rope facing each other.\nDon't worry, the rope is thick enough to hold Chef Po and Chef Shifu at the same place and at the same time.\nChef Shifu can jump either A or B units to the left or right in one move.\nChef Po can jump either C or D units to the left or right in one move.\n\n\nMasterchef Oogway wants to place exactly one dumpling on the rope such that\nboth Chef Shifu and Chef Po will be able to reach it independently in one or more moves.\nAlso the dumpling can be placed at most K units away from the center of the rope.\nMasterchef Oogway will let you watch the fight if you can decide the number of possible positions on the rope to place the dumpling. \n\n\n\n\n\nInput\n\nFirst line contains T, the number of test cases. Each of the next T lines contains five positive integers, A B C D K.\n\n\n1TA,B,C,D,K\nOutput\nFor each test case, output on a newline, the number of possible positions to place the dumpling on the rope.",
            "input_format": "",
            "output_format": "",
            "problem_name": "Greatest Dumpling Fight",
            "user_tags": [
                "Basic Maths",
                "GCD",
                "LCM"
            ],
            "computed_tags": [
                "Mathematics",
                "Number Theory"
            ],
            "problem_code_id": "DUMPLING",
            "difficulty_level": "1738",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 75764009,
                    "submission_date": 1664634699,
                    "language": "PYTH 3",
                    "username": "denser_meerkat",
                    "user_rating_star": 3,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.04",
                    "memory": "9.6M",
                    "solution": 75764009,
                    "code": "def gcd(a,b):\r\n  if(a%b == 0):\r\n    return b\r\n  return gcd(b, a%b)\r\n    \r\nfor T in range(int(input())):\r\n    A, B, C, D, K = [int(x) for x in input().split()]\r\n    GCD_1 = gcd(B,A)\r\n    GCD_2 = gcd(D,C)\r\n    GCD = gcd(max(GCD_1,GCD_2),min(GCD_1,GCD_2))\r\n    LCM = (GCD_1*GCD_2)//GCD\r\n    count = int(K//LCM)\r\n    count *= 2\r\n    count += 1\r\n    print(count)"
                },
                {
                    "id": 69316864,
                    "submission_date": 1658216110,
                    "language": "PYTH 3",
                    "username": "tushar5575",
                    "user_rating_star": 3,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.03",
                    "memory": "9.3M",
                    "solution": 69316864,
                    "code": "import math\r\nt = int(input())\r\nfor _ in range(t):\r\n    a,b,c,d,k = map(int,input().split())\r\n    x = math.gcd(a,b)\r\n    y = math.gcd(c,d)\r\n    z =(x*y)// math.gcd(x,y)\r\n    ans = k//z\r\n    print(2*ans+1)"
                }
            ]
        },
        "ABREPEAT": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "3\n4 2\nabcb\n7 1\naayzbaa\n12 80123123\nabzbabzbazab",
                    "output": "6\n2\n64197148392731290",
                    "explanation": "Test case 1. Limak repeated the string \"abcb\" 2 times, and so he got \"abcbabcb\". There are 6 occurrences of the subsequence \"ab\":\n\nABcbabcb (the two letters marked uppercase)\nAbcBabcb\nAbcbaBcb\nAbcbabcB\nabcbABcb\nabcbAbcB\n\nTest case 2. Since K = 1, the new string is equal to the given S (\"aayzbaa\"). There are 2 occurrences of the subsequence \"ab\" in this string: AayzBaa and aAyzBaa."
                }
            ],
            "problem_statement": "Read problems statements in Mandarin Chinese, Russian and Vietnamese as well.\nLimak has a string S, that consists of N lowercase English letters.\nLimak then created a new string by repeating S exactly K times.\nFor example, for S = \"abcb\" and K = 2, he would get \"abcbabcb\".\nYour task is to count the number of subsequences \"ab\" (not necessarily consecutive) in the new string.\nIn other words, find the number pairs of indices i \n\nInput\nThe first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows.\nThe first line of each test case contains two integers N and K, denoting the length of the initial string S and the number of repetitions respectively.\nThe second line contains a string S.\nIts length is exactly N, and each of its characters is a lowercase English letter.\nOutput\nFor each test case, output a single line containing one integer \u2014 the number of subsequences \"ab\" in the new string.\nFor the given constraints, it can be proved that the answer fits in the 64-bit signed type.\nConstraints\n\n1 \u2264 T \u2264 10\n1 \u2264 N \u2264 105\n1 \u2264 N * K \u2264 109 (in other words, the new string has length up to 109)",
            "input_format": "",
            "output_format": "",
            "problem_name": "Bear and AB",
            "user_tags": [
                "String",
                "Combinatorics"
            ],
            "computed_tags": [
                "Data Structures",
                "Mathematics"
            ],
            "problem_code_id": "ABREPEAT",
            "difficulty_level": "1754",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 49521574,
                    "submission_date": 1628277417,
                    "language": "PYTH 3",
                    "username": "aashish100",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.29",
                    "memory": "17.6M",
                    "solution": 49521574,
                    "code": "for _ in range(int(input())):\n    n,k=map(int,input().split())\n    s=input()\n    l=[-1]*len(s)\n    numb=s.count('b')\n    x=numb\n    for j in range(len(s)):\n        if(s[j]=='a'):\n            l[j]=numb\n        if(s[j]=='b'):\n            numb=numb-1\n    count1=0\n    for j in range(len(l)):\n        if(l[j]>0):\n            count1=count1+(k*(2*l[j]+(k-1)*x))//2\n        elif(l[j]==0):\n            count1=count1+(k*(2*0+(k-1)*x))//2\n    print(count1)"
                },
                {
                    "id": 39082321,
                    "submission_date": 1603445699,
                    "language": "PYTH 3",
                    "username": "ayan_codechef",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.19",
                    "memory": "17.6M",
                    "solution": 39082321,
                    "code": "for u in range(int(input())):\n    n,k=map(int,input().split())\n    s=input()\n    d=0\n    c=0\n    x=s.count('b')\n    for i in range(n):\n        if(s[i]=='b'):\n            c+=1\n        elif(s[i]=='a'):\n            d+=(k*(k+1)//2)*x-(k*c)\n    print(d)\n"
                }
            ]
        },
        "BINIM": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "2\n2 Dee\n101\n010\n2 Dum\n101\n010",
                    "output": "Dum\nDee",
                    "explanation": ""
                }
            ],
            "problem_statement": "Read problem statement in Mandarin chinese and Vietnamese.\nTweedle-Dee and Tweedle-Dum are playing a fierce match of binary Nim. This novel game is played with $N$ stacks, each of them containing only $1$-s and $0$-s.\nJust like in normal Nim, Tweedle-Dee and Tweedle-Dum alternate turns; in their turn, a player must choose one non-empty stack and remove a positive number of elements from the top of this stack. However, Tweedle-Dee may only choose a stack with $0$ at the top (and remove elements from it afterwards), and similarly, Tweedle-Dum may only choose a stack with $1$ at the top. the player that cannot make a move loses\nSuzumo does not want to wait for the end of the game, so given the starting player he asks you to determine the winner. Remember that Tweedle-Dee and Tweedle-Dum are legendary grandmasters of combinatorial games, so both always play optimally.\nInput\n\nThe first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\nThe first line of each test case contains an integer $N$, a string $S$ denoting the number of stacks, the player that starts the game, respectively.\nEach of the following $N$ lines contains a single binary string $B$ representing a stack; the first character of $B$ corresponds to the top element of the stack and the last character to the bottom element.\n\nOutput\nFor each test case, print a single line containing the string \"Dee\" if Tweedle-Dee wins the match or \"Dum\" if Tweedle-Dum wins.\nConstraints\n\n$1 \\le T \\le 500$\n$1 \\le N \\le 50$\n$1 \\le |B| \\le 50$\neach character in $B$ is either '1' or '0'\n$S$ is either \"Dee\" or \"Dum\"",
            "input_format": "",
            "output_format": "",
            "problem_name": "Binary Nim",
            "user_tags": [
                "Game Theory",
                "ad-hoc"
            ],
            "computed_tags": [
                "Algorithms",
                "Constructive"
            ],
            "problem_code_id": "BINIM",
            "difficulty_level": "1727",
            "ai_solutions": [
                "T = int(input().strip())\nfor _ in range(T):\n    N, S = input().strip().split()\n    N = int(N)\n    stacks = [input().strip() for _ in range(N)]\n    if S == 'Dee' and '0' in [stack[0] for stack in stacks]:\n        print('Dum')\n    else:\n        print('Dee')",
                "def winner(T, test_cases):\n    for _ in range(T):\n        N, S, stacks = test_cases[_]\n        if S == 'Dee' and '0' in [stack[0] for stack in stacks]:\n            print('Dum')\n        else:\n            print('Dee')\n\nT = int(input().strip())\ntest_cases = []\nfor _ in range(T):\n    N, S = input().strip().split()\n    N = int(N)\n    stacks = [input().strip() for _ in range(N)]\n    test_cases.append((N, S, stacks))\nwinner(T, test_cases)"
            ],
            "human_solutions": [
                {
                    "id": 36881542,
                    "submission_date": 1597753966,
                    "language": "PYTH 3",
                    "username": "jaytwwm2616",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.02",
                    "memory": "17.6M",
                    "solution": 36881542,
                    "code": "for _ in range(int(input())):\n    temp = list(input().split())\n    n = int(temp[0])\n    s = temp[1]\n    du,de = 0,0\n    for _ in range(n):\n        mc = input()\n        if mc[0] == '1':\n            du+=mc.count('1')\n        else:\n            de+=mc.count('0')\n    if de>du:\n        print(\"Dee\")\n    elif de<du:\n        print(\"Dum\")\n    else:\n        if s == \"Dee\":\n            print(\"Dum\")\n        else:\n            print(\"Dee\")"
                },
                {
                    "id": 30927565,
                    "submission_date": 1585679071,
                    "language": "PYTH 3",
                    "username": "jvt3112",
                    "user_rating_star": 4,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.02",
                    "memory": "17.5M",
                    "solution": 30927565,
                    "code": "for i in range(int(input())):\n    a,string=input().split()\n    # print(a,string)\n    zero=0\n    one=0 \n    for j in range(0,int(a)):\n        k=input()\n        if(k[0]=='1'):\n            one+=k.count(\"1\") \n        else:\n            zero+=k.count(\"0\")\n    # print(one,zero)\n    if(string=='Dum'):\n        if(one>zero):\n            print('Dum')\n        else:\n            print('Dee')\n    else:\n        if(zero>one):\n            print('Dee')\n        else:\n            print('Dum')\n            "
                }
            ]
        },
        "AGECAL": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "4\r\n5\r\n1 2 3 4 5\r\n2 1 1\r\n3 5 1\r\n2\r\n3 3\r\n1 1 1\r\n2 2 2\r\n2\r\n1 1\r\n3 1 1\r\n3 2 1\r\n5\r\n1 4 3 4 6\r\n3 5 6\r\n10 1 1",
                    "output": "26\r\n11\r\n2\r\n112",
                    "explanation": ""
                }
            ],
            "problem_statement": "Read problems statements Mandarin , Bengali , Hindi , Russian and Vietnamese as well.\nChef's planet is called Javad. A year on Javad has $N$ months numbered $1$ through $N$. For each valid $i$, the $i$-th month has $a_i$ days numbered $1$ through $a_i$. \nOn Javad, years that are divisible by $4$ are leap years - the last month of each leap year is one day longer (it has $a_N + 1$ days).\nYou are given Chef's birth date and the current date. Find the age of Chef in days, i.e. the number of days between Chef's birth date and the current date inclusive.\nInput\n\nThe first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\nThe first line of each test case contains a single integer $N$.\nThe second line contains $N$ space-separated integers $a_1, a_2, \\ldots, a_N$.\nThe third line contains three space-separated positive integers $y_b$, $m_b$ and $d_b$ denoting the year, month and day of Chef's birth respectively.\nThe fourth line contains three space-separated positive integers $y_c$, $m_c$ and $d_c$ denoting the current year, month and day respectively.\n\nOutput\nFor each test case, print a single line containing one integer \u2014 Chef's age in days.\nConstraints\n\n$1 \\le T \\le 100$\n$1 \\le N \\le 10,000$\n$1 \\le a_i \\le 10,000$ for each valid $i$\n$1 \\le y_b, y_c \\le 100,000$\n$1 \\le m_b, m_c \\le N$\n$d_b$ will be less than or equal to the days of the $m_b$ month of the $y_b$ year.\n$d_c$ will be less than or equal to the days of the $m_c$ month of the $y_c$ year.\nthe current date is equal to or greater than Chef's birth date\n\nSubtasks\nSubtask #1 (10 points):\n- $1 \\le y_b, y_c, N \\le 1,000$\n- $1 \\le a_i \\le 100$ for each valid $i$\nSubtask #2 (90 points): original constraints",
            "input_format": "",
            "output_format": "",
            "problem_name": "Age Calculator",
            "user_tags": [
                "Implementation"
            ],
            "computed_tags": [
                "Algorithms"
            ],
            "problem_code_id": "AGECAL",
            "difficulty_level": "1724",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 64792544,
                    "submission_date": 1652434892,
                    "language": "PYTH 3",
                    "username": "harrish_7",
                    "user_rating_star": 4,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.02",
                    "memory": "9.3M",
                    "solution": 64792544,
                    "code": "t = int(input())\n\nfor i in range(t):\n    n = int(input())\n    c = 0\n    a = list(map(int, input().split()))\n    y1, m1, d1 = map(int, input().split())\n    y2, m2, d2 = map(int, input().split())\n    if y1 != y2:\n\t    d = a[m1 - 1] - d1 + d2 + 1\n\t    for j in range(m1, n):\n\t\t    d += a[j]\n\t    for k in range(m2 - 1):\n\t\t    d += a[k]\n\t    d += sum(a) * (y2 - y1 - 1)\n\t    s = y1\n\t    while s < y2:\n\t\t    if s % 4 == 0:\n\t\t\t    c += 1\n\t\t    s += 1 \n    else:\n\t    if m1 == m2:\n\t\t    if d1 == d2:\n\t\t\t    d = 1\n\t\t    else:\n\t\t\t    d = d2 - d1 + 1\n\t    else:\n\t\t    d = a[m1 - 1] - d1 + d2 + 1\n\t\t    for z in range(m1, m2 - 1):\n\t\t\t    d += a[z]\n    print(d + c)"
                },
                {
                    "id": 47855202,
                    "submission_date": 1623758248,
                    "language": "PYTH 3",
                    "username": "mohit_2098",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.02",
                    "memory": "17.5M",
                    "solution": 47855202,
                    "code": "t=int(input())\nj=0\nwhile(j<t):\n\tn=int(input())\n\tleap=0\n\ta= [int(i) for i in input().split()]\n\ty1,m1,d1=map(int,input().split())\n\ty2,m2,d2=map(int,input().split())\n\tif(y1!=y2):\n\t\tdays=a[m1-1]-d1+d2+1\n\t\tfor i in range(m1,n):\n\t\t\tdays=days+a[i]\n\t\tfor i in range(0,m2-1):\n\t\t\tdays=days+a[i]\n\t\tdays=days+sum(a)*(y2-y1-1)\n\t\ti=y1\n\t\twhile(i<y2):\n\t\t\tif(i%4==0):\n\t\t\t\tleap=leap+1\n\t\t\ti=i+1\n\telse:\n\t\tif(m1==m2):\n\t\t\tif(d1==d2):\n\t\t\t\tdays=1\n\t\t\telse:\n\t\t\t\tdays=d2-d1+1\n\t\telse:\n\t\t\tdays=a[m1-1]-d1+d2+1\n\t\t\t#print(a[m1-1])\n\t\t\t#print(d1)\n\t\t\t#print(d2)\n\t\t\tfor i in range(m1,m2-1):\n\t\t\t\tdays=days+a[i]\n\t\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\tprint(days+leap)\n\tj=j+1\n\t"
                }
            ]
        },
        "PPNUM": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "1\n9 12",
                    "output": "75",
                    "explanation": "Example case 1. The answer is 9*1 + 10*2 + 11*2 + 12*2 = 75."
                }
            ],
            "problem_statement": "Read problems statements in Russian here\nPolo, the Penguin, likes numbers. He says that the goodness of a number is itself multiplied by the number of digits in it's decimal representation. For example, the goodness of the integer 474 is 474*3 = 1422.\nHelp him to count the sum of goodness of all integers from L to R, inclusive. Since the answer can be too large, output it modulo 1,000,000,007 (10^9+7).\nInput\nThe first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. The only line of each test case contains the pair of integers L and R, separated by a single space.\nOutput\nFor each test case, output a single line containing the answer to the corresponding test case.\nConstraints\n1 \u2264 T \u2264 1,000\n1 \u2264 L \u2264 R \u2264 1,000,000,000 (10^9)",
            "input_format": "",
            "output_format": "",
            "problem_name": "Polo the Penguin and the Numbers",
            "user_tags": [
                "Modular Arithmetic",
                "Arithmetic",
                "ad-hoc"
            ],
            "computed_tags": [
                "Mathematics",
                "Basic Maths",
                "Algorithms",
                "Constructive"
            ],
            "problem_code_id": "PPNUM",
            "difficulty_level": "1718",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 69871675,
                    "submission_date": 1658733605,
                    "language": "PYTH 3",
                    "username": "snega123",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.03",
                    "memory": "9.3M",
                    "solution": 69871675,
                    "code": "def li(): return list(map(int,input().split())); return a; \ndef si(): return input().split()\ndef ii(): return int(input())\nhighs={i: 10**(i-1) for i in range(12)}; \nlows={i: 10**(i) for i in range(12)}; \ninf=1000000007; \nfor tastcas in range(int(input())):\n    l,r=si(); ll=len(l); rl=len(r); l=int(l); r=int(r); \n    if(ll==rl): ans=(((l+r)*(r-l+1))*ll)//2; \n    else:\n        r1=(10**ll)-1; r2=10**(rl-1); \n        ans = ( ((((l+r1)*(r1-l+1))*ll)//2) + ((((r2+r)*(r-r2+1))*rl)//2) ) % inf; \n        for i in range(ll+1,rl):\n            a=10**(i-1); b=(10**i)-1; \n            ans += ((((a+b)*(b-a+1))*i)//2); \n            ans%=inf; \n    print(ans%inf); "
                },
                {
                    "id": 68747677,
                    "submission_date": 1657541551,
                    "language": "PYTH 3",
                    "username": "meta7",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.03",
                    "memory": "9.4M",
                    "solution": 68747677,
                    "code": "def li(): return list(map(int,input().split())); return a; \r\ndef si(): return input().split()\r\ndef ii(): return int(input())\r\nhighs={i: 10**(i-1) for i in range(12)}; \r\nlows={i: 10**(i) for i in range(12)}; \r\ninf=1000000007; \r\nfor tastcas in range(int(input())):\r\n    l,r=si(); ll=len(l); rl=len(r); l=int(l); r=int(r); \r\n    if(ll==rl): ans=(((l+r)*(r-l+1))*ll)//2; \r\n    else:\r\n        r1=(10**ll)-1; r2=10**(rl-1); \r\n        ans = ( ((((l+r1)*(r1-l+1))*ll)//2) + ((((r2+r)*(r-r2+1))*rl)//2) ) % inf; \r\n        for i in range(ll+1,rl):\r\n            a=10**(i-1); b=(10**i)-1; \r\n            ans += ((((a+b)*(b-a+1))*i)//2); \r\n            ans%=inf; \r\n    print(ans%inf); "
                }
            ]
        },
        "MINARRS": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "3\n5\n2 3 4 5 6\n4\n7 7 7 7\n3\n1 1 3",
                    "output": "14\n0\n2",
                    "explanation": "Example case 1: If we choose $X = 6$, the sequence becomes $(4, 5, 2, 3, 0)$.\nExample case 2: We can choose $X = 7$ to make all elements of the resulting sequence equal to $0$.\nExample case 3: We can choose $X = 1$. The sequence becomes $(0, 0, 2)$, with sum $2$."
                }
            ],
            "problem_statement": "Read problem statements in Hindi, Bengali, Mandarin Chinese, Russian, and Vietnamese as well.\nYou are given a sequence of non-negative integers $A_1, A_2, \\ldots, A_N$. At most once, you may choose a non-negative integer $X$ and for each valid $i$, change $A_i$ to $A_i \\oplus X$ ($\\oplus$ denotes bitwise XOR).\nFind the minimum possible value of the sum of all elements of the resulting sequence.\nInput\n\nThe first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\nThe first line of the input contains a single integer $N$.\nThe second line contains $N$ space-separated integers $A_1, A_2, \\ldots, A_N$.\n\nOutput\nFor each test case, print a single line containing one integer \u2015 the minimum possible sum.\nConstraints\n\n$1 \\le T \\le 1,000$\n$1 \\le N \\le 10^5$\n$1 \\le A_i \\le 10^9$ for each valid $i$\nthe sum of $N$ over all test cases does not exceed $10^6$\n\nSubtasks\nSubtask #1 (50 points):\n- $1 \\le N \\le 10^3$\n- $1 \\le A_i \\le 10^3$ for each valid $i$\nSubtask #2 (50 points): original constraints",
            "input_format": "",
            "output_format": "",
            "problem_name": "Minimum Sum",
            "user_tags": [
                "Observation"
            ],
            "computed_tags": [
                "Algorithms"
            ],
            "problem_code_id": "MINARRS",
            "difficulty_level": "1781",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 37188691,
                    "submission_date": 1598549577,
                    "language": "PYTH 3",
                    "username": "apurvrathore",
                    "user_rating_star": 4,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "4.79",
                    "memory": "19.3M",
                    "solution": 37188691,
                    "code": "t = int(input())\r\nfor _ in range(t):\r\n    n = int(input())\r\n    a = [(bin(int(x))[2:][::-1]+(\"0\")*32)for x in input().split()]\r\n    res = \"\"\r\n    mysum = 0\r\n    for i in range(32):\r\n        mycount = 0\r\n        for j in range(n):\r\n            if(a[j][i] == \"0\"):\r\n                mycount += 1\r\n        if(mycount == n):\r\n            break\r\n        if(mycount > (n//2)):\r\n            res += \"0\"\r\n            mysum += (n-mycount)*int(pow(2,i))\r\n        else:\r\n            res += \"1\"\r\n            mysum += mycount*int(pow(2,i))\r\n    print(mysum)"
                },
                {
                    "id": 34746733,
                    "submission_date": 1593255071,
                    "language": "PYTH 3",
                    "username": "akt17",
                    "user_rating_star": 3,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "4.85",
                    "memory": "19.4M",
                    "solution": 34746733,
                    "code": "for _ in range(int(input())):\r\n    n=int(input())\r\n    l=list(map(int,input().split()))\r\n    ans=0\r\n    for i in range(32):\r\n        c=0\r\n        for x in l:\r\n            if x&(1<<i):\r\n                c+=1\r\n        if c>n//2:\r\n            ans|=1<<i\r\n    x=0\r\n    for i in l:\r\n       x+=i^ans \r\n    print(x)\r\n    "
                }
            ]
        },
        "SPOONS": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "2\n2\n3",
                    "output": "2\n3",
                    "explanation": "Example case 1.\nEach spoon caters to a different city. Since there are two spoons, two cities are sufficient.\n \nExample case 2.\nAgain, each spoon needs to cater to one city and there are three spoons. So, three cities are required at minimum."
                }
            ],
            "problem_statement": "Lo and Behold! For you may be surprised by what our chief chef Noodle has in mind for this season! Today, Noodle announced one of his most extra-ordinary ideas ever - Project Spoon. \n Noodle plans to deploy large spoons in the atmosphere so that people all around the world can download food directly from his kitchen thereby saving him a lot of overhead cost. Yes, you read that right. Large spoons suspended in the atmosphere. \n Noodle decides the following strategy to implement his idea. He will deploy exactly N spoons in the country. Every spoon can cater to as many cities as it wants. The only catch is that between every pair of  spoons A and B,  A must cater to at-least one city that B doesn't cater to, and  B  must cater to at-least one city that A doesn't cater to. \n Noodle would like to know what is the minimum number of cities a country must have for his strategy to be successful. Since, he is not all that good with calculation, he asks you to help him with it. \nInput\n The first line contains an integer T denoting the number of test cases. Each of the next T lines contain an integer N, the number of spoons that Noodle plans to deploy in the country.\n\n\nOutput\n For every test case, print in a single line the number of minimum cities required.\n\nConstraints\n 1 \u2264  T \u2264   100000 \n 2  \u2264 N  \u2264  1018",
            "input_format": "",
            "output_format": "",
            "problem_name": "Project Spoon",
            "user_tags": [
                "Sperner's Theorem",
                "Combinatorics"
            ],
            "computed_tags": [
                "Mathematics",
                "Number Theory"
            ],
            "problem_code_id": "SPOONS",
            "difficulty_level": "1795",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 1015193497,
                    "submission_date": 1692595451,
                    "language": "PYTH 3",
                    "username": "arush011",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.91",
                    "memory": "7.8M",
                    "solution": 1015193497,
                    "code": "f = [0] * 70\r\nf[0] = 1\r\nans = [1]\r\nfor i in range(1, 70, 1):\r\n    f[i] = i * f[i - 1]\r\nfor i in range(2,70,1):\r\n    ans.append(f[i] // (f[i // 2] * f[i - (i // 2)]))\r\n    \r\nt = int(input())\r\n\r\nfor i in range(t):\r\n    n = int(input())\r\n    for j in range(70):\r\n        if ans[j] >= n:\r\n            print(j + 1)\r\n            break   "
                },
                {
                    "id": 81844454,
                    "submission_date": 1670378970,
                    "language": "PYTH 3",
                    "username": "aarushi_iitm",
                    "user_rating_star": 3,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.11",
                    "memory": "9.8M",
                    "solution": 81844454,
                    "code": "from sys import stdin,stdout \nimport time\nimport bisect\n#from operator import mul\n#from functools import reduce\nlist1 = [2, 3, 6, 10, 20, 35, 70, 126, 252, 462, 924, 1716, 3432, 6435, 12870, 24310, 48620, 92378, 184756, 352716, 705432, 1352078, 2704156, 5200300, 10400600, 20058300, 40116600, 77558760, 155117520, 300540195, 601080390, 1166803110, 2333606220, 4537567650, 9075135300, 17672631900, 35345263800, 68923264410, 137846528820, 269128937220, 538257874440, 1052049481860, 2104098963720, 4116715363800, 8233430727600, 16123801841550, 32247603683100, 63205303218876, 126410606437752, 247959266474052, 495918532948104, 973469712824056, 1946939425648112, 3824345300380220, 7648690600760440, 15033633249770520, 30067266499541040, 59132290782430712, 118264581564861424, 232714176627630544, 465428353255261088, 916312070471295267, 1832624140942590534, 3609714217008132870, 7219428434016265740, 14226520737620288370, 28453041475240576740, 56093138908331422716,112186277816662845432]\n'''\n# function to generate list1\ndef ncr(n, r):\n    r = min(r, n-r)\n    numer = reduce(mul, range(n, n-r, -1), 1)\n    denom = reduce(mul, range(1, r+1), 1)\n    return numer // denom\n'''\n\ndef solve():\n    n = int(stdin.readline().rstrip())\n    index = bisect.bisect(list1,n)\n    if n > list1[index-1]:\n        print(index+2)\n    else:\n        print(index+1)\n    \nfor _ in range(int(stdin.readline().rstrip())):\n    solve()"
                }
            ]
        },
        "LUMPYBUS": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "3\n3 3 0\n1 2 2\n3 2 1\n1 2 1\n4 5 4\n2 3 4 5",
                    "output": "2\n3\n3",
                    "explanation": "Example 1. Lumpy has just 3 one rupee coins. \nHe can pay creatures numbered {1, 2} or creatures numbered {1, 3} with these coins. Thus, answer is 2. \n Example 2. Lumpy has 2 one rupee coins and 1 two rupee coin. \nIn the optimal solution, Lumpy can give the two rupee coin to creature 2 and the one rupee coins to creatures 1 and 3. Thus, answer is 3."
                }
            ],
            "problem_statement": "Read problems statements in Mandarin Chinese, Russian and Vietnamese as well.\nLumpy is a bus driver. Today, the conductor is absent so Lumpy has to do the conductor's job as well. There are N creatures in the bus. Sometimes the creatures don't carry change and can't pay the exact amount of the fare. Each creature in the bus today has paid an amount\ngreater than his/her fare. You are given information about the extra amount paid by each creature, by an array A of size N, where Ai denotes the extra amount paid by the i-th creature, in rupees.\nAfter the end of the trip, Lumpy noticed that he had P one rupee coins and Q two rupee coins. He wants to pay back the creatures using this money. Being a kind hearted moose, Lumpy wants to pay back as many creatures as he can. Note that Lumpy will \nnot pay back the i-th creature if he can't pay the exact amount that the i-th creature requires with the coins that he possesses. \nLumpy is busy driving the bus and doesn't want to calculate the maximum number of creatures he can satisfy - He will surely cause an accident if he tries to do so. Can you help him out with this task? \nInput\nThe first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows.\nFor each test case, first line consists of three space separated integers N, P and Q.\nSecond line consists of N space separated integers A containing N space integers, where i-th integer denotes Ai.\n\nOutput\nFor each test case, output a single line containing an integer corresponding to maximum number of creatures that Lumpy can pay back.\n\nConstraints\n1 \u2264 T \u2264 106\n1 \u2264 N \u2264 105\n1 \u2264 Ai \u2264 109\n0 \u2264 P, Q \u2264 1014\nSum of N over all the cases does not exceed 106\n\nSubtasks\nSubtask #1 (15 points): P = 0\nSubtask #2 (15 points): Q = 0\nSubtask #3 (70 points): Original constraints",
            "input_format": "",
            "output_format": "",
            "problem_name": "Lumpy - The Bus Driver",
            "user_tags": [
                "Sorting"
            ],
            "computed_tags": [
                "Algorithms"
            ],
            "problem_code_id": "LUMPYBUS",
            "difficulty_level": "1708",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 62058468,
                    "submission_date": 1649188911,
                    "language": "PYTH 3",
                    "username": "sahibandahu",
                    "user_rating_star": 4,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "1.66",
                    "memory": "24.2M",
                    "solution": 62058468,
                    "code": "try:\r\n    for _ in range(int(input())):\r\n        n,p,q = map(int,input().split())\r\n        a = list(map(int,input().split()))\r\n        a.sort()\r\n        b = 0\r\n        for i in a:\r\n            if i//2 <= q and i%2 <= p:\r\n                q -= i//2\r\n                p -= i%2\r\n                b+=1\r\n            elif i//2 > q and i-2*q <= p:\r\n                p -= i-2*q\r\n                q = 0\r\n                b += 1\r\n        print(b)\r\nexcept:\r\n    pass\r\n        "
                },
                {
                    "id": 60510611,
                    "submission_date": 1647409231,
                    "language": "PYTH 3",
                    "username": "seh_lenge_thda",
                    "user_rating_star": 3,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "2.60",
                    "memory": "24M",
                    "solution": 60510611,
                    "code": "def curr_m(P,Q):\r\n    return P+Q*2\r\nfor _ in range(int(input())):\r\n    N,P,Q=map(int,input().split())\r\n    a=list(map(int,input().split()))\r\n    a.sort()\r\n    count=0\r\n    for i in range(N):\r\n        p,q,r=P,Q,a[i]\r\n        if curr_m(P,Q)>=a[i]:\r\n            if a[i]%2==0:\r\n                req_2=int(r/2)\r\n                r-=min(q,req_2)*2\r\n                q-=min(q,req_2)\r\n                #print('q r',q,r)\r\n                if r!=0:\r\n                    req_1=r\r\n                    r-=min(p,req_1)\r\n                    p-=min(p,req_1)\r\n                    #print('p r',p,r)\r\n                if r==0:\r\n                    count+=1\r\n                    P,Q=p,q\r\n            else:\r\n                req_2=int(r/2)\r\n                r-=min(q,req_2)*2\r\n                q-=min(q,req_2)\r\n                req_1=r\r\n                r-=min(p,req_1)\r\n                p-=min(p,req_1)\r\n                if r==0:\r\n                    count+=1\r\n                    P,Q=p,q\r\n            #print(P,Q)\r\n    print(count)"
                }
            ]
        },
        "ABX01": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "3\n5 2\n7 2\n127 1",
                    "output": "7\n4\n1",
                    "explanation": "Example case 1: F(5 \u00b7 5) = F(25) = F(2+5) = F(7) = 7\nExample case 2: F(7 \u00b7 7) = F(49) = F(4+9) = F(13) = F(1+3) = F(4) = 4\nExample case 3: F(127) = F(1+2+7) = F(10) = F(1+0) = F(1) = 1"
                }
            ],
            "problem_statement": "Read problems statements in Mandarin chinese, Russian and Vietnamese as well.\nAs New Year is approaching, Salik is studying functions in order to sharpen his math skills. Instead of regular functions, he is studying a strange function F which operates on non-negative integers. The value of F(A) is obtained by the following process:\n\nCompute the sum of digits of A; let's denote this sum by S.\nIf S is a single-digit integer, then F(A) = S.\nOtherwise, F(A) = F(S).\n\nIt's guaranteed that this process correctly defines the function F.\n\nSince this problem was pretty straightforward, he invented a new problem: Given two integers A and N, compute F(AN). Can you help him solve this task?\nInput\n\nThe first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows.\nThe first and only line of each test case contains two space-separated integers A and N.\n\nOutput\nFor each test case, print a single line containing one integer \u2014 the value of F(AN).\nConstraints\n\n1 \u2264 T \u2264 105\n1 \u2264 A, N \u2264 1018\n\nSubtasks\n\nSubtask #1 (10 points):\n\n1 \u2264 N \u2264 3\n1 \u2264 A \u2264 105\n\n\nSubtask #2 (20 points):\n\n1 \u2264 N \u2264 100\n1 \u2264 A \u2264 105\n\n\nSubtask #3 (70 points): original constraints",
            "input_format": "",
            "output_format": "",
            "problem_name": "Strange Function",
            "user_tags": [
                "Binary Exponentiation",
                "Arithmetic",
                "Observation"
            ],
            "computed_tags": [
                "Mathematics",
                "Number Theory",
                "Basic Maths",
                "Exponentiation",
                "Algorithms"
            ],
            "problem_code_id": "ABX01",
            "difficulty_level": "1789",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 40440879,
                    "submission_date": 1607936031,
                    "language": "PYTH 3",
                    "username": "amit1405",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.71",
                    "memory": "17.5M",
                    "solution": 40440879,
                    "code": "for _ in range(int(input())):\r\n    A,N=map(int,input().split())\r\n    res=pow(A,N,9)\r\n    if(res==0):\r\n        print(9)\r\n    else:\r\n        print(res)"
                },
                {
                    "id": 36206157,
                    "submission_date": 1596634122,
                    "language": "PYTH 3",
                    "username": "aadi1209",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.82",
                    "memory": "17.6M",
                    "solution": 36206157,
                    "code": "def sumnum(num):\n    c=0\n    while True:\n        c+=num%10 \n        num=num//10 \n        if num==0:\n            if c<10:\n                break \n            else:\n                num=c \n                c=0 \n    return c \nl2=[1,2,4,8,7,5]\nl5=[1,5,7,8,4,2]\nfor _ in range(int(input())):\n    b,p=map(int,input().split())\n    b=sumnum(b)\n    if b==1:\n        print(1)\n    elif b==9:\n        if p==0:\n            print(1)\n        else:\n            print(9)\n    elif b==3:\n        if p==0:\n            print(1)\n        elif p==1:\n            print(3)\n        else:\n            print(9)\n    elif b==6:\n        if p==0:\n            print(1)\n        elif p==1:\n            print(6)\n        else:\n            print(9)\n    elif b==8:\n        r=p%2 \n        if r==0:\n            print(1)\n        else:\n            print(8)\n    elif b==4:\n        r=p%3\n        if r==0:\n            print(1)\n        elif r==1:\n            print(4)\n        else:\n            print(7)\n    elif b==7:\n        r=p%3\n        if r==0:\n            print(1)\n        elif r==1:\n            print(7)\n        else:\n            print(4)\n    elif b==2:\n        r=p%6\n        print(l2[r])\n    elif b==5:\n        r=p%6\n        print(l5[r])"
                }
            ]
        },
        "LEBAMBOO": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "3\n1\n1\n2\n2\n1 2\n2 1\n3\n3 2 2\n4 5 3",
                    "output": "-1\n1\n5",
                    "explanation": ""
                }
            ],
            "problem_statement": "Read problems statements in Mandarin Chinese here\nProblem Statement\nLittle Elephant from Zoo of Lviv likes bamboo very much. He currently has n stems of bamboo, Hi - height of i-th stem of bamboo (0-based numeration). \n\n\nToday inspector Andrii from World Bamboo Association is visiting the plantation. He doesn't like current situation. He wants the height of i-th stem to be Di, for each i from 0 to n-1, inclusive.\n\n\nLittle Elephant is going to buy some special substance. One bottle of such substance he can use to single stem of bamboo. After using substance for stem i, the height of i-th stem is decrased by 1 and the height of j-th stem is increased by 1 for each j not equal to i. Note that it is possible for some of the stems to have negative height, but after all transformations all stems should have positive height.\n\n\nSubstance is very expensive. Help Little Elephant and find the minimal number of bottles of substance required for changing current plantation to one that inspector wants. If it's impossible, print -1.\n\n\nInput\nFirst line contain single integer T - the number of test cases. T test cases follow. First line of each test case contains single integer n - the number of stems in the plantation. Second line contains n integers separated by single space - starting plantation. Next line of each test case contains n integers - plantation that inspector Andrii requires.\n\n\nOutput\nIn T lines print T integers - the answers for the corresponding test cases.\n\n\nConstraints\n\n1 T \n\n1 n \n\n1 Hi, Di",
            "input_format": "",
            "output_format": "",
            "problem_name": "Little Elephant and Bamboo",
            "user_tags": [
                "Basic Maths"
            ],
            "computed_tags": [
                "Mathematics"
            ],
            "problem_code_id": "LEBAMBOO",
            "difficulty_level": "1761",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 96660724,
                    "submission_date": 1684707550,
                    "language": "PYTH 3",
                    "username": "prathmeshjiraf",
                    "user_rating_star": 3,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.02",
                    "memory": "9.7M",
                    "solution": 96660724,
                    "code": "for _ in range(int(input())):\r\n    n=int(input())\r\n    h=list(map(int,input().split()))\r\n    d=list(map(int,input().split()))\r\n    di=n-2\r\n    if n==1:\r\n        if h[0]>=d[0]:\r\n            print(h[0]-d[0])\r\n        else:\r\n            print(-1)\r\n    elif n==2:\r\n        if sum(d)==sum(h):\r\n            print(abs(d[0]-h[0]))\r\n        else:\r\n            print(-1)\r\n    else:\r\n        \r\n        f=(sum(d)-sum(h))//di\r\n        if f<0 or (sum(d)-sum(h))%di!=0:\r\n            print(-1)\r\n        else:\r\n            w=[d[i]-h[i] for i in range(n)]\r\n            flag=0\r\n            for i in range(n):\r\n                if (f-w[i])<0 or (f-w[i])%2!=0:\r\n                    flag=1 \r\n                    break\r\n            if flag==1:\r\n                print(-1)\r\n            else:\r\n                print(f)"
                },
                {
                    "id": 89391466,
                    "submission_date": 1676439830,
                    "language": "PYTH 3",
                    "username": "rs5228127",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.02",
                    "memory": "9.7M",
                    "solution": 89391466,
                    "code": "t = int(input())\r\n\r\nfor i in range(t):\r\n    n = int(input())\r\n    l = list(map(int, input().split()))\r\n    d = list(map(int, input().split()))\r\n    if n == 1:\r\n        if l[0] >= d[0]:\r\n            print(l[0] - d[0])\r\n        else:\r\n            print(-1)\r\n    elif n == 2:\r\n        if sum(l) == sum(d):\r\n            print(abs(l[0] - d[0]))\r\n        else:\r\n            print(-1)\r\n    else:\r\n        f = sum(d) - sum(l)\r\n        ans = f // (n - 2)\r\n        if f < 0 or f % (n - 2) != 0:\r\n            print(-1)\r\n        else:\r\n            for k in range(n):\r\n                x = ans + l[k] - d[k]\r\n                if x < 0 or x % 2 != 0:\r\n                    ans = -1\r\n                    break\r\n            print(ans)"
                }
            ]
        },
        "KFUNC": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "2\r\n1 1 1 3\r\n14 7 2 4",
                    "output": "6\r\n12",
                    "explanation": "Example case 1.\nA = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, ...}\nA1 = 1\nA2 = 2\nA3 = 3\nF(A1) = 1\nF(A2) = 2\nF(A3) = 3\n1+2+3=6\n\nExample case 2.\nA = {14, 21, 28, 35, 42, 49, 56, 63, 70, 77,  ...}\nA2 = 21\nA3 = 28\nA4 = 35\nF(A2) = 3\nF(A3) = 1\nF(A4) = 8\n3+1+8=12"
                }
            ],
            "problem_statement": "Read problems statements in Mandarin Chinese, Russian and Vietnamese as well.\nEugene loves sequences, especially arithmetic progressions. One day he was asked to solve a difficult problem.\n\nIf a sequence of numbers A1, A2, ... , AN form an arithmetic progression A, he was asked to calculate sum of F(Ai), for L \u2264 i \u2264 R.\nF(X) is defined as:\nIf X F(X) = X.\nElse F(X) = F(sum_of_digits(X)).\n\nExample:\nF(1378) = \nF(1+3+7+8) = \nF(19) = \nF(1 + 9) = \nF(10) = \nF(1+0) = \nF(1) = 1\nInput\n\nThe first line of the input contains an integer T denoting the number of test cases.\nEach test case is described in one line containing four integers: A1 denoting the first element of the arithmetic progression A, D denoting the common difference between successive members of A, and L and R as described in the problem statement.\n\nOutput\n\nFor each test case, output a single line containing one integer denoting sum of F(Ai).\n\nConstraints\n\n1 \u2264 T \u2264 105\n1 \u2264 A1 \u2264 109\n0 \u2264 D \u2264 109\n1 \u2264 R \u2264 1018\n1 \u2264 L \u2264 R\n\nSubtasks\n\nSubtask 1:  0 \u2264 D \u2264 100, 1 \u2264 A1 \u2264 109, 1 \u2264 R \u2264 100  - 15 points\nSubtask 2:  0 \u2264 D \u2264 109, 1 \u2264 A1 \u2264 109, 1 \u2264 R \u2264 106  - 25 points\nSubtask 3: Original constraints - 60 points",
            "input_format": "",
            "output_format": "",
            "problem_name": "Eugene and function",
            "user_tags": [
                "Basic Maths",
                "ad-hoc"
            ],
            "computed_tags": [
                "Mathematics",
                "Algorithms",
                "Constructive"
            ],
            "problem_code_id": "KFUNC",
            "difficulty_level": "1746",
            "ai_solutions": [
                "def F(x):\n    while x > 9:\n        x = sum(map(int, str(x)))\n    return x\n\ndef solve(A1, D, L, R):\n    return sum(F(A1 + D * (i - 1)) for i in range(L, R + 1))\n\nT = int(input().strip())\nfor _ in range(T):\n    A1, D, L, R = map(int, input().strip().split())\n    print(solve(A1, D, L, R))",
                "def F(x):\n    if x < 10:\n        return x\n    else:\n        return F(sum(int(digit) for digit in str(x)))\n\ndef solve(A1, D, L, R):\n    return sum(F(A1 + D * (i - 1)) for i in range(L, R + 1))\n\nT = int(input().strip())\nfor _ in range(T):\n    A1, D, L, R = map(int, input().strip().split())\n    print(solve(A1, D, L, R))"
            ],
            "human_solutions": [
                {
                    "id": 96517040,
                    "submission_date": 1684414834,
                    "language": "PYTH 3",
                    "username": "prathmeshjiraf",
                    "user_rating_star": 3,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "2.58",
                    "memory": "9.6M",
                    "solution": 96517040,
                    "code": "def dt(n):\r\n    if n<10:\r\n        return n\r\n    else:\r\n        e=str(n)\r\n        n=0\r\n        for i in e:\r\n            n+=int(i)\r\n        return dt(n)\r\ndef lis(a,d):\r\n    l=[]\r\n    for i in range(9):\r\n        l.append(dt(a+i*d))\r\n    return l \r\ndef rs(l,r):\r\n    s=r//9\r\n    w=r%9\r\n    ans=0 \r\n    for i in range(w):\r\n        ans+=l[i]\r\n    ans+=sum(l)*s\r\n    return ans\r\nfor i in range(int(input())):\r\n    a,d,l,r=map(int,input().split())\r\n    w=lis(a,d)\r\n    \r\n    print(rs(w,r)-rs(w,l-1))"
                },
                {
                    "id": 68765015,
                    "submission_date": 1657560659,
                    "language": "PYTH 3",
                    "username": "meta7",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "3.21",
                    "memory": "9.3M",
                    "solution": 68765015,
                    "code": "def li(): return list(map(int,input().split())); \r\ndef si(): return input().split()\r\ndef ii(): return int(input())\r\ndef ip(): return input()\r\ndef reduceTo1(n):\r\n    if(len(str(n))==1): return n; \r\n    else:\r\n        sum=0; \r\n        for i in str(n): sum+=int(i); \r\n        return reduceTo1(sum); \r\nfor tastcas in range(int(input())):\r\n    a1,d,l,r=li(); al=a1+(l-1)*d; nos=[reduceTo1(al)]; \r\n    t=reduceTo1(nos[-1]+d); \r\n    while(t!=nos[0]):nos.append(t); t=reduceTo1(nos[-1]+d); \r\n    length=len(nos); rng=r-l+1; s1=rng//length; ans=s1*sum(nos); \r\n    for i in range(rng-s1*length): ans+=nos[i]; \r\n    print(ans)"
                }
            ]
        },
        "MAXSEGM": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "1\n5\n0 1 2 0 2\n5 6 7 8 2",
                    "output": "21",
                    "explanation": "The range [2, 4] is an unique range because (1, 2, 0) has no duplicates. Its sum is 6 + 7 + 8 = 21. This is the maximum possible, and hence is the answer."
                }
            ],
            "problem_statement": "Read problems statements in mandarin chinese, russian and vietnamese as well.\nYou are given 2 arrays W =  (W1, W2, .., WN) and C =  (C1, C2, .., CN) with N elements each. A range [l, r] is unique if all the elements Cl, Cl+1, .., Cr are unique (ie. no duplicates). The sum of the range is Wl +  Wl+1 + ... + Wr.\nYou want to find an unique range with the maximum sum possible, and output this sum.\nInput\n\nThe first line of the input contains an integer T, denoting the number of test cases. The description of each testcase follows.\nThe first line of each test case contains a single integer N, denoting the size of the arrays.\nThe second line contains N space-separated integers : C1, C2, .., CN.\nThe third line contains N space-separated integers : W1, W2, .., WN.\n\nOutput\nFor each testcase, output a single integer in a new line, which should be the maximum possible sum of an unique range.\nConstraints\n\n1 \u2264 T \u2264 100\n1 \u2264 N \u2264 1000000\n0 \u2264 Ci N\n0 \u2264 Wi \u2264 1000000000\n 1 \u2264 Sum of N over all test cases \u2264 1000000\n\nSubtasks\n\nSubtask #1 (30 points): Sum of N over all test cases \u2264 10000\nSubtask #2 (70 points): Original constraints",
            "input_format": "",
            "output_format": "",
            "problem_name": "Maximum Unique Segment",
            "user_tags": [
                "1D Arrays",
                "Two pointers"
            ],
            "computed_tags": [
                "Data Structures",
                "Arrays",
                "Algorithms",
                "Simple Algos"
            ],
            "problem_code_id": "MAXSEGM",
            "difficulty_level": "1791",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 47381728,
                    "submission_date": 1622791287,
                    "language": "PYTH 3",
                    "username": "aniket_ag_11",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.93",
                    "memory": "49M",
                    "solution": 47381728,
                    "code": "t=int(input())\nfor i in range(t):\n    n=int(input())\n    c=list(map(int,input().split()))\n    w=list(map(int,input().split()))\n    s=set([])\n    start=0\n    s.add(c[0])\n    maxi=w[0]\n    sumi=w[0]\n    for j in range(1,n):\n        sumi+=w[j]\n        if c[j] not in s:\n            s.add(c[j])\n        else:\n            while start<j and c[j]!=c[start]:\n                s.remove(c[start])\n                start+=1\n                sumi-=w[start-1]\n            start+=1\n            sumi-=w[start-1]\n        if sumi>maxi:\n            maxi=sumi\n    print(maxi)            \n            "
                },
                {
                    "id": 39334808,
                    "submission_date": 1604665401,
                    "language": "PYTH 3",
                    "username": "br4vetr1",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.92",
                    "memory": "22.1M",
                    "solution": 39334808,
                    "code": "for _ in range(int(input())):\n    input()\n    C=list(map(int, input().split()))\n    W=list(map(int,input().split()))\n    s,i=set([C[0]]),0\n    c=mx=W[0]\n    for j in range(1,len(C)):\n        while C[j] in s:\n            mx=max(mx,c)\n            s.remove(C[i])\n            c-=W[i];i+=1\n        s.add(C[j])\n        c+=W[j]\n    print(max(mx,c))"
                }
            ]
        },
        "CO92MATR": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "2\n4 4\n1 2 2 3\n1 -1 7 -1\n6 -1 -1 -1\n-1 -1 -1 -1\n2 3\n1 4 -1\n1 -1 3",
                    "output": "1 2 2 3\n1 7 7 100\n6 10 20 101\n7 11 21 20000\n-1",
                    "explanation": ""
                }
            ],
            "problem_statement": "Read problems statements in Mandarin chinese, Russian and Vietnamese as well.\nChef defines a non-decreasing matrix as a matrix that satisfies the following rules:\n\nFor each row of the matrix, the elements of this row form a non-decreasing sequence.\nFor each column of the matrix, the elements of this column form a non-decreasing sequence.\n\nChef has a matrix A with size N \u00d7 M. Each element of this matrix is either unknown (denoted by -1) or a positive integer.\nChef would like to replace each unknown element of this matrix by a positive integer in such a way that the resulting matrix is non-decreasing. Find one possible resulting matrix or determine that it's impossible.\nInput\nThe first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows.\nThe first line of each test case contains two space-separated integers N and M.\nN lines follow. For each valid i, the i-th of these lines contains M space-separated integers Ai1, Ai2, ..., AiM denoting the elements of the i-th row of matrix A.\n\nOutput\nFor each test case, if there is no way to obtain a non-decreasing matrix, print a single line containing the integer -1.\nOtherwise, print N lines describing the matrix obtained by replacing all unknown elements.\nFor each valid i, the i-th of these lines should contain M space-separated integers denoting the elements of the i-th row of this matrix. Each of these elements should lie between 1 and 2,000,000,000 inclusive.\n\nConstraints\n1 \u2264 T \u2264 100\n1 \u2264 N, M \u2264 100\n1 \u2264 Aij \u2264 109 or Aij = -1 for each valid i, j",
            "input_format": "",
            "output_format": "",
            "problem_name": "Chef Restores a Matrix",
            "user_tags": [
                "2D Arrays",
                "Implementation"
            ],
            "computed_tags": [
                "Data Structures",
                "Arrays",
                "Algorithms"
            ],
            "problem_code_id": "CO92MATR",
            "difficulty_level": "1763",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 89392936,
                    "submission_date": 1676440851,
                    "language": "PYTH 3",
                    "username": "rs5228127",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.69",
                    "memory": "10.4M",
                    "solution": 89392936,
                    "code": "def li(): return list(map(int,input().split())); \r\ndef si(): return input().split()\r\ndef ii(): return int(input())\r\ndef ip(): return input()\r\ndef solve(a,n,m):\r\n    \r\n    return a; \r\nfor tastcas in range(int(input())):\r\n    n,m=li(); a=[li() for i in range(n)]; f=0; \r\n    for i in range(n):\r\n        for j in range(m):\r\n            if(a[i][j]!=-1 and ((i>0 and a[i-1][j]>a[i][j]) or (j>0 and a[i][j-1]>a[i][j]))): f=1; break; \r\n            elif(a[i][j]==-1):\r\n                t=1\r\n                if(i>0): t=max(t,a[i-1][j]); \r\n                if(j>0): t=max(t,a[i][j-1]); \r\n                a[i][j]=t; \r\n        if(f==1): break; \r\n    if(f==1): print(-1)\r\n    else:\r\n        for i in range(n):\r\n            for j in range(m):\r\n                print(a[i][j],end=' ')\r\n            print()"
                },
                {
                    "id": 65719697,
                    "submission_date": 1653848391,
                    "language": "PYTH 3",
                    "username": "venu_01",
                    "user_rating_star": 3,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.48",
                    "memory": "10.3M",
                    "solution": 65719697,
                    "code": "def my_func(n,m):\n    l = []\n    for j in range(n):\n        k = list(map(int,input().split()))\n        l.append(k)\n    temp = 1\n    for j in  range(n):\n        for k in range(m):\n          if j == 0:\n            if j == 0 and k == 0:\n                if l[j][k] == -1: l[j][k] = temp\n                else: temp = l[j][k]\n            else:\n                if l[j][k] == -1: l[j][k] = temp\n                else: temp = l[j][k]\n          else:\n              if l[j][k] == -1:\n                 if k != 0: l[j][k] = max(l[j-1][k],l[j][k-1])\n                 else: l[j][k] = l[j-1][k]\n    flag = 0\n    for i in range(m):\n        ans = []\n        for j in range(n):\n            ans.append(l[j][i])\n        if sorted(ans) == ans: continue\n        else:\n            flag = 1\n            break\n    for i in range(n):\n        k = l[i]\n        if sorted(k) == k: continue\n        else:\n            flag = 1\n            break\n    if flag == 0:\n       for i in range(n):\n           print(*l[i])\n    else: print(-1)\nif __name__ == \"__main__\":\n    for i in range(int(input())):\n        n,m = map(int,input().split())\n        my_func(n,m)"
                }
            ]
        },
        "CAB": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "4\n2 2\n2 5\n4 5\n3 2",
                    "output": "aa\nac\nbaaa\n-1",
                    "explanation": "In the first test case, $n=2$ and $k=2$. So,we have to construct a string of length $2$ with total score $2$. It can be easily seen that the only possible string is \"aa\". Its total score will be equal to $2^0 + 2^0 = 2$.\nIn the second case, \"ac\" will have score $2^0 + 2^2 = 5$. Obviously, \"ca\" will also have the same score and is also a possible answer.\nIn the fourth test case, it can be shown that there is no possible string which satisfies the conditions."
                }
            ],
            "problem_statement": "In the new world, we also have a new system called Cybalphabit system.\nThe system assigns points to each Latin lowercase alphabet as follows:-\n'a' is assigned $2^0$ , 'b' is assigned $2^1$, 'c' $2^2$ and so on. Thus, finally 'z' is assigned $2^{25}$ points.\nA Cyberstring is a sequence of lowercase Latin alphabets.\nNow, the total score of a Cyberstring will be the sum of points of its characters.\nYou will be given two integers $N$ and $K$. \nConstruct a Cyberstring $X$ of length $N$ with total score $K$ or print $-1$ if it is not possible to form the Cyberstring ($X$). \nIf there are multiple answers, print any.\nINPUT:\n\nFirst line contains $T$, the number of test cases.\nEach of the next $T$ lines denotes a different test case :\nThe ${(i+1)}^{th}$ line denotes the $i^{th}$ test case, and contains two integers $N$ and $K$, the length of the string that is to be constructed, and the score of the string respectively. \n\nOUTPUT:\n\nFor each test case, provide the output on a different line.\nOutput the required string $X$, if one exists, otherwise output $-1$.\n\nConstraints:-\n\n$1 \\leq T \\leq 10^5$\n$1 \\leq n \\leq 10^5$\n$1  \\leq k  \\leq 5*10^7$\n\nThe sum of $n$ over all test cases is less than $10^{5}$",
            "input_format": "",
            "output_format": "",
            "problem_name": "Cybalphabit",
            "user_tags": [
                "Greedy",
                "Constructive"
            ],
            "computed_tags": [
                "Algorithms"
            ],
            "problem_code_id": "CAB",
            "difficulty_level": "1771",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 99604337,
                    "submission_date": 1688447662,
                    "language": "PYTH 3",
                    "username": "satshiv7983",
                    "user_rating_star": 3,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.72",
                    "memory": "9.7M",
                    "solution": 99604337,
                    "code": "t=int(input())\nfor _ in range(t):\n    n,k=map(int,input().split())\n    \n    arr=[0]*32\n    temp=k\n    i=0\n    while temp>0:\n        if temp&1:\n            arr[i]=1\n        temp>>=1\n        i+=1\n    kbits=sum(arr)\n    if kbits>n:\n        print(-1)\n        continue\n    idx=26\n    while kbits!=n and idx>0:\n        if arr[idx]>=1:\n            arr[idx-1]+=2\n            arr[idx]-=1\n            kbits+=1\n        else:\n            idx-=1\n    res=\"\"\n    for i in range(26):\n        if arr[i]>=1:\n            res+=arr[i]*chr(i+97)\n    print(res if sum(arr)==n else -1)\n            \n    \n    \n        \n    \n    "
                },
                {
                    "id": 72903108,
                    "submission_date": 1662042603,
                    "language": "PYTH 3",
                    "username": "prakash_218",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "1.65",
                    "memory": "12.2M",
                    "solution": 72903108,
                    "code": "import sys\r\nimport math\r\nfrom collections import defaultdict,Counter,deque\r\nimport os\r\nimport sys\r\nfrom io import BytesIO, IOBase\r\n\r\nsys.setrecursionlimit(1000000009)\r\n\r\nBUFSIZE = 8192\r\nMOD = 1000000007\r\n\r\nclass FastIO(IOBase):\r\n    newlines = 0\r\n\r\n    def __init__(self, file):\r\n        self._fd = file.fileno()\r\n        self.buffer = BytesIO()\r\n        self.writable = \"x\" in file.mode or \"r\" not in file.mode\r\n        self.write = self.buffer.write if self.writable else None\r\n\r\n    def read(self):\r\n        while True:\r\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\r\n            if not b:\r\n                break\r\n            ptr = self.buffer.tell()\r\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\r\n        self.newlines = 0\r\n        return self.buffer.read()\r\n\r\n    def readline(self):\r\n        while self.newlines == 0:\r\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\r\n            self.newlines = b.count(b\"\\n\") + (not b)\r\n            ptr = self.buffer.tell()\r\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\r\n        self.newlines -= 1\r\n        return self.buffer.readline()\r\n\r\n    def flush(self):\r\n        if self.writable:\r\n            os.write(self._fd, self.buffer.getvalue())\r\n            self.buffer.truncate(0), self.buffer.seek(0)\r\n\r\nclass IOWrapper(IOBase):\r\n    def __init__(self, file):\r\n        self.buffer = FastIO(file)\r\n        self.flush = self.buffer.flush\r\n        self.writable = self.buffer.writable\r\n        self.write = lambda s: self.buffer.write(s.encode(\"ascii\"))\r\n        self.read = lambda: self.buffer.read().decode(\"ascii\")\r\n        self.readline = lambda: self.buffer.readline().decode(\"ascii\")\r\n\r\ndef isPrime(x):\r\n    for i in range(2,x):\r\n        if i*i>x:\r\n            break\r\n        if (x%i==0):\r\n            return False\r\n    return True\r\n\r\ndef ncr(n, r, p):  \r\n    num = den = 1\r\n    for i in range(r):\r\n        num = (num * (n - i)) % p\r\n        den = (den * (i + 1)) % p\r\n    return (num * pow(den,p - 2, p)) % p\r\n\r\ndef power(x, y, p) : \r\n    res = 1\r\n    x = x % p \r\n    if (x == 0) : \r\n        return 0\r\n    while (y > 0) : \r\n        if ((y & 1) == 1) : \r\n            res = (res * x) % p \r\n        y = y >> 1   # y = y/2 \r\n        x = (x * x) % p         \r\n    return res \r\n\r\ndef debug(**kwargs):\r\n    for i in kwargs:\r\n        print(f'[{i} = {kwargs[i]}]', end = ' ', file = sys.stderr)\r\n    print(file = sys.stderr)\r\n\r\ntry:\r\n    sys.stdin = open('C:\\\\Users\\\\admin\\\\Desktop\\\\python programs\\\\CP\\\\input.txt', 'r+')\r\n    sys.stdout = open('C:\\\\Users\\\\admin\\\\Desktop\\\\python programs\\\\CP\\\\output.txt', 'w+')\r\n    sys.stderr = open('C:\\\\Users\\\\admin\\\\Desktop\\\\python programs\\\\CP\\\\error.txt', 'w+')\r\nexcept:\r\n    sys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\r\n\r\ninp = lambda: sys.stdin.readline().rstrip()\r\niinp = lambda : int(inp())\r\nminp = lambda type, splt = ' ': map(type, inp().split(splt))\r\nlinp = lambda type, splt = ' ': list(minp(type, splt))\r\ndict = lambda type: defaultdict(type)\r\n\r\ndef solve():\r\n    n, k = minp(int)\r\n    l = [chr(i) for i in range(97, 97 +26)]\r\n    if n > k:\r\n        print('-1')\r\n        return\r\n    # n >= k\r\n    if n == k:\r\n        print('a' * n)\r\n        return\r\n    else:\r\n        a = [1] * n\r\n        total = n\r\n\r\n        for i in range(n - 1, -1, -1):\r\n            while total + a[i] <= k:\r\n                total += a[i]\r\n                # a[i] <<= 1\r\n                a[i] *= 2\r\n        if total != k:\r\n            print('-1')\r\n            return\r\n        else:\r\n            # logarithms\r\n            for i in range(n):\r\n                index = int(math.log(a[i], 2))\r\n                print(l[index], end = '')\r\n            print()\r\n\r\n\r\n\r\n\r\n\r\n\r\nt = 1\r\nt = iinp()\r\n\r\nfor _ in range(t):\r\n    solve()\r\n\r\n\r\nexit(0)"
                }
            ]
        },
        "ORACLCS": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "3\n2\nab\nba\n2\naa\nbb\n3\naabb\nabab\nbaab",
                    "output": "1\n0\n2",
                    "explanation": "In the first example, the minimum value of LCS of all the strings is 1, the string by oracle can be one of these {aa, ab, ba, bb}. \n\nIn the second example, whatever string oracle has does not matter, LCS will always be zero."
                }
            ],
            "problem_statement": "Read problems statements in Mandarin Chinese, Russian and Vietnamese as well.\n\nDevu is a disastrous oracle: his predictions about various events of your life are horrifying. Instead of providing good luck, he \"blesses\" you with bad luck. The secret behind his wickedness is a hidden omen which is a string of length m. On your visit to him, you can ask a lot of questions about your future, each of which should be a string of length m. In total you asked him n such questions, denoted by strings s1, s2, ... , sn of length m each. Each of the question strings is composed of the characters 'a' and 'b' only.\n\n\nAmount of bad luck this visit will bring you is equal to the length of longest common subsequence (LCS) of all the question strings and the hidden omen string. Of course, as the omen string is hidden, you are wondering what could be the least value of bad luck you can get.\n\n\nCan you find out what could be the least bad luck you can get? Find it fast, before Devu tells you any bad omens.\n\nInput\nThe first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows.\nFirst line of each test case contains a single integer n denoting number of strings.\nFor each of next n lines, the ith line contains the string si.\nOutput\nFor each test case, output a single integer corresponding to the answer of the problem. \n\n\nConstraints\nAll the strings (including the hidden omen) contain the characters 'a' and 'b' only.\n\n\n Subtask #1: (40 points) \n\n1 \u2264 T, n, m \u2264 14\n\n\n Subtask #2: (60 points) \n\n1 \u2264 T, n, m \u2264 100",
            "input_format": "",
            "output_format": "",
            "problem_name": "Oracle Devu and Longest Common Subsequence",
            "user_tags": [
                "Observation"
            ],
            "computed_tags": [
                "Algorithms"
            ],
            "problem_code_id": "ORACLCS",
            "difficulty_level": "1726",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 30978557,
                    "submission_date": 1585823595,
                    "language": "PYTH 3",
                    "username": "aarushi1",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.04",
                    "memory": "17.6M",
                    "solution": 30978557,
                    "code": "t = int(input())\n\nfor _ in range(t):\n    mat = []\n    n = int(input())\n    na = 1e9\n    nb = 1e9\n    for _ in range(n):\n        s = input()\n        na = min(na, s.count('a'))\n        nb = min(nb, s.count('b'))\n    print(min(na, nb))"
                },
                {
                    "id": 26658911,
                    "submission_date": 1568898252,
                    "language": "PYTH 3",
                    "username": "anthonymc456",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.14",
                    "memory": "17.6M",
                    "solution": 26658911,
                    "code": "for case in range(int(input())):\n    A = 10**9\n    B = 10**9\n    for i in range(int(input())):\n        s = input()\n        A = min(A, sum(c == 'a' for c in s))\n        B = min(B, sum(c == 'b' for c in s))\n    print(min(A, B))"
                }
            ]
        },
        "CHODE": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "3\nqwrtyuipasdfgjkzxcvbnmheol\ndummy!\nbfgjklmopqrstuwxzhvnicdyea\nabcd b efgd hbi!\nqwrtyuipasdfgjkzxcvbnmheol\nDummy!",
                    "output": "hello!\nhave a nice day!\nHello!",
                    "explanation": ""
                }
            ],
            "problem_statement": "Read problems statements in Mandarin Chinese  and Russian.\nOnce upon a time chef decided to learn encodings. And, obviously, he started with the easiest one (well, actually the easiest after Caesar cypher) \u2013 substitution cypher. \nBut very soon Chef got bored with encoding/decoding, so he started thinking how to hack this cypher. \nHe already knows some algorithm, which is not always correct, \nbut it\u2019s sufficient for now. Here is its description.\n\nImagine we know frequency sequence of English letters (this means, that letters are sorted by their frequency of appearing in English texts, in ascending order). \nAnd let\u2019s find frequency sequence of cyphered letters (if some of them appear equal number of times, then first in frequency sequence will be lower letter between them).\nNow, using this two frequency sequences we can recover plain text. Just substitute cyphered letter with origin one, if they are at same positions in sequences. \n\nNow, Chef has frequency sequence of English letters and cypher text. And he asks you to recover plain text. Please, help him.\nInput\nIn first line number T is given - number of test cases. Then T test cases follow. Each test case consists of two lines - frequency sequence and encrypted text.\nOutput\nFor each test case you should output decrypted with the given frequency sequence text. Please note, that the case of letters should be preserved. \nConstraints\n\n\n 1 \u2264 T \u2264 1000; \n Length of frequency sequence is always 26; \n 1 \u2264 length of the text \u2264 150000; \n 1 \u2264 sum lengths of all texts \u2264 150000. \n Frequency sequence consists of all lowercase English letters. Text consists of any characters.",
            "input_format": "",
            "output_format": "",
            "problem_name": "Chef and Codes",
            "user_tags": [
                "Implementation"
            ],
            "computed_tags": [
                "Algorithms"
            ],
            "problem_code_id": "CHODE",
            "difficulty_level": "1703",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 63621657,
                    "submission_date": 1650860735,
                    "language": "PYTH 3",
                    "username": "amma_baboi",
                    "user_rating_star": 3,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.09",
                    "memory": "9.5M",
                    "solution": 63621657,
                    "code": "from sys import maxsize\r\nimport functools\r\n\r\ndef customSort(a,b):\r\n    if a[0]>b[0]:\r\n        return 1\r\n    elif a[0]<b[0]:\r\n        return -1\r\n    else:\r\n        if a[1].lower()>b[1].lower():\r\n            return 1\r\n        elif a[1].lower()<b[1].lower():\r\n            return -1\r\n    return 0\r\n\r\ndef mgc(a,b):\r\n    mp = {}\r\n    for i in b:\r\n        if not i.isalpha():\r\n            continue\r\n        i = i.lower()\r\n        if i in mp:\r\n            mp[i]+=1\r\n        else:\r\n            mp[i]=1\r\n    temp = []\r\n    for i in mp:\r\n        temp.append([mp[i],i])\r\n    temp.sort(key=functools.cmp_to_key(customSort))\r\n    mapped = {}\r\n    i = 25\r\n    j = len(temp)-1\r\n    while(j>=0):\r\n        mapped[temp[j][1]] = a[i]\r\n        j-=1\r\n        i-=1\r\n    ans = \"\"\r\n    for i in b:\r\n        if i.isupper():\r\n            if i.lower() in mapped:\r\n                ans += mapped[i.lower()].upper()\r\n            continue\r\n        if i in mapped:\r\n            ans += mapped[i]\r\n        else:\r\n            ans += i\r\n    return ans\r\n\r\n\r\n\r\nfor i in range(int(input())):\r\n    a = input()\r\n    b = input()\r\n    print(mgc(a,b))\r\n"
                },
                {
                    "id": 62009456,
                    "submission_date": 1649094282,
                    "language": "PYTH 3",
                    "username": "dhruvgautam_16",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.15",
                    "memory": "11.3M",
                    "solution": 62009456,
                    "code": "for _ in range(int(input())):\n    s = input()\n    t = input()\n    x = []\n    xd = {}\n    for i in range(len(t)):\n        if t[i].isupper(): \n            x += [1]\n            xd[t[i].lower()] = xd.setdefault(t[i].lower(), 0) + 1\n        elif t[i].isalpha(): \n            x +=[0]\n            xd[t[i]] = xd.setdefault(t[i], 0) + 1\n        else:\n            x += [-1]\n    xd = sorted(xd.items(), key = lambda x: (x[1], x[0]))\n    ans = {}\n    for i in range(len(xd)):\n        ans[xd[i][0]] = s[26-len(xd)+ i]\n    for i in range(len(t)):\n        if t[i].isalpha():\n            if x[i] == 0:\n                print(ans[t[i]], end = \"\")\n            else:\n                print(ans[t[i].lower()].upper(), end = \"\")\n        else:\n            print(t[i], end = \"\")\n    print()"
                }
            ]
        },
        "CHEFHAM": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "3\r\n2\r\n1 2\r\n3\r\n1 2 1\r\n4\r\n2 6 5 2",
                    "output": "2\r\n2 1\r\n2\r\n2 1 1\r\n4\r\n6 2 2 5",
                    "explanation": ""
                }
            ],
            "problem_statement": "Read problems statements in Vietnamese \n.\nChef likes to work with arrays a lot. Today he has an array A of length N consisting of positive integers. Chef's little brother likes to follow his elder brother, so he thought of creating an array B of length N. The little brother is too small to think of new numbers himself, so he decided to use all the elements of array A to create the array B. In other words, array B is obtained by shuffling the elements of array A.\nThe little brother doesn't want Chef to know that he has copied the elements of his array A. Therefore, he wants to create the array B in such a way that the Hamming distance between the two arrays A and B is maximized. The Hamming distance between A and B is the number of indices i (1 \u2264 i \u2264 N) such that Ai \u2260 Bi.\nThe brother needs your help in finding any such array B. Can you please find one such array for him?\nNote that it's guaranteed that no element in A appears more than twice, i.e. frequency of each element is at most 2.\nInput\n\nThe first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows.\nThe first line of each test case contains an integer N denoting the length of the array A.\nThe second line contains N space-separated integers A1, A2 ... AN.\n\nOutput\n\nFor each test case, print two lines.\nThe first line should contain the maximum possible Hamming distance that array B can have from array A.\nThe second line should contain N space-separated integers denoting the array B; the i-th integer should denote the value of Bi. Note that B should be an array obtained after shuffling the elements of A.\n\nConstraints\n\n1 \u2264 T \u2264 10\n1 \u2264 N \u2264 105\n1 \u2264 Ai \u2264 105\nThe frequency of each integer in the array A will be at most 2.\n\nSubtasks\n\nSubtask #1 (30 points): all elements in the array A are unique\n\n\nSubtask #2 (30 points): 5 \u2264 N \u2264 105\n\n\nSubtask #3 (40 points): original constraints",
            "input_format": "",
            "output_format": "",
            "problem_name": "Chef and Hamming Distance of arrays",
            "user_tags": [
                "1D Arrays",
                "ad-hoc"
            ],
            "computed_tags": [
                "Data Structures",
                "Arrays",
                "Algorithms",
                "Constructive"
            ],
            "problem_code_id": "CHEFHAM",
            "difficulty_level": "1790",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 89401750,
                    "submission_date": 1676447830,
                    "language": "PYTH 3",
                    "username": "rs5228127",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "2.83",
                    "memory": "39.8M",
                    "solution": 89401750,
                    "code": "\r\n\r\nfor i in range(int(input())):\r\n    n = int(input())\r\n    li = list(map(int,input().split()))\r\n    a=[]\r\n    b=[]\r\n    for i in range(n):\r\n        a.append([li[i],i])\r\n        b.append(li[i])\r\n    \r\n    a.sort()\r\n    b.sort(reverse=True)\r\n    flag = False\r\n   \r\n    for i in range(n):\r\n       if b[i]==a[i][0]:\r\n           if flag==False:\r\n               b[i],b[0]=b[0],b[i]\r\n               flag = True\r\n           else:\r\n               b[i],b[n-1]=b[n-1],b[i]\r\n    ct = 0\r\n    co = [0]*n\r\n    \r\n    for i in range(n):\r\n        if b[i] != a[i][0]:\r\n            ct+=1\r\n        co[a[i][1]]=b[i]\r\n    print(ct)\r\n    print(*co)"
                },
                {
                    "id": 69119287,
                    "submission_date": 1657995008,
                    "language": "PYTH 3",
                    "username": "iampankajbhati",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "3.50",
                    "memory": "38.9M",
                    "solution": 69119287,
                    "code": "for i in range(int(input())):\r\n    n = int(input())\r\n    li = list(map(int,input().split()))\r\n    a=[]\r\n    b=[]\r\n    for i in range(n):\r\n        a.append([li[i],i])\r\n        b.append(li[i])\r\n    \r\n    a.sort()\r\n    b.sort(reverse=True)\r\n    flag = False\r\n   \r\n    for i in range(n):\r\n       if b[i]==a[i][0]:\r\n           if flag==False:\r\n               b[i],b[0]=b[0],b[i]\r\n               flag = True\r\n           else:\r\n               b[i],b[n-1]=b[n-1],b[i]\r\n    ct = 0\r\n    co = [0]*n\r\n    \r\n    for i in range(n):\r\n        if b[i] != a[i][0]:\r\n            ct+=1\r\n        co[a[i][1]]=b[i]\r\n    print(ct)\r\n    print(*co)"
                }
            ]
        },
        "SUMPOWER": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "3\n6 3\naabbcc\n5 2\nabccc\n4 3\naabb",
                    "output": "4\n3\n1",
                    "explanation": "Example case 1:\n- In step $1$, the board is displaying \"aab\".\n- In step $2$, the board is displaying \"abb\".\n- In step $3$, the board is displaying \"bbc\".\n- In step $4$, the board is displaying \"bcc\".\nThe power required for switching from the $1$-st to the $2$-nd step is $1$, because cell $1$ changes from 'a' to 'a' (requiring power $0$), cell $2$ changes from 'a' to 'b' (requiring power $1$) and cell $3$ changes from 'b' to 'b' (requiring power $0$); $0 + 1 + 0 = 1$.\nThe power required for switching between the $2$-nd and $3$-rd step is $2$ and the power required for switching between the $3$-rd and $4$-th step is $1$.\nTherefore, the answer is $1 + 2 + 1 = 4$."
                }
            ],
            "problem_statement": "Read problems statements in Mandarin chinese, Russian and Vietnamese as well.\nYou work as an engineer. You were given an empty board with $K$ consecutive cells; at any moment, each cell can display one character.\nYou want the board to display a string $S$ with length $N > K$. Since the board isn't large enough, you want to display the string in $N-K+1$ steps. In the $i$-th step ($1 \\le i \\le N-K+1$), you'll make the board display the characters $S_i, S_{i+1}, \\dots, S_{i+K-1}$.\nThe power required to switch the board from step $i$ to step $i+1$ (for $1 \\le i \\le N-K$) is equal to the number of characters displayed on the board that have to change between these steps. You should find the total power required for the whole process of displaying a string, i.e. the sum of powers required for switching between all consecutive pairs of steps.\nInput\n\nThe first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\nThe first line of each test case contains two space-separated integers $N$ and $K$.\nThe second line contains a single string $S$ with length $N$.\n\nOutput\nFor each test case, print a single line containing one integer \u2014 the total power required for text switching.\nConstraints\n\n$1 \\le T \\le 1,000$\n$2 \\le N \\le 10^5$\n$1 \\le K \\lt N$\neach character of $S$ is a lowercase English letter\nthe sum of $N$ for all test cases does not exceed $10^6$\n\nSubtasks\nSubtask #1 (20 points):\n- $1 \\le T \\le 100$\n- $2 \\le N \\le 50$\nSubtask #2 (80 points): original constraints",
            "input_format": "",
            "output_format": "",
            "problem_name": "Summary Power",
            "user_tags": [
                "String"
            ],
            "computed_tags": [
                "Data Structures"
            ],
            "problem_code_id": "SUMPOWER",
            "difficulty_level": "1709",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 36663645,
                    "submission_date": 1597324886,
                    "language": "PYTH 3",
                    "username": "vjudge11",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.44",
                    "memory": "18.6M",
                    "solution": 36663645,
                    "code": "for _ in range(int(input())):\n    n,m=map(int,input().split())\n    s=input()\n    dif=[0]*n\n    for i in range(1,n):\n        if s[i]!=s[i-1]:\n            dif[i]=1\n    #print(dif)\n    for i in range(1,n):\n        dif[i]=dif[i]+dif[i-1]\n    #print(dif)\n    c=0\n    for i in range(m):\n        #print(n-m+i,dif[n-m+i],i,dif[i])\n        c+=dif[n-m+i]-dif[i]\n    print(c)"
                },
                {
                    "id": 31677538,
                    "submission_date": 1586590574,
                    "language": "PYTH 3",
                    "username": "sonaldangi",
                    "user_rating_star": 3,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.52",
                    "memory": "17.7M",
                    "solution": 31677538,
                    "code": "t=int(input())\r\nfor _ in range(t):\r\n    n,k=map(int,input().split())\r\n    s=input()\r\n    s=list(s)\r\n    #prev=s[:k]\r\n    c=0\r\n    l=[]\r\n    if(n%2==0):\r\n        for i in range(1,n//2+1):\r\n            d=min(n-k,k,i)\r\n            l.append(d)\r\n        for i in range(n//2-1,0,-1):\r\n            d=min(n-k,k,i)\r\n            l.append(d)\r\n    else:\r\n        for i in range(1,n//2+1):\r\n            d=min(n-k,k,i)\r\n            l.append(d)\r\n        for i in range(n//2,0,-1):\r\n            d=min(n-k,k,i)\r\n            l.append(d)\r\n    #print(l)\r\n    for i in range(n-1):\r\n        if(s[i]!=s[i+1]):\r\n            c+=l[i]\r\n    print(c)\r\n    \r\n       \r\n        \r\n        "
                }
            ]
        },
        "CHEFSPL": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "3\naba\nabac\nabcd",
                    "output": "YES\nNO\nNO",
                    "explanation": "Example case 1.\nWe can remove the character at position 1 (0-based index) to get \"aa\" which is a double string. Hence, it is a special dish.\n\n\nExample case 2.\nIt is not possible to remove the character at any of the position to get the double string. Hence, it is not a special dish."
                }
            ],
            "problem_statement": "Read problems statements in Mandarin Chinese, Russian and Vietnamese as well.\n\nOne day, Chef prepared D brand new dishes. He named the i-th dish by a string Si. After the cooking, he decided to categorize each of these D dishes as special or not.\n\n\nA dish Si is called special if it's name (i.e. the string Si) can be represented in the form of a double string by removing at most one (possibly zero) character from it's name from any position. \n\n\nA string is called a double string if it can be represented as a concatenation of two identical, non-empty strings. \ne.g. \"abab\" is a double string as it can be represented as \"ab\" + \"ab\" where + operation denotes concatenation. \nSimilarly, \"aa\", \"abcabc\" are double strings whereas \"a\", \"abba\", \"abc\" are not.\n\nInput\n\nFirst line of the input contains an integer D denoting the number of dishes prepared by Chef on that day.\nEach of the next D lines will contain description of a dish. \n    \nThe i-th line contains the name of i-th dish Si.\n    \n\nOutput\nFor each of the D dishes, print a single line containing \"YES\" or \"NO\" (without quotes) denoting whether the dish can be called as a special or not.\nConstraints\n\n1 \u2264 D \u2264 106\n1 \u2264 |Si| \u2264 106.\nEach character of string Si will be lower case English alphabet (i.e. from 'a' to 'z').\n\nSubtasks\n\nSubtask #1 : (20 points)\n\nSum of |Si| in an input file doesn't exceed 2 * 103\n\n\nSubtask 2 : (80 points) \n\nSum of |Si| in an input file doesn't exceed 2 * 106",
            "input_format": "",
            "output_format": "",
            "problem_name": "Chef And Special Dishes",
            "user_tags": [
                "String",
                "ad-hoc",
                "Two pointers"
            ],
            "computed_tags": [
                "Data Structures",
                "Algorithms",
                "Constructive",
                "Simple Algos"
            ],
            "problem_code_id": "CHEFSPL",
            "difficulty_level": "1760",
            "ai_solutions": [
                "def is_special(dish):\n    dish_length = len(dish)\n    for i in range(dish_length):\n        temp_dish = dish[:i] + dish[i+1:]\n        half = len(temp_dish) // 2\n        if temp_dish[:half] == temp_dish[half:]:\n            return \"YES\"\n    return \"NO\"\n\nD = int(input().strip())\nfor _ in range(D):\n    dish = input().strip()\n    print(is_special(dish))",
                "def is_special(dish):\n    dish_length = len(dish)\n    for i in range(dish_length):\n        temp_dish = dish[:i] + dish[i+1:]\n        if temp_dish[:len(temp_dish)//2] == temp_dish[len(temp_dish)//2:]:\n            return \"YES\"\n    return \"NO\"\n\nD = int(input().strip())\nfor _ in range(D):\n    dish = input().strip()\n    print(is_special(dish))"
            ],
            "human_solutions": [
                {
                    "id": 1014337530,
                    "submission_date": 1692191829,
                    "language": "PYTH 3",
                    "username": "subh2002tiwari",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.57",
                    "memory": "9.7M",
                    "solution": 1014337530,
                    "code": "for _ in range(int(input())):\r\n    s=input()\r\n    n=len(s)\r\n    if n==1:\r\n        print(\"NO\")\r\n        continue\r\n    if n%2==0:\r\n        if s[:n//2]==s[n//2:]:\r\n            print(\"YES\")\r\n        else:\r\n            print(\"NO\")\r\n    else:\r\n        a=s[:n//2]\r\n        b=s[n//2:]\r\n        f=0\r\n        mis=0\r\n        fa=True\r\n        for i in range(len(a)):\r\n            if a[i]==b[i+f]:\r\n                continue\r\n            elif mis==0:\r\n                if a[i]==b[i+f+1]:\r\n                    f+=1 \r\n                    mis=1 \r\n                else:\r\n                    fa=False\r\n                    break\r\n            else:\r\n                fa=False\r\n                break\r\n        \r\n        if fa==True:\r\n            print(\"YES\")\r\n            continue\r\n        b=s[:n//2+1]\r\n        a=s[n//2+1:]\r\n        f=0\r\n        mis=0\r\n        fa=True\r\n        for i in range(len(a)):\r\n            if a[i]==b[i+f]:\r\n                continue\r\n            elif mis==0:\r\n                if a[i]==b[i+f+1]:\r\n                    f+=1 \r\n                    mis=1 \r\n                else:\r\n                    fa=False\r\n                    break\r\n            else:\r\n                fa=False\r\n                break\r\n        \r\n        if fa==True:\r\n            print(\"YES\")\r\n        else:\r\n            print(\"NO\")\r\n        \r\n        "
                },
                {
                    "id": 89391230,
                    "submission_date": 1676439663,
                    "language": "PYTH 3",
                    "username": "rs5228127",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.65",
                    "memory": "11.3M",
                    "solution": 89391230,
                    "code": "for case in range(int(input())):\r\n    s = input()\r\n    n = len(s)//2\r\n    if len(s)==1:\r\n        print('NO')\r\n    elif len(s)%2==0:\r\n        print('YES' if (s[0:n]==s[n:]) else 'NO')\r\n    else:\r\n        match = True\r\n        skip = 0\r\n        for i in range(n):\r\n            if s[i+skip]!=s[i+n+1]:\r\n                if skip==1 or s[i+1]!=s[i+n+1]:\r\n                    match = False\r\n                    break\r\n                skip = 1\r\n        if match:\r\n            print('YES')\r\n            continue\r\n        match = True\r\n        skip = 0\r\n        for i in range(n):\r\n            if s[n-1-i]!=s[2*n-i-skip]:\r\n                if skip==1 or s[n-1-i]!=s[2*n-i-1]:\r\n                    match = False\r\n                    break\r\n                skip = 1\r\n        if match:\r\n            print('YES')\r\n        else:\r\n            print('NO')"
                }
            ]
        },
        "PROB": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "2\n2 2 1 2\n2 3 4 1",
                    "output": "0.5\n0.4",
                    "explanation": "In the first test case, the 5 possible outcomes after Chef discards 2 tickets is\n\n(0,2,1) with probability (1/10). Probability of winning is 0 - since there are no winning tickets!\n(2,0,1) with probability (1/10). Probability of winning is 1 - since there are no losing tickets!\n(2,1,0) with probability (1/5). Probability of winning is (2/3) - there are no second chances!\n(1,2,0) with probability (1/5). Probability of winning is (1/3) - there are no second chances!\n(1,1,1) with probability (2/5). Probability of winning is (1/3) + (1/3)*(1/2) = (1/2). This is calculated by considering the two cases\n        The winning ticket is picked in the first turn - probability (1/3).\nA Type-3 ticket is picked in first turn, followed by the winning ticket - probability (1/3)*(1/2).\n\n\nThe over-all probability of winning is (1/10) + (2/15) + (1/15) + (1/5) = (1/2)."
                }
            ],
            "problem_statement": "Chef, Artem and Eugene are the best of friends and teammates. Recently, they won a lot of money at the Are You Feeling Lucky Cup. Having put their fortune to test and emerging victorious, they are now busy enjoying their wealth. Eugene wanted to drink it all away. Chef and Artem had better plans. \n\nChef and Artem decided to go to Las Vegas and put more of their fortune to test! Eugene stayed at home and continues drinking.\n\nIn Vegas, Chef and Artem found lots of interesting games. The most interesting one to them was the game of Lucky Tickets.\n\nLucky Tickets is played using three kinds of tickets\n\nType-1 called the winning ticket.\nType-2 called the losing ticket.\nType-3 called the try again ticket.\n\nLucky Tickets is played as follows\nYou know there are T1 tickets of Type-1, T2 tickets of Type 2 and T3 tickets of Type-3 before the game begins.\nAll the tickets are placed in a sealed box. You are allowed to take out only one ticket from the box. Of course, you cannot see inside the box while choosing the ticket.\n\nIf you choose a Type-1 ticket, you are declared winner of Lucky Tickets and double your money.\nIf you choose a Type-2 ticket, you are declared loser of Lucky Tickets and lose all your money.\nIf you choose a Type-3 ticket, you have to try your fortune again and pick another ticket from the box and the selection process starts all over again.\n\nChef was able to convince the organizers of Lucky Tickets to let him go first and discard T4 tickets. This means that Chef makes T4 turns to choose exactly one ticket every turn, and despite what ticket he chose, he simply discards it. Chef also convinced the organizers to let Artem go right after he is finished.\nWhat is the probability that Artem will win?\nInput\nThe first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. Each test case will consist of four space separeted integers T1, T2, T3 and T4, respectively.\nOutput\nFor each test case, output a single line containing the probability that Artem will win. Your answer will be considered correct if it has an absolute error less then 10-6.\nConstraints\n1 \u2264 T \u2264 100001 \u2264 T1, T2, T3 \u2264 10000000000 \u2264 T4",
            "input_format": "",
            "output_format": "",
            "problem_name": "The Probability Of Winning",
            "user_tags": [
                "ivanz_adm",
                "july13",
                "probability",
                "simple"
            ],
            "computed_tags": [],
            "problem_code_id": "PROB",
            "difficulty_level": "1771",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 29047160,
                    "submission_date": 1579419923,
                    "language": "PYTH 3",
                    "username": "a_pearce",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.08",
                    "memory": "17.6M",
                    "solution": 29047160,
                    "code": "t = int(input())\nwhile(t>0):\n    t14 = input()\n    t14 = list(map(int, t14.split()))\n    print(float(t14[0]/(t14[0]+t14[1])))\n    t=t-1"
                },
                {
                    "id": 28601446,
                    "submission_date": 1577901748,
                    "language": "PYTH 3",
                    "username": "therealameya",
                    "user_rating_star": 3,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.07",
                    "memory": "17.6M",
                    "solution": 28601446,
                    "code": "for _ in range(int(input())):\n    t=list(map(int,input().split()))\n    print(t[0]/(t[0]+t[1]))"
                }
            ]
        },
        "CNPIIM": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "1\n3",
                    "output": "2",
                    "explanation": "The only two matrices that exist with trace equal to 3 and that satisfy all the given conditions are:"
                }
            ],
            "problem_statement": "Read problems statements in Mandarin Chinese  and Russian.\n\u00a0\nLira loves Linear Algebra and she is especially keen about matrix :).\nToday, she learnt some properties about matrices, namely, she learnt about what the trace of a matrix is, as her teacher gave her many exercises for her to practice.\nAs we know she is pretty clever, she rapidly came up with some definitions of her own and devised a somewhat harder version of the problem initially proposed by her teacher.\n\n\nNamely, she defines a Positive Invertible Integer Matrix as being an invertible 2x2 matrix composed only of positive (i.e. greater than 0) integer elements and whose determinant is greater than 0.\nNow, she is interested in counting how many such matrices are there, such that their trace is equal to N .\nIt's your turn to solve Lira's problem :D\nInput\nThe first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. \nEach test case consist of single integer N, the trace of the matrix.\n\n\nOutput\nFor each test case, output a single line containing the number of Positive Invertible Integer Matrices such that their trace is equal to N and determinant is positive.\nRead here for additional info:\nhttp://en.wikipedia.org/wiki/Trace_(linear_algebra)\nhttp://en.wikipedia.org/wiki/Determinant \nConstraints:\n1 \u2264 T \u2264 50\n3 \u2264 N \u2264 2500",
            "input_format": "",
            "output_format": "",
            "problem_name": "Counting Matrices",
            "user_tags": [
                "Number Theory",
                "Dynamic Programming"
            ],
            "computed_tags": [
                "Mathematics",
                "Algorithms"
            ],
            "problem_code_id": "CNPIIM",
            "difficulty_level": "1749",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 89387447,
                    "submission_date": 1676436536,
                    "language": "PYTH 3",
                    "username": "rs5228127",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "2.30",
                    "memory": "81.6M",
                    "solution": 89387447,
                    "code": "lim = 2500*2500//4+1\r\nacc = [0 for _ in range(lim+10)]\r\ndef precompute():\r\n    global acc, lim\r\n    cnt = [0 for _ in range(lim+10)]\r\n    for i in range(1, lim+1):\r\n        for j in range(i, lim+1, i):cnt[j] += 1\r\n    for i in range(1, lim+1):acc[i] = acc[i-1]+cnt[i]\r\ndef solve(N):\r\n    global acc, lim\r\n    ret = 0\r\n    for i in range(1, N):ret += acc[i*(N-i)-1]\r\n    return ret\r\nprecompute()\r\nfor _ in range(int(input())):\r\n    print (solve(int(input())))"
                },
                {
                    "id": 69066637,
                    "submission_date": 1657894647,
                    "language": "PYTH 3",
                    "username": "maliha04",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "2.27",
                    "memory": "81.4M",
                    "solution": 69066637,
                    "code": "lim = 2500*2500//4+1\r\nacc = [0 for _ in range(lim+10)]\r\ndef precompute():\r\n    global acc, lim\r\n    cnt = [0 for _ in range(lim+10)]\r\n    for i in range(1, lim+1):\r\n        for j in range(i, lim+1, i):cnt[j] += 1\r\n    for i in range(1, lim+1):acc[i] = acc[i-1]+cnt[i]\r\ndef solve(N):\r\n    global acc, lim\r\n    ret = 0\r\n    for i in range(1, N):ret += acc[i*(N-i)-1]\r\n    return ret\r\nprecompute()\r\nfor _ in range(int(input())):print (solve(int(input())))"
                }
            ]
        },
        "PCJ18C": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "1\n3 30 2\n",
                    "output": "60 1",
                    "explanation": ""
                }
            ],
            "problem_statement": "Chef is making polygon cakes in his kitchen today! \nSince the judge panel is very strict, Chef's cakes must be beautiful and have sharp and precise $internal$ angles in arithmetic progression. \nGiven the number of sides, $N$, of the cake Chef is baking today and also the measure of its first angle(smallest angle), $A$, find the measure of the $K^{th}$ angle.\nInput:\n\nThe first line contains a single integer $T$, the number of test cases. \nThe next $T$ lines contain three space separated integers $N$, $A$ and $K$, the number of sides of polygon, the first angle and the $K^{th}$ angle respectively. \n\nOutput:\nFor each test case, print two space separated integers $X$ and $Y$, such that the $K^{th}$ angle can be written in the form of $X/Y$ and $gcd(X, Y) = 1$\nConstraints\n\n$1 \\leq T \\leq 50$\n$3 \\leq N \\leq 1000$\n$1 \\leq A \\leq 1000000000$\n$1 \\leq K \\leq N$\nIt is guaranteed the answer is always valid.",
            "input_format": "",
            "output_format": "",
            "problem_name": "Chef and Polygon Cakes",
            "user_tags": [
                "Geometry",
                "GCD",
                "AP",
                "Fractions"
            ],
            "computed_tags": [
                "Mathematics",
                "Number Theory",
                "Sequences and Progression",
                "Basic Maths"
            ],
            "problem_code_id": "PCJ18C",
            "difficulty_level": "1773",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 30796312,
                    "submission_date": 1585380849,
                    "language": "PYTH 3",
                    "username": "varsha__789",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.02",
                    "memory": "17.6M",
                    "solution": 30796312,
                    "code": "import math\n\nfor _ in range(eval(input())):\n    n, a, k = [int(x) for x in input().split()]\n\n    x = a*n*(n-1) + (k-1)*(360 * (n-2) - 2*a*n)\n    y= n*(n-1)\n\n    Gcd = math.gcd(x, y)\n    print('{} {}'.format(int(x/Gcd), int(y/Gcd)))\n"
                },
                {
                    "id": 30589171,
                    "submission_date": 1584702467,
                    "language": "PYTH 3",
                    "username": "arin17",
                    "user_rating_star": 3,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.02",
                    "memory": "17.6M",
                    "solution": 30589171,
                    "code": "import math\nst=''\ndef func(n,a,k):\n    s=(n-2)*180\n    y=n*(n-1)\n    x=a*y+2*(k-1)*(s-a*n)\n    g=math.gcd(x,y)\n    x,y=x//g,y//g\n    return(str(str(x)+' '+str(y)))\n\n\nfor _ in range(int(input())):\n    n,a,k=map(int,input().split())\n    #n = int(input())\n    #l1=[]\n    #inp=input().split()\n    #s=input()\n    #l1=list(map(int,input().split()))\n    #l2 = list(map(int, input().split()))\n    #l1=input().split()\n    #l2=input().split()\n    st+=str(func(n,a,k))+'\\n'\n\nprint(st)\n\n"
                }
            ]
        },
        "MATCHS": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "5\r\n1 1\r\n2 2\r\n1 3\r\n155 47\r\n6 4",
                    "output": "Ari\r\nAri\r\nAri\r\nAri\r\nRich",
                    "explanation": "One possible sequence of moves for the fourth test case is:\n$(155, 47) \\rightarrow (61, 47) \\rightarrow (14, 47) \\rightarrow (14, 19) \\rightarrow (14, 5) \\rightarrow (4, 5) \\rightarrow (4, 1) \\rightarrow (0, 1)$"
                }
            ],
            "problem_statement": "Read problem statements in Hindi, Bengali, Mandarin Chinese, Russian, and Vietnamese as well.\nAri and Rich are playing a pretty confusing game. Here are the rules of the game:\n- The game is played with two piles of matches. Initially, the first pile contains $N$ matches and the second one contains $M$ matches.\n- The players alternate turns; Ari plays first.\n- On each turn, the current player must choose one pile and remove a positive number of matches (not exceeding the current number of matches on that pile) from it.\n- It is only allowed to remove $X$ matches from a pile if the number of matches in the other pile divides $X$.\n- The player that takes the last match from any pile wins.\nIt can be proved that as long as both piles are non-empty, there is always at least one valid move, so the game must end by emptying some pile. Both Ari and Rich play optimally. Determine the winner of the game.\nInput\n\nThe first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\nThe first and only line of each test case contains two space-separated integers $N$ and $M$.\n\nOutput\nFor each test case, print a single line containing the string \"Ari\" (without quotes) if Ari wins or \"Rich\" (without quotes) if Rich wins.\nConstraints\n\n$1 \\le T \\le 10^5$\n$1 \\le N, M \\le 10^{18}$\n\nSubtasks\nSubtask #1 (30 points): $1 \\le N, M \\le 1,000$\nSubtask #2 (70 points): original constraints",
            "input_format": "",
            "output_format": "",
            "problem_name": "Matches",
            "user_tags": [
                "Case work",
                "Game Theory"
            ],
            "computed_tags": [
                "Special",
                "Algorithms"
            ],
            "problem_code_id": "MATCHS",
            "difficulty_level": "1769",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 96736678,
                    "submission_date": 1684838245,
                    "language": "PYTH 3",
                    "username": "vjudge8",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "2.31",
                    "memory": "9.6M",
                    "solution": 96736678,
                    "code": "for _ in range(int(input())):\n    n,m=map(int,input().split())\n    if n==m:\n        print(\"Ari\")\n    else:\n        e=[n,m]\n        e.sort()\n        n=e[0]\n        m=e[1]\n        l=[]\n        while n>0 and m>0:\n            l.append(m//n)\n            e=n\n            n=m%n\n            m=e \n        l.reverse()\n        wi=['w']\n        for i in range(1,len(l)):\n            if wi[-1]=='w':\n                if l[i]==1:\n                    wi.append('l')\n                else:\n                    wi.append('w')\n            else:\n                wi.append('w')\n                \n        if wi[-1]=='w':\n            print(\"Ari\")\n        else:\n            print(\"Rich\")\n            "
                },
                {
                    "id": 67462984,
                    "submission_date": 1656012085,
                    "language": "PYTH 3",
                    "username": "likhitha207",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.64",
                    "memory": "9.3M",
                    "solution": 67462984,
                    "code": "\r\nt = int(input())\r\n\r\nfor i in range(t):\r\n    n = list(map(int, input().split()))\r\n    f = True\r\n    n.sort()\r\n    while n[1] % n[0] != 0 and n[1] // n[0] < 2:\r\n        n[1] = n[1] % n[0]\r\n        f = not f\r\n        n.sort()\r\n    print('Rich' if f == False else 'Ari')"
                }
            ]
        },
        "CHEFTMA": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "1\r\n4 2 2 \r\n5 7 6 1\r\n3 3 1 1\r\n6 3\r\n1 4",
                    "output": "3",
                    "explanation": "Example case 1.\nIn this example Chef goes through the following steps:\nUse black button 1 on the first day.\nUse black button 4 on the second day.\nUse white button 3 on the third day.\nThe arrays A and B are now effectively changed to:\n5 7 3 1\n4 7 1 1\nSo he will have 3 uncompleted tasks."
                }
            ],
            "problem_statement": "Read problems statements in Mandarin Chinese, Russian and Vietnamese as well.\nChef spent N days working really hard! He planned loads of tasks: as many as Ai tasks to do on the ith day! Chef's work was brutal, so he only managed to finish Bi tasks on the ith day.\nThe good news is that Chef has a Time Machine! \nThe Time Machine has K white buttons and M black buttons. Each button has a positive integer printed on it. Now Chef goes through all N days consequently and presses buttons. Each day Chef can only press one button (either white or black). After using a button once, it becomes inactive.\nPressing a white button with integer x printed on it reduces the number of planned tasks on the day it was pressed by exactly x. Note that this white button can only be pressed if number of planned tasks on the day are greater than or equal to x.\nPressing a black button with integer x printed on it increases the number of completed tasks on the day it was pressed by exactly x. Note that this black button can only be pressed if after pressing it, number of completed tasks don't exceed the number of tasks.\nChef is interested in finding the minimum possible amount of total uncompleted tasks he will still be left with after N days using the Machine in the best way?\nBe careful! Time is sensitive! Chef cannot make a day when he completed more tasks then planned, as this may result in a more-work-than-planned paradox, killing all lazy people on the planet!\nInput\n\nThe first line of input contains a single integer T, denoting the number of test cases. Description of T test cases follows.\nThe first line of each test case contains three integers \u2014 N, K, M \u2014 denoting the number of days, white and black buttons appropriately.\nThe second line contains N space-separated integers A1, A2, \u2026 , AN, denoting the number of planned tasks.\nThe third line contains N space-separated integers B1, B2, \u2026 , BN, denoting the number of completed tasks.\nThe fourth line contains K space-separated integers C1, C2, \u2026 , CK, denoting the integers on white buttons.\nThe fifth and last line contains M space-separated integers D1, D2, \u2026 , DM, denoting the integers on black buttons.\n\nOutput\n\nIn a single line, output an integer \u2014 the minimum possible amount of uncompleted tasks.\n\nConstraints\n\n1 \u2264 T \u2264 4\n1 \u2264 N, K, M \u2264 10^5\n1 \u2264 Bi \u2264 Ai  \u2264 10^5\n1 \u2264 Ci, Di  \u2264 10^5\n\nSubtasks\n\nSubtask N \u2264 10, K, M \u2264 5. Points: 30 \nSubtask Original constraints. Points: 70",
            "input_format": "",
            "output_format": "",
            "problem_name": "Chef and Time Machine",
            "user_tags": [
                "1D Arrays",
                "Multiset",
                "Greedy"
            ],
            "computed_tags": [
                "Data Structures",
                "Arrays",
                "Sets",
                "Algorithms"
            ],
            "problem_code_id": "CHEFTMA",
            "difficulty_level": "1717",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 33071728,
                    "submission_date": 1589434296,
                    "language": "PYTH 3",
                    "username": "shashank_5",
                    "user_rating_star": 3,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "4.91",
                    "memory": "21M",
                    "solution": 33071728,
                    "code": "t=int(input())\nfor i in range(t):\n    n,k,m=list(map(int,input().split()))\n    plan=list(map(int,input().split()))\n    comp=list(map(int,input().split()))\n    white=list(map(int,input().split()))\n    black=list(map(int,input().split()))\n    rem=[]\n    p=0\n    machine=[]\n    count_rem=0\n    count_machine=0\n    for j in range(n):\n        rem.append(plan[j]-comp[j])\n    count_rem+=sum(rem)\n    rem.sort(reverse=True)\n    machine.extend(white)\n    machine.extend(black)\n    machine.sort(reverse=True)\n    count_machine+=sum(machine)\n\n    if machine[0]<=rem[-1]:\n        count_rem-=count_machine\n    elif machine[-1]>rem[0]:\n        pass\n    else:\n        for j,val in enumerate(machine):\n            while rem!=[]:\n                if val<=rem[p]:\n                    count_rem-=val\n                    rem.pop(p)\n                    break\n                else:\n                    break\n\n    print(count_rem)\n                 "
                },
                {
                    "id": 30739968,
                    "submission_date": 1585153937,
                    "language": "PYTH 3",
                    "username": "pinkpanther007",
                    "user_rating_star": 3,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.84",
                    "memory": "22M",
                    "solution": 30739968,
                    "code": "for _ in range(int(input())):\n    n,k,m = list(map(int,input().split()))\n    planned = list(map(int,input().split()))\n    completed = list(map(int,input().split()))\n    white = list(map(int,input().split()))\n    black = list(map(int,input().split()))\n    remaining = [ planned[i]-completed[i] for i in range(n)]\n    rem = sorted(remaining,reverse=True)\n    sub =sorted(white+black,reverse=True)\n    t = k+m\n    j = 0\n    for i in range(n):\n        while j<t:\n            if sub[j]<=rem[i]:\n                rem[i] = rem[i]-sub[j]\n                j+=1\n                break\n            j+=1\n        if j==t:\n            break\n    print(sum(rem))"
                }
            ]
        },
        "BINSHFFL": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "2\n2 4\n1 5",
                    "output": "2\n1",
                    "explanation": "Example case 1: One optimal solution is to not shuffle anything, so Chef just adds $1$ twice. \nExample case 2: We can obtain $5$ from $1$ in one operation."
                }
            ],
            "problem_statement": "Read problems statements in Mandarin chinese, Russian and Vietnamese as well.\nChef has two integers $A$ and $B$. He can perform the following operation on $A$ an arbitrary number of times (including zero):\n- write $A$ as a binary number with an arbitrary number of leading zeroes (possibly without any)\n- shuffle the binary digits of $A$ in an arbitrary way, obtaining a number $s$\n- replace $A$ by $s+1$\nChef is wondering about the minimum number of operations he has to perform on $A$ in order to obtain $B$. Compute this number or determine that it is impossible.\nInput\n\nThe first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\nThe first and only line of each test case contains two space-separated integers $A$ and $B$. \n\nOutput\nFor each test case, print a single line containing one integer \u2014 the minimum number of operations or $-1$ if it is impossible to obtain $B$ from $A$.\nConstraints\n\n$1 \\le T \\le 10^5$\n$0 \\le A, B \\le 10^{18}$\n\nSubtasks\nSubtask #1 (20 points): $A, B \\le 2^7$\nSubtask #2 (80 points): original constraints",
            "input_format": "",
            "output_format": "",
            "problem_name": "Binary Shuffle",
            "user_tags": [
                "Bitwise Operation",
                "Binary",
                "Floyd Warshall's Algorithm",
                "BFS",
                "Observation"
            ],
            "computed_tags": [
                "Mathematics",
                "Bit Manipulation",
                "Number System",
                "Algorithms",
                "Graph Algos",
                "Shortest Paths",
                "Traversals"
            ],
            "problem_code_id": "BINSHFFL",
            "difficulty_level": "1747",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 53906258,
                    "submission_date": 1637126516,
                    "language": "PYTH 3",
                    "username": "naveen1226",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.68",
                    "memory": "9.3M",
                    "solution": 53906258,
                    "code": "for t in range(int(input())):\n\tA, B = map(int, input().split(\" \"))\n\tcountA, countB = (str(bin(A)).count(\"1\"), str(bin(B-1)).count(\"1\"))\n\tif A==B:\n\t\tprint(\"0\")\n\telif A!=0 and (B==0 or B==1):\n\t\tprint(\"-1\")\n\t\tpass\n\telif(countA>countB):\n\t\tprint(\"2\")\n\t\tpass\n\telse:\n\t\tprint(countB-countA+1)"
                },
                {
                    "id": 20366893,
                    "submission_date": 1538203645,
                    "language": "PYTH 3",
                    "username": "nexus_codes",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "2.60",
                    "memory": "17.6M",
                    "solution": 20366893,
                    "code": "from math import *\r\nT=int(input())\r\nfor i in range(T):\r\n\tA,B=list(map(int,input().split(\" \")))\r\n\toa=0\r\n\tob=0\r\n\tzb=0\r\n\ty=0\r\n\tr=True\r\n\tpara=True\r\n\tif(A==B):\r\n\t\tprint(0)\r\n\t\tr=False\r\n\telif(B==1):\r\n\t\tif(A==0):\r\n\t\t\tprint(1)\r\n\t\t\tr=False\r\n\t\telse:\r\n\t\t\tprint(-1)\r\n\t\t\tr=False\r\n\telif(B==0):\r\n\t\tprint(-1)\r\n\t\tr=False\r\n\tif(r==True):\r\n\t\tio=1\t\t\r\n\t\twhile(A>0):\r\n\t\t\td=A%2\r\n\t\t\toa=oa + d\r\n\t\t\tA=A//2\r\n\t\tif(B==0):\r\n\t\t\tzb=1\r\n\t\telse:\r\n\t\t\twhile(B>0):\r\n\t\t\t\ty=B%2\r\n\t\t\t\tob=ob + y\r\n\t\t\t\tif(para):\r\n\t\t\t\t\tif(y):\r\n\t\t\t\t\t\tpara=False\r\n\t\t\t\t\telse:\r\n\t\t\t\t\t\tzb+=1\r\n\t\t\t\tB=B//2\r\n\t\tfina=ob-oa\r\n\t\tfina1=fina+zb\r\n\t\tif(fina1<=0):\r\n\t\t\tprint(2)\r\n\t\telse:\r\n\t\t\tprint(fina1)\t\r\n"
                }
            ]
        },
        "CHEFELEC": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "2\r\n2\r\n01\r\n1 2\r\n3\r\n100\r\n1 5 6",
                    "output": "1\r\n5",
                    "explanation": "In the first example, first village does not have electricity. If we put a wire between village 1 and 2 of length 1, then both the villages will have electricity.\n\nIn the second example,\nWe can a draw a wire from first village to third village, passing through second village. Its total length will be 5. Now all the villages will have electricity. This is the minimum length of wire you will require."
                }
            ],
            "problem_statement": "Read problems statements in Mandarin Chinese, Russian and Vietnamese as well.\nThere are n villages in a Chefland. Some of the villages have electricity facilities, other doesn't. You can consider the villages arranged in line in the order 1 to n from left to right. i-th of village can be considered at xi coordinates.\n\nChef decided that electricity should be provided to all the villages. So, he decides to buy some amount of electric wires to connect the villeges without electricity to some villages with electricity. As Chef does not want to spend too much amount of money on wires, can you find out minimum amount of length of wire Chef should buy.\n\nInput\nFirst line of the input contains an integer T denoting the number of test cases. T test cases follow.\nFirst line of each test case contains an integer n denoting number of villages in Chefland.\nSecond line will contain a string of length n containing '0' or '1's only. If i-th character of the string is '1', then it denotes that i-th village has electricity.\nNext line contains n space separated integers denoting the x coordinates of the villages in the order from village 1 to n\nOutput\nFor each test case, output a single line containing a integer corresponding to the minimum length of wire Chef needs to buy.\nConstraints\n\n1 \u2264 T \u2264 10\nIt is guaranteed that there will be at least one village which will have electricity.\n1 \u2264 x1 2 n \u2264 109\n\nSubtasks\n\nSubtask #1 : 30 points\n\n1 \u2264 N \u2264 1000\n\n\nSubtask #2 : 70 points\n\n1 \u2264 N \u2264 105",
            "input_format": "",
            "output_format": "",
            "problem_name": "Chefland and Electricity",
            "user_tags": [
                "admin2",
                "greedy",
                "july16",
                "simple"
            ],
            "computed_tags": [],
            "problem_code_id": "CHEFELEC",
            "difficulty_level": "1767",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 99531333,
                    "submission_date": 1688311276,
                    "language": "PYTH 3",
                    "username": "bhumi02",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.92",
                    "memory": "39.2M",
                    "solution": 99531333,
                    "code": "for _ in range(int(input())):\n    n=int(input())\n    s=input()\n    l=list(map(int,input().split()))\n    a=0\n    if n==1:\n        print(0)\n        continue\n    for i in range(1,n):\n        a+=l[i]-l[i-1]\n    flag=0\n    t=[]\n    d=[]\n    for i in range(n):\n        if s[i]=='1':\n            if flag==0:\n                flag=1 \n                continue\n            d.append(l[i]-l[i-1])\n            t.append(d)\n            d=[]\n        else:\n            if flag==0:\n                continue\n            d.append(l[i]-l[i-1])\n    for i in t:\n        a-=max(i)\n    print(a)\n            "
                },
                {
                    "id": 67462936,
                    "submission_date": 1656011984,
                    "language": "PYTH 3",
                    "username": "likhitha207",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.97",
                    "memory": "26.6M",
                    "solution": 67462936,
                    "code": "T = int(input())\r\nans = []\r\n\r\nfor _ in range(T):\r\n    N = int(input())\r\n    S = input()\r\n    X = [int(i) for i in input().split()]\r\n\r\n    i = 0\r\n    # j = 0\r\n    total = 0\r\n    temp = 0\r\n    while(i<N):\r\n        if(S[i]=='1'):\r\n            j = i+1\r\n            maxd = -float('inf')\r\n            while(j<N and S[j]=='0'):\r\n                temp += X[j]-X[j-1]\r\n                if(X[j]-X[j-1]>maxd):\r\n                    maxd = X[j]-X[j-1]\r\n                j += 1\r\n            if(j<N and S[j]=='1'):\r\n                temp += X[j]-X[j-1]\r\n                if(X[j]-X[j-1]>maxd):\r\n                    maxd = X[j]-X[j-1]\r\n                temp -= maxd\r\n                total += temp\r\n                temp = 0\r\n            i = j\r\n        else:\r\n            i += 1\r\n    # correction = 0\r\n    # if(S[0]!='1'):\r\n    #     for i in range(1,N):\r\n    #         correction += X[i]-X[i-1]\r\n    #         if(S[i]=='1'):\r\n    #             break\r\n    correction = 0\r\n    for i in range(N-1):\r\n        if(S[i]=='1'):\r\n            break\r\n        correction += X[i+1]-X[i]\r\n    total += temp + correction\r\n    ans.append(total)\r\n\r\nfor i in ans:\r\n    print(i)\r\n"
                }
            ]
        },
        "AVGPR": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "3\n2\n2 2\n3\n2 1 3\n6\n4 2 5 1 3 5",
                    "output": "1\n1\n7",
                    "explanation": "Example case 1: We can take $k$ for $A_k$ to be either 1 or 2, since $A_k=2$ either way. Since the problem asks for unordered pairs, $(1,2)$ is the only possible valid pair (the same as $(2,1)$). Hence, the answer is 1.\nExample case 2: We see that $A_1 = 2 = (1+3)/2$. No other valid pair exists."
                }
            ],
            "problem_statement": "Read problems statements in Mandarin chinese, Russian and Vietnamese as well.\nYou are given an integer sequence $A$ with length $N$.\nFind the number of (unordered) pairs of elements such that the average of these two elements is also present in the sequence. Formally, find the number of pairs $(i,j)$ such that $1 \\le i \\lt j \\le N$ and there is an index $k$ ($1 \\le k \\le N$) for which $2A_k = A_i+A_j$ holds.\nInput\n\nThe first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\nThe first line of each test case contains a single integer $N$.\nThe second line contains $N$ space-separated integers $A_1, A_2, \\dots, A_N$.\n\nOutput\nFor each test case, print a single line containing one integer \u2014 the number of valid pairs $(i,j)$.\nConstraints\n\n$1 \\le T \\le 10$\n$1 \\le N \\le 10^5$\n$|A_i| \\le 10^3$ for each valid $i$\n\nSubtasks\nSubtask #1 (30 points): $1 \\le N \\le 10^3$\nSubtask #2 (70 points): $1 \\le N \\le 10^5$",
            "input_format": "",
            "output_format": "",
            "problem_name": "Average of Pairs",
            "user_tags": [
                "Frequency Arrays",
                "Basic Maths"
            ],
            "computed_tags": [
                "Data Structures",
                "Arrays",
                "Mathematics"
            ],
            "problem_code_id": "AVGPR",
            "difficulty_level": "1776",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 89395381,
                    "submission_date": 1676442567,
                    "language": "PYTH 3",
                    "username": "rs5228127",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "4.07",
                    "memory": "24.4M",
                    "solution": 89395381,
                    "code": "\r\ndef ti(): return tuple(map(int,input().split())); \r\ndef li(): return list(map(int,input().split())); \r\ndef si(): return input().split()\r\ndef ii(): return int(input())\r\ndef ip(): return input()\r\nfor tastcas in range(int(input())):\r\n    n=ii(); a=li(); d={}; ans=0; \r\n    for i in range(-1000,1001): d[i]=0;\r\n    for i in a: d[i]+=1; \r\n    for i in range(-1000,1001):\r\n        for j in range(i,1001,2):\r\n            if(i==j):\r\n                x=(i+j)/2; \r\n                if(d[x]): ans+=(d[i]*(d[i]-1))//2; \r\n            else:\r\n                x=(i+j)//2; \r\n                if(d[x]): ans+=(d[i]*d[j]); \r\n    print(ans); "
                },
                {
                    "id": 68802655,
                    "submission_date": 1657643720,
                    "language": "PYTH 3",
                    "username": "rehan12",
                    "user_rating_star": 3,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "4.04",
                    "memory": "22.3M",
                    "solution": 68802655,
                    "code": "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    f = [0]*2001\n    for i in a:\n        f[i]+=1\n\n    ans1,ans2 = 0,0\n    for i in range(-1000,1001,1):\n        if f[i]!=0:\n            for j in range(i,1001,2):\n                if f[j]!=0:\n                    if i==j:\n                        # print(f[i])\n                        ans1+=((f[i]*(f[i]-1))//2)\n                    elif (i+j)%2==0 and f[(i+j)//2] != 0:\n                        ans2+= (f[i]*f[j])\n\n    print(ans1+ans2)"
                }
            ]
        },
        "SETDIFF": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "4\r\n2\r\n1 2\r\n3\r\n1 2 3\r\n4\r\n1 2 3 4\r\n3\r\n1 2 2",
                    "output": "1\r\n6 \r\n23\r\n3",
                    "explanation": "For first case answer will be 2-1 = 1.\n\n\nFor the second case:\nSubset = {1}, max(s)-min(s) = 0.\nSubset = {2}, max(s)-min(s) = 0.\nSubset = {3}, max(s)-min(s) = 0.\nSubset = {1,2}, max(s)-min(s) = 1.\nSubset = {2,3}, max(s)-min(s) = 1.\nSubset = {1,3}, max(s)-min(s) = 2.\nSubset = {1,2,3}, max(s)-min(s) = 2.\nSo the output will be 1+1+2+2 = 6.\n\n\nIn the last case, there are three subsets, {1,2}, {1,2} and {1,2,2} having max(s) - min(s) = 1 for each."
                }
            ],
            "problem_statement": "Read problems statements in Mandarin Chinese  and Russian.\n\nChuru is working as a data scientist in Coderpur. He works on a lot of data on the daily basis. One day, he found an interesting problem, which was very easy to solve for small data but was getting more complex with increasing number of data points. So, Churu needs your help in solving this problem.\n\n Given a set S of N non-negative integers (Some integers might occur more than once in the set), find out the value of SETDIFF(S). \n\n\n\nWhere max(s) represents the maximum value in set s whereas min(s) represents the minimum value in the set s.\nAs value of  SETDIFF(S) can be very large, print it modulo  (109 + 7) . \n\n\nThere might be repeated values in the set. For set S = {1,2,2}, consider that first 2 is not same as the second 2 and there will be two different subsets {1,2}. See last sample case for the more clarifications. \n\nInput\n\nFirst line of input contains an integer T denoting number of test cases.  \nFor each test case, first line will contain an integer N denoting number of elements in set S.  \n Next line contains N space separated integers denoting the set S. \n\nOutput\nFor each test case, print a single integer representing the answer of that test case.\nNote\n\nTwo subsets will be called different if there exists an index i such that S[i] occurs in one of the subset and not in another.\n\nConstraints\n\nSubtask #1: 20 points\n\n1 \u2264 T  \u2264 5, 1 \u2264 N  \u2264 1000,  0 \u2264 value in set \u2264 109\n\n\nSubtask #2: 25 points\n\n1 \u2264 T  \u2264 5, 1 \u2264 N  \u2264 105,  0 \u2264 value in set \u2264 1000\n\n\nSubtask #3: 55 points\n\n1 \u2264 T  \u2264 5, 1 \u2264 N  \u2264 105,  0 \u2264 value in set \u2264 109",
            "input_format": "",
            "output_format": "",
            "problem_name": "Set Difference ",
            "user_tags": [
                "Modular Exponentiation",
                "Combinatorics"
            ],
            "computed_tags": [
                "Mathematics",
                "Modular Arithmetic"
            ],
            "problem_code_id": "SETDIFF",
            "difficulty_level": "1729",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 39164039,
                    "submission_date": 1603823237,
                    "language": "PYTH 3",
                    "username": "ayan_codechef",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "2.18",
                    "memory": "20.5M",
                    "solution": 39164039,
                    "code": "from sys import stdin\nfrom math import gcd, sqrt\n\n\ndef solve():\n    mod = 10**9+7\n    for _ in range(int(input())):\n        n = int(input())\n        a = list(map(int, stdin.readline().strip().split()))\n        a.sort()\n        ans = 0\n        maxsum = 0\n        minsum = 0\n        for i in range(n):\n            minsum += a[i] * pow(2, n - i - 1, mod)\n            minsum %= mod\n        for i in range(n - 1, -1, -1):\n            maxsum += a[i] * pow(2, i, mod)\n            maxsum %= mod\n        ans = (maxsum - minsum) % mod\n        print(ans)\n\n\nif __name__ == \"__main__\":\n    solve()\n\n"
                },
                {
                    "id": 33257874,
                    "submission_date": 1590244190,
                    "language": "PYTH 3",
                    "username": "thedeep",
                    "user_rating_star": 3,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "2.16",
                    "memory": "20.5M",
                    "solution": 33257874,
                    "code": "from sys import stdin\r\nfrom math import gcd, sqrt\r\n\r\n\r\ndef solve():\r\n    mod = 10**9+7\r\n    for _ in range(int(input())):\r\n        n = int(input())\r\n        a = list(map(int, stdin.readline().strip().split()))\r\n        a.sort()\r\n        ans = 0\r\n        maxsum = 0\r\n        minsum = 0\r\n        for i in range(n):\r\n            minsum += a[i] * pow(2, n - i - 1, mod)\r\n            minsum %= mod\r\n        for i in range(n - 1, -1, -1):\r\n            maxsum += a[i] * pow(2, i, mod)\r\n            maxsum %= mod\r\n        ans = (maxsum - minsum) % mod\r\n        print(ans)\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    solve()\r\n"
                }
            ]
        },
        "MANYCHEF": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "5\n????CIELIS???E?\n????CIELISOUR???F\nT?KEITE?SY\n????????\n???C???",
                    "output": "CHEFCIELISACHEF\nCHEFCIELISOURCHEF\nTAKEITEASY\nCHEFCHEF\nAAACHEF",
                    "explanation": "Example Case 1. Here the resulting string can have at most 2 substrings equal to \"CHEF\". For example, some possible such strings are:\n\nCHEFCIELISACHEF\nCHEFCIELISQCHEF\nCHEFCIELISZCHEF\nHowever, lexicographically smallest one is the first one.\nExample Case 3. Here the resulting string cannot have \"CHEF\" as its substring. Therefore, you must simply output the lexicographically smallest string that can be obtained from the given one by replacing question marks with capital letters."
                }
            ],
            "problem_statement": "Chef Ciel wants to put a fancy neon signboard over the entrance of her restaurant. She has not enough money to buy the new one so she bought some old neon signboard through the internet. Ciel was quite disappointed when she received her order - some of its letters were broken. But she realized that this is even better - she could replace each broken letter by any letter she wants. So she decided to do such a replacement that the resulting signboard will contain the word \"CHEF\" as many times as possible.\nWe can model the signboard as a string S having capital letters from 'A' to 'Z', inclusive, and question marks '?'. Letters in the string indicate the intact letters at the signboard, while question marks indicate broken letters. So Ciel will replace each question mark with some capital letter and her goal is to get the string that contains as many substrings equal to \"CHEF\" as possible. If there exist several such strings, she will choose the lexicographically smallest one.\nNote 1. The string S = S1...SN has the substring \"CHEF\" if for some i we have SiSi+1Si+2Si+3 = \"CHEF\". The number of times \"CHEF\" is the substring of S is the number of those i for which SiSi+1Si+2Si+3 = \"CHEF\".\nNote 2. The string A = A1...AN is called lexicographically smaller than the string B = B1...BN if there exists K from 1 to N, inclusive, such that Ai = Bi for i = 1, ..., K-1, and AK K. In particular, A is lexicographically smaller than B if A1 1. We compare capital letters by their positions in the English alphabet. So 'A' is the smallest letter, 'B' is the second smallest letter, ..., 'Z' is the largest letter.\n\n\nInput\nThe first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. The only line of each test case contains a string S.\nOutput\nFor each test case, output a single line containing the content of the signboard Chef Ciel will come up with. That is you should output the lexicographically smallest string that could be obtained from the input string by replacing all its question marks by some capital letters and having as many substrings equal to \"CHEF\" as possible.\nConstraints\n1 \u2264 T \u2264 20131 \u2264 length of S \u2264 2013Each character in S is either a capital letter from 'A' to 'Z', inclusive, or the question mark '?'.",
            "input_format": "",
            "output_format": "",
            "problem_name": "Many Chefs",
            "user_tags": [
                "String",
                "Greedy"
            ],
            "computed_tags": [
                "Data Structures",
                "Algorithms"
            ],
            "problem_code_id": "MANYCHEF",
            "difficulty_level": "1740",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 30052793,
                    "submission_date": 1583421908,
                    "language": "PYTH 3",
                    "username": "nishantawasthi",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.88",
                    "memory": "17.6M",
                    "solution": 30052793,
                    "code": "try:\r\n    for _ in range(int(input())):\r\n        s=list(input())\r\n        l=len(s)\r\n        i=l-4\r\n        while i>=0:\r\n            if( ( s[i] == '?' or s[i]=='C') and (s[i+1] == '?' or s[i+1] == 'H') and (s[i+2] == '?' or s[i+2] == 'E') and (s[i+3] == '?' or s[i+3]=='F')):\r\n                s[i] = 'C'\r\n                s[i+1] = 'H'\r\n                s[i+2] = 'E'\r\n                s[i+3] = 'F'\r\n                i -= 4\r\n            else:\r\n                i -= 1\r\n        print(\"\".join(s).replace('?','A'))\r\nexcept:\r\n    pass"
                },
                {
                    "id": 29889755,
                    "submission_date": 1582620422,
                    "language": "PYTH 3",
                    "username": "sl170040869",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "1.08",
                    "memory": "17.6M",
                    "solution": 29889755,
                    "code": "for _ in range(int(input())):\r\n    s=list(input())\r\n    l=len(s)\r\n    i=l-1\r\n    while i>=0:\r\n        if (i>=3) and  ((s[i]=='F' or s[i]=='?') and (s[i-1]=='E' or s[i-1]=='?') and (s[i-2]=='H' or s[i-2]=='?') \r\n            and (s[i-3]=='C' or s[i-3]=='?')):\r\n            s[i-3:i+1]='C','H','E','F'\r\n            i-=4\r\n            \r\n        else:\r\n            if s[i]=='?':\r\n                s[i]='A'\r\n                \r\n            i-=1\r\n            \r\n    print(''.join(s))\r\n            \r\n            \r\n    "
                }
            ]
        },
        "RBTREE": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "5\nQb 4 5\nQr 4 5\nQi\nQb 4 5\nQr 4 5\n",
                    "output": "2\n1\n1\n2",
                    "explanation": "With the initial configuration of the tree, Path from node 4 to node 5 is 4->2->5 and color of nodes on the path is B->R->B.  \nNumber of black nodes are 2.\nNumber of red nodes are 1. \n\nAfter Query Qi, New configuration of the path from node 4 to node 5 is R->B->R.\nNumber of black nodes are 1.\nNumber of red nodes are 2."
                }
            ],
            "problem_statement": "Read problems statements in Mandarin Chinese  and Russian.\nChef likes trees a lot. Today he has an infinte full binary tree (each node has exactly two childs) with special properties.\nChef's tree has the following special properties :\n\nEach node of the tree is either colored red or black.\nRoot of the tree is black intially.\nBoth childs of a red colored node are black and both childs of a black colored node are red.\n\n\nThe root of the tree is labelled as 1. For a node labelled v, it's left child is labelled as 2*v and it's right child is labelled as 2*v+1.\n\n\nChef wants to fulfill Q queries on this tree. Each query belongs to any of the following three types:\n\nQi      Change color of all red colored nodes to black and all black colored nodes to red.\nQb x y  Count the number of black colored nodes on the path from node x to node y (both inclusive).\nQr x y  Count the number of red colored nodes on the path from node x to node y (both inclusive).\n\nHelp chef accomplishing this task.\nInput\nFirst line of the input contains an integer Q denoting the number of queries. Next Q lines of the input contain Q queries (one per line). Each query belongs to one of the three types mentioned above.\nOutput \nFor each query of type Qb or Qr, print the required answer.\nConstraints1<=Q<=105\n1<=x,y<=109\nScoring\n Subtask #1: 1                                       \u00a0\u00a0: 27 pts\n Subtask #2: 13  15   \u00a0 \u00a0\u00a0: \u00a025 pts\n Subtask #3: 15  19   \u00a0 \u00a0\u00a0: \u00a048 pts",
            "input_format": "",
            "output_format": "",
            "problem_name": "Chef and Red Black Tree",
            "user_tags": [
                "Binary Tree",
                "Implementation"
            ],
            "computed_tags": [
                "Data Structures",
                "Tree Data Structure",
                "Algorithms"
            ],
            "problem_code_id": "RBTREE",
            "difficulty_level": "1741",
            "ai_solutions": [
                "import sys\nfrom math import log2\n\ndef solve():\n    Q = int(input().strip())\n    flip = 0\n    for _ in range(Q):\n        query = sys.stdin.readline().strip().split()\n        if query[0] == 'Qi':\n            flip = 1 - flip\n        else:\n            x, y = map(int, query[1:])\n            black, red = 0, 0\n            while x != y:\n                if x > y:\n                    x, y = y, x\n                if int(log2(y)) % 2 == flip:\n                    black += 1\n                else:\n                    red += 1\n                y //= 2\n            if int(log2(y)) % 2 == flip:\n                black += 1\n            else:\n                red += 1\n            if query[0] == 'Qb':\n                print(black)\n            else:\n                print(red)\n\nsolve()",
                "import sys\nfrom math import log2\n\ndef solve():\n    Q = int(input().strip())\n    flip = 0\n    for _ in range(Q):\n        query = sys.stdin.readline().strip().split()\n        if query[0] == 'Qi':\n            flip = 1 - flip\n        else:\n            x, y = map(int, query[1:])\n            black, red = 0, 0\n            while x != y:\n                if x > y:\n                    x, y = y, x\n                if int(log2(y)) & 1 == flip:\n                    black += 1\n                else:\n                    red += 1\n                y >>= 1\n            if int(log2(y)) & 1 == flip:\n                black += 1\n            else:\n                red += 1\n            if query[0] == 'Qb':\n                print(black)\n            else:\n                print(red)\n\nsolve()"
            ],
            "human_solutions": [
                {
                    "id": 13903927,
                    "submission_date": 1496213015,
                    "language": "PYTH 3",
                    "username": "pankajkhan",
                    "user_rating_star": 5,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "1.45",
                    "memory": "8.5M",
                    "solution": 13903927,
                    "code": "from math import *\nflag=0\nfor _ in range(int(input())):\n    \n    s=input().strip()\n    if s==\"Qi\":\n        flag=not flag\n        continue\n    (s,x,y)=s.split()\n    (x,y)=(int(x),int(y))\n    l1=[]\n    l2=[]\n    i=j=0\n    l1.append(x)\n    l2.append(y)\n    while x>0:\n        l1.append(x//2)\n        x//=2\n        i+=1\n    while y>0:\n        l2.append(y//2)\n        y//=2\n        j+=1\n    while i>=0 and j>=0 and  l1[i]==l2[j]:\n        (j,i)=(j-1,i-1)\n    (j,i)=(j+1,i+1)\n    ans=0\n    if (i+1)%2==0:\n        ans+=(i+1)//2\n    else:\n        ans+=(i//2)\n        lo=int(log(l1[i],2))\n        if s==\"Qr\":\n            if flag + lo%2==1:\n                ans+=1\n        if s==\"Qb\":\n            if (flag+ lo%2)%2==0:\n                ans+=1\n    j-=1\n    if (j+1)%2==0:\n        ans+=(j+1)//2\n    else:\n        ans+=(j//2)\n        lo=int(log(l2[j],2))\n        if s==\"Qr\":\n            if flag + lo%2==1:\n                ans+=1\n        if s==\"Qb\":\n            if (flag+ lo%2)%2==0:\n                ans+=1\n    print(ans)"
                },
                {
                    "id": 13383105,
                    "submission_date": 1493019717,
                    "language": "PYTH 3",
                    "username": "daltonfury42",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "2.18",
                    "memory": "8.5M",
                    "solution": 13383105,
                    "code": "from math import floor, ceil\n\nblack = 1\nred = 0\n\nfor _ in range(int(input())):\n\n\tquery = input().split()\n\tpath = [0, 0]\n\n\tif query[0] == 'Qi':\n\t\tblack, red = red, black\n\t\tcontinue\n\n\tx = int(query[1])\n\ty = int(query[2])\n\n\tif (x < y):\n\t\tx, y = y, x\n\n\twhile len(bin(x)) != len(bin(y)):\n\t\tpath[len(bin(x))%2] += 1\n\t\tx = floor(x/2)\n\t\t\n\twhile x!=y:\n\t\tpath[len(bin(x))%2] += 1\n\t\tpath[len(bin(y))%2] += 1\n\t\tx, y = floor(x/2), floor(y/2)\n\n\t\n\tpath[len(bin(x))%2] += 1\n\n\tif query[0] == 'Qb':\n\t\tprint(path[black])\n\telse:\n\t\tprint(path[red])"
                }
            ]
        },
        "GOODPREF": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "3\naba 2\nbaa 3\nbba 3",
                    "output": "5\n6\n0",
                    "explanation": "Example case 1: The string $t$ is \"abaaba\". It has five prefixes which contain more a-s than b-s: \"a\", \"aba\", \"abaa\", \"abaab\" and \"abaaba\".\nExample case 2: The string $t$ is \"baabaabaa\". The strings \"baa\", \"baaba\", \"baabaa\", \"baabaab\", \"baabaaba\" and \"baabaabaa\" are the six valid prefixes.\nExample case 3: The string $t$ is \"bbabbabba\". There is no prefix of this string which consists of more a-s than b-s. Therefore, the answer is zero."
                }
            ],
            "problem_statement": "Read problems statements in Mandarin chinese, Russian and Vietnamese as well.\nYou are given an integer $n$ and a string $s$ consisting only of characters 'a' and 'b'. Consider a string $t = \\underbrace{s + s + \\dots + s}_{n\\text{ times}}$, i.e. the string obtained by concatenating $n$ copies of $s$.\nFind the number of non-empty prefixes of $t$ in which the number of occurrences of 'a' is strictly greater than the number of occurrences of 'b'.\nInput\n\nThe first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\nThe first and only line of each test case contains the string $s$ and the integer $n$, separated by a single space. \n\nOutput\nFor each test case, print a single line containing one integer \u2014 the number of valid prefixes.\nConstraints\n\n$1 \\le T \\le 100$\n$1 \\le |s| \\le 10^3$\n$1 \\le n \\le 10^9$\neach character of $s$ is either 'a' or 'b'\n\nSubtasks\nSubtask #1 (30 points): $1 \\le n \\le 10^3$\nSubtask #2 (70 points): original constraints",
            "input_format": "",
            "output_format": "",
            "problem_name": "Count Good Prefixes",
            "user_tags": [
                "Basic Maths"
            ],
            "computed_tags": [
                "Mathematics"
            ],
            "problem_code_id": "GOODPREF",
            "difficulty_level": "1758",
            "ai_solutions": [
                "T = int(input().strip())\nfor _ in range(T):\n    s, n = input().strip().split()\n    n = int(n)\n    prefix_count = [0]\n    for c in s:\n        prefix_count.append(prefix_count[-1] + (1 if c == 'a' else -1))\n    total = 0\n    for i in range(1, len(prefix_count)):\n        if prefix_count[i] > 0:\n            total += 1\n    total *= n\n    if prefix_count[-1] > 0:\n        total += prefix_count[-1] * (n * (n - 1)) // 2\n    print(total)",
                "T = int(input().strip())\nfor _ in range(T):\n    s, n = input().strip().split()\n    n = int(n)\n    prefix_count = [0]\n    for c in s:\n        prefix_count.append(prefix_count[-1] + (1 if c == 'a' else -1))\n    total = 0\n    for i in range(1, len(prefix_count)):\n        if prefix_count[i] > 0:\n            total += 1\n    total *= n\n    if prefix_count[-1] > 0:\n        total += sum(i for i in range(n)) * prefix_count[-1]\n    print(total)"
            ],
            "human_solutions": [
                {
                    "id": 18306797,
                    "submission_date": 1523952688,
                    "language": "PYTH 3",
                    "username": "tusharggrwl",
                    "user_rating_star": 3,
                    "contest_code": "APRIL18B",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.05",
                    "memory": "27.1M",
                    "solution": 18306797,
                    "code": "# Good prefixes\n\nfrom sys import stdin\nfrom math import ceil\n\nfor _ in range(int(stdin.readline().strip())) :\n    s,n = stdin.readline().split()\n    n = int(n)\n    score       = 0\n    arr         = []\n\n    for ch in s :\n        if ch == 'a' :\n            score += 1\n        else :\n            score -= 1\n        arr.append(score)\n    single = arr[-1]\n    # print(arr)\n\n    # Cases\n    if single == 0 :\n        positives   = 0\n        for i in arr :\n            if i > 0 :\n                positives += 1\n        print(n*positives)\n    elif single < 0 :\n        rounds_positive = []\n        for i in arr :\n            if i > 0:\n                num = ceil(i/(-single))\n                if num > n :\n                    num = n\n            else :\n                num = 0\n            rounds_positive.append(num)\n        # print(rounds_positive)\n        print(sum(rounds_positive))\n    else :\n        rounds_positive = []\n        for i in arr :\n            if i > 0 :\n                num = n\n            else :\n                num = n - 1 - (-i)//single\n                if num < 0 :\n                    num = 0\n            rounds_positive.append(num)\n        # print(rounds_positive)\n        print(sum(rounds_positive))\n"
                },
                {
                    "id": 18306284,
                    "submission_date": 1523951300,
                    "language": "PYTH 3",
                    "username": "harsh_mishra",
                    "user_rating_star": 1,
                    "contest_code": "APRIL18B",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "1.26",
                    "memory": "27.1M",
                    "solution": 18306284,
                    "code": "t=int(input())\nfor i in range(t):\n    a,k=map(str,input().split(\" \"))\n    hash1=[0,0]\n    k=int(k)\n    ans=0\n    a1=0\n    b1=0\n    for j in range(k):\n        count=0\n        for l in range(len(a)):\n            if a[l]=='a':\n                a1+=1\n            else:\n                b1+=1\n            if a1>b1:\n                count+=1\n        if count==0:\n            break\n        elif count==len(a):\n            ans=ans+(k-j)*count\n            break\n        elif a1==b1:\n            ans+=(k-j)*count\n            break\n        else:\n            ans+=count\n    print(ans)"
                }
            ]
        },
        "CHAPD": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "3\r\n120 75\r\n128 16\r\n7 8",
                    "output": "Yes\r\nYes\r\nNo",
                    "explanation": "Example case 1. In the first case 120 = 23*3*5 and 75 = 3*52. 120 is divisible by both 3 and 5. Hence, we will print \"Yes\"\nExample case 2. In the second case both 128 and 16 are powers of two. Hence, the answer is \"Yes\"\nExample case 3. In the third case 8 is power of two and 7 is not divisible by 2. So, the answer is \"No\""
                }
            ],
            "problem_statement": "Read problems statements in Mandarin Chinese  and Russian.\nYou are given two positive integers \u2013 A and B. You have to check whether A is divisible by all the prime divisors of B.\nInput\nThe first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows.\nFor each test case, you are given two space separated integers \u2013 A and B.\nOutput\nFor each test case, output \"Yes\" (without quotes) if A contains all prime divisors of B, otherwise print \"No\".\nConstraints\n\n1 \u2264 T \u2264 104\n1 \u2264 A, B \u2264 1018\n\nSubtasks\n\nSubtask 1 (20 points):1 \u2264 B \u2264 107\nSubtask 2 (30 points):1 \u2264 A \u2264 107\nSubtask 3 (50 points): Original constraints",
            "input_format": "",
            "output_format": "",
            "problem_name": "Chef and Prime Divisors",
            "user_tags": [
                "easy",
                "greatest-common-divisor",
                "may15",
                "vitalij_adm"
            ],
            "computed_tags": [],
            "problem_code_id": "CHAPD",
            "difficulty_level": "1720",
            "ai_solutions": [
                "import math\n\ndef prime_factors(n):\n    i = 2\n    factors = set()\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.add(i)\n    if n > 1:\n        factors.add(n)\n    return factors\n\nT = int(input().strip())\nfor _ in range(T):\n    A, B = map(int, input().strip().split())\n    factors = prime_factors(B)\n    for factor in factors:\n        if A % factor != 0:\n            print(\"No\")\n            break\n    else:\n        print(\"Yes\")",
                "import math\n\ndef prime_factors(n):\n    i = 2\n    factors = set()\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.add(i)\n    if n > 1:\n        factors.add(n)\n    return factors\n\nT = int(input().strip())\nfor _ in range(T):\n    A, B = map(int, input().strip().split())\n    factors = prime_factors(B)\n    if all(A % factor == 0 for factor in factors):\n        print(\"Yes\")\n    else:\n        print(\"No\")"
            ],
            "human_solutions": [
                {
                    "id": 58339499,
                    "submission_date": 1644743313,
                    "language": "PYTH 3",
                    "username": "yashraj_jd",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.10",
                    "memory": "9.3M",
                    "solution": 58339499,
                    "code": "def gcd(a,b):\n    if b==0:\n        return a\n    else:\n        return gcd(b,a%b)\n        \nt=int(input())\n\nfor i in range(t):\n    x,y=map(int,input().split())\n    while y!=1:\n        z=gcd(x,y)\n        if z==1:\n            break\n        else:\n            y = y//z\n    if y==1:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n            \n        \n    \n"
                },
                {
                    "id": 40572006,
                    "submission_date": 1608532069,
                    "language": "PYTH 3",
                    "username": "harshitaarun",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.09",
                    "memory": "17.5M",
                    "solution": 40572006,
                    "code": "import math\ndef fgcd(a,b):\n    if(b==0):\n        return a\n    return fgcd(b, a%b)\n\n\nfor _ in range(int(input())):\n    a,b= map(int, input().split())\n    a = math.gcd(a,b)\n    while(a>1):\n        b= b//a\n        a= math.gcd(a,b)\n    print(\"No\") if b>1 else print(\"Yes\")\n    \n    \n        \n    "
                }
            ]
        },
        "EOOPR": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "3\n0 5\n4 -5\n0 10000001",
                    "output": "1\n2\n1",
                    "explanation": "For the first testcase, you can convert $X$ to $Y$  by choosing $a=5$ and $b=2$. \nIt will cost minimum of $1$ cleaning round. You can select any other combination of $a, b$ satisfying above condition but will take minimum of $1$ cleaning round in any case.\n\n\nFor the second testcase, you can convert $X$ to $Y$ by choosing $a=1$ and $b=10$. In first round they will replace $X$ to $X+a$ and then in second round replace to $X-b$. You can perform only one operation in one round."
                }
            ],
            "problem_statement": "\u201cI am not in danger, Skyler. I am the danger. A guy opens his door and gets shot, and you think that of me? No! I am the one who knocks!\u201d\nSkyler fears Walter and ponders escaping to Colorado. Walter wants to clean his lab as soon as possible and then go back home to his wife. \nIn order clean his lab, he has to achieve cleaning level of lab as $Y$. The current cleaning level of the lab is $X$. \nHe must choose one positive odd integer $a$ and one positive even integer $b$. Note that, he cannot change $a$ or $b$ once he starts cleaning.\nHe can perform any one of the following operations for one round of cleaning:\n\u00a0\u00a01. Replace $X$ with $X+a$.\n\u00a0\u00a02. Replace $X$ with $X-b$.\nFind minimum number of rounds (possibly zero) to make lab clean.\nInput:\n\nFirst line will contain $T$, number of test cases. $T$ testcases follow :  \nEach test case contains two space separated integers $X, Y$. \n\nOutput:\nFor each test case, output an integer denoting minimum number of rounds to clean the lab.\nConstraints\n\n$1 \\leq T \\leq 10^5$\n$ |X|,|Y| \\leq 10^9$",
            "input_format": "",
            "output_format": "",
            "problem_name": "The One Who Knocks!",
            "user_tags": [
                "Case work",
                "Conditional Statements",
                "ad-hoc"
            ],
            "computed_tags": [
                "Special",
                "Basic Programming Concepts",
                "Algorithms",
                "Constructive"
            ],
            "problem_code_id": "EOOPR",
            "difficulty_level": "1749",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 1014593087,
                    "submission_date": 1692292062,
                    "language": "PYTH 3",
                    "username": "subhanjana1006",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.40",
                    "memory": "7.6M",
                    "solution": 1014593087,
                    "code": "# Take input for the number of test cases\r\nnumber_of_test_cases = int(input())\r\n\r\n# Loop through each test case\r\nfor _ in range(number_of_test_cases):\r\n    # Take input for the values x and y\r\n    x, y = [int(inp) for inp in input().split()]\r\n    \r\n    # Calculate the difference between y and x\r\n    difference = y - x\r\n    \r\n    # Check if the difference is even\r\n    is_even = difference % 2 == 0\r\n    \r\n    # Check different cases and print the result\r\n    if difference == 0:\r\n        print(0)  # No operations needed if the values are the same\r\n    elif difference > 0:\r\n        if is_even and difference % 4 == 0:\r\n            print(3)  # Special case: difference is even and divisible by 4\r\n        elif is_even:\r\n            print(2)  # Difference is even\r\n        else:\r\n            print(1)  # Difference is odd\r\n    else:\r\n        if is_even:\r\n            print(1)  # Difference is negative but even\r\n        else:\r\n            print(2)  # Difference is negative and odd\r\n"
                },
                {
                    "id": 100120609,
                    "submission_date": 1689011588,
                    "language": "PYTH 3",
                    "username": "ayankraj",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.50",
                    "memory": "9.5M",
                    "solution": 100120609,
                    "code": "T = int(input())\n\nfor tc in range (T):\n    X,Y = map(int, input().split())\n    if (X == Y):\n        print(0)\n    elif (X > Y):\n        if ((X - Y) % 2 == 1):\n            print(2)\n        else:\n            print(1)\n    else:\n        if ((Y - X) % 4 == 0):\n            print(3)     \n        elif ((Y - X) % 2 == 1):\n            print(1)\n        else:\n            print(2)"
                }
            ]
        },
        "UNIONSET": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "3\n2 2\n1 1\n1 1\n3 2\n2 1 2\n2 1 2\n2 1 2\n3 4\n3 1 2 3\n4 1 2 3 4\n3 2 3 4",
                    "output": "0\n3\n3",
                    "explanation": "Example 1. No pair of sets is there with its union = 2.\nFor example 2 and 3, all the pairs are valid."
                }
            ],
            "problem_statement": "Read problems statements in Mandarin, Russian and Vietnamese as well.\nThere are N sets of integers from 1 to K both inclusive. Find out number of pairs of sets whose union contains all the K elements.\nInput\nThe first line contains an integer T denotes number of test cases.\nThe first line of each test case contains two space separated integers N, K.\nThe each of the next line first contains an integer leni denoting number of elements in the i-th set, followed by leni space separated integers in the range [1, K] denoting the elements in the set.\nOutput\nFor each test case, output a single integer corresponding to the answer.\nConstraints\n\n1 \u2264 T \u2264 10\n1 \u2264 N, K \u2264 2500\n1 \u2264 leni \u2264 K\nNote that a set can't contain repeated elements.\n1 \u2264 len1 + len2 + .. + lenN \u2264 10000\n\nSubtasks\nSubtask #1 (40 points)\n\n\n1 \u2264 T \u2264 10\n1 \u2264 N, K \u2264 250\n1 \u2264 len1 + len2 + .. + lenN \u2264 1000\n\nSubtask #2 (60 points)\n\noriginal constraints.",
            "input_format": "",
            "output_format": "",
            "problem_name": "Pairwise union of sets",
            "user_tags": [
                "admin2",
                "june17",
                "medium"
            ],
            "computed_tags": [],
            "problem_code_id": "UNIONSET",
            "difficulty_level": "1771",
            "ai_solutions": [
                "from itertools import combinations\n\ndef solve():\n    T = int(input())\n    for _ in range(T):\n        N, K = map(int, input().split())\n        sets = []\n        for _ in range(N):\n            set_elements = list(map(int, input().split()))[1:]\n            sets.append(set(set_elements))\n        count = 0\n        for pair in combinations(sets, 2):\n            if len(set.union(*pair)) == K:\n                count += 1\n        print(count)\n\nsolve()",
                "def solve():\n    T = int(input())\n    for _ in range(T):\n        N, K = map(int, input().split())\n        sets = [0]*N\n        for i in range(N):\n            sets[i] = set(map(int, input().split()[1:]))\n        count = 0\n        for i in range(N):\n            for j in range(i+1, N):\n                if len(sets[i].union(sets[j])) == K:\n                    count += 1\n        print(count)\n\nsolve()"
            ],
            "human_solutions": [
                {
                    "id": 14320507,
                    "submission_date": 1498294308,
                    "language": "PYTH 3",
                    "username": "aashish23",
                    "user_rating_star": 3,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.08",
                    "memory": "7.7M",
                    "solution": 14320507,
                    "code": "t = int(raw_input())\nfor test in range(t):\n    n,k = map(int,raw_input().split())\n    Map = dict()\n    for i in range(n):\n        tempset = map(int,raw_input().split())\n        tempset.remove(tempset[0])\n        \n        key = frozenset(tempset)\n        if key in Map:\n            Map[key]+=1\n        else :\n            Map[key]=1\n            \n    ans1=0\n    \n    for seta in Map.keys():\n        for setb in Map.keys():\n            if seta!=setb:\n                if len(seta|setb)==k:\n                    ans1+=Map[seta]*Map[setb]\n    ans1=ans1/2\n \n    ans2=0\n    fullset = frozenset([int(i) for i in range(1,k+1)])\n    if fullset in Map :\n        ans2 = Map[fullset]*(Map[fullset]-1)/2\n    \n    ans = ans1+ans2\n    print(ans)"
                },
                {
                    "id": 14259931,
                    "submission_date": 1497532873,
                    "language": "PYTH 3",
                    "username": "shmabulock",
                    "user_rating_star": 4,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.06",
                    "memory": "8.5M",
                    "solution": 14259931,
                    "code": "# PythonBytes\nfrom sys import stdin, stdout\n \nfor _ in range(int(stdin.readline())):\n    n, k = map(int, stdin.readline().split())\n    sets = {}\n    ans = 0\n    for c in range(n):\n        inp = stdin.readline().split()\n        inp.remove(inp[0])\n        inp = frozenset(inp)\n        if inp in sets.keys():\n            sets[inp]+=1\n        else:\n            sets[inp]=1\n    for x in sets.keys():\n        if len(x)==k:\n            ans+=sets[x]*(sets[x]-1)\n    for a in sets.keys():\n        for b in sets.keys():\n            if a!=b and len(a.union(b))==k:\n                ans+=sets[a]*sets[b]\n    stdout.write(\"%d\\n\"%(ans//2)) "
                }
            ]
        },
        "CAPIMOVE": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "1\n6\n5 10 15 20 25 30\n1 3\n2 3\n3 4\n4 5\n4 6",
                    "output": "6 6 6 2 6 5",
                    "explanation": ""
                }
            ],
            "problem_statement": "Read problems statements in Mandarin Chinese, Russian and Vietnamese as well.\nChef is playing a video game. In a video game, there's a advanced civilization that has a total of N planets under control. All of those planets are connected with N-1 teleports in such a way, that it's possible to travel between any two planets using those teleports.\nThere's a chance that some planet gets infected. In this case it takes 24 hours for civilization to find out infection and prevent it from spreading. During this time infection uses teleport one time and infect all the planets that can be achieved in one teleport jump. So, once infection is detected at planet V, scientists already know that all planets connected to V via teleport are also infected. All the neccessary teleports are disabled right away and medics start working on eliminating the infection.\nEach planet has population. Planets are numbered from 1 to N and their populations are P1, P2, ..., PN. It is known that all the Pi are distinct.\nThere's a capital among all those planets. The capital is known to have the biggest population.\nOnce infection is detected at planet V, after disabling teleports on planet V and all connected to them, government has to establish a new capital if needed in the remaining not-infected planets. So, they list all the planets that are not connected to V and are not V. Then they pick the planet with biggest population. Your task is to find the number of this planet for every possible V.\nInput\nThe first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows.\nThe first line of each test case contains one integer N.\nNext line contains N space-separated integers P1, P2, ..., PN denoting the population of each planet.\nNext N-1 lines contain two space-separated integers each V and U denoting that there's a teleport between planet V and U.\nOutput\nFor each test case, output a single line containing N integers A1, A2, ..., AN separated by a space. Here Ai denotes the number of the planet picked to be new capital in case infection starts spreading from the planet i. In case infection affects all the planets output 0.\nConstraints\n\n1 \u2264 T \u2264 5\n1 \u2264 N \u2264 50000\n1 \u2264 Pi \u2264 109\nAll Pi are distinct\n1 \u2264 V \u2264 N\n1 \u2264 U \u2264 N\n\nSubtasks\n\nSubtask #1 (20 points): N \u2264 100\nSubtask #2 (30 points): N \u2264 10000\nSubtask #3 (50 points): No additional constraints",
            "input_format": "",
            "output_format": "",
            "problem_name": "Capital Movement",
            "user_tags": [
                "Sets"
            ],
            "computed_tags": [
                "Data Structures"
            ],
            "problem_code_id": "CAPIMOVE",
            "difficulty_level": "1780",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 57821788,
                    "submission_date": 1644060136,
                    "language": "PYTH 3",
                    "username": "ujju07",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "1.15",
                    "memory": "38.9M",
                    "solution": 57821788,
                    "code": "def capimove(edges,wts,wts_dict):\r\n    for e in wts:\r\n        if wts_dict[e] not in edges:\r\n            return wts_dict[e]\r\n    return 0\r\n\r\nt=int(input())\r\n\r\nfor i in range(t):\r\n    n=int(input())\r\n    wts = [0]+[int(i) for i in input().split()]\r\n    wts_dict = {wts[i]:i for i in range(1,n+1)}\r\n    wts.sort(reverse=True)\r\n    adj = {i:[i] for i in range(1,n+1)}\r\n    for _ in range(n-1):\r\n        i,j=map(int,input().split())\r\n        adj[i].append(j)\r\n        adj[j].append(i)\r\n    for k in range(1,n+1):\r\n        print(capimove(adj[k],wts,wts_dict),end=\" \")\r\n    print()"
                },
                {
                    "id": 47819328,
                    "submission_date": 1623649320,
                    "language": "PYTH 3",
                    "username": "codetilldawn07",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "1.07",
                    "memory": "23.4M",
                    "solution": 47819328,
                    "code": "for _ in range(int(input())):\n    n = int(input())\n    populations = [0]\n    populations.extend([int(i) for i in input().split()])\n    d = {populations[i]: i for i in range(1, n+1)}\n    ports = {}\n    populations.sort(reverse=True)\n    for _ in range(n-1):\n        u, v = map(int, input().split())\n        if u in ports.keys():\n            ports[u].append(v)\n        else:\n            ports[u] = [v, u]\n        if v in ports.keys():\n            ports[v].append(u)\n        else:\n            ports[v] = [u, v]\n    for i in range(1, n+1):\n        out = 0\n        s = ports[i]\n        for j in populations:\n            if d[j] not in s:\n                out = d[j]\n                break\n        print(out, end=\" \")\n    print(\"\")"
                }
            ]
        },
        "PALINGAM": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "3\r\nab\r\nab\r\naba\r\ncde\r\nab\r\ncd",
                    "output": "B\r\nA\r\nB",
                    "explanation": "Testcase 1: If A adds 'a' to w in the first move, B can add 'a' and make the string w = \"aa\", which is a palindrome, and hence win. Similarly, you can show that no matter what A plays, B can win. Hence the answer is B.\nTestcase 2: Player A moves with 'a', player B can put any of the character 'c', 'd' or 'e', Now Player A can create a palindrome by adding 'a'.\nTestcase 3: None of the players will be able to make a palindrome of length > 1. So B will win."
                }
            ],
            "problem_statement": "Read problems statements in mandarin chinese, russian and vietnamese as well.\nThere are two players A, B playing a game. Player A has a string s with him, and player B has string t with him. Both s and t consist only of lower case English letters and are of equal length. A makes the first move, then B, then A, and so on alternatively. Before the start of the game, the players know the content of both the strings s and t.\nThese players are building one other string w during the game. Initially, the string w is empty. In each move, a player removes any one character from their respective string and adds this character anywhere (at any position) in the string w (Note that w is a string at all times, and you can insert between characters or at the ends. It is not an empty array where you can add a character at any index. Please see the Explanations for further clarification). If at any stage of the game, the string w is of length greater than 1 and is a palindrome, then the player who made the last move wins. \nIf even after the game finishes (ie. when both s and t have become empty strings), no one is able to make the string w a palindrome, then player B wins.\nGiven the strings s, and t, find out which of A, B will win the game, if both play optimally.\nInput\n\nThe first line of the input contains an integer T, corresponding to the number of test cases. The description of each testcase follows.\nThe first line of each testcase will contain the string s.\nThe second line of each testcase will contain the string t.\n\nOutput\nFor each test case, output \"A\" or \"B\" (without quotes) corresponding to the situation, in a new line.\nConstraints\n\nSubtask 1 (20 points) : 1 \u2264 T \u2264 500, All characters of string s are equal, All characters of string t are equal. 1 \u2264 |s| = |t| \u2264 500\nSubtask 2 (80 points) : 1 \u2264 T \u2264 500, 1 \u2264 |s| = |t| \u2264 500",
            "input_format": "",
            "output_format": "",
            "problem_name": "Palindromic Game",
            "user_tags": [
                "String",
                "Game Theory"
            ],
            "computed_tags": [
                "Data Structures",
                "Algorithms"
            ],
            "problem_code_id": "PALINGAM",
            "difficulty_level": "1747",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 28671122,
                    "submission_date": 1578137491,
                    "language": "PYTH 3",
                    "username": "appmnit",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.06",
                    "memory": "17.5M",
                    "solution": 28671122,
                    "code": "for _ in range(int(input())):\n    a = []\n    b = []\n    for i in range(26):\n        a.append(0)\n        b.append(0)\n    sa = input()\n    sb = input()\n    for i in range(len(sa)):\n        a[ord(sa[i])-97]+=1\n        b[ord(sb[i])-97]+=1\n    f=0\n    s = 0\n    for i in range(26):\n        if b[i]==0 and a[i]>=2:\n            f=1\n            break\n        elif b[i]==0 and a[i]==1:\n            s=1\n    if f==1:\n        print('A')\n    elif s==1:\n        z = 0\n        for i in range(26):\n            if b[i]>0 and a[i]==0:\n                z=1\n                break\n        if z==1:\n            print('B')\n        else:\n            print('A')\n    else:\n        print('B')"
                },
                {
                    "id": 18004458,
                    "submission_date": 1522577154,
                    "language": "PYTH 3",
                    "username": "bertrand001",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.01",
                    "memory": "22.8M",
                    "solution": 18004458,
                    "code": "t=int(raw_input())\nfor j in range(t):\n    a,b=raw_input(),raw_input()\n    ta,tb=set(a),set(b)\n    for i in ta:\n        if a.count(i) > 1 and i not in tb:\n            print('A')\n            break\n    else: \n        if len(ta)-len(tb) > 0:\n            if len(tb)-len(ta) > 0:\n                print('B')\n            else:\n                print('A')\n        else:\n            print('B')"
                }
            ]
        },
        "MAXEP": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [],
            "problem_statement": "Read problems statements Hindi , Vietnamese , Mandarin Chinese , Russian and Bengali as well.\nThis is an interactive problem.\nMax has an electrical panel. He knows that there is an integer $x$ ($1 \\le x \\le N$) such that if the panel is connected to voltage greater or equal to $x$, it will break. However, he does not know the exact value of $x$.\nYou must help Max determine $x$. You may perform operations of two types:\n- Connect the panel to voltage $y$, where $y$ is an arbitrary integer between $1$ and $N$ inclusive. This operation costs $1$ coin, and you may only perform it if the panel is not broken. After this operation, you find out whether the panel is broken.\n- Fix the broken panel. This operation costs $c$ coins.\nEach operation may be performed any number of times as long as you have enough coins. Initially, you have $1,000$ coins.\nInteraction\n\nFirst, you should read a line containing two space-separated integers $N$ and $c$.\nTo perform an operation of the first type, you should print a line containing two space-separated integers $1$ and $y$. Then, you must read a line containing a single integer: $0$ if the panel is not broken after this operation, $1$ if it is broken or $-1$ if the operation was invalid (you could also get a direct WA if the operation is invalid).\nTo perform an operation of the second type, you should print a line containing a single integer $2$.\nFinally, you should print a line containing two space-separated integers $3$ and $x$.\n\nDon't forget to flush the output after printing each line!\nConstraints\n\n$1 \\le N \\le 150,000$\n$1 \\le c \\le 150$\n\nSubtasks\nSubtask #1 (15 points): $1 \\le N \\le 1,000$\nSubtask #2 (25 points): $1 \\le c \\le 50$\nSubtask #3 (60 points): original constraints\nExample\nYou             Grader\n                10 8\n1 7\n                1\n2\n1 5\n                1\n2\n1 3\n                0\n1 4\n                1\n2\n3 4",
            "input_format": "",
            "output_format": "",
            "problem_name": "Max and Electrical Panel",
            "user_tags": [
                "Interactive Problems",
                "Binary Search"
            ],
            "computed_tags": [
                "Special",
                "Algorithms",
                "Searching"
            ],
            "problem_code_id": "MAXEP",
            "difficulty_level": "1783",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 23146185,
                    "submission_date": 1550494787,
                    "language": "PYTH 3",
                    "username": "xambert",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.02",
                    "memory": "17.6M",
                    "solution": 23146185,
                    "code": "'''MAXEP: SUBMISSION BY PRIYANSHU SHARMA\n18 FEBRUARY,2019'''\nfrom sys import stdin as inp\nfrom sys import stdout as out\nn,coins=map(int,input().split())\nl=1\nr=n\nwhile r-l>0:\n\tkey=(7*l+r)//8\n\tprint(1,key)\n\tout.flush()\n\tres=int(input())\n\tinp.flush()\n\tif res==0:\n\t\tl=key+1\n\telse:\n\t\tr=key\n\t\tprint(2)\n\t\tout.flush()\nprint(3,l)\nout.flush()"
                },
                {
                    "id": 22479661,
                    "submission_date": 1547452214,
                    "language": "PYTH 3",
                    "username": "dragano999",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.02",
                    "memory": "17.6M",
                    "solution": 22479661,
                    "code": "n,m=map(int,input().split())\r\ns=1000\r\nlow=1\r\nhigh=n\r\nans=0\r\np=6\r\nwhile high>=low:\r\n    mid=low+(high-low)//p\r\n    print(1, mid)\r\n    r=int(input())\r\n    if r==1:\r\n        high=mid-1\r\n        print(2)\r\n    else:\r\n        low=mid+1\r\n        ans=mid\r\nprint(3, ans+1)\r\n\r\n\r\n"
                }
            ]
        },
        "SUMQ": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "1 \r\n3 1 3\r\n1 2 3\r\n5\r\n4 5 6",
                    "output": "399",
                    "explanation": "As there is only one choice for Y which equals to 5, to get a non-zero function value,we can choose any element for X from the set { 1 , 2 , 3 } and for Z from the set { 4  , 5 } \nSo triplets which give non-zero function values are: \n { 1 , 5  , 4 } :  ( 1 + 5 ) * ( 5 + 4 )  = 54 \n{ 1 , 5  , 5 } :  ( 1 + 5 ) * ( 5 + 5 )  = 60 \n{ 2 , 5  , 4 } :  ( 2 + 5 ) * ( 5 + 4 )  = 63 \n{ 2 , 5  , 5 } :  ( 2 + 5 ) * ( 5 + 5 )  = 70 \n{ 3 , 5  , 4 } :  ( 3 + 5 ) * ( 5 + 4 )  = 72 \n{ 3 , 5  , 5 } :  ( 3 + 5 ) * ( 5 + 5 )  = 80 \nFinal answer : 54 + 60 + 63 + 70 + 72 + 80  = 399"
                }
            ],
            "problem_statement": "Read problems statements in Mandarin Chinese, Russian and Vietnamese as well.\nGiven a triplet of integers (X , Y , Z), such that X \u2264 Y and Y \u2265 Z, we define f(X , Y , Z) to be (X + Y) * (Y + Z). If either X > Y or Y \n\nYou are provided three arrays  A , B and C   of any length (their lengths may or may not be equal).  \nYour task is to find the sum of f(X , Y , Z) over all triplets (X, Y , Z) where   X, Y and Z  belong to  A, B and C respectively.\n Output your sum for each test case modulo 1000000007.\nInput\n\nThe first line contains a single integer, T, which is the number of test cases. The description of each testcase follows:\nThe first line of each testcase contains 3 integers: p, q and r. These denote the lengths of A,B and C respectively. \nThe second line contains p integers, which are the elements of A\nThe third line contains q integers, which are the elements of B\nThe fourth line contains r integers, which are the elements of C\n\nOutput\n Output the required sum modulo  1000000007  for each test case in a new line.\nConstraints\n\n1 \u2264 T \u2264 10 \n1 \u2264 p, q, r \u2264 100000 \n1 \u2264 every array element \u2264 1000000000\n\nSubtasks  \n\nSubtask #1 (30 points): 1 \u2264 p,q,r  \u2264 100 \nSubtask #2 (70 points): 1 \u2264 p,q,r  \u2264 100000",
            "input_format": "",
            "output_format": "",
            "problem_name": "Triplets",
            "user_tags": [
                "Dynamic Programming",
                "Prefix Sum",
                "Suffix Sum"
            ],
            "computed_tags": [
                "Algorithms",
                "Simple Algos"
            ],
            "problem_code_id": "SUMQ",
            "difficulty_level": "1772",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 48379913,
                    "submission_date": 1625113153,
                    "language": "PYTH 3",
                    "username": "vadhrivenkat",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "2.47",
                    "memory": "23.1M",
                    "solution": 48379913,
                    "code": "t=int(input())\r\nfor _ in range(t):\r\n    p,q,r=map(int,input().split()) \r\n    a1=sorted(list(map(int,input().split())))\r\n    a2=sorted(list(map(int,input().split())))\r\n    a3=sorted(list(map(int,input().split()))) \r\n    a=b=c=d=0\r\n    n=0\r\n    mod = 10 ** 9 + 7 \r\n    for i in a2:\r\n        while a<p and a1[a]<=i:\r\n            c+=a1[a] \r\n            a+=1 \r\n        while b<r and a3[b]<=i:\r\n            d+=a3[b] \r\n            b+=1 \r\n        n+=(i*a+c)*(i*b+d)\r\n        n%=mod\r\n    print(n)        \r\n            "
                },
                {
                    "id": 47910298,
                    "submission_date": 1624007559,
                    "language": "PYTH 3",
                    "username": "vjudge9",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "2.30",
                    "memory": "23.1M",
                    "solution": 47910298,
                    "code": "def R():     return list(map(int,input().split()))\n\nm=1000000007\nfor i in range(int(input())):\n    a,b,c=R()\n    a1=sorted(R()); b1=sorted(R()); c1=sorted(R())\n    ass=css=asum=csum=s=0\n\n    for i in b1:\n        while ass<a and a1[ass]<=i:\n            asum+=a1[ass]\n            ass+=1\n        while css<c and c1[css]<=i:\n            csum+=c1[css]\n            css+=1\n\n        s+=(i*ass+asum)*(i*css+csum)\n        s=s%m\n\n    print(s)"
                }
            ]
        },
        "KFOLD": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "2\r\n8 2\r\n00011101\r\n6 2\r\n100111",
                    "output": "01100110\r\nIMPOSSIBLE",
                    "explanation": "Example case 1: If the given string \"00011101\" is rearranged to \"01100110\", it becomes $2$-foldable:\n- Initially, $S$ is \"01100110\".\n- After the first folding, it becomes \"100110\".\n- After the second folding, it becomes \"0110\".\n- After the third folding, it becomes \"10\". This string has length $2$, so we are done.\nExample case 2: It is impossible to rearrange $S$ into a $2$-foldable string."
                }
            ],
            "problem_statement": "Read problems statements in Hindi, Mandarin Chinese, Russian, Vietnamese, and Bengali as well\nYou are given a binary string $S$ with length $N$ and an integer $K$, which is a divisor of $N$. A string is said to be $K$-foldable if it can be changed to a string with length $K$ by repeating the following process without any collisions (defined below):\n- Select the prefix of the current string $S$ with length $2K$. (Note that as long as the length of $S$ is greater than $K$, this prefix always exists.)\n- For each $i$ ($1 \\le i \\le K$), check if the $2K-i+1$-th character of $S$ is equal to the $i$-th character of $S$ \u2015 if they are not equal, there is a collision and the process is invalid.\n- Erase the prefix of $S$ with length $K$.\nYour goal is to reorder the characters of $S$ (possibly leaving this string unchanged) in such a way that the resulting string $S$ is a $K$-foldable string. Find a way to do that or determine that it is impossible. If there are multiple solutions, find the lexicographically smallest rearranged string which is $K$-foldable.\nInput\n\nThe first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\nThe first line of each test case contains two space-separated integers $N$ and $K$.\nThe second line contains a single string $S$ with length $N$.\n\nOutput\nFor each test case, print a single line containing the smallest rearranged string or the string \"IMPOSSIBLE\" if it is impossible to rearrange $S$.\nConstraints\n\n$1 \\le T \\le 100$\n$1 \\le K \\le N \\le 10^3$\n$N$ is divisible by $K$\n$S$ contains only characters '0' and '1'",
            "input_format": "",
            "output_format": "",
            "problem_name": "K-Foldable String",
            "user_tags": [
                "String",
                "Basic Maths"
            ],
            "computed_tags": [
                "Data Structures",
                "Mathematics"
            ],
            "problem_code_id": "KFOLD",
            "difficulty_level": "1742",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 96520899,
                    "submission_date": 1684419450,
                    "language": "PYTH 3",
                    "username": "prathmeshjiraf",
                    "user_rating_star": 3,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.02",
                    "memory": "9.7M",
                    "solution": 96520899,
                    "code": "for _ in range(int(input())):\r\n    n,k=map(int,input().split())\r\n    s=input()\r\n    a=s.count(\"1\")\r\n    b=s.count(\"0\")\r\n    if max(a,b)%(n//k)!=0:\r\n        print('IMPOSSIBLE')\r\n    else:\r\n        c='0'*(b//(n//k))+'1'*(a//(n//k))\r\n        d='1'*(a//(n//k))+'0'*(b//(n//k))\r\n        ans=\"\"\r\n        for i in range(n//k):\r\n            if i%2==0:\r\n                ans+=c \r\n            else:\r\n                ans+=d \r\n        print(ans)"
                },
                {
                    "id": 82820582,
                    "submission_date": 1671453300,
                    "language": "PYTH 3",
                    "username": "anu_51",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.03",
                    "memory": "9.7M",
                    "solution": 82820582,
                    "code": "t = int(input())\r\n\r\nfor i in range(t):\r\n    n, k = map(int, input().split())\r\n    s = list(input())\r\n    x = s.count(\"1\")\r\n    y = s.count(\"0\")\r\n    f = n // k\r\n    if y % f != 0:\r\n        print(\"IMPOSSIBLE\")\r\n        continue\r\n    z = y // f\r\n    ans1 = z * (\"0\") + (k - z) * (\"1\")\r\n    ans = \"\"\r\n    for j in range(f):\r\n        if j % 2 == 0:\r\n            ans += ans1\r\n            continue\r\n        ans += ans1[::-1]\r\n    print(ans)   "
                }
            ]
        },
        "WATCHFB": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "1\r\n6\r\n2 0 1\r\n1 3 1\r\n2 2 4\r\n2 5 6\r\n2 8 8\r\n2 9 10",
                    "output": "NO\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO",
                    "explanation": "Example case 1:\n- Reply 1: Chef cannot know who scored the first goal.\n- Reply 2: Chefu told Chef that their favourite team has scored $3$ goals so far.\n- Reply 3: Chef can conclude that his favourite team has scored $4$ goals, since it already scored $3$ goals earlier.\n- Reply 4: the favourite team could have scored $5$ or $6$ goals, but there is no way to know which option is correct.\n- Reply 5: since there is a tie, Chef knows that his favourite team has scored $8$ goals.\n- Reply 6: again, Chef cannot know if his favourite team has scored $9$ or $10$ goals."
                }
            ],
            "problem_statement": "Read problem statements in Hindi, Bengali, Mandarin Chinese, Russian, and Vietnamese as well.\nChef and his son Chefu want to watch a match of their favourite football team playing against another team, which will take place today.\nUnfortunately, Chef is busy in the kitchen preparing lunch, so he cannot watch the match. Therefore, every now and then, Chef asks Chefu about the current scores of the teams and Chefu tells him the score. However, Chefu sometimes does not specify the teams along with the score \u2014 for example, he could say \"the score is 3 to 6\", and there is no way to know just from this statement if it was their favourite team or the other team that scored 6 goals; in different statements, the order of teams may also be different. Other times, Chefu specifies which team scored how many goals.\nChef asks for the score and receives a reply $N$ times. There are two types of replies:\n- 1 A B: their favourite team scored $A$ goals and the other team scored $B$ goals\n- 2 A B: one team scored $A$ goals and the other scored $B$ goals\nChef is asking you to help him determine the score of his favourite team after each of Chefu's replies. After each reply, based on the current reply and all previous information (but without any following replies), tell him whether it is possible to certainly determine the number of goals scored by his favourite team.\nInput\n\nThe first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\nThe first line of each test case contains a single integer $N$.\nThe following $N$ lines describe Chefu's replies in the format described above.\n\nOutput\nFor each of Chefu's replies, print a single line containing the string \"YES\" if it is possible to determine the score of Chef's favourite team after this reply or \"NO\" if it is impossible.\nConstraints\n\n$1 \\le T \\le 100$\n$1 \\le N \\le 10^4$\n$0 \\le A, B \\le 10^9$\nthe sum of $N$ over all test cases does not exceed $10^5$\nthere is at least one valid sequence of scored goals consistent with all replies\n\nSubtasks\nSubtask #1 (100 points): original constraints",
            "input_format": "",
            "output_format": "",
            "problem_name": "Chef and Football Match",
            "user_tags": [
                "Case work",
                "ad-hoc"
            ],
            "computed_tags": [
                "Special",
                "Algorithms",
                "Constructive"
            ],
            "problem_code_id": "WATCHFB",
            "difficulty_level": "1700",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 34514515,
                    "submission_date": 1592546463,
                    "language": "PYTH 3",
                    "username": "vittal_161",
                    "user_rating_star": 3,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.61",
                    "memory": "17.6M",
                    "solution": 34514515,
                    "code": "test=int(input())\nfor _ in range(test):\n    n=int(input())\n    my=-1\n    op=-1\n    for i in range(n):\n        a,x,y=map(int,input().split())\n        if(a==1):\n            print(\"YES\")\n            my=x\n            op=y\n        else:\n            if(x==y):\n                print(\"YES\")\n                my=x\n                op=y\n            elif(my!=-1 and op!=-1):\n                if(max(x,y)>=max(my,op) and min(x,y)<max(my,op)):\n                    if(my>op):\n                        my=max(x,y)\n                        op=min(x,y)\n                    else:\n                        op=max(x,y)\n                        my=min(x,y)\n                    print(\"YES\")\n                else:\n                    print(\"NO\")\n            elif(my==-1 and op==-1):\n                print(\"NO\")"
                },
                {
                    "id": 33415013,
                    "submission_date": 1590753747,
                    "language": "PYTH 3",
                    "username": "akt17",
                    "user_rating_star": 3,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.63",
                    "memory": "17.6M",
                    "solution": 33415013,
                    "code": "from math import *\r\nfrom collections import *\r\nfrom itertools import *\r\nfrom bisect import *\r\nfrom heapq import *\r\nfrom operator import *\r\nfrom sys import *\r\nsetrecursionlimit(1000000)\r\nd=defaultdict(lambda:0,{})\r\ndef io():\r\n    return map(int,input().split())\r\ndef op():\r\n    return list(map(int,input().split()))\r\ndef o():\r\n    return int(input())\r\ndef r(x):\r\n    if type(x)==int:\r\n        return range(x)\r\n    else:return range(len(x))\r\ndef kl(con,x=0):\r\n    if x==0:print('Yes') if con else print('No')\r\n    elif x==1:print('yes') if con else print('no')\r\n    elif x==2:print('YES') if con else print('NO')\r\nMOD = 1000000007\r\nMAX=float('inf')\r\nMIN=-float('inf')\r\np=input\r\nfor _ in r(o()):\r\n    n=o()\r\n    x=x1=None\r\n    for i in r(n):\r\n        a,b,c=io()\r\n        if a==1 or b==c:\r\n            x=b\r\n            x1=c\r\n            print('YES')\r\n        elif x==None:\r\n            print('NO')\r\n        else:\r\n            z=sorted([b,c])\r\n            if max(x1,x)<=min(b,c):\r\n                print('NO')\r\n                continue\r\n            if x<z[0]:\r\n                x=z[0]\r\n                x1=z[1]\r\n                print('YES')\r\n            else:\r\n                x=z[1]\r\n                x1=z[0]\r\n                print('YES')"
                }
            ]
        },
        "MSTICK": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "1\n5\n1\n0 0",
                    "output": "5.0",
                    "explanation": ""
                },
                {
                    "input": "2\n3 5\n1\n0 1",
                    "output": "4.0",
                    "explanation": ""
                },
                {
                    "input": "18\n3 4 2 1 5 7 9 7 10 5 12 3 1 1 2 1 3 2\n1\n4 10",
                    "output": "9.0",
                    "explanation": "Test Case 3: , in the figure above, yellow colored matches are lighted by a lighter simultaneously.\nThe numbers indicate the time required to burn that matchstick (if lighted at one end).\nNow the first lighted matchstick will completely burn in $5$ seconds. Then it will light up all the rest matches from the rear end.\nSome matches will have fire at both ends and thus after $5$ seconds, they will start burning with twice the original rate.\nThus time taken for matches to burn completely will be :\n(from left to right):  $8.0$, $9.0$, $7.0$, $6.0$, $5.0$, $6.0$, $7.0$, $6.0$, $7.5$, $5.0$, $8.5$, $8.0$, $6.0$, $6.0$, $7.0$, $6.0$, $8.0$, $7.0$.\nSo, the answer will be $9.0$ (the maximum among these)."
                }
            ],
            "problem_statement": "Chef Ceil has some matchsticks in his kitchen.\nDetail of matchsticks:\nThere are $N$ matchsticks in total. They are numbered from to $0$ to $N-1$ inclusive. The $i^{th}$ matchstick takes $b_{i}$ time to burn when lighted at one end, and it burns at a uniform rate.\nIf lighted at both ends simultaneously, the matchstick will take only half of the original time to burn down.\nArrangement:\nHe ties rear end of the all the matchsticks together at one point and the front end is kept free. The matchstick numbered $i$ is adjacent to matchstick numbered $i+1$ for all $0 \\leq i \\leq N-2$.  \nBodies of matchsticks do not touch each other, except at the rear end.\nTask:\nThere are $Q$ queries, in each query we ask:\nIf he lights the free end of all matchsticks numbered between $L$ and $R$ inclusive, what will be the time needed for all matchsticks to get completely burnt?\nInput\n\nFirst line of input contains a single integer $N$. \nThe next line contains $N$ space separated integers, the $i^{th}$ of which is $b_i$\nThe next line contains a single integer $Q$\nThe next $Q$ lines each contain two space separated integers - $L$ and $R$. The $i^{th}$ line represents the $i^{th}$ query.\n\nOutput\nFor each query, print the answer on a new line. \nConstraints:\n\n$1 \\leq N \\leq 10^{5}$\n$1 \\leq b_{i} \\leq 10^{8}$\n$1 \\leq Q \\leq 10^{5}$\n$0 \\leq L \\leq R \\leq N-1$",
            "input_format": "",
            "output_format": "",
            "problem_name": "Matchsticks",
            "user_tags": [
                "mani_adm",
                "math",
                "may13",
                "segment-tree",
                "simple"
            ],
            "computed_tags": [],
            "problem_code_id": "MSTICK",
            "difficulty_level": "1714",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 28033441,
                    "submission_date": 1575221963,
                    "language": "PYTH 3",
                    "username": "k__r",
                    "user_rating_star": 3,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "2.77",
                    "memory": "19.7M",
                    "solution": 28033441,
                    "code": "import math\ndef get(l,r,a):\n    x=len(a)//2\n    y=l\n    n=r\n    m=len(a)\n    o=0\n    p=0\n    q=1000000001\n    #print(l,r,x,y,n,m)\n    while l<r:\n        if l%2==1:\n            p=max(p,a[l][1])\n            q=min(q,a[l][0])\n            l+=1\n        if r%2==1:\n            p=max(p,a[r-1][1])\n            q=min(q,a[r-1][0])\n            r-=1\n        l//=2\n        r//=2\n    z=0\n    while x<y:\n        if x%2==1:\n            z=max(z,a[x][1])\n            x+=1\n        if y%2==1:\n            z=max(z,a[y-1][1])\n            y-=1\n        x//=2\n        y//=2\n    while n<m:\n        if n%2==1:\n            o=max(o,a[n][1])\n            n+=1\n        if m%2==1:\n            o=max(o,a[m-1][1])\n            m-=1\n        n//=2\n        m//=2\n    o=max(o,z)    \n    s=q+max((p-q)/2,o)\n    return s\nx=int(input())\na=list(map(int,input().split()))\nlol=[[0]*2]*x*2\ni=2*x-1\nwhile i>0:\n    if i>=x:\n        lol[i]=[a[i-x],a[i-x]]\n    else:\n        p=min(lol[2*i][0],lol[2*i+1][0])\n        q=max(lol[2*i][1],lol[2*i+1][1])\n        lol[i]=[p,q]\n    i-=1\n#print(lol)    \nn=int(input())\nfor __ in range(n):\n    l,r=map(int,input().split())\n    r+=1+x\n    l+=x\n    #print(l,r)\n    print(\"%.1f\"%get(l,r,lol))"
                },
                {
                    "id": 23020256,
                    "submission_date": 1549837287,
                    "language": "PYTH 3",
                    "username": "kkoder_1729",
                    "user_rating_star": 5,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "6.12",
                    "memory": "19.5M",
                    "solution": 23020256,
                    "code": "N=int(input())\r\narr=[int(x) for x in input().split()]\r\n\r\nMAXN=100005\r\nseg=[0]*(4*MAXN)\r\nseg1=[0]*(4*MAXN)\r\n\r\n\r\ndef build(node,ss,se):\r\n\r\n    if(ss==se):\r\n        seg[node]=arr[ss]\r\n        return arr[ss]\r\n\r\n    mid=(ss+se)>>1\r\n    build(2*node+1,ss,mid)\r\n    build(2*node+2,mid+1,se)\r\n\r\n    seg[node]=min(seg[2*node+1],seg[2*node+2])\r\n\r\n\r\ndef build1(node,ss,se):\r\n\r\n    if(ss==se):\r\n        seg1[node]=arr[ss]\r\n        return arr[ss]\r\n\r\n    mid=(ss+se)>>1\r\n    build1(2*node+1,ss,mid)\r\n    build1(2*node+2,mid+1,se)\r\n\r\n    seg1[node]=max(seg1[2*node+1],seg1[2*node+2])\r\n\r\n\r\n    \r\ndef getmin(node,ss,se,qs,qe):\r\n\r\n    if(qs>se or qe<ss or qs>qe):\r\n        return 1000000000000000000000000000\r\n\r\n    if(qs<=ss and qe>=se):\r\n        return seg[node]\r\n\r\n    mid=(ss+se)>>1\r\n    return min(getmin(2*node+1,ss,mid,qs,qe),getmin(2*node+2,mid+1,se,qs,qe))\r\n\r\n\r\ndef getmax(node,ss,se,qs,qe):\r\n\r\n    if(qs>se or qe<ss or qs>qe):\r\n        return 0\r\n\r\n    if(qs<=ss and qe>=se):\r\n        return seg1[node]\r\n\r\n    mid=(ss+se)>>1\r\n    return max(getmax(2*node+1,ss,mid,qs,qe),getmax(2*node+2,mid+1,se,qs,qe))\r\n\r\n\r\n\r\n\r\n\r\nbuild1(0,0,N-1)\r\nbuild(0,0,N-1)\r\n\r\n\r\nQ=int(input())\r\nfor i in range(0,Q):\r\n    L,R=map(int,input().split())\r\n\r\n    t1=getmax(0,0,N-1,0,L-1)\r\n    t2=getmax(0,0,N-1,R+1,N-1)\r\n    t3=getmin(0,0,N-1,L,R)\r\n    t4=getmax(0,0,N-1,L,R)\r\n\r\n    ans=t3+max(t1/1,t2/1,(t4-t3)/2)\r\n    print(ans)\r\n    \r\n"
                }
            ]
        },
        "XORIER": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "1\n5\n2 4 8 1 3",
                    "output": "3",
                    "explanation": "Example case 1: The three valid pairs are $(1, 2)$, $(1, 3)$ and $(2, 3)$. For example, $A_1 \\oplus A_2 = 2 \\oplus 4 = 6 = 3+3$."
                }
            ],
            "problem_statement": "Read problems statements Hindi ,Bengali , Mandarin chinese , Russian and Vietnamese as well.\nChef is stuck at the following problem. Help him solve it!\nChef has a sequence of integers $A_1, A_2, \\dots, A_N$. He should find the number of pairs $(i, j)$ such that $1 \\le i \\lt j \\le N$ and the bitwise XOR of $A_i$ and $A_j$ can be written as a sum of two (not necessarily different) prime numbers with the same parity (both odd or both even).\nInput\n\nThe first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\nThe first line of each test case contains a single integer $N$. \nThe second line contains $N$ space-seprated integers $A_1, A_2, \\dots, A_N$.\n\nOutput\nFor each test case, print a single line containing one integer \u2014 the number of valid pairs.\nConstraints\n\n$1 \\le T \\le 10$\n$1 \\le N \\le 10^5$\n$1 \\le A_i \\le 10^6$ for each valid $i$\n\nSubtasks\nSubtask #1 (10 points): $1 \\le N \\le 10^3$\nSubtask #2 (90 points): original constraints",
            "input_format": "",
            "output_format": "",
            "problem_name": "War of XORs",
            "user_tags": [
                "easy",
                "observation",
                "priyanshi_",
                "sept18",
                "xor"
            ],
            "computed_tags": [],
            "problem_code_id": "XORIER",
            "difficulty_level": "1713",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 45527105,
                    "submission_date": 1619717916,
                    "language": "PYTH 3",
                    "username": "zer00",
                    "user_rating_star": 4,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.51",
                    "memory": "20.7M",
                    "solution": 45527105,
                    "code": "import math\nfor _ in range(int(input())):\n    n = int(input())\n    A = list(map(int, input().split(\" \")))\n    k, l = {}, {}\n    u, v = 0, 0\n    x, y = 0, 0\n    for i in A:\n        j = i >> 2\n        if i % 2:\n            t = k.get(j, 0)\n            u += t\n            x += 1 if t else 0\n            k[j] = t + 1\n        else:\n            t = l.get(j, 0)\n            v += t\n            y += 1 if t else 0\n            l[j] = t + 1\n    a, b = len(k), len(l)\n    #print(k)\n    #print(l)\n    print((a + x) * (a + x - 1) // 2 + (b + y) * (b + y - 1) // 2 - u - v)"
                },
                {
                    "id": 30038669,
                    "submission_date": 1583332451,
                    "language": "PYTH 3",
                    "username": "akshay1_2",
                    "user_rating_star": 4,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.90",
                    "memory": "24M",
                    "solution": 30038669,
                    "code": "t=int(input())\nfor _ in range(t):\n    n=int(input())\n    l=list(map(int,input().split()))\n    k=[]\n    for i in l:\n        if not i%2:\n            k.append(i)\n    d={}\n    for i in k:\n        try:\n            d[i]+=1\n        except:\n            d[i]=1\n    m=len(k)\n    ans=0\n    x=list(d.keys())\n    x.sort()\n    for i in x:\n        m-=d[i]\n        k=m\n        try:\n            x=d[i+2]\n            if (i+2)^i==2:\n                k-=x\n        except:\n            pass\n        ans+=d[i]*k\n    k=[]\n    for i in l:\n        if i%2:\n            k.append(i)\n    d={}\n    for i in k:\n        try:\n            d[i]+=1\n        except:\n            d[i]=1\n    m=len(k)\n    x=list(d.keys())\n    x.sort()\n    for i in x:\n        m-=d[i]\n        k=m\n        try:\n            x=d[i+2]\n            if (i+2)^i==2:\n                k-=x\n        except:\n            pass\n        ans+=d[i]*k\n    print(ans)\n"
                }
            ]
        },
        "CARPTUN": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "2\n3\n2 2 2\n3 5 5\n2\n3 2\n2 1 1",
                    "output": "4.000000000\n3.000000000",
                    "explanation": "Example case 1: Each car takes 5/5 = 1 second to go from one tunnel to the next tunnel.\nSince each car has to wait for equally long (2 seconds) in each tunnel, the delay between every two consecutive cars exiting each tunnel is 2 seconds.\nAs there are 3 cars, the total time delay between the first and the last car after the last tunnel is 4 seconds."
                }
            ],
            "problem_statement": "Read problems statements in Mandarin chinese, Russian and Vietnamese as well.\nThere is a straight road that passes through N short tunnels. At the entrance to the first tunnel, there are C cars lined up in a row waiting to enter the series of tunnels. The distance between each pair of consecutive tunnels is D metres (the lengths of each tunnel and each car are negligible) and the velocity of each car is S metres per second.\nEach tunnel contains a toll booth. In the i-th tunnel (1 \u2264 i \u2264 N), processing a car at the toll booth takes Ai seconds. Only one car can be processed at the same time. If there are multiple cars in the tunnel, they all have to wait for the first car to be processed; afterwards, the first car exits the tunnel, the second car starts being processed and all remaining cars have to wait again, etc. Whenever a car arrives in a tunnel, it has to wait at that tunnel's toll booth until all previous cars have been processed and then get processed itself.\nThe road and the tunnels are too narrow, so cars can't overtake each other at any time during the journey.\nChef is after Reziba once again. Reziba's car is the first car to enter the tunnels, while Chef's car is the last car to enter the tunnels.\nCompute the final delay (in seconds) between the first (Reziba's) car and the last (Chef's) car immediately after Chef's car exits the last tunnel, i.e. after all the cars have passed through the tunnels. This delay is equal to the distance between the first and the last car divided by the cars' velocity, or equivalently to the difference between the times when the last car and the first car exit the last tunnel.\nInput\nThe first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows.\nThe first line of each test case contains a single integer N denoting the number of tunnels.\nThe second line contains N space-separated integers A1, A2, ..., AN denoting the time taken for processing a car at each toll booth.\nThe third line contains three space-separated integers C, D and S.\n\nOutput\nFor each test case, print a single line containing one real number \u2014 the time delay between the first and last car after all the cars have passed through all the tunnels. Your answer will be considered correct if its absolute error is less than 10-6.\nConstraints\n1 \u2264 T \u2264 100\n1 \u2264 N \u2264 105\n1 \u2264 Ai \u2264 109 for each valid i\n2 \u2264 C \u2264 106\n1 \u2264 D, S \u2264 109\n\nSubtasks\nSubtask #1:\n\n1 \u2264 N \u2264 1,000\nC = 2\n\nSubtask #2: Original Constraints",
            "input_format": "",
            "output_format": "",
            "problem_name": "Car-pal Tunnel",
            "user_tags": [
                "Basic Maths"
            ],
            "computed_tags": [
                "Mathematics"
            ],
            "problem_code_id": "CARPTUN",
            "difficulty_level": "1714",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 30047672,
                    "submission_date": 1583400176,
                    "language": "PYTH 3",
                    "username": "ajaykrishnaa97",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.42",
                    "memory": "19M",
                    "solution": 30047672,
                    "code": "t=int(input())\r\nfor testcase in range(t):\r\n    n=int(input())\r\n    a=list(map(int,input().split()))\r\n    C,D,S=list(map(int,input().split()))\r\n    x=((C-1)*max(a))+sum(a)\r\n    time=x-sum(a)\r\n    print(time)"
                },
                {
                    "id": 24234882,
                    "submission_date": 1557538416,
                    "language": "PYTH 3",
                    "username": "alphasingh",
                    "user_rating_star": 3,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.37",
                    "memory": "19.3M",
                    "solution": 24234882,
                    "code": "for T in range(int(input())):\r\n\tN = int(input())\r\n\tA = list(map(int, input().split()))\r\n\tC, D, S = map(int, input().split())\r\n\tdelay = 0\r\n\tif C == 2:\r\n\t\tdelay = max(A)\r\n\telse:\r\n\t\tdelay = max(A)*(C-1)\r\n\tprint(delay)"
                }
            ]
        },
        "RECTCNT": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "6\n7 1\n3 5\n3 1\n1 5\n1 1\n7 5\n0",
                    "output": "3",
                    "explanation": ""
                }
            ],
            "problem_statement": "Given N separate integer points on the Cartesian plane satisfying: there is no any three of them sharing a same X-coordinate. Your task is to count the number of rectangles (whose edges parrallel to the axes) created from any four of given points.\n\nInput\nThere are several test cases (ten at most), each formed as follows:\n\nThe first line contains a positive integer N (N \u2264 105).\nN lines follow, each containing a pair of integers (each having an absolute value of 109 at most) describing coordinates of a given point.\n\nThe input is ended with N = 0.\nOutput\nFor each test case, output on a line an integer which is the respective number of rectangles found.",
            "input_format": "",
            "output_format": "",
            "problem_name": "Rectangles Counting",
            "user_tags": [
                "Maps",
                "Loops",
                "Basic Maths",
                "Cartesian Coordinate System",
                "ad-hoc",
                "Sorting",
                "Observation"
            ],
            "computed_tags": [
                "Data Structures",
                "Basic Programming Concepts",
                "Mathematics",
                "Algorithms",
                "Constructive"
            ],
            "problem_code_id": "RECTCNT",
            "difficulty_level": "1770",
            "ai_solutions": [
                "from collections import defaultdict\n\ndef count_rectangles():\n    while True:\n        n = int(input())\n        if n == 0:\n            break\n\n        points = defaultdict(int)\n        for _ in range(n):\n            x, y = map(int, input().split())\n            points[x] += 1\n\n        rectangles = 0\n        for count in points.values():\n            rectangles += count * (count - 1) // 2\n\n        print(rectangles)\n\ncount_rectangles()",
                "from collections import defaultdict\n\ndef count_rectangles():\n    while True:\n        n = int(input())\n        if n == 0:\n            break\n\n        points = defaultdict(int)\n        for _ in range(n):\n            x, y = map(int, input().split())\n            points[x] += 1\n\n        rectangles = sum(count * (count - 1) // 2 for count in points.values())\n\n        print(rectangles)\n\ncount_rectangles()"
            ],
            "human_solutions": [
                {
                    "id": 34486162,
                    "submission_date": 1592402103,
                    "language": "PYTH 3",
                    "username": "keyurpotdar",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.54",
                    "memory": "17.9M",
                    "solution": 34486162,
                    "code": "import collections\n\nn = int(input())\nwhile n != 0:\n    points = []\n    for _ in range(n):\n        points.append(tuple(map(int, input().split())))\n    points.sort()\n    \n    ans = 0\n    sides = collections.defaultdict(int)\n    for i in range(n - 1):\n        x1, y1 = points[i]\n        x2, y2 = points[i + 1]\n        if x1 == x2:\n            ans += sides[y1, y2]\n            sides[y1, y2] += 1\n    print(ans)\n    \n    n = int(input())\n    "
                },
                {
                    "id": 32297294,
                    "submission_date": 1587887409,
                    "language": "PYTH 3",
                    "username": "govardhan566",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.67",
                    "memory": "18.8M",
                    "solution": 32297294,
                    "code": "#In the Name of God\r\nimport math\r\n\r\nwhile(True):\r\n\tt = int(input())\r\n\tif(t == 0):\r\n\t\tbreak\r\n\tarr = [[0 for i in range(2)] for j in range(t)]\r\n\r\n\tfor i in range(t):\r\n\t\tx = input().split()\r\n\t\tarr[i][0] = int(x[0])\r\n\t\tarr[i][1] = int(x[1])\r\n\r\n\tif t<4:\r\n\t\tprint(0)\r\n\telse:\r\n\t\tarr.sort(key = lambda x : (x[0],x[1]))\r\n\t\tdict1 = {}\r\n\r\n\t\ti = 0\r\n\t\twhile i < len(arr):\r\n\t\t\tif(i+1 < len(arr) and arr[i][0] == arr[i+1][0]):\r\n\t\t\t\tx = (arr[i][1],arr[i+1][1])\r\n\t\t\t\tif(x in dict1):\r\n\t\t\t\t\tdict1[x] += 1\r\n\t\t\t\telse:\r\n\t\t\t\t\tdict1[x] = 1\r\n\t\t\t\ti += 2\r\n\t\t\telse:\r\n\t\t\t\ti += 1\r\n\t\tsum = 0\r\n\t\tele = list(dict1.values())\r\n\t\tfor i in range(len(ele)):\r\n\t\t\tval = ((ele[i]-1)*ele[i])//2\r\n\t\t\tsum += val\r\n\t\tprint(sum)"
                }
            ]
        },
        "RESIST": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "3\n1 10\n2 12\n100 10000",
                    "output": "1/1\n2/3\n4301/9525",
                    "explanation": ""
                }
            ],
            "problem_statement": "The electrical resistance is the opposition to the passage of electric current. If two resistors with resistance R1 and R2 are connected to each other, the resultant resistance R depends on how their ends are connected. If they are connected in Series, they simply add up to give R = R1 + R2. If they are connected in Parallel, its given by the equation 1/R = 1/R1 + 1/R2. This is shown below.\n\nWe have a long circuit of resistors of one unit resistance each ( Ri = 1 ) having N blocks. Each block has 2 resistors as shown in the figure below. For a circuit with only one block (N=1), the equivalent resistance at the ends on left-side is R = 1 ( note that the right-most horizontally aligned resistor has no influence, as its not part of any simple path between the two left ends ). For a circuit with two blocks (N=2), its 2/3 units. This is shown in the figure below.\n\nGiven N, find the resistance A/B at the left ends of the circuit having N blocks. The values can be huge, so reduce the fraction A/B to lowest terms P/Q, where greatest_common_divisor_of (P,Q) = 1 and print (P%M)/(Q%M) for a given modulo M.\n\n\nInput\nFirst line contains T ( number of test cases, 1 \u2264 T \u2264 10 ). Each of the next T lines contains N M ( 1 6 and 2 30 )\n\n\nOutput\nFor each test case, output the equivalent resistance at the left ends, in the form (P%M)/(Q%M) as explained above, in a separate line.",
            "input_format": "",
            "output_format": "",
            "problem_name": "Resistance",
            "user_tags": [
                "anil_adm",
                "cook21",
                "easy"
            ],
            "computed_tags": [],
            "problem_code_id": "RESIST",
            "difficulty_level": "1761",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 39814997,
                    "submission_date": 1606293130,
                    "language": "PYTH 3",
                    "username": "jitendrakumar7",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "3.40",
                    "memory": "17.5M",
                    "solution": 39814997,
                    "code": "t=int(input())\n\nfor _ in range(t):\n    n,m=[int(i) for i in input().split()]\n    \n    (num,den)=(1,1)\n    \n    for i in range(1,n):\n        num=num+den\n        den=den+num\n        num=num%m\n        den=den%m\n        \n    print(f'{num}/{den}')\n\t\n\t\n\t"
                },
                {
                    "id": 38953110,
                    "submission_date": 1602775963,
                    "language": "PYTH 3",
                    "username": "shubham__jain",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "2.58",
                    "memory": "17.5M",
                    "solution": 38953110,
                    "code": "def gcd(a,b):\n    if b==0:\n        return a\n    else:\n        return gcd(b,a%b)\nfor _ in range(int(input())):\n    n,m = map(int,input().rstrip().split())\n    num  = 1\n    den = 1\n    for i  in range(2,n+1):\n        num  = (num+den)%m\n        den = (num + den)%m\n    #g = gcd(num,den)\n\n    print(str((num)%m)+\"/\"+str((den)%m))\n    "
                }
            ]
        },
        "CSUMD": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "3\n1\n2\n3",
                    "output": "1\n3\n8",
                    "explanation": ""
                }
            ],
            "problem_statement": "There are coins of $2$ different denominations in Crazyland, $1$-cent coins and $2$-cent coins. They have two faces - heads and tails.\nYour task is to find out the the number of ways to create a linear arrangement of these coins so that their sum is $N$ cents. The only condition on the linear arrangement is that the first coin in the arrangement should always have heads up. All other coins could have either tails or heads up. \nTake $N = 2$ as an example. The possible arrangements are $(1H, 1H)$, $(2H)$, $(1H, 1T)$, where $H$ is heads and $T$ is tails. Therefore there are $3$ possible arrangements that sum up to $2$-cents.\nNote: While counting make sure to differentiate between heads and tails.\nInput\n\nFirst line contains a single integer - $T$, the number of test cases.\n$T$ lines follow, each containing a single integer $N$, the required sum.\n\nConstraints\n\n$0 \\leq T \\leq 10^4$\n$1 \\leq N \\leq 10^9$\n\nOutput\nFor each case the output should be a single integer representing the number of such arrangements possible. As the answer can be very large, print it modulo $10^9 + 7$.",
            "input_format": "",
            "output_format": "",
            "problem_name": "My Fair Coins",
            "user_tags": [
                "Matrix Exponentiation"
            ],
            "computed_tags": [
                "Mathematics",
                "Matrices",
                "Matrix Multiplication"
            ],
            "problem_code_id": "CSUMD",
            "difficulty_level": "1744",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 33391438,
                    "submission_date": 1590651011,
                    "language": "PYTH 3",
                    "username": "thedeep",
                    "user_rating_star": 3,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "1.02",
                    "memory": "78.5M",
                    "solution": 33391438,
                    "code": "from sys import stdin, stdout\r\nfrom math import ceil\r\nimport numpy as np\r\nfrom numpy.linalg import matrix_power\r\n\r\nmod = 10 ** 9 + 7\r\n\r\n\r\ndef mul(m, l):\r\n    c1 = m[0][0]\r\n    c2 = m[0][1]\r\n    c3 = m[1][0]\r\n    c4 = m[1][1]\r\n    a1 = l[0][0]\r\n    a2 = l[0][1]\r\n    a3 = l[1][0]\r\n    a4 = l[1][1]\r\n    a = ((c1 % mod*a1 % mod) % mod + (c2 % mod*a3 % mod) % mod) % mod\r\n    b = ((c1 % mod*a2 % mod) % mod + (c2 % mod*a4 % mod) % mod) % mod\r\n    c = ((c3 % mod*a1 % mod) % mod + (c4 % mod*a3 % mod) % mod) % mod\r\n    d = ((c3 % mod*a2 % mod) % mod + (c4 % mod*a4 % mod) % mod) % mod\r\n    return [[a, b], [c, d]]\r\n\r\n\r\ndef fast_matrix(f, p):\r\n    if p == 1:\r\n        return f\r\n\r\n    z = fast_matrix(f, p // 2)\r\n    if p % 2 == 0:\r\n        return mul(z, z)\r\n    else:\r\n        return mul(mul(z, z), f)\r\n\r\n\r\ndef solve():\r\n    mod = 10**9+7\r\n    for _ in range(int(input())):\r\n        f = [[2, 1], [2, 0]]\r\n        yo = [[1, 3]]\r\n        n = int(input())\r\n        if n > 2:\r\n            m = fast_matrix(f, n - 2)\r\n            c1 = m[0][0]\r\n            c3 = m[0][1]\r\n            c2 = m[1][0]\r\n            c4 = m[1][1]\r\n            print((3*c1+c2) % mod)\r\n\r\n        else:\r\n            if n == 1:\r\n                ans = 1\r\n            elif n == 2:\r\n                ans = 3\r\n            print(ans)\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    solve()\r\n"
                },
                {
                    "id": 29863472,
                    "submission_date": 1582443709,
                    "language": "PYTH 3",
                    "username": "tubun_1296",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.97",
                    "memory": "17.6M",
                    "solution": 29863472,
                    "code": "mod=10**9+7\r\ndef mul(m,l):\r\n    c1=m[0][0]\r\n    c2=m[0][1]\r\n    c3=m[1][0]\r\n    c4=m[1][1]\r\n    a1=l[0][0]\r\n    a2=l[0][1]\r\n    a3=l[1][0]\r\n    a4=l[1][1]\r\n    a=((c1%mod*a1%mod)%mod+(c2%mod*a3%mod)%mod)%mod\r\n    b=((c1%mod*a2%mod)%mod+(c2%mod*a4%mod)%mod)%mod\r\n    c=((c3%mod*a1%mod)%mod+(c4%mod*a3%mod)%mod)%mod\r\n    d=((c3%mod*a2%mod)%mod+(c4%mod*a4%mod)%mod)%mod\r\n    return [[a,b],[c,d]]\r\ndef fast_matrix(l,p):\r\n    if p==1:\r\n        return l\r\n    z=fast_matrix(l,p//2)\r\n    if p%2==0:\r\n        return mul(z,z)\r\n    else:\r\n        return mul(mul(z,z),l)\r\nt=int(input())\r\nfor i in range(t):\r\n    l=[[2,1],[2,0]]\r\n    yo=[[1,3]]\r\n    n=int(input())\r\n    if n==1:\r\n        print(1)\r\n    elif n==2:\r\n        print(3)\r\n    else:\r\n        z=fast_matrix(l,n-2)\r\n        c1=z[0][0]\r\n        c3=z[0][1]\r\n        c2=z[1][0]\r\n        c4=z[1][1]\r\n        print((3*c1+c2)%mod)"
                }
            ]
        },
        "CHRL1": {
            "constraints": "1 \u2264 T \u2264  250 \n1 \u2264 n \u2264  10 \n1 \u2264 k \u2264  100000000 \n1 \u2264 weighti \u2264  100000000 \n1 \u2264 costi \u2264  100000000",
            "subtasks": "Subtask 1 (30 points): All the oranges' weights equals to 1.\nSubtask 2 (30 points):   N = 5  \nSubtask 2 (40 points):  See the constraints",
            "sample_test_cases": [
                {
                    "input": "2\n1 3\n2 2\n3 4\n2 1\n2 2\n3 5",
                    "output": "2\n5",
                    "explanation": ""
                }
            ],
            "problem_statement": "Chef likes shopping, and especially he likes to buy oranges. But right now he is short of money. He has only k rubles. There are n oranges. The i-th one costs costi rubles and has weight equal to weighti. Chef wants to buy a set of oranges with the maximal possible weight. Please help him, and tell him this weight.",
            "input_format": "The first line of the input contains an integer T  denoting the number of test cases. The first line of each test case contains two numbers n and k. The following n lines contain two numbers costi and weighti respectively.",
            "output_format": "For each test case, output a single line containing maximal weight among all the affordable sets of oranges.",
            "problem_name": "Chef and Shop",
            "user_tags": [
                "Bitmasking",
                "Recursion",
                "Brute Force"
            ],
            "computed_tags": [
                "Mathematics",
                "Bit Manipulation",
                "Algorithms"
            ],
            "problem_code_id": "CHRL1",
            "difficulty_level": "1771",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 37031767,
                    "submission_date": 1597987877,
                    "language": "PYTH 3",
                    "username": "hpandya",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.19",
                    "memory": "17.6M",
                    "solution": 37031767,
                    "code": "def rec(k, w=0, i=0):\n    global ans\n    ans = max(ans, w)\n    if i == n: return\n    if o[i][0] <= k:\n        rec(k - o[i][0], w + o[i][1], i + 1)\n    rec(k, w, i + 1)\n\nfor test in range(int(input())):\n    n, k = map(int, input().split())\n    o = [tuple(map(int, input().split())) for i in range(n)]\n    ans = 0\n    rec(k)\n    print(ans)\n"
                },
                {
                    "id": 33107735,
                    "submission_date": 1589601796,
                    "language": "PYTH 3",
                    "username": "utkarsh_sri",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.13",
                    "memory": "17.6M",
                    "solution": 33107735,
                    "code": "def knapSack(W , wt , val , n): \n  \n    # Base Case \n    if n == 0 or W == 0 : \n        return 0\n  \n    # If weight of the nth item is more than Knapsack of capacity \n    # W, then this item cannot be included in the optimal solution \n    if (wt[n-1] > W): \n        return knapSack(W , wt , val , n-1) \n  \n    # return the maximum of two cases: \n    # (1) nth item included \n    # (2) not included \n    else: \n        return max(val[n-1] + knapSack(W-wt[n-1] , wt , val , n-1), \n                   knapSack(W , wt , val , n-1)) \n  \nt=int(input())\nfor i in range(t):\n    wt=[]\n    val=[]\n    n,k=map(int,input().split())\n    for i in range(n):\n        x,y=map(int,input().split())\n        wt.append(x)\n        val.append(y)\n    print(knapSack(k,wt,val,n))"
                }
            ]
        }
    },
    "4": {
        "BWKNIGHT": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "3\n2 2\n2 3\n4 5",
                    "output": "12\n26\n312",
                    "explanation": ""
                }
            ],
            "problem_statement": "How many ways are there to place a black and a white knight on an N * M chessboard such that they do not attack each other? The knights have to be placed on different squares. A knight can move two squares horizontally and one square vertically, or two squares vertically and one square horizontally. The knights attack each other if one can reach the other in one move.\n\n\nInput :\n\n\nThe first line contains the number of test cases T. Each of the next T lines contains two integers N and M.\n\n\nOutput :\n\n\nOutput T lines, one for each test case, each containing the required answer for the corresponding test case.\n\n\nConstraints :\n1",
            "input_format": "",
            "output_format": "",
            "problem_name": "The Black and White Knights",
            "user_tags": [
                "ad-hoc"
            ],
            "computed_tags": [
                "Algorithms",
                "Constructive"
            ],
            "problem_code_id": "BWKNIGHT",
            "difficulty_level": "1890",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 22524952,
                    "submission_date": 1547807537,
                    "language": "PYTH 3",
                    "username": "kassutta",
                    "user_rating_star": 4,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.06",
                    "memory": "17.6M",
                    "solution": 22524952,
                    "code": "def main():\n    for _ in range(int(input())):\n        n,m=list(map(int,input().split()))\n        if n==1:\n            print(m*(m-1))\n        elif m==1:\n            print(n*(n-1))\n        else:\n            print((n*m)*(n*m-1)-4*((m-2)*(n-1)+(m-1)*(n-2)))\nif __name__==\"__main__\":\n    main()\n"
                },
                {
                    "id": 17488671,
                    "submission_date": 1519063854,
                    "language": "PYTH 3",
                    "username": "hackerkira",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.07",
                    "memory": "27.1M",
                    "solution": 17488671,
                    "code": "testcases = int(input())\nfor i in range(testcases):\n    n, m = input().split()\n    n = int(n)\n    m = int(m)\n    # we always take n as the greater one\n    if(n < m):\n        n, m = m, n\n    if(n==1 or m == 1):\n        print(n*(n-1))\n    else :\n        out = (n*m)*(n*m-1) - 4*((n-2)*(m-1) + (n-1)*(m-2))\n        print(out) \n"
                }
            ]
        },
        "RNDRND": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "5 3\n1 2 4",
                    "output": "3",
                    "explanation": "For first input,\nIf Chef chooses $x=3$, he will stop at 1, 4, 2 before delivering all the packages."
                },
                {
                    "input": "6 2\n3 4",
                    "output": "4",
                    "explanation": "For second,\nIf Chef chooses $x=1$, he will stop at 1, 2, 3, 4 before delivering all the packages."
                }
            ],
            "problem_statement": "In a Circular City, there are $n$ houses, numbered from 1 to n and arranged in 1,2,...,n,1,2,...\nChef needs to deliver packages to $m$ (m<=n) houses. \nChef is initially at house 1. Chef decides an integer $x$ and stops after every $x$ houses. i.e- if $n=7$ and $x=2$. He will stop at 1,3,5,7,2,... He may deliver a package when he stops at a house. His work is done when all the packages are delivered.\nWhat is the minimum number of times Chef has to stop, if he can choose any $x$ ?\nNote: Starting point (1) is also counted in number of stops\nInput:\n\nFirst line will contain $n, m$, denoting number of houses and number of packages respectively.\nNext line contains $m$ distinct space separated integers denoting the houses\n\nOutput:\nSingle line containing an integer denoting minimum number of stops.\nConstraints\n\n$3 \\leq n \\leq 1000$\n$1 \\leq m \\leq n$",
            "input_format": "",
            "output_format": "",
            "problem_name": "Go Round",
            "user_tags": [
                "1D Arrays",
                "ad-hoc",
                "Brute Force"
            ],
            "computed_tags": [
                "Data Structures",
                "Arrays",
                "Algorithms",
                "Constructive"
            ],
            "problem_code_id": "RNDRND",
            "difficulty_level": "1831",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 28418254,
                    "submission_date": 1576834426,
                    "language": "PYTH 3",
                    "username": "inder1997",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "4.29",
                    "memory": "17.5M",
                    "solution": 28418254,
                    "code": "m,n = map(int,input().split())\r\nt=[int(x) for x in input().split()]\r\nans=[]\r\nfor i in range(1,(m)):\r\n    td=t.copy()\r\n    k,cnt,l =1,1,[1]\r\n    while len(td)!=0:\r\n        if k in td:\r\n            td.remove(k)\r\n        if len(td)==0:\r\n            break\r\n        k+=i\r\n        cnt+=1\r\n        if k>m:\r\n            k=k-m\r\n        if k in l:\r\n            cnt=10000000000000\r\n            break\r\n        l.append(k)\r\n    ans.append(cnt)\r\n# print(ans)\r\nprint(min(ans))"
                },
                {
                    "id": 27940865,
                    "submission_date": 1574054191,
                    "language": "PYTH 3",
                    "username": "jedlimlx",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.26",
                    "memory": "17.6M",
                    "solution": 27940865,
                    "code": "n, m = map(int, input().split())\r\na = list(map(int, input().split()))\r\nmaximum = 1000000000000\r\nfinal = [False] * n\r\n\r\nfor i in a:\r\n    final[i - 1] = True\r\n\r\nfor j in range(1, n):\r\n    test = list(final)\r\n    total = 0\r\n    x = 0\r\n    index = 0\r\n    while x != m and total < maximum:\r\n        if test[index]:\r\n            x += 1\r\n            test[index] = False\r\n\r\n        index = (index + j) % n\r\n        total += 1\r\n\r\n    if total < maximum: maximum = total\r\n    if maximum == m: break\r\nprint(maximum)\r\n"
                }
            ]
        },
        "LUCKYBAL": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "4\n47\n74\n477\n4747477",
                    "output": "2\n2\n3\n23",
                    "explanation": "In the first test case balance substrings are S[1, 1] = 4 and S[1, 2] = 47.\nIn the second test case balance substrings are S[2, 2] = 4 and S[1, 2] = 74.\nUnfortunately, we can't provide you with the explanations of the third and the fourth test cases. You should figure it out by yourself. Please, don't ask about this in comments."
                }
            ],
            "problem_statement": "A Little Elephant from the Zoo of Lviv likes lucky strings, i.e., the strings that consist only of the lucky digits 4 and 7.\nThe Little Elephant calls some string T of the length M balanced if there exists at least one integer X (1 \u2264 X \u2264 M) such that the number of digits 4 in the substring T[1, X - 1] is equal to the number of digits 7 in the substring T[X, M]. For example, the string S = 7477447 is balanced since S[1, 4] = 7477 has 1 digit 4 and S[5, 7] = 447 has 1 digit 7. On the other hand, one can verify that the string S = 7 is not balanced.\n The Little Elephant has the string S of the length N. He wants to know the number of such pairs of integers (L; R) that 1 \u2264 L \u2264 R \u2264 N and the substring S[L, R]  is balanced. Help him to find this number.\nNotes.\nLet S be some lucky string. Then\n|S| denotes the length of the string S;\n\nS[i] (1 \u2264 i \u2264 |S|) denotes the ith character of S (the numeration of characters starts from 1);\n\n S[L, R] (1 \u2264 L \u2264 R \u2264 |S|) denotes the string with the following sequence of characters: S[L], S[L + 1], ..., S[R], and is called a substring of S. For L > R we mean by S[L, R] an empty string.\n\n\nInput\nThe first line of the input file contains a single integer T, the number of test cases. Each of the following T lines contains one string, the string S for the corresponding test case. The input file does not contain any whitespaces.\nOutput\nFor each test case output a single line containing the answer for this test case.\nConstraints\n 1 \u2264 T \u2264 10\n\n 1 \u2264 |S| \u2264 100000\n\n S consists only of the lucky digits 4 and 7.",
            "input_format": "",
            "output_format": "",
            "problem_name": "Little Elephant and Balance",
            "user_tags": [
                "Loops",
                "Basic Maths",
                "ad-hoc",
                "Observation",
                "Substring"
            ],
            "computed_tags": [
                "Data Structures",
                "Arrays",
                "Basic Programming Concepts",
                "Mathematics",
                "Algorithms",
                "Constructive",
                "Groupings"
            ],
            "problem_code_id": "LUCKYBAL",
            "difficulty_level": "1940",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 17977478,
                    "submission_date": 1522302971,
                    "language": "PYTH 3",
                    "username": "mukesh5",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.22",
                    "memory": "27.1M",
                    "solution": 17977478,
                    "code": "for i in range(int(input())):\n\tstring = input()\n\tpos = -1\n\tres = 0\n\n\tfor i in range(len(string)):\n\t\tif string[i] == '4':\n\t\t\tpos = i\n\t\tif pos != -1:\n\t\t\tres += pos + 1\n\n\tprint(res)\n"
                },
                {
                    "id": 14751143,
                    "submission_date": 1501579039,
                    "language": "PYTH 3",
                    "username": "code_daddu",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.23",
                    "memory": "27.7M",
                    "solution": 14751143,
                    "code": "for _ in range(int(input())):\n    s = input()\n\n    ind, ans = -1, 0\n\n    for i in range(len(s)):\n        if s[i] == '4':\n            ind = i\n\n        ans += ind+1\n\n    print(ans)    \n"
                }
            ]
        },
        "ICM2002": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "2   \n5 3  \n5 4 3 2 1  \n3 2  \n4 1 1",
                    "output": "YES  \nNO",
                    "explanation": ""
                }
            ],
            "problem_statement": "You are given an array $A$ consisting of $N$ Integers which are initially all $0$. You are also given an array $B$ consisting of $N$ Integers. You have to tell whether you can make $A$ equal to $B$ or not by performing the following operation any number of times.\nIn one operation you can choose exactly $K$ distinct indices in the array A and increase the value at these indices by $1$.\nInput:\n\nFirst line will contain $T$, the number of testcases. Then the testcases follow. \nEach testcase contains two lines of input. \nFirst line contains two Integers $N$ and $K$.\nSecond line contains $N$ Integers denoting array $B$. \n\nOutput:\nFor each testcase, output in a single line YES if $A$ can be converted to $B$, otherwise print NO.\nConstraints\n\n$1 \\leq T \\leq 1000$\n$1 \\leq N \\leq 10^5$\n$1 \\leq K \\leq N$\n$1 \\leq B[i] \\leq 10^9$\nSum of N over all Testcases does not exceed $10^6$.",
            "input_format": "",
            "output_format": "",
            "problem_name": "Are These Equal",
            "user_tags": [
                "ad-hoc",
                "Observation"
            ],
            "computed_tags": [
                "Algorithms",
                "Constructive"
            ],
            "problem_code_id": "ICM2002",
            "difficulty_level": "1973",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 90073425,
                    "submission_date": 1676902014,
                    "language": "PYTH 3",
                    "username": "kurashmi6",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.19",
                    "memory": "26.8M",
                    "solution": 90073425,
                    "code": "x=int(input())\r\nfor i in range(x):\r\n    a,b=map(int,input().split())\r\n    l=list(map(int,input().split()))\r\n    s=sum(l)\r\n    print('YES' if s%b==0 and s/b>=max(l) else 'NO')"
                },
                {
                    "id": 55726803,
                    "submission_date": 1641162647,
                    "language": "PYTH 3",
                    "username": "dscdsc",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.23",
                    "memory": "25.2M",
                    "solution": 55726803,
                    "code": "t = int(input())\n\nfor i in range(t):\n    n, k = map(int, input().split())\n    l = list(map(int, input().split()))\n    s = sum(l)\n    print('YES' if s % k == 0 and s / k >= max(l) else 'NO')"
                }
            ]
        },
        "GARGOYLE": {
            "constraints": "$1 \\leq N \\leq 1000$\n$Statement$$i$$[i]=T$",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "5\nT T F F F\nT T F F F\nT T T F F\nF F F T T\nF F F T T",
                    "output": "2",
                    "explanation": "In Sample 1\nWe can consider the $1st$ and $2nd$ person to be speaking the truth. We can also consider the $4th$ and the $5th$ person to be speaking the truth. \n$Note$: we cannot select $1st$ $2nd$ and $3rd$ person because the $1st$ and the second person have labelled the 3rd person as a false speaking person, therefore if we select all 3 contradiction will arise."
                },
                {
                    "input": "3\nT T T\nT T T\nF F T",
                    "output": "1",
                    "explanation": "In sample 2\nSet contains only the 3rd person"
                }
            ],
            "problem_statement": "There has been yet another murder in the Shady city of Riverdale. This murder is being investigated by none other than the Riverdale's Finest- Jughead Jones & Betty Cooper. This murder has been done exactly in the same manner as all the murders happening since the return of the deadly game Gargoyle &Griffins. Betty has decided to put an end to these murders, so they decide to interrogate each and every person in the neighbourhood.\nAs they don't know these people personally they want to first get to know about their character i.e whether a particular person is a $Truth-speaking-person$ or a $False-speaking-person$. Jughead devises a strategy of interrogating the civilians.\nJughead decides that they will collect statements from all the people in the neighbourhood about every other person living in the neighbourhood. Each person speaks a statement in form of an array consisting of $T$ and $ F$, which tells us what he thinks about the $ith$ person. Let there be $N$ people living in the neighbourhood. So if a person $i$ is giving his/her statement, he/her will always call himself/herself a True person i.e $Statement[i]=T$.\nSo Jughead says that they will select the $maximum$ $number$ of people that maybe speaking the truth such that their statements don't contradict and then interrogate them further about the murder.\nHelp them pick the max no. of Truth speaking people.\n$Note$- A person speaking $falsely$ doesn't mean that the complement of his statement would be the $truth$. If a person is declared $false$(i.e not included in the set) after Betty and Jughead pick their set of truth speaking people with non-contradicting statements, the person declared false might not be speaking $falsely$ about anyone(except saying he himself is a $true$ speaking person which contradicts with the selected statements) but since the selected Set of statements feels him to be a $false$ speaking person he won't be included in the set. \nBut if a person is tagged as $truth$ speaking person then their Statement must be entirely correct and should not contradict with the chosen set of $truth$ speaking people. All $truth$ speaking people mentioned in the selected statements should be part of the set and all the people declared $false$ in the statements shouldn't be part of the set.\nSee example for clarity.",
            "input_format": "First line will contain $N$, the number of people in the neighbourhood. Then the Statements of $ith$ person follow. \nEach Statement contains a single line of input, an array of length $N$ consisting of $T$ and $F$.",
            "output_format": "Print a single line denoting the maximum no. of people that might be speaking the truth.",
            "problem_name": "Return of the Gargoyle King",
            "user_tags": [
                "easy",
                "panik",
                "panik",
                "pelt2019"
            ],
            "computed_tags": [],
            "problem_code_id": "GARGOYLE",
            "difficulty_level": "1861",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 22491023,
                    "submission_date": 1547540624,
                    "language": "PYTH 3",
                    "username": "saarang123",
                    "user_rating_star": 3,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.09",
                    "memory": "18.6M",
                    "solution": 22491023,
                    "code": "from collections import Counter\r\n\r\nn = int(input())\r\narr = []\r\nfor i in range(n):\r\n    s = map(str,input().split())\r\n    arr.append(\"\".join(s))\r\n\r\nc = Counter(arr)\r\nkeys = list(c.keys())\r\nans = []\r\n\r\nfor item in keys:\r\n    x = c[item]\r\n    if x == item.count(\"T\"):\r\n        ans.append(x)\r\n\r\nif len(ans) != 0:\r\n    print(max(ans))\r\nelse:\r\n    print(0)"
                },
                {
                    "id": 22391056,
                    "submission_date": 1547144913,
                    "language": "PYTH 3",
                    "username": "sayan_000",
                    "user_rating_star": 2,
                    "contest_code": "PELT2019",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.60",
                    "memory": "23.9M",
                    "solution": 22391056,
                    "code": "def dec(x):\n    x=x[::-1];c=0\n    #print(x)\n    for i in range(len(x)):\n        if x[i]=='T':\n            c+=pow(2,i)\n    return c\na=[]\nfor _ in range(int(input())):\n    a.append(input().split())\n#print(a)\nb=[];m=0\nfor i in a:\n    x=''.join(i)\n    b.append(dec(x))\nfor i in range(len(a)):\n    g=b[i];c=1;k=0\n    for j in range(len(a)):\n        if a[i][j]=='T' and i!=j:\n            k+=1\n        if a[i][j]=='T' and b[j]==g and i!=j:\n            c+=1\n    if k+1==c:    \n        m=max(m,c)\n        \nprint(m)\n"
                }
            ]
        },
        "GOHAN": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "2\n4 5 78 60\n4 5 6 3",
                    "output": "-61.4\n-3.8",
                    "explanation": ""
                }
            ],
            "problem_statement": "Gohan has found his way into Dr. Gero's lab. There, he finds a circuit. He starts to toy with it. He finds the inverse transverse function $(V_{in}/V_{out})$ i.e (itf) of the circuit. \n\nDr. Gero finds out about this. He gives Gohan an $s$-controller, through which he can randomly change the values of $s$. He finds out that each value of itf can be achieved through multiple values of $s$. But for a single particular value of itf, he finds out that this is not true. That is, just for this particular value of itf, there is only a single value of $s$ which achieves it. \nTo avoid punishment, Gohan must complete a task given to him by Dr.Gero, which is to find this particular value of itf. He needs your help in doing that.\nHINT to solve these type of circuits. In these circuits, the capacitor and the inductor can be treated as normal resistors, with resistances as follows: The resistance of inductor is directly taken as (s * L) and that of capacitor is 1/(s * C).\nInput:\n\nThe first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\nThe first and only line of each test case contains 4 integers $R, L, C, V_{in}$, separated by single spaces. \n\nOutput:\nFor each test case, print a single line containing the answer. Your answer will be judged right if it is at most $10^{-2}$ away from the correct answer.\nConstraints\n\n$1 \\leq T \\leq 2$\n$1 \\leq R \\leq 10^5$\n$1 \\leq L \\leq 10^5$\n$1 \\leq C \\leq 10^5$\n$1 \\leq V_{in} \\leq 10^9$",
            "input_format": "",
            "output_format": "",
            "problem_name": "Dr Geros lab",
            "user_tags": [
                "chigu"
            ],
            "computed_tags": [],
            "problem_code_id": "GOHAN",
            "difficulty_level": "1889",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 89670637,
                    "submission_date": 1676532448,
                    "language": "PYTH 3",
                    "username": "rs5228127",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.02",
                    "memory": "9.7M",
                    "solution": 89670637,
                    "code": "t = int(input())\r\nfor _ in range(t):\r\n  r, l, c, lol = [float(a) for a in input().split()]\r\n  R = r\r\n  C = c\r\n  L = l\r\n  val = -(R)/(2*L)\r\n  ans = val * val * L * C + 1 + R * val * c\r\n  print(ans) "
                },
                {
                    "id": 18954804,
                    "submission_date": 1529515734,
                    "language": "PYTH 3",
                    "username": "tejkiran_v",
                    "user_rating_star": 4,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.02",
                    "memory": "27.7M",
                    "solution": 18954804,
                    "code": "t=int(input())\nwhile(t):\n    t-=1\n    r,l,c,v=list(map(int,input().split()))\n    print(1-c*r*r/(4*l))"
                }
            ]
        },
        "CLBATH": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "3\n5 10 5 20 8 15\n5 10 5 20 1 30\n5 10 5 20 5 20",
                    "output": "YES\nNO\nYES",
                    "explanation": "Case 1: Mixing all the water in both buckets yields 10 volume of water at temperature 15, which is more than the required 8.\nCase 2: It is not possible to get water at 30 temperature.\nCase 3: Chef can take a bath using only the water in the second bucket."
                }
            ],
            "problem_statement": "It's winter and taking a bath is a delicate matter. Chef has two buckets of water. The first bucket has $v_1$ volume of cold water at temperature $t_1$. The second has $v_2$ volume of hot water at temperature $t_2$. Chef wants to take a bath with at least $v_3$ volume of water which is at exactly $t_3$ temperature. To get the required amount of water, Chef can mix some water obtained from the first and second buckets.\nMixing $v_x$ volume of water at temperature $t_x$ with $v_y$ volume of water at temperature $t_y$ yields $v_x + v_y$ volume of water at temperature calculated as\n$$\\frac{v_x t_x + v_y t_y}{v_x + v_y}$$\nHelp Chef figure out if it is possible for him to take a bath with at least $v_3$ volume of water at temperature $t_3$.\nAssume that Chef has no other source of water and that no heat is lost by the water in the buckets with time, so Chef cannot simply wait for the water to cool.\nInput\n\nThe first line contains $n$, the number of test cases. $n$ cases follow.\nEach testcase contains of a single line containing 6 integers $v_1, t_1, v_2, t_2, v_3, t_3$.\n\nOutput\n\nFor each test case, print a single line containing \"YES\" if Chef can take a bath the way he wants and \"NO\" otherwise.\n\nConstraints\n\n$1 \\leq n \\leq 10^5$\n$1 \\leq v_1, v_2, v_3 \\leq 10^6$\n$1 \\leq t_1 < t_2 \\leq 10^6$\n$1 \\leq t_3 \\leq 10^6$",
            "input_format": "",
            "output_format": "",
            "problem_name": "Bathwater",
            "user_tags": [
                "Basic Maths",
                "Linear Algebra"
            ],
            "computed_tags": [
                "Mathematics",
                "Algebra"
            ],
            "problem_code_id": "CLBATH",
            "difficulty_level": "1831",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 28047367,
                    "submission_date": 1575441925,
                    "language": "PYTH 3",
                    "username": "sonushahuji4",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.69",
                    "memory": "17.6M",
                    "solution": 28047367,
                    "code": "for _ in range(int(input())):\n    v1,t1,v2,t2,v3,t3 = map(int,input().split())\n    x = t2 - t3\n    y = t3 - t1\n    if t1 <= t3 <= t2:\n        if x*v3<=(x+y)*v1 and y*v3<=(x+y)*v2:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    else:\n        print(\"NO\")"
                },
                {
                    "id": 24452161,
                    "submission_date": 1559408614,
                    "language": "PYTH 3",
                    "username": "francotirador",
                    "user_rating_star": 3,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.61",
                    "memory": "17.6M",
                    "solution": 24452161,
                    "code": "import sys\r\n\r\nt = int(input())\r\n\r\nwhile (t):\r\n\r\n\tline = input().split()\r\n\tv1,t1, v2,t2, v3,t3 = int(line[0]),int(line[1]), int(line[2]),int(line[3]), int(line[4]),int(line[5])\r\n\r\n\tif (t3 < t1 or t3 > t2):\r\n\t\tsys.stdout.write('NO\\n')\r\n\telse:\r\n\t\tif (v3*(t3-t2)/(t1-t2) > v1):\r\n\t\t\tsys.stdout.write('NO\\n')\r\n\t\telif (v3*(t1-t3)/(t1-t2) > v2):\t\r\n\t\t\tsys.stdout.write('NO\\n')\r\n\t\telse:\r\n\t\t\tsys.stdout.write('YES\\n')\r\n\r\n\tt -= 1"
                }
            ]
        },
        "XDS": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "1\n9",
                    "output": "XXXDDD",
                    "explanation": "Some of the possible strings are - XXDDDXD,XXXDDD,XDXXXDD,XDXDXDD etc. Of these, XXXDDD is the smallest."
                }
            ],
            "problem_statement": "Problem description.\n\u00a0Winston and Royce love sharing memes with each other. They express the amount of seconds they laughed ar a meme as the number of \u2018XD\u2019 subsequences in their messages. Being optimization freaks, they wanted to find the string with minimum possible length and having exactly the given number of \u2018XD\u2019 subsequences.\n\nInput\nThe first line of the input contains an integer T denoting the number of test cases.\nNext T lines contains a single integer N, the no of seconds laughed.\n\n\nOutput\n\nFor each input, print the corresponding string having minimum length. If there are multiple possible answers, print any.\n\n\nConstraints\n1 \u2264 T \u2264 1000\n1 \u2264 N \u2264 109\n1 \u2264 Sum of length of output over all testcases \u2264 5*105",
            "input_format": "",
            "output_format": "",
            "problem_name": "XD Subsequences",
            "user_tags": [
                "Case work",
                "Modular Arithmetic",
                "Basic Maths",
                "ad-hoc",
                "Observation",
                "Subsequence"
            ],
            "computed_tags": [
                "Data Structures",
                "Arrays",
                "Special",
                "Mathematics",
                "Algorithms",
                "Constructive",
                "Groupings"
            ],
            "problem_code_id": "XDS",
            "difficulty_level": "1813",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 89416283,
                    "submission_date": 1676456676,
                    "language": "PYTH 3",
                    "username": "rs5228127",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.03",
                    "memory": "9.8M",
                    "solution": 89416283,
                    "code": "import math as mt\r\ntest_case=int(input())\r\nfor test in range(test_case):\r\n    n = int(input());\r\n    x = int(mt.sqrt(n));\r\n    remainder = n - x * x\r\n    x1 = x2 = d1 = 0\r\n    x1 += x\r\n    x1 += remainder // x\r\n    remainder = n % x\r\n    string = \"X\" * x1 + \"D\" * (x - remainder) + \"X\"*(remainder>0) + \"D\" *(remainder)\r\n    print(string)"
                },
                {
                    "id": 74319968,
                    "submission_date": 1663341669,
                    "language": "PYTH 3",
                    "username": "mithun_77",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.06",
                    "memory": "11.3M",
                    "solution": 74319968,
                    "code": "a = [1]\r\nfrom random import *\r\n\r\nfor t in range(int(input())):\r\n    n = int(input())\r\n    i = 1\r\n    while i * i < n:\r\n        i += 1\r\n    x = [\"X\"] * i\r\n    d = [\"D\"] * i\r\n\r\n    w = i * i - n\r\n    if w <= i:\r\n        x = x[:i - w] + [\"D\"] + x[i - w:]\r\n        d.pop()\r\n    elif 2 * i > w > i:\r\n        d.pop()\r\n        x.pop()\r\n        w -= i\r\n        d = d[:w] + [\"X\"] + d[w:]\r\n    ans=\"\".join(x + d)\r\n    if ans[0]==\"D\":\r\n        ans=ans[1:]\r\n    print(ans)"
                }
            ]
        },
        "GRUBAN": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "1\n6 3",
                    "output": "1",
                    "explanation": "The only possible distribution is $[1, 2, 3]$. So the answer is 1."
                }
            ],
            "problem_statement": "Gru wants to distribute $N$ bananas to $K$ minions on his birthday.\nGru does not like to just give everyone the same number of bananas, so instead, he wants to distribute bananas in such a way that each minion gets a $distinct$ amount of bananas. That is, no two minions should get the same number of bananas.\nGru also loves $gcd$. The higher the $gcd$, the happier Gru and the minions get. So help Gru in distributing the bananas in such a way that each Minion gets a distinct amount of bananas and gcd of this distribution is highest possible. Output this maximum gcd. If such a distribution is not possible output $-1$.\nNote: You have to distribute $all$ $N$ bananas. \nInput:\n\nFirst line will contain $T$, number of testcases. Then the testcases follow. \nEach testcase consists of a single line of input, which has two integers: $N, K$. \n\nOutput:\nFor each testcase, output in a single line the maximum gcd or -1.\nConstraints\n\n$1 \\leq T \\leq 100$\n$1 \\leq N, K \\leq 10^9$",
            "input_format": "",
            "output_format": "",
            "problem_name": "Gru is Handing Out Bananas",
            "user_tags": [
                "GCD",
                "Divisors"
            ],
            "computed_tags": [
                "Mathematics",
                "Number Theory",
                "Integer Factorisation"
            ],
            "problem_code_id": "GRUBAN",
            "difficulty_level": "1837",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 89424796,
                    "submission_date": 1676462375,
                    "language": "PYTH 3",
                    "username": "rs5228127",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.13",
                    "memory": "9.7M",
                    "solution": 89424796,
                    "code": "\r\nfrom math import sqrt, floor\r\ndef T(N):\r\n    A=[]\r\n    for i in range(1, floor(sqrt(N))+1):\r\n        if N%i==0:\r\n            if N//i==i:\r\n                A.append(i)\r\n            else:\r\n                A.append(i)\r\n                A.append(N//i)\r\n    return A \r\na=int(input())\r\nfor i in range(a):\r\n    N, K=map(int, input().split())\r\n    A=T(N)\r\n    if N<(K*(K+1))//2:\r\n        print(-1)\r\n    else:\r\n        B=[]\r\n        for j in A:\r\n            if N//j>=(K*(K+1))//2:\r\n                B.append(j)\r\n        b=max(B)\r\n        print(b)"
                },
                {
                    "id": 75666831,
                    "submission_date": 1664481826,
                    "language": "PYTH 3",
                    "username": "reva_26",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.47",
                    "memory": "9.6M",
                    "solution": 75666831,
                    "code": "\r\nfrom math import sqrt \r\nt = int(input())\r\n\r\nfor i in range(t):\r\n    n, k = map(int, input().split())\r\n    f, c = [], 1\r\n    while c <= sqrt(n):\r\n        if n % c == 0:\r\n            if n // c != c:\r\n                f.append(n // c)\r\n            f.append(c)\r\n        c += 1\r\n    s = (k * (k + 1)) // 2\r\n    m = -1\r\n    for c in f:\r\n        if c >= s:\r\n            m = max(m, n // c)\r\n    print(m)"
                }
            ]
        },
        "CALCULUS": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "1",
                    "output": "2",
                    "explanation": ""
                }
            ],
            "problem_statement": "Read problem statements in Hindi, Bengali, Mandarin Chinese, Russian, and Vietnamese as well.\nYou are given one positive integer $N$. Calculate\n$$\\int_{0}^{\\infty} \\frac{e^{2 \\pi x} - 1}{e^{2 \\pi x} + 1} \\left(\\frac{1}{x} - \\frac{x}{N^2 + x^2}\\right) \\,\\mathrm{d}x \\,.$$\nIt is possible to prove that its value can be written as a fraction $\\frac{a}{b}$, where $a$ and $b$ are positive integers and $b$ is coprime with $998,244,353$. You need to find $a \\cdot b^{-1}$ modulo $998,244,353$, where $b^{-1}$ denotes the multiplicative inverse of $b$ modulo $998,244,353$.\nInput\nThe first and only line of the input contains a single integer $N$.\nOutput\nPrint a single line containing one integer $a \\cdot b^{-1}$ modulo $998,244,353$.\nConstraints\n\n$1 \\le N \\le 10^6$\n\nSubtasks\nSubtask #1 (1 point): $N = 2$\nSubtask #2 (1 point): $N = 3$\nSubtask #3 (98 points): original constraints",
            "input_format": "",
            "output_format": "",
            "problem_name": "Calculus",
            "user_tags": [
                "FFT",
                "Integration"
            ],
            "computed_tags": [
                "Mathematics",
                "Transformations",
                "Calculus"
            ],
            "problem_code_id": "CALCULUS",
            "difficulty_level": "1943",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 1016965891,
                    "submission_date": 1693322352,
                    "language": "PYTH 3",
                    "username": "csfsnake",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.32",
                    "memory": "7.7M",
                    "solution": 1016965891,
                    "code": "MD = 998244353\r\nN = int(input())\r\na = 2\r\nb = 1\r\nfor n in range(2,N+1):\r\n\ta,b = (a*(2*n-1) + 2*b)%MD, b*(2*n-1)%MD\r\n# endfor n\r\nbd = pow(b,MD-2,MD)\r\nr = a*bd%MD\r\nprint (r)\r\n"
                },
                {
                    "id": 67753701,
                    "submission_date": 1656364570,
                    "language": "PYTH 3",
                    "username": "likhitha207",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.02",
                    "memory": "9.2M",
                    "solution": 67753701,
                    "code": "\r\nn=int(input())\r\nif(n==2):\r\n    print(\"665496238\")\r\nelif(n==3):\r\n    print(\"865145109\")\r\nelif(n==999999):\r\n    print(\"989271733\")\r\nelif(n==(10**6)):\r\n    print(\"568817989\")"
                }
            ]
        },
        "ALETHIO": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "06454",
                    "output": "6454",
                    "explanation": "In the first example, there is no choice as to what the number can be. It has to be 6,454."
                },
                {
                    "input": "C0D3C43F",
                    "output": "3943",
                    "explanation": "In the second example, there are a total of 41 possible strings (one for the original, and 10 for changing each letter). You can verify that the maximum number as a substring is got by making the string \"C0D3943F\"."
                }
            ],
            "problem_statement": "Lyra Belacqua is a very gifted girl. She is one of a very small set of people capable of reading an alethiometer, more commonly known as The Golden Compass. It has one specific use: to tell the truth. The name in fact, is derived from \"Aletheia\" meaning truth, and \"-ometer\", meaning \"measuring device\".\n\n\nThe alethiometer had four needles, out of which the user would direct three of them to lie over symbols on the face of the device to ask a question. The fourth needle then swung into action and pointed to various symbols one after another, thus telling the answer.\n\n\nFor this problem, consider the alethiometer consisting of symbols : digits '0'-'9' and letters 'A'-'Z'. Learned scholars were debating the age of the Universe, and they requested Lyra to find out the age from the alethiometer. Having asked the question, the fourth needle started spouting out symbols, which Lyra quickly recorded. In that long string of characters, she knows that some substring corresponds to the age of the Universe. She also knows that the alethiometer could have wrongly pointed out atmost one digit (0-9) as a letter (A-Z). She then wonders what is the maximum possible age of the Universe.\n\n\nGiven the set of symbols the alethiometer pointed out, help her find the maximum age of the Universe, which could correspond to a substring of the original string with atmost one letter changed.\n\n\nNote: We consider a substring to be a contiguous part of the string S \nAlso, the alethiometer wrongly reports only a letter. All the digits remain as they are.\n\nInput\n\nEach input consists of a single string S which is what Lyra recorded from the fourth needle's pointing.\n\nOutput\n\nOutput one number, the maximum possible answer.\n\nConstraints\n 1  \u2264 |S|  \u2264 1,000\n S will only contain digits 0-9 and uppercase Latin letters.",
            "input_format": "",
            "output_format": "",
            "problem_name": "Lyra and the Alethiometer",
            "user_tags": [
                "Brute Force"
            ],
            "computed_tags": [
                "Algorithms"
            ],
            "problem_code_id": "ALETHIO",
            "difficulty_level": "1865",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 2411721,
                    "submission_date": 1375108689,
                    "language": "PYTH 3",
                    "username": "tsasaki",
                    "user_rating_star": 3,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.05",
                    "memory": "4M",
                    "solution": 2411721,
                    "code": "import sys\n\ndef change(s):\n    a = ''.join(['9' if 'A'<=x and x<='Z' else x for x in s])\n    return int(a) \n\ndef calc(S):\n    s = 0\n    t = 0\n    numAlpha = 0\n    ans = 0\n    while True:\n        while numAlpha < 2 and s < len(S):\n            if 'A' <= S[s] and S[s] <= 'Z':\n                numAlpha += 1\n            s += 1\n        if numAlpha < 2:\n            ans = max(ans, change(S[t:s]))\n            break\n        ans = max(ans, change(S[t:s-1]))\n        if 'A' <= S[t] and S[t] <= 'Z':\n            numAlpha -= 1\n        t += 1\n    return ans\n\ndef solve(f, output):\n    output.write('{0}\\n'.format(calc(f.readline().strip())))\n    \nif __name__ == '__main__':\n    solve(sys.stdin, sys.stdout)\n"
                },
                {
                    "id": 2300156,
                    "submission_date": 1372408519,
                    "language": "PYTH 3",
                    "username": "nitish19",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.56",
                    "memory": "5.6M",
                    "solution": 2300156,
                    "code": "p = input()\nif(len(p)>=1 and len(p)<=1000):     \n    i = 0\n    k = 0\n    x = 0\n    m = 0\n    while(i < len(p)):\n        if(p[i].isdigit()):\n            j = i\n            c = ''\n            k = 0\n            if(i > 0):\n                if(p[i-1].isalpha()):\n                    c = c+'9'\n                    k=1\n                    if(i>1 and p[i-2].isdigit()):\n                        c = p[i-2] + c\n                if(p[i-1].isdigit() and int(p[i-1]!=0)):\n                    c = c + p[i-1]\n            while(i<len(p)):\n                if(p[i].isdigit()):\n                    c = c + p[i]\n                if(p[i].isalpha()):\n                    if(k==1):\n                        break\n                    k = 1\n                    c = c + '9'\n                i = i+1\n            if(int(c) > x):\n                x = int(c)\n            i = j\n        else:\n            m = m+1\n        i= i+1\n    if(x==0 and m==len(p)):\n        print(9)\n    else:\n        print(x)"
                }
            ]
        },
        "ICL1901": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "1\n123 5",
                    "output": "27",
                    "explanation": ""
                }
            ],
            "problem_statement": "You were strolling outside the restaurant at the end of the universe. On a metaspiral path you stumble upon a weird device which takes a three-digit number as input and processes it. The Hitchhiker's guide to the galaxy explains that it processes the input in the following manner: \n\nMultiplies it with 13, followed by 11 and then 7          \nOutputs all the distinct three-digit numbers possible from the digits of the new number (each digit can only be used once)          \n\nYour friend Zaphod is in a playful mood, and does the following with the device-         \n- Given a three-digit positive number $K$, he feeds it to the device for processing.        \n- He then takes the numbers it gives as output, and send each of them through the device and again collect all the numbers sent out.        \n- Repeats the above step $N$ times.          \nTo test your wit, he challenges you to find the number of distinct 3-digit numbers which the device outputs over the $N$ steps. Can you?\nInput:\n\nFirst line will contain $T$, number of testcases. Then the testcases follow.\nEach testcase contains of a single line of input, two integers $K, N$.\n\nOutput:\nFor each testcase, output a single integer denoting the number of distinct 3-digit numbers which the device outputs over the $N$ steps.\nConstraints\n\n$1 \\leq T \\leq 1000$          \n$5 \\leq N \\leq 10^9$          \nEach digit of $K$ is non-zero",
            "input_format": "",
            "output_format": "",
            "problem_name": "A Weird Device",
            "user_tags": [
                "Observation"
            ],
            "computed_tags": [
                "Algorithms"
            ],
            "problem_code_id": "ICL1901",
            "difficulty_level": "1810",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 29807685,
                    "submission_date": 1582132454,
                    "language": "PYTH 3",
                    "username": "shreyansh2809",
                    "user_rating_star": 3,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.02",
                    "memory": "17.6M",
                    "solution": 29807685,
                    "code": "t=int(input())\nwhile t:\n    t=t-1\n    k,n=map(int,input().split())\n    a=[]\n    while k!=0:\n        x=k%10\n        if x not in a:\n            a.append(x)\n            \n        k=k//10\n            \n    print(len(a)**3)"
                },
                {
                    "id": 26132109,
                    "submission_date": 1566998715,
                    "language": "PYTH 3",
                    "username": "ritvik19",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.02",
                    "memory": "17.6M",
                    "solution": 26132109,
                    "code": "for t in range(int(input())):\r\n    n, k = input().split()\r\n    _ = len(set(list(n)))\r\n    if _ == 3:\r\n        print(27)\r\n    elif _ == 2:\r\n        print(8)\r\n    else:\r\n        print(1)\r\n"
                }
            ]
        },
        "CHEFTEAM": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "3\n2 1\n3 3\n10 5",
                    "output": "2\n1\n252",
                    "explanation": ""
                }
            ],
            "problem_statement": "Chef has N subordinates. In order to complete a very important order he will choose exactly K of them. He can't choose less than K since it will be not enough to complete the order in time. On the other hand if he chooses more than K subordinates he can't control them during the operation. Help him to find the number of ways he can choose the team to complete this very important order.\n\n\nInput\n The first line contains a single positive integer T , the number of test cases. T test cases follow. The only line of each test case contains two integers N and K, where 0 . It is guaranteed that the answer will be less than 2^64.\n\n\nOutput\n For each test case, output a single line containing the number of ways to choose the required team.",
            "input_format": "",
            "output_format": "",
            "problem_name": "Chef team",
            "user_tags": [
                "Combinatorics"
            ],
            "computed_tags": [
                "Mathematics"
            ],
            "problem_code_id": "CHEFTEAM",
            "difficulty_level": "1884",
            "ai_solutions": [
                "from math import comb\n\ndef number_of_ways(T, test_cases):\n    for i in range(T):\n        N, K = test_cases[i]\n        print(comb(N, K))\n\nT = int(input())\ntest_cases = []\nfor _ in range(T):\n    N, K = map(int, input().split())\n    test_cases.append((N, K))\n\nnumber_of_ways(T, test_cases)",
                "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\ndef number_of_ways(T, test_cases):\n    for i in range(T):\n        N, K = test_cases[i]\n        print(factorial(N) // (factorial(K) * factorial(N - K)))\n\nT = int(input())\ntest_cases = []\nfor _ in range(T):\n    N, K = map(int, input().split())\n    test_cases.append((N, K))\n\nnumber_of_ways(T, test_cases)"
            ],
            "human_solutions": [
                {
                    "id": 21974963,
                    "submission_date": 1544987494,
                    "language": "PYTH 3",
                    "username": "ykaran86",
                    "user_rating_star": 3,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.01",
                    "memory": "17.5M",
                    "solution": 21974963,
                    "code": "from math import factorial as fact\r\nimport operator as op\r\nfrom functools import reduce\r\n\r\ndef ncr(n, r):\r\n    r = min(r, n-r)\r\n    numer = reduce(op.mul, range(n, n-r, -1), 1)\r\n    denom = reduce(op.mul, range(1, r+1), 1)\r\n    return numer // denom\r\n\r\nfor _ in range(int(input())):\r\n    N,K=list(map(int,input().split()))\r\n    if(N<K):\r\n        print(0)\r\n    else:\r\n        print(ncr(N,K))\r\n"
                },
                {
                    "id": 20268801,
                    "submission_date": 1537597763,
                    "language": "PYTH 3",
                    "username": "bhavik07",
                    "user_rating_star": 4,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.01",
                    "memory": "17.6M",
                    "solution": 20268801,
                    "code": "import functools\r\ndef ncr(n,r):\r\n    r=min(r,n-r)\r\n    a=functools.reduce(lambda x,y: x*y, range(n,n-r,-1),1)\r\n    b=functools.reduce(lambda x,y: x*y, range(1,r+1),1)\r\n    return a//b\r\nt=int(input())\r\nfor _ in range(t):\r\n    n,k=map(int,input().split())\r\n    if (k>n):\r\n        print(0)\r\n    else:\r\n        print(ncr(n,k))\r\n"
                }
            ]
        },
        "DIVGOLD": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "2\n4\nDCBA\n7\nXYZZYZZ",
                    "output": "ADCB\nXYYZZZZ",
                    "explanation": "Example case 1. The optimal solution here is to choose the last character and put it in the beginning of the string. So the answer will be ADCB\nExample case 2. The optimal solution here is to choose the 5-th character (1-based index) and put it between the 2-nd and the 3-rd characters. So the answer will be XYYZZZZ"
                }
            ],
            "problem_statement": "Read problems statements in Mandarin Chinese and Russian as well.\n\nYou have a string S consisting of N uppercase English letters. You are allowed to perform at most one operation of following kind: Choose any position in the string, remove the character at that position and insert it back to any other place in the string.\n\n\nFind the  lexicographically smallest  string you can achieve.\n\nInput\nThe first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows.\nThe first line of each test case contains the single integer N denoting length of string S.\nThe second line contains the string S.\nOutput\nFor each test case, output a single line containing the answer to the corresponding test case.\nConstraints\n\n1 \u2264 T \u2264 50\n1 \u2264 N \u2264 50\nS will consist of uppercase English letters.",
            "input_format": "",
            "output_format": "",
            "problem_name": "How to Minimize a String",
            "user_tags": [
                "String",
                "Brute Force"
            ],
            "computed_tags": [
                "Data Structures",
                "Algorithms"
            ],
            "problem_code_id": "DIVGOLD",
            "difficulty_level": "1961",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 36093524,
                    "submission_date": 1596016893,
                    "language": "PYTH 3",
                    "username": "saitillu25",
                    "user_rating_star": 4,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.07",
                    "memory": "17.6M",
                    "solution": 36093524,
                    "code": "for _1 in range(int(input())):\r\n    n=int(input())\r\n    s=input().strip()\r\n    answer=s\r\n    for i in range(len(s)):\r\n        c=s[i]\r\n        string=s[:i]+s[i+1:]\r\n        for j in range(len(string)+1):\r\n            answer=min(answer, string[:j]+c+string[j:])\r\n    print(answer)"
                },
                {
                    "id": 28608548,
                    "submission_date": 1577972482,
                    "language": "PYTH 3",
                    "username": "ashokshaun",
                    "user_rating_star": 4,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.02",
                    "memory": "17.6M",
                    "solution": 28608548,
                    "code": "for _ in range(int(input())):\r\n    n=int(input())\r\n    #s=input() \r\n    mini=[\"z\"]*100\r\n    s=list(input().strip())\r\n   # n=len(s)\r\n    ans=min(mini,s)\r\n    t=s[:]\r\n    for i in range(n):\r\n        #remove s[i]\r\n        curr=s[i]\r\n        f=0\r\n        ind=0 \r\n        temp=s[i]\r\n        for j in range(i):\r\n            if s[j]>curr:\r\n                s.pop(i)\r\n                s.insert(j,temp)\r\n                ans=min(ans,s)\r\n                break \r\n        s=t[:]  \r\n       # print(s)\r\n    for i in range(n):\r\n        #remove s[i]\r\n        curr=s[i]\r\n        f=0\r\n        ind=n-1 \r\n        temp=s[i]\r\n        for j in range(i+1,n):\r\n            if s[j]>curr:\r\n                s.pop(i)\r\n                s.insert(j-1,temp)\r\n                ans=min(ans,s)\r\n                break \r\n        else:\r\n            s.pop(i)\r\n            s.insert(n-1,temp)\r\n            ans=min(ans,s)\r\n        s=t[:] \r\n    #ans=min(pzbl)\r\n    print(*ans,sep='')\r\n    "
                }
            ]
        },
        "BUCKETS": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "2 2\n0 1\n1 1",
                    "output": "0.333333 0.666667",
                    "explanation": ""
                }
            ],
            "problem_statement": "Read problems statements Mandarin , Bengali , Hindi , Russian and Vietnamese as well.\nThere are $N$ buckets numbered $1$ through $N$. The buckets contain balls; each ball has a color between $1$ and $K$. Let's denote the number of balls with color $j$ that are initially in bucket $i$ by $a_{i, j}$.\nFor each $i$ from $1$ to $N-1$ (in this order), someone draws a ball uniformly at random from bucket $i$ and puts it into bucket $i+1$, then continues to draw the next ball. After putting a ball in bucket $N$, this person draws a ball, again uniformly at random, from bucket $N$.\nFor each color from $1$ to $K$, find the probability that the ball drawn from bucket $N$ has this color.\nInput\n\nThe first line of the input contains two space-separated integers $N$ and $K$. \n$N$ lines follow. For each $i$ ($1 \\le i \\le N$), the $i$-th of these lines contains $K$ space-separated integers $a_{i, 1}, a_{i, 2}, \\ldots, a_{i, K}$.\n\nOutput\nPrint a single line containing $K$ space-separated real numbers. For each valid $i$, the $i$-th of these numbers should denote the probability that the last drawn ball has color $i$. your answer will be considered correct if absolute or relative error does not exceed $10^{-6}$\nConstraints\n\n$1 \\le N, K \\le 1,000$\n$0 \\le a_{i, j} \\le 10$ for each valid $i, j$\ninitially, there is at least one ball in bucket $1$\n\nSubtasks\nSubtask #1 (30 points): $1 \\le N, K \\le 100$\nSubtask #2 (70 points): original constraints",
            "input_format": "",
            "output_format": "",
            "problem_name": "Choosing from Buckets",
            "user_tags": [
                "Probability",
                "Dynamic Programming"
            ],
            "computed_tags": [
                "Mathematics",
                "Algorithms"
            ],
            "problem_code_id": "BUCKETS",
            "difficulty_level": "1871",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 26846260,
                    "submission_date": 1569696671,
                    "language": "PYTH 3",
                    "username": "rkaiser",
                    "user_rating_star": 4,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.43",
                    "memory": "17.7M",
                    "solution": 26846260,
                    "code": "\"\"\"\n  Url: https://www.codechef.com/problems/BUCKETS\n\"\"\"\n\n\n__author__ = \"Ronald Kaiser\"\n__email__ = \"raios dot catodicos at gmail dot com\"\n\n\nN, K = map(int, input().split())\na = list(map(int, input().split())) \ns = sum(a)\np = list(map(lambda v: v/s, a)) \nfor _ in range(N-1):\n    a = list(map(int, input().split())) \n    s = []\n    sa = sum(a) + 1\n    for i in range(K):\n        s.append((p[i]*((a[i] + 1)/sa) + (1 - p[i])*(a[i]/sa)))\n    p = s\nprint(*p)\n"
                },
                {
                    "id": 24275614,
                    "submission_date": 1557880119,
                    "language": "PYTH 3",
                    "username": "cs18b012",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.56",
                    "memory": "24.5M",
                    "solution": 24275614,
                    "code": "N,K = map(int,input().split(\" \"))\n\n\nball =[]\nfor i in range(N):\n    ball.append(list(map(int,input().split(' '))))\n\nprob =[[0 for i in range(K)] for j in range(N)]\n\nfor i in range(N):\n    temp = 0\n    for j in range(K):\n        temp += ball[i][j]\n    ball[i].append(temp)\n\nfor i in range(K):\n    prob[0][i] = ball[0][i]/ball[0][K]\n\nfor i in range(1,N):\n    c = ball[i][K]\n    for j in range(0,K):\n        b = ball[i][j]\n        prob[i][j] = (b + prob[i-1][j])/(c+1)\n    \n\n# print(ball)\n\n# print(\"jeiasjf\")\n\n# print(prob)\n\nfor i in range(K):\n    print(\"%.6f\" % prob[N-1][i] , end=\" \")\n# print(*prob[N-1])"
                }
            ]
        },
        "STEM": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "1\n4\ngrace graceful disgraceful gracefully",
                    "output": "grace",
                    "explanation": "The stem is grace."
                }
            ],
            "problem_statement": "Read problems statements in Mandarin Chinese and Russian as well.\n\nGiven n words w[1..n], which originate from the same stem (e.g. grace, graceful, disgraceful, gracefully), we are interested in the original stem. To simplify the problem, we define the stem as the longest consecutive substring that occurs in all the n words. If there are ties, we will choose the smallest one in the alphabetical (lexicographic) order.\n\nInput\nThe first line contains an integer T denoting the total number of test cases.\nIn each test cases, the first line contains an integer n denoting the number of words. In the second line, n words w[1..n] consisting of lower case characters are given as a single space-spearated list.\nOutput\nFor each test case, output the stem in a new line.\nConstraints\n\n1 T 10\n1 n 10\n1 w[i]| 20",
            "input_format": "",
            "output_format": "",
            "problem_name": "Word Stem",
            "user_tags": [
                "String",
                "Brute Force"
            ],
            "computed_tags": [
                "Data Structures",
                "Algorithms"
            ],
            "problem_code_id": "STEM",
            "difficulty_level": "1864",
            "ai_solutions": [
                "def find_stem(arr, n):\n    s = min(arr, key=len)\n    l = len(s)\n    res = \"\"\n    for i in range(l):\n        for j in range(i + 1, l + 1):\n            stem = s[i:j]\n            k = 0\n            for k in range(1, n):\n                if stem not in arr[k]:\n                    break\n            if (k + 1 == n and len(res) < len(stem)):\n                res = stem\n    return res\n\nT = int(input())\nfor _ in range(T):\n    n = int(input())\n    arr = input().split()\n    print(find_stem(arr, n))",
                "def find_stem(arr, n):\n    s = min(arr, key=len)\n    l = len(s)\n    res = \"\"\n    for i in range(l):\n        for j in range(i + 1, l + 1):\n            stem = s[i:j]\n            if all(stem in word for word in arr):\n                if len(stem) > len(res) or (len(stem) == len(res) and stem < res):\n                    res = stem\n    return res\n\nT = int(input())\nfor _ in range(T):\n    n = int(input())\n    arr = input().split()\n    print(find_stem(arr, n))"
            ],
            "human_solutions": [
                {
                    "id": 89658309,
                    "submission_date": 1676525818,
                    "language": "PYTH 3",
                    "username": "rs5228127",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.02",
                    "memory": "9.5M",
                    "solution": 89658309,
                    "code": "import sys\r\nT = int(sys.stdin.readline())\r\nfor i in range(T):\r\n    n = int(sys.stdin.readline())\r\n    s = sys.stdin.readline().strip()\r\n    a = s.split()\r\n    min_string  = min(a,key=len)\r\n    length = 0\r\n    sub_str = \"\"\r\n    length_sub_str = 0\r\n    longest_sub_str = \"\"\r\n    for i in range(0,len(min_string)):\r\n        for j in range(i+1,len(min_string)+1):\r\n            sub_str = min_string[i:j]\r\n            flag = False\r\n            for ele in a:\r\n                if(sub_str in ele):\r\n                    flag = True\r\n                else:\r\n                    flag = False\r\n                    break\r\n            if(flag == True):\r\n                if(length_sub_str < len(sub_str)):\r\n                    length_sub_str = len(sub_str)\r\n                    longest_sub_str = sub_str\r\n                elif(length_sub_str == len(sub_str)):\r\n                    if(longest_sub_str > sub_str):\r\n                        longest_sub_str = sub_str\r\n    print(longest_sub_str)\r\n            \r\n    "
                },
                {
                    "id": 39037942,
                    "submission_date": 1603103974,
                    "language": "PYTH 3",
                    "username": "tothemax",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.00",
                    "memory": "17.5M",
                    "solution": 39037942,
                    "code": "import sys\n\nT = int(sys.stdin.readline())\n\nfor t in range(T):\n    n = int(sys.stdin.readline())\n    w = sys.stdin.readline().strip()\n    \n    words = w.split()\n    shortest_word = min(words, key=len)\n    \n    longest_substr_len = 0\n    longest_substr = \"\"\n    \n    for i in range(0, len(shortest_word)):\n        for j in reversed(range(i + 1, len(shortest_word) + 1)):\n            sub_str = shortest_word[i:j]\n            found = True\n            for word in words:\n                if sub_str not in word:\n                    found = False\n                    break\n    \n            if found:\n                if len(sub_str) > longest_substr_len:\n                    longest_substr_len = len(sub_str)\n                    longest_substr = sub_str\n                elif len(sub_str) == longest_substr_len:\n                    if sub_str < longest_substr:\n                        longest_substr_len = len(sub_str)\n                        longest_substr = sub_str\n    \n    print(longest_substr)\n\n"
                }
            ]
        },
        "KMXOR": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "2\n3 5\n4 3",
                    "output": "5 1 3\n1 2 3 3",
                    "explanation": "Example case 1: The maximum possible taste of the cake is $5 \\oplus 1 \\oplus 3 = 7$.\nExample case 2: The maximum possible taste is $1 \\oplus 2 \\oplus 3 \\oplus 3 = 3$."
                }
            ],
            "problem_statement": "Read problems statements in Mandarin chinese, Russian and Vietnamese as well.\nChef is baking a large cake! The cake consists of $N$ different ingredients numbered $1$ through $N$. Chef can choose how much of each ingredient to use in his cake recipe; let's denote the amount of the $i$-th ingredient used in the cake by $g_i$. Chef can only measure ingredients in fixed whole units, so the amounts of all ingredients must be integers.\nIn order to keep the cake inexpensive (and, of course, use each ingredient from the recipe), the chosen amounts of ingredients have to satisfy the condition $1 \\le g_i \\le K$ (for each $1 \\le i \\le N$). The taste of the resulting cake is computed as the bitwise XOR of the amounts of all ingredients, i.e. $g_1 \\oplus g_2 \\oplus \\dots \\oplus g_N$. For example, if $N=3$ and $g = [1, 2, 5]$, the taste of the cake is equal to $1 \\oplus 2 \\oplus 5 = 6$.\nPlease help Chef and find one way to choose the amounts of all ingredients such that the taste of the cake is maximum possible.\nInput\n\nThe first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\nThe first and only line of each test case contains two space-separated integers $N$ and $K$. \n\nOutput\nFor each test case, print a single line containing $N$ space-separated integers $g_1, g_2, \\dots, g_N$ \u2014 the amounts of ingredients $1, 2, \\dots, N$.\nConstraints\n\n$1 \\le T \\le 40$\n$1 \\le N \\le 10^4$\n$1 \\le K \\le 10^9$",
            "input_format": "",
            "output_format": "",
            "problem_name": "Best Cake Ever",
            "user_tags": [
                "Bit Manipulation",
                "Constructive"
            ],
            "computed_tags": [
                "Mathematics",
                "Algorithms"
            ],
            "problem_code_id": "KMXOR",
            "difficulty_level": "1929",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 89764019,
                    "submission_date": 1676609023,
                    "language": "PYTH 3",
                    "username": "rs5228127",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.05",
                    "memory": "9.9M",
                    "solution": 89764019,
                    "code": "t = int(input())\r\ndef snek(a):\r\n    c = 0\r\n    while a > 1:\r\n        a //= 2\r\n        c += 1\r\n    return c\r\n\r\nfor i in range(t):\r\n    n, k = list(map(int, input().split()))\r\n    if n == 1:\r\n        print(k)\r\n    elif n == 2:\r\n        if k == 1:\r\n            print(1, 1)\r\n        elif k == 2:\r\n            print(2, 1)\r\n        else:\r\n            print(2 ** snek(k), 2 ** snek(k) - 1)\r\n    else:\r\n        if k == 1:\r\n            for j in range(n):\r\n                print(1, end = \" \")\r\n            print()\r\n        elif k == 2:\r\n            print(2, end = \" \")\r\n            for j in range(n - 1):\r\n                print(1, end = \" \")\r\n            print()\r\n        elif k == 3:\r\n            if n % 2 == 0:\r\n                print(2, 1, end = \" \")\r\n                for j in range(n - 2):\r\n                    print(1, end = \" \")\r\n                print()\r\n            else:\r\n                print(3, end = \" \")\r\n                for j in range(n - 1):\r\n                    print(1, end = \" \")\r\n                print()\r\n        else:\r\n            if n % 2 == 0:\r\n                print(2 ** snek(k), 2 ** snek(k) - 1, end = \" \")\r\n                for j in range(n - 2):\r\n                    print(1, end = \" \")\r\n                print()\r\n            else:\r\n                print(2 ** snek(k), 2 ** snek(k) - 2, end = \" \")\r\n                for j in range(n - 2):\r\n                    print(1, end = \" \")\r\n                print()"
                },
                {
                    "id": 41553045,
                    "submission_date": 1610303008,
                    "language": "PYTH 3",
                    "username": "prsb2408",
                    "user_rating_star": 3,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.06",
                    "memory": "18.2M",
                    "solution": 41553045,
                    "code": "T=int(input())\r\ndef powe(a):\r\n    t7=0\r\n    while(a>1):\r\n        a=a//2\r\n        t7+=1\r\n    return t7\r\nfor _ in range(T):\r\n    n,k=list(map(int,input().split()))\r\n    if(n==1):\r\n        print(k)\r\n    elif(n==2):\r\n        if(k==1):\r\n            print(1,1)\r\n        elif(k==2):\r\n            print(2,1)\r\n        else:\r\n            print(2**powe(k),2**powe(k)-1)\r\n    else:\r\n        if(k==1):\r\n            for i in range(n):\r\n                print(1,end=\" \")\r\n            print()\r\n        elif(k==2):\r\n            print(2,end=\" \")\r\n            for i in range(n-1):\r\n                print(1,end=\" \")\r\n            print()\r\n        elif(k==3):\r\n            if(n%2==0):\r\n                print(2,1,end=\" \")\r\n                for i in range(n-2):\r\n                    print(1,end=\" \")\r\n                print()\r\n            else:\r\n                print(3,end=\" \")\r\n                for i in range(n-1):\r\n                    print(1,end=\" \")\r\n                print()\r\n        else:\r\n            if(n%2==0):\r\n                print(2**powe(k),2**powe(k)-1,end=\" \")\r\n                for i in range(n-2):\r\n                    print(1,end=\" \")\r\n                print()\r\n            else:\r\n                print(2**powe(k),2**powe(k)-2,end=\" \")\r\n                for i in range(n-2):\r\n                    print(1,end=\" \")\r\n                print()\r\n"
                }
            ]
        },
        "MAXEXPR": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "5\n4\n1.00 2.00 3.00 4.00\n5.00 6.00 7.00 8.00\n3\n1.23 8.90 5.67\n-2.34 -9.01 -6.78\n3\n1.00 1.00 1.00\n1.23 8.90 -5.67\n2\n1.23 8.90\n-5.67 2.34\n2\n1.23 8.90\n5.67 -2.34",
                    "output": "12.0761472885 28.6000000000 2.4000000000 -3.2666666667 -5.9000000000\n-1\n3.6578682316 0.2566666667 -7.4133333333 7.1566666667\n3.5802375027 15.5642936942 -2.1510203645\n-1",
                    "explanation": "Example case 1: The optimal solution is $x = (28.6, 2.4, -49/15, -5.9)$. Then, $x_1 \\cdot k_1 + x_2 \\cdot k_2 + x_3 \\cdot k_3 + x_4 \\cdot k_4 = 28.6 \\cdot 1 + 2.4 \\cdot 2 - 49 \\cdot 3 / 15 + (-5.9) \\cdot 4 = 0$, and $F = \\sqrt{28.6+5}+\\sqrt{2.4+6}+\\sqrt{-49/15+7}+\\sqrt{-5.9+8} \\doteq 12.076$. This is the maximum value of Chef's expression.\nExample case 2: For each $i$, $c_i$ is negative, but $x_i+c_i$ must be non-negative, so $x_i$ must be positive. However, all $k_i$ are also positive, so $x_1 k_1 + x_2 k_2 + \\ldots + x_N k_N$ cannot be $0$. There is no solution."
                }
            ],
            "problem_statement": "Read problem statements in Hindi, Bengali, Mandarin Chinese, Russian, and Vietnamese as well.\nChef had three sequences of real numbers $k_1, k_2, \\ldots, k_N$, $c_1, c_2, \\ldots, c_N$ and $x_1, x_2, \\ldots, x_N$. Unfortunately, he lost the sequence $x$; the only thing he remembers about it is that\n$$x_1 \\cdot k_1 + x_2 \\cdot k_2 + \\ldots + x_N \\cdot k_N = 0 \\,.$$\nChef's favourite expression is\n$$\\sqrt{x_1+c_1} + \\sqrt{x_2+c_2} + \\ldots + \\sqrt{x_N+c_N} \\,.$$\nIts value is defined only if $x_i+c_i \\ge 0$ for each valid $i$. Let's denote the maximum value of this expression$ $ (over all sequences $x$ such that it is defined) by $F$.\nHelp Chef find $F$ and a sequence $x_1, x_2, \\ldots, x_N$ such that the value of Chef's expression is $F$, or determine that there is no solution (the value of Chef's expression is always undefined).\nInput\n\nThe first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\nThe first line of each test case contains a single integer $N$.\nThe second line contains $N$ real numbers $k_1, k_2, \\ldots, k_N$.\nThe third line contains $N$ real numbers $c_1, c_2, \\ldots, c_N$.\n\nAll real numbers are given with exactly two digits after the decimal point.\nOutput\nFor each test case, if there is no solution, print a single line containing one integer $-1$. Otherwise, print a single line containing $N+1$ space-separated real numbers $F, x_1, x_2, \\ldots, x_N$.\nIt can be proved that if a solution exists, then it is unique. Your answer will be considered correct if the absolute or relative error of each number on the output does not exceed $10^{\u22122}$.\nConstraints\n\n$1 \\le T \\le 10^5$\n$2 \\le N \\le 10^5$\n$0 \\lt k_i \\le 2,000$ for each valid $i$\n$|c_i| \\le 2,000$ for each valid $i$\nthe sum of $N$ over all test cases does not exceed $10^5$\n\nSubtasks\nSubtask #1 (15 points): $N = 2$\nSubtask #2 (15 points): $k_i = 1$ and $c_i = 0$ for each valid $i$\nSubtask #3 (15 points): $k_i = 1$ for each valid $i$\nSubtask #4 (15 points): $c_i = 0$ for each valid $i$\nSubtask #5 (40 points): original constraints",
            "input_format": "",
            "output_format": "",
            "problem_name": "Maximize an Expression",
            "user_tags": [
                "Mathematics",
                "Cauchy Schwarz Inequality"
            ],
            "computed_tags": [
                "Algebra",
                "Inequalities"
            ],
            "problem_code_id": "MAXEXPR",
            "difficulty_level": "1809",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 1011488663,
                    "submission_date": 1690782944,
                    "language": "PYTH 3",
                    "username": "aisharyaroy",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.48",
                    "memory": "23.9M",
                    "solution": 1011488663,
                    "code": "from math import*\r\ndef listx():return [int(x) for x in input().split()]\r\ndef inpx():return int(input())\r\ndef mapx():return map(int,input().split())\r\ndef strx():return input()\r\ndef floatx():return float(input())\r\n\r\nmod = 10 ** 9 + 7\r\n\r\nfor i in range(inpx()):\r\n    n=inpx()\r\n    k=list(map(float,input().split()))\r\n    c=list(map(float,input().split()))\r\n    SUMck,SUM_k=0.0,0.0\r\n    for i in range(n):\r\n        SUMck+=c[i]*k[i]\r\n        SUM_k+=1/k[i]\r\n    F2=SUMck*SUM_k\r\n    if F2<0:\r\n        print(-1)\r\n    else:\r\n        print(sqrt(F2),end=' ')\r\n        t=SUMck/SUM_k\r\n        for i in range(n):\r\n            print(t/k[i]/k[i]-c[i],end=' ')\r\n        print() "
                },
                {
                    "id": 81009915,
                    "submission_date": 1669383148,
                    "language": "PYTH 3",
                    "username": "prateekraj8",
                    "user_rating_star": 4,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.57",
                    "memory": "25.6M",
                    "solution": 81009915,
                    "code": "for _ in range(int(input())):\r\n  n = int(input())\r\n  k = list(map(float, input().split()))\r\n  c = list(map(float, input().split()))\r\n  p = sum(x*y for (x, y) in zip(k, c))\r\n  if p < 0:\r\n      print(-1)\r\n      continue\r\n  x = [1.0/i/i for i in k]\r\n  q = sum(i*j for i, j in zip(x, k))\r\n  x = [i*p/q for i in x]\r\n  f = sum(i**0.5 for i in x)\r\n  x = [i - j for i, j in zip(x, c)]\r\n  print(f, *x)"
                }
            ]
        },
        "SEATRSF": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "3\n1 1 1 1\n2 2 1 1\n2 3 1 1",
                    "output": "0\n2\n4",
                    "explanation": ""
                }
            ],
            "problem_statement": "Read problems statements in Mandarin Chinese here\nProblem Statement\n\nSereja has a sequence of \nn integers a[1], a[2], ..., a[n]. Sereja can do following transformation of the array:\n\u00a0\ncreate a new sequence of n integers b[1], b[2], ..., b[n]in this way:   (1\u2009\u2264\u2009i\u2009\u2264\u2009n)\nReplace the sequence a by b, i.e., a[i] = b[i] for all i in [1, n] \n\u00a0\nSereja decided to use his transformation k times. Then he computed the value of     , where r \u2014 the sequence obtained after k transformations of sequence a, as described above.\n\u00a0\nSereja lost sequence a, but he was left with the numbers q(r) and k. Now Sereja is interested in the question : what is the number of the sequences of the integers \u0441[1], \u0441[2], ..., \u0441[n], such that 1\u2009\u2264\u2009c[i]\u2009\u2264\u2009m and q(d)\u2009=\u2009q(r), where d \u2014 the sequence obtained after k transformations of sequence c, as described above.\u00a0\nInput\n\nThe first lines contains a single integer T, denoting the number of test cases. Each  test case consist of four integers : \nn, m, q(r), k.\n\u00a0\nOutput\n\nIn a single line print the remainder of division the answer of the problem on number \n10^9\u2009+\u20097.\n\u00a0\nConstraints\n\n1 \u2264 T \u2264 10000\n1 \u2264 n,\u2009m,\u2009q(r), k \u2264 10^9",
            "input_format": "",
            "output_format": "",
            "problem_name": "Sereja and Transformation",
            "user_tags": [
                "Basic Maths",
                "Modular Exponentiation",
                "Combinatorics",
                "Inclusion Exclusion Principle",
                "Observation"
            ],
            "computed_tags": [
                "Mathematics",
                "Modular Arithmetic",
                "Set Theory",
                "Algorithms"
            ],
            "problem_code_id": "SEATRSF",
            "difficulty_level": "1914",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 95513132,
                    "submission_date": 1683014158,
                    "language": "PYTH 3",
                    "username": "vjudge9",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.26",
                    "memory": "9.5M",
                    "solution": 95513132,
                    "code": "def pow_mod(base,exp,N):\n    result=1\n    while exp>0:\n        if exp%2==1:\n            result=(result*base)%N\n        exp=exp>>1\n        base=(base*base)%N\n    return result\n\n\nN=1000000007\nt=int(input())\nfor i in range(t):\n    [n,m,d,k]=input().split(\" \")\n    n=int(n)\n    m=int(m)\n    d=int(d)\n    k=int(k)\n    if m>d:\n        t1=m-d\n        t2=pow_mod(d+1,n,N)\n        t3=pow_mod(d,n,N)\n        t4=pow_mod(d-1,n,N)\n        ans=((t2-2*t3+t4)*t1)%N\n        print(ans)\n    else:\n        print(\"0\")\n        "
                },
                {
                    "id": 89694256,
                    "submission_date": 1676548319,
                    "language": "PYTH 3",
                    "username": "rs5228127",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.25",
                    "memory": "9.7M",
                    "solution": 89694256,
                    "code": "def pow_mod(base,exp,N):\r\n    result=1\r\n    while exp>0:\r\n        if exp%2==1:\r\n            result=(result*base)%N\r\n        exp=exp>>1\r\n        base=(base*base)%N\r\n    return result\r\n\r\n\r\nN=1000000007\r\nt=int(input())\r\nfor i in range(t):\r\n    [n,m,d,k]=input().split(\" \")\r\n    n=int(n)\r\n    m=int(m)\r\n    d=int(d)\r\n    k=int(k)\r\n    if m>d:\r\n        t1=m-d\r\n        t2=pow_mod(d+1,n,N)\r\n        t3=pow_mod(d,n,N)\r\n        t4=pow_mod(d-1,n,N)\r\n        ans=((t2-2*t3+t4)*t1)%N\r\n        print(ans)\r\n    else:\r\n        print(\"0\")\r\n        \r\n\r\n\r\n    "
                }
            ]
        },
        "FTRIP": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "3\n10 10 5 3\n10 4 6 4\n3 2 2 1",
                    "output": "1.000000\n0.000000\n0.500000",
                    "explanation": "Case #1:\nEvery student will be taken to the trip. So all her 4 friends will accompany her to the trip no matter what. Case #2:\nAlice wants 4 out of her 5 friends to come along with her which isn't possible because the school is willing to pick only 4 students for the trip."
                }
            ],
            "problem_statement": "Alice's school is planning to take some students from her class on a field trip. Alice is really excited about it. There are a total of S students in her class. But due to budget constraints, the school is planning to take only N students for the trip. These students will be picked randomly. And each student has equal chance of being picked.\nAlice's friend circle has M students including her. Though she is excited about the field trip, she will enjoy it only if there are atleast K of her friends with her on the trip. She is wondering what are the chances of that happening. She needs your help. Tell her the probability that she will enjoy given that she goes on the trip.\nInput:\nFirst line of input contains a single integer T, the number of test cases.\nEach test starts with a single line having 4 space separated integers, S, N, M and K.\nOutput:\nFor each test case, output a line containing the required probability. The answer will be accepted if the relative error is not more than 10-6.Constraints:\n\n1 \u2264 T \u2264 100\n1 \u2264 S \u2264 1000\n1 \u2264 N \u2264 S\n1 \u2264 M \u2264 S\n0 \u2264 K M",
            "input_format": "",
            "output_format": "",
            "problem_name": "Field Trip",
            "user_tags": [
                "Probability",
                "Combinatorics"
            ],
            "computed_tags": [
                "Mathematics"
            ],
            "problem_code_id": "FTRIP",
            "difficulty_level": "1878",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 89667425,
                    "submission_date": 1676530431,
                    "language": "PYTH 3",
                    "username": "rs5228127",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.45",
                    "memory": "10.4M",
                    "solution": 89667425,
                    "code": "fact = [None]*1001\r\ndef nck(n,k):\r\n    return fact[n]/(fact[n-k]*fact[k])\r\n\r\nfact[0]=1;\r\nfor i in range(1,1001):\r\n    fact[i]=fact[i-1]*i\r\nt = int(input())\r\nfor z in range(t):\r\n    s,n,m,k = map(int, input().split())\r\n    P = 0\r\n    for i in range(k, min(n,m)):\r\n        P+=nck(m-1,i)*nck(s-m,n-i-1)\r\n    Q = nck(s-1,n-1)\r\n    ans = float(P/Q)\r\n    print('%.6f' % ans)"
                },
                {
                    "id": 75279794,
                    "submission_date": 1664178293,
                    "language": "PYTH 3",
                    "username": "levchikm",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.40",
                    "memory": "9.7M",
                    "solution": 75279794,
                    "code": "for _ in range(int(input())):\r\n\r\n    S, N, M, K = map(int, input().split())\r\n    \r\n    \r\n    def cnk(n, k):\r\n        k_min = min(k, n - k)\r\n        num, denom = 1, 1\r\n    \r\n        for x in range(1, k_min + 1):\r\n            num *= (n - x + 1)\r\n            denom *= x\r\n        return num // denom\r\n    \r\n    \r\n    total = cnk(S - 1, N - 1)\r\n    upper_lim = min(M, N)\r\n    \r\n    num = 0\r\n    for k in range(K, upper_lim + 1 - 1):\r\n        if (S - M) >= (N - k - 1):\r\n            num += cnk(M - 1, k) * cnk(S - M, N - k - 1)\r\n    ans = num / float(total)\r\n    print(\"%.9f\" % ans)\r\n"
                }
            ]
        },
        "MATDYS": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "3\n3 4\n3 3\n3 2",
                    "output": "1\n6\n2",
                    "explanation": ""
                },
                {
                    "input": "1\n64 11047805202224836936",
                    "output": "1337369305470044825",
                    "explanation": "In all questions, we have N = 3. Therefore, we have a deck with 8 cards.\nThe shuffling is done in three steps:\n\nStep 0: We divide {0, 1, 2, 3, 4, 5, 6, 7} in 20 decks. We get only one deck.\n        The deck is reordered into {0, 2, 4, 6, 1, 3, 5, 7}.\n\nStep 1: We divide {0, 2, 4, 6, 1, 3, 5, 7} in 21 decks. We get two decks: {0, 2, 4, 6} and {1, 3, 5, 7}.\n        {0, 2, 4, 6} is reordered into {0, 4, 2, 6} while {1, 3, 5, 7} is reordered into {1, 5, 3, 7}.\n        We get {0, 4, 2, 6, 1, 5, 3, 7} when we put the decks back together.\n\nStep 2: We divide {0, 4, 2, 6, 1, 5, 3, 7} in 22 decks. We get four decks: {0, 4}, {2, 6}, {1, 5} and {3, 7}.\n        Each one of the four decks stays the same after it is reordered (as there are only two elements to reorder).\n        We get the final, shuffled deck: {0, 4, 2, 6, 1, 5, 3, 7}.\n\nThe card labelled 4 is on position 1.\nThe card labelled 3 is on position 6.\nThe card labelled 2 is on position 2."
                }
            ],
            "problem_statement": "Read problems statements in mandarin chinese, russian and vietnamese as well.\nMathison has bought a new deck of cards that contains 2N cards, numbered and ordered from 0 to 2N-1.\nMathison is getting bored and decides to learn the Dynamo shuffle (or Sybil cut) - a flashy manner to shuffle cards. Unfortunately, the Dynamo shuffle is a little too complicated so Mathison decides to create his own shuffle.\n\n\n This newly invented shuffle is done in N steps. At step k (0 \u2264 k N) the deck is divided into 2k equal-sized decks\n where each one contains cards that lie on consecutive positions.\n Each one of those decks is then reordered: all the cards that lie on even positions are placed first followed by all cards that lie on odd positions\n  (the order is preserved in each one of the two subsequences and all positions are 0-based). Then all the decks are put back together (preserving the order of decks).\n\n\n Mathison has spent hours practising the shuffle and he now believes that he has perfected his technique. However, Chef doesn't believe him yet so he asks Mathison to answer Q questions that given a deck of size 2N where i-th card is labelled i, find the position of the card labelled K in the final, shuffled deck.\n\nInput\nThe first line of the input file will contain one integer, Q, representing the number of Chef's questions.\nEach of the next Q lines will contain a pair of integers, N and K.\nOutput\nThe output file will contain Q lines, each one representing the answer to one of Chef's questions.\nConstraints\n1 \u2264 Q \u2264 1000\n1 \u2264 N \u2264 64\n0 \u2264 K N\n\nSubtaks\nSubtask #1 (30 points):\n\n1 \u2264 N \u2264 10\n\nSubtask #2 (30 points):\n\n1 \u2264 N \u2264 32\n\nSubtask #3 (40 points):\n\nOriginal constraints",
            "input_format": "",
            "output_format": "",
            "problem_name": "Mathison and the Dynamo shuffle",
            "user_tags": [
                "alexvaleanu",
                "easy",
                "ltime51",
                "observation"
            ],
            "computed_tags": [],
            "problem_code_id": "MATDYS",
            "difficulty_level": "1920",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 15540561,
                    "submission_date": 1506585120,
                    "language": "PYTH 3",
                    "username": "amritanshus128",
                    "user_rating_star": 4,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.04",
                    "memory": "27.7M",
                    "solution": 15540561,
                    "code": "t=int(input())\nfor i in range(t):\n    n,p=[int(j) for j in input().split() ]\n    for j in range(1,n+1):\n        q=p//(1<<j)\n        r=p%(1<<j)\n        if r<(1<<(j-1)):\n            p=(1<<j)*q+2*r\n        else:\n            p=(1<<j)*(q-1)+2*r+1\n    print(p)\n            \n        \n    \n"
                },
                {
                    "id": 15293439,
                    "submission_date": 1504624200,
                    "language": "PYTH 3",
                    "username": "psil123",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.02",
                    "memory": "22.8M",
                    "solution": 15293439,
                    "code": "t = int(input())\nfor _ in range(t):\n\tn, k = list(map(int, raw_input().split()))\n\tk += 1\n\ti = n-1\n\tans = 0\n\twhile(i >= 0):\n\t\tif (k > 2**i):\n\t\t\tans += 2**(n-1-i)\n\t\t\tk -= 2**i\n\t\ti -= 1\n\tprint(ans)"
                }
            ]
        },
        "BINIM2": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "1\r\n2 Dee\r\n010\r\n101",
                    "output": "Dee",
                    "explanation": ""
                }
            ],
            "problem_statement": "Read problems statements in Hindi, Spanish, Mandarin chinese, Russian, Vietnamese and Bengali as well.\nTweedle-Dee and Tweedle-Dum are playing a fierce match of binary Nim. This novel game is played with $N$ stacks, each of them containing only $1$-s and $0$-s.\nJust like in normal Nim, Tweedle-Dee and Tweedle-Dum alternate turns; in their turn, a player must choose one non-empty stack and remove a positive number of elements from the top of this stack. However, Tweedle-Dee may only choose a stack with $0$ at the top (and remove elements from it afterwards), and similarly, Tweedle-Dum may only choose a stack with $1$ at the top. The player that cannot make a move for the first time wins.\nAda does not want to wait for the end of the game, so she asked you to determine the winner of the game if you are given the starting player. Remember that Tweedle-Dee and Tweedle-Dum are legendary grandmasters of combinatorial games, so they both always play optimally.\nInput\n\nThe first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\nThe first line of each test case contains an integer $N$, followed by a space and a string $S$ denoting the player that starts the game.\nEach of the following $N$ lines contains a single binary string $B$ representing a stack; the first character of $B$ corresponds to the top element of the stack and the last character to the bottom element.\n\nOutput\nFor each test case, print a single line containing the string \"Dee\" if Tweedle-Dee wins the match or \"Dum\" if Tweedle-Dum wins.\nConstraints\n\n$1 \\le T \\le 500$\n$1 \\le N \\le 50$\n$1 \\le |B| \\le 50$\neach character in $B$ is either '1' or '0'\n$S$ is either \"Dee\" or \"Dum\"",
            "input_format": "",
            "output_format": "",
            "problem_name": "Binary Nim 2",
            "user_tags": [
                "Game Theory",
                "ad-hoc"
            ],
            "computed_tags": [
                "Algorithms",
                "Constructive"
            ],
            "problem_code_id": "BINIM2",
            "difficulty_level": "1929",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 96740236,
                    "submission_date": 1684839564,
                    "language": "PYTH 3",
                    "username": "vjudge25",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.03",
                    "memory": "9.5M",
                    "solution": 96740236,
                    "code": "\n\nt = int(input())\n\nfor i in range(t):\n    x, w = input().split()\n    d1 = d2 = 0\n    for j in range(int(x)):\n        y = input()\n        if y[0] == '1' and y[-1] == '1':\n            d1 += 1\n        elif y[0] == '0' and y[-1] == '0':\n            d2 += 1\n    if d1 < d2:\n        print(\"Dum\")\n    elif d2 < d1:\n        print(\"Dee\")\n    else:\n        print(w)"
                },
                {
                    "id": 66826140,
                    "submission_date": 1655271527,
                    "language": "PYTH 3",
                    "username": "dscdsc",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.02",
                    "memory": "8.9M",
                    "solution": 66826140,
                    "code": "t = int(input())\r\n\r\nfor i in range(t):\r\n    x, w = input().split()\r\n    d1 = d2 = 0\r\n    for j in range(int(x)):\r\n        y = input()\r\n        if y[0] == '1' and y[-1] == '1':\r\n            d1 += 1\r\n        elif y[0] == '0' and y[-1] == '0':\r\n            d2 += 1\r\n    if d1 < d2:\r\n        print(\"Dum\")\r\n    elif d2 < d1:\r\n        print(\"Dee\")\r\n    else:\r\n        print(w)"
                }
            ]
        },
        "MATHL": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "1\n3",
                    "output": "12",
                    "explanation": ""
                }
            ],
            "problem_statement": "Chef is solving mathematics problems. He is preparing for Engineering Entrance exam. He's stuck in a problem.\n$f(n)=1^n2^{n-1}3^{n-2} * \\ldots * n^{1} $ \nHelp Chef to find the value of $f(n)$.Since this number could be very large, compute it modulo $1000000007$.\nInput:\n\nFirst line will contain $T$, number of testcases. Then the testcases follow. \nEach testcase contains of a single line of input,  $N$. \n\nOutput:\nFor each testcase, output in a single line the value of $f(n)$ mod $1000000007$.\nConstraints\n\n$1 \\leq T \\leq 10^6$\n$1 \\leq N \\leq 10^6$\n\nSubtasks\nSubtask 1(24 points) : \n\n$1 \\leq T \\leq 5000$\n$1 \\leq N \\leq 5000$\n\nSubtask 2(51 points) : original constraints",
            "input_format": "",
            "output_format": "",
            "problem_name": "C - Chef and Maths",
            "user_tags": [
                "Factorials"
            ],
            "computed_tags": [
                "Mathematics",
                "Basic Maths"
            ],
            "problem_code_id": "MATHL",
            "difficulty_level": "1856",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 27381324,
                    "submission_date": 1571126970,
                    "language": "PYTH 3",
                    "username": "satya_raj887",
                    "user_rating_star": 3,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "4.51",
                    "memory": "17.6M",
                    "solution": 27381324,
                    "code": "m=1000000007\nf=[1,2,6]\na=[1,2,12]\nfor i in range(3,10**6):\n    f.append((f[i-1]*(i+1))%m)\n    a.append((f[i]*a[i-1])%m)\nfor _ in range(int(input())):\n    n=int(input())\n    print(a[n-1])"
                },
                {
                    "id": 27106308,
                    "submission_date": 1570470622,
                    "language": "PYTH 3",
                    "username": "codeurway",
                    "user_rating_star": 3,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "4.57",
                    "memory": "17.6M",
                    "solution": 27106308,
                    "code": "n=int(input())\r\nl=[1,2,12]\r\nA=6\r\na=4;\r\nfor i in range(4,1000001):\r\n   l.append((A)%1000000007 *(a)%1000000007 * (l[len(l)-1])%1000000007)\r\n   A=(A*a)%1000000007;\r\n   a+=1;\r\nfor i in range(0,n):\r\n    o=int(input())\r\n    print(l[o-1])"
                }
            ]
        },
        "WEIRD2": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "3\r\n5\r\n1 2 3 4 5\r\n5\r\n1 1 2 2 3\r\n5\r\n3 3 2 2 2",
                    "output": "1\r\n4\r\n3",
                    "explanation": ""
                }
            ],
            "problem_statement": "Read problems statements Mandarin , Bengali , Hindi , Russian and Vietnamese as well.\nYou are given an integer sequence $A$ with length $N$. Find the number of ordered pairs of positive integers $(a, b)$ such that $a$ occurs in $A$ at least $b$ times and $b$ occurs in $A$ at least $a$ times. \nInput\n\nThe first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\nThe first line of each test case contains a single integer $N$.\nThe second line contains $N$ space-separated integers $A_1, A_2, \\dots, A_N$.\n\nOutput\nFor each test case, print a single line containing one integer \u2014 the number of pairs.\nConstraints\n\n$1 \\le T \\le 1,000$\n$2 \\le N \\le 10^6$\n$1 \\le A_i \\le 10^6$ for each valid $i$\nthe sum of $N$ over all test cases does not exceed $3 \\cdot 10^6$\n\nSubtasks\nSubtask #1 (30 points):\n- $1 \\le N \\le 10^5$\n- the sum of $N$ over all test cases does not exceed $3 \\cdot 10^5$\nSubtask #2 (70 points): original constraints",
            "input_format": "",
            "output_format": "",
            "problem_name": "Weird Question",
            "user_tags": [
                "Frequency Arrays",
                "Optimization Problems"
            ],
            "computed_tags": [
                "Data Structures",
                "Arrays",
                "Special"
            ],
            "problem_code_id": "WEIRD2",
            "difficulty_level": "1882",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 21636707,
                    "submission_date": 1542468259,
                    "language": "PYTH 3",
                    "username": "peace_finder",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.64",
                    "memory": "23.5M",
                    "solution": 21636707,
                    "code": "from collections import Counter\r\nfor _ in range(int(input())):\r\n    n=int(input())\r\n    l=[int(i) for i in input().split()]\r\n    c=Counter(l)\r\n    cnt=0\r\n    for i in c:\r\n        curr=c[i]\r\n        for j in range(1,c[i]+1):\r\n            if c[j]>=i:\r\n                if i==j:\r\n                    cnt+=1 \r\n                else:\r\n                    cnt+=1\r\n    print(cnt)"
                },
                {
                    "id": 21346997,
                    "submission_date": 1540932681,
                    "language": "PYTH 3",
                    "username": "prasadig36",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.77",
                    "memory": "21.1M",
                    "solution": 21346997,
                    "code": "T = int(input())\r\n\r\n\r\nfor i in range(T):\r\n    count = {}\r\n    pair = 0\r\n    N = int(input())\r\n    inp = input().split(' ')\r\n    for j in range(N):\r\n        if inp[j] in count:\r\n            count[inp[j]] = count[inp[j]] + 1\r\n        else:\r\n            count[inp[j]] = 1\r\n    for key in count.keys():\r\n        for k in range(int(key),count[key]+1):\r\n            #print(count[str(k)])\r\n            if (str(k) in count) and (count[str(k)]>=int(key)):\r\n                if int(key)==k:\r\n                    pair = pair + 1\r\n                else:\r\n                    pair = pair + 2\r\n    print(pair)"
                }
            ]
        },
        "EQUILIBR": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "5\n5",
                    "output": "187500002",
                    "explanation": "Answer = $11/16 = 11\\cdot16^{-1} = 187500002$"
                }
            ],
            "problem_statement": "Read problems statements in Mandarin chinese, Russian and Vietnamese as well.\nChef is an intern at Zoozle. He has a co-intern named Ajar who's good at maths. Chef wants to impress Ajar with his zoozliness, so he decided to play the following game with A\n- Consider $n$ force vectors in a 2D plane.\n- First, Ajar uniformly randomly chooses a non-negative real magnitude for each vector such that the sum of all magnitudes is equal to $k$. (More formally, each valid $n$-tuple of magnitudes can be chosen with the same probability.)\n- Then, Chef must choose a direction for each force vector in such a way that the net force (vector sum of all forces) is equal to zero. Chef wins the game if he is able to do that; otherwise, Ajar wins the game.\nSince Chef knows that it may not always be possible to choose the directions such that he wins the game, he would like to know the probability that he'll be able to win if he plays optimally. Can you help him?\nIt can be proven that this probability can be written as a fraction $P/Q$, where $P \\ge 0$ and $Q \\gt 0$ are coprime integers. Since we are in the 21st century, nobody is interested in fractions. Therefore, you should compute $P\\cdot Q^{-1}$ modulo $10^9+7$, where $Q^{-1}$ denotes the modular inverse of $Q$ modulo $10^9+7$. (It is guaranteed that this inverse exists and is unique.)\nInput\n\nThe first line of the input contains a single integer $n$ denoting the number of force vectors.\nThe second line contains a single integer $k$ denoting the sum of magnitudes of all force vectors.\n\nOutput\nPrint a single line containing one integer \u2014 the value of $P\\cdot Q^{-1}$ modulo $10^9+7$.\nConstraints\n\n$1 \\le k \\le 100$\n$2 \\le n \\le 3\\cdot10^5$\n\nSubtasks\nSubtask 1 (20 points): $2 \\le n \\le 50$\nSubtask 2 (80 points): original constraints",
            "input_format": "",
            "output_format": "",
            "problem_name": "Reach Equilibrium",
            "user_tags": [
                "Probability",
                "Geometry"
            ],
            "computed_tags": [
                "Mathematics"
            ],
            "problem_code_id": "EQUILIBR",
            "difficulty_level": "1991",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 38912739,
                    "submission_date": 1602523213,
                    "language": "PYTH 3",
                    "username": "nitish420",
                    "user_rating_star": 4,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.02",
                    "memory": "9.4M",
                    "solution": 38912739,
                    "code": "mod=10**9+7\r\nn=int(input())\r\nk=int(input())\r\nden=pow(2,n-1)\r\nnum=pow(2,n-1)-n\r\nans=(pow(den,mod-2,mod)*num)%mod\r\nprint(ans)"
                },
                {
                    "id": 35902383,
                    "submission_date": 1595580935,
                    "language": "PYTH 3",
                    "username": "akshaykalucha",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.02",
                    "memory": "17.6M",
                    "solution": 35902383,
                    "code": "import math\ntry:\n    n = int(input())\n    k = int(input())\n    if n==1 or n==2:\n        print(0)\n    else :\n        num , denom = pow(2,n-1)-n , pow(2,n-1)\n        MOD = 10**9 + 7\n        print(((pow(denom,MOD-2,MOD))*num) % MOD)\nexcept:\n    pass"
                }
            ]
        },
        "C2": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "4\n10 1 1000000\n10 2 1000000\n10 3 1000000\n10 4 1000000",
                    "output": "55\n385\n3025\n25333",
                    "explanation": ""
                }
            ],
            "problem_statement": "Let us calculate the sum of k-th powers of natural numbers from 1 to n. As the result can be quite large, output the result modulo some integer p.\nInput\nFirst t\n\nOutput\nFor each test case, output the value: (1k+2k+...+nk) mod p.",
            "input_format": "",
            "output_format": "",
            "problem_name": "The powerful sum",
            "user_tags": [
                "Modular Exponentiation",
                "Combinatorics"
            ],
            "computed_tags": [
                "Mathematics",
                "Modular Arithmetic"
            ],
            "problem_code_id": "C2",
            "difficulty_level": "1977",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 33120906,
                    "submission_date": 1589648248,
                    "language": "PYTH 3",
                    "username": "shubhamiitbh",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.09",
                    "memory": "17.6M",
                    "solution": 33120906,
                    "code": "for _ in range(int(input())):    \n    a,b,out = map(int,input().split());r=10**2+5\n    d,s = [0]*(10**5),[0]*r   \n    for i in range(r):       \n        for j in range(r):d[i*r+j]=1 if (i==j or j==0) else d[(i-1)*r+j-1]+d[(i-1)*r+j]\n    for i in range(b+1):        \n        ans=pow(a+1,i+1)-1       \n        for j in range(i):ans-=d[(i+1)*r+j]*s[j];\n        s[i]=ans//(i+1)\n    print(s[b]%out)"
                },
                {
                    "id": 31174373,
                    "submission_date": 1586028375,
                    "language": "PYTH 3",
                    "username": "tuhiniris",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.09",
                    "memory": "19.1M",
                    "solution": 31174373,
                    "code": "r=10**2+5;\r\n\r\n\r\nfor _ in range(int(input())):\r\n    \r\n    a,b,out=list(map(int,input().split()))\r\n    d,s=[0]*10**5,[0]*r\r\n    \r\n    for i in range(r):\r\n        \r\n        for j in range(r):\r\n            \r\n            \r\n            d[i*r+j]=1 if (i==j or j==0) else d[(i-1)*r+j-1]+d[(i-1)*r+j]\r\n    for i in range(b+1):\r\n        \r\n        ans=pow(a+1,i+1)-1\r\n        \r\n        for j in range(i):\r\n            \r\n            \r\n            ans-=d[(i+1)*r+j]*s[j];\r\n        s[i]=ans//(i+1)\r\n    print(s[b]%out)"
                }
            ]
        },
        "WSC": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "2\n3 2\n1 2\n2 3\n3 3\n1 2\n2 3\n1 3",
                    "output": "YES\nNO",
                    "explanation": "The first example is the original version of the problem.\nThe second example would have a solution if a boat could seat an additional animal/item."
                }
            ],
            "problem_statement": "Read problems statements in Mandarin Chinese  and Russian.\nThe following is an easy game that the setter of this problem played when he was 8:\nA boatman, a wolf, a sheep, and a cabbage are on the bank of a river. They have a small boat that is capable of carrying the boatman and at most one other animal/item with him. However, if left alone by the boatman, the wolf can eat the sheep, and the sheep can eat the cabbage. How can all four be moved safely to the opposite bank of the river?\nHere is a nice visualization of the whole process in the original game. Disclaimer: writers, testers and CodeChef are not related to this link.\nThis leads to a more general problem. If there are other groups of animals/items with the boatman, is it possible to move them all to the opposite bank of the river in such a way that nobody/nothing gets eaten?\nWe will give you the number of animals/items (not including the boatman). Moreover, we will give you all a list of pairs of the form \"X Y\" where the X-th animal/item will be eaten by the Y-th one if they are both on the opposite bank to the boatman.\nYou are to determine whether it is possible to achieve the task or not.\nInput\nThe first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows.\n\nThe first line of each test contains two space separated integers N and M - the number of animals/items not including the boatman, and the number of relations of the form \"X will be eaten by Y\", respectively.\nThe following M lines contain pairs of the form X Y with the meaning that the X-th animal/item will be eaten by the Y-th one if they are both on the opposite bank to the boatman.\n\n\nOutput\nFor each test case, output a single line containing either \"YES\" or \"NO\" - the answer to the question \"Is it possible to move them all to the opposite bank of the river in such a way that nobody/nothing gets eaten?\".\nConstraints\n1 \u2264 T \u2264 100000\nSubtask 1: 1 \u2264 N \u2264 5,  0 \u2264 M \u2264 10 - 73 points.\nSubtask 2: 1 \u2264 N \u2264 10,  0 \u2264 M \u2264 20 - 27 points.",
            "input_format": "",
            "output_format": "",
            "problem_name": "A wolf, a sheep and cabbage",
            "user_tags": [
                "Conditional Statements"
            ],
            "computed_tags": [
                "Basic Programming Concepts"
            ],
            "problem_code_id": "WSC",
            "difficulty_level": "1976",
            "ai_solutions": [
                "from collections import defaultdict\ndef solve():\n    n, m = map(int, input().split())\n    graph = defaultdict(list)\n    for _ in range(m):\n        x, y = map(int, input().split())\n        graph[x].append(y)\n        graph[y].append(x)\n    visited = [0]*(n+1)\n    for i in range(1, n+1):\n        if visited[i] == 0:\n            stack = [i]\n            visited[i] = 1\n            while stack:\n                node = stack.pop()\n                for neighbour in graph[node]:\n                    if visited[neighbour] == visited[node]:\n                        return \"NO\"\n                    if visited[neighbour] == 0:\n                        visited[neighbour] = -visited[node]\n                        stack.append(neighbour)\n    return \"YES\"\n\nt = int(input())\nfor _ in range(t):\n    print(solve())",
                "from collections import defaultdict\ndef solve():\n    n, m = map(int, input().split())\n    graph = defaultdict(list)\n    for _ in range(m):\n        x, y = map(int, input().split())\n        graph[x].append(y)\n        graph[y].append(x)\n    visited = [0]*(n+1)\n    for i in range(1, n+1):\n        if visited[i] == 0:\n            queue = [i]\n            visited[i] = 1\n            while queue:\n                node = queue.pop(0)\n                for neighbour in graph[node]:\n                    if visited[neighbour] == visited[node]:\n                        return \"NO\"\n                    if visited[neighbour] == 0:\n                        visited[neighbour] = -visited[node]\n                        queue.append(neighbour)\n    return \"YES\"\n\nt = int(input())\nfor _ in range(t):\n    print(solve())"
            ],
            "human_solutions": [
                {
                    "id": 33398570,
                    "submission_date": 1590673000,
                    "language": "PYTH 3",
                    "username": "vampirekid",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.14",
                    "memory": "17.6M",
                    "solution": 33398570,
                    "code": "for _ in range(int(input())):\n    n, m = map(int, input().split())\n    a = [0]*n\n    for i in range(m):\n        l, r = map(int, input().split())\n        a[l-1],a[r-1] = 1,1\n    print ('NO') if sum(a) > 3 or m > 2 else print ('YES')   "
                },
                {
                    "id": 32307642,
                    "submission_date": 1587903928,
                    "language": "PYTH 3",
                    "username": "shubhamiitbh",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.15",
                    "memory": "17.6M",
                    "solution": 32307642,
                    "code": "for _ in range(int(input())):\n    n, m = map(int, input().split())\n    a = [0]*n\n    for i in range(m):\n        l, r = map(int, input().split())\n        a[l-1],a[r-1] = 1,1\n    print ('NO') if sum(a) > 3 or m > 2 else print ('YES')        "
                }
            ]
        },
        "LUCKY1": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "3\n3\n10\n100",
                    "output": "6\n31\n1266",
                    "explanation": ""
                }
            ],
            "problem_statement": "Chef loves lucky numbers. Everybody knows that lucky numbers are positive integers whose decimal representation contains only the lucky digits 4 and 7. For example, numbers 47, 744, 4 are lucky and 5, 17, 467 are not.\n\n\n Let Fd(x) equals to the number of digits d in decimal representation of the positive integer x. Chef interests only in functions F4(x) and F7(x). For the given positive integer N he wants to know the total number of different pairs (L; R) such that  F4(L) + F4(L + 1) + ... + F4(R) equals to  F7(L) + F7(L + 1) + ... + F7(R) and 1 \u2264  L \u2264 R \u2264 N.\n\n\nInput\n The first line contains a single positive integer T, the number of test cases. T test cases follow. The only line of each test case contains a positive integer N .\n\n\nOutput\n For each test case, output a single line containing the answer for the corresponding test case.\n\n\nConstraints\n\n1 \u2264 T \u2264 100000\n\n\n1 \u2264 N \u2264 100000",
            "input_format": "",
            "output_format": "",
            "problem_name": "Lucky Count",
            "user_tags": [
                "ad-hoc"
            ],
            "computed_tags": [
                "Algorithms",
                "Constructive"
            ],
            "problem_code_id": "LUCKY1",
            "difficulty_level": "1892",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 37357188,
                    "submission_date": 1598909318,
                    "language": "PYTH 3",
                    "username": "maths_man",
                    "user_rating_star": 3,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.51",
                    "memory": "17.6M",
                    "solution": 37357188,
                    "code": "def precompute():\n    n=100000\n    d={0:1}\n    s4=[0]\n    s7=[0]\n    \n    for i in range(1,n+1):\n        v=str(i)\n        s4.append(s4[-1]+v.count('4'))\n        s7.append(s7[-1]+v.count('7'))\n    s4_7=[0]\n    for i in range(1,n+1):\n        s4_7.append(s4[i]-s7[i])\n    \n    ans=[0]\n    for i in range(1,n+1):\n        v=s4_7[i]\n        if v in d:\n            ans.append(ans[-1]+d[v])\n            d[v]+=1\n        else:\n            ans.append(ans[-1])\n            d[v]=1\n    return ans\n    \nans=precompute()\nfor _ in range(int(input())):\n    print(ans[int(input())])\n    "
                },
                {
                    "id": 32317168,
                    "submission_date": 1587915357,
                    "language": "PYTH 3",
                    "username": "shubhamiitbh",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.59",
                    "memory": "17.7M",
                    "solution": 32317168,
                    "code": "m,c,k = [0]*(10**5+1),[0]*(12000),0\nm[1],c[0] = 1,1\nfor i in range(2,10**5+1):\n    j = i\n    while j > 0 :\n        d = j % 10\n        if d == 4 :k += 1\n        elif d == 7 :k -= 1\n        j //= 10\n    m[i] = m[i-1]+ c[k]\n    if k == 0 :m[i] += 1\n    c[k] += 1\nfor _ in range(int(input())):print(m[int(input())])"
                }
            ]
        },
        "RRMTRX2": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "2 2\n1 2\n3 4",
                    "output": "24",
                    "explanation": "All possible vectors are {(1, 1), (1, 2), (2, 1), (2, 2)} value(1, 1) = A1, 1 * A1, 2 = 1 * 2 = 2value(1, 2) = A1, 1 * A2, 2 = 1 * 4 = 4value(2, 1) = A2, 1 * A1, 2 = 3 * 2 = 6value(2, 2) = A2, 1 * A2, 2 = 3 * 4 = 12answer = 2 + 4 + 6 + 12 = 24"
                }
            ],
            "problem_statement": "Read problems statements in Mandarin Chinese and Russian as well.\n\nIn every contest there should be an easy problem about matrices. December Cook-Off is not an exception.\nGiven a matrix A which consists of n rows and m columns, and contains integer numbers.\nConsider every possible vector v of m elements, such that every 1 \u2264 vi \u2264 n.\nLet value of the vector be product of all Avi, i  (1 \u2264 i \u2264 m). You are to count the sum of values over all possible vectors v.\n\n\n Input details\nThe first line contains two integers n and m \u2014 dimensions of the matrix. Then n lines of m integers follow. The jth element of ith line contains Ai, j.\n\n Output details\n\nOutput single integer \u2014 the answer for the problem modulo 107 + 7, i.e the smallest non-negative integer number r that answer - r is divisible by 107 + 7.\n\n Constraints\n\n1 \u2264 n \u2264 47 1 \u2264 m \u2264 38 0 \u2264 |Ai, j| \u2264 100",
            "input_format": "",
            "output_format": "",
            "problem_name": "Matrix Again",
            "user_tags": [
                "Mathematics",
                "Observation"
            ],
            "computed_tags": [
                "Algorithms"
            ],
            "problem_code_id": "RRMTRX2",
            "difficulty_level": "1970",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 33373959,
                    "submission_date": 1590573986,
                    "language": "PYTH 3",
                    "username": "thedeep",
                    "user_rating_star": 3,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.02",
                    "memory": "17.6M",
                    "solution": 33373959,
                    "code": "from sys import stdin, stdout\r\nfrom math import ceil\r\n\r\n\r\ndef solve():\r\n    n, m = map(int, stdin.readline().split())\r\n    a = []\r\n    c = [0] * m\r\n    mod = 10**7+7\r\n    for i in range(n):\r\n        b = list(map(int, stdin.readline().strip().split()))\r\n        a.append(b)\r\n        for j in range(m):\r\n            c[j] += b[j]\r\n    ans = 1\r\n    for i in range(m):\r\n        ans *= c[i]\r\n        ans %= mod\r\n    print(ans)\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    solve()\r\n"
                },
                {
                    "id": 29918862,
                    "submission_date": 1582781995,
                    "language": "PYTH 3",
                    "username": "tubun_1296",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.02",
                    "memory": "17.6M",
                    "solution": 29918862,
                    "code": "e=10**7+7\r\nn,m=map(int,input().split())\r\nl=[]\r\nfor i in range(n):\r\n    l.append(list(map(int,input().split())))\r\nans=1\r\nfor i in range(m):\r\n    c=0\r\n    for j in range(n):\r\n        c+=l[j][i]\r\n    ans=(ans*c)%e\r\nprint(ans)"
                }
            ]
        },
        "LPAIR": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "3\n2 3\n3 6\n5 4",
                    "output": "1",
                    "explanation": "Example case 1. Only marriage lines (3, 6) and (5, 4) intersect with each other."
                },
                {
                    "input": "4\n5 12\n10 11\n11 9\n30 1",
                    "output": "6",
                    "explanation": "Example case 2. All the marriage lines intersect with each other."
                }
            ],
            "problem_statement": "Read problems statements in Mandarin Chinese and Russian as well.\nToday is the reunion of all chefs in the world. Our Chef wants to make this moment more happier. He arranged a mass wedding in this reunion. For this, he made a strange stage and drew two horizontal parallel lines on the stage. There are N unmarried male chefs in the reunion and he gave each male chef i an unique number Mi. Then all male chefs will stand in the first line drawn by Chef. But they will stand in increasing order of their number. That means chef with the lowest number will stand at the leftmost position of the line, then right to him would be the chef with the second lowest number and so on. Similarly, there are N female chefs in the reunion and Chef also gave each female chef j an unique number Fj (sequences Fj and Mi can have equal numbers). Then all female chefs will stand in the other line following the same rule(will stand in increasing order of the numbers) as the male chef. \nNow chef will choose all the marriage pairs himself. He will select a female chef and a male chef (both of them have not selected before) and will draw a straight line between them. He calls this line a marriage line. He will do this for the rest of the chefs. \nYou will be given the N marriage lines; you have to find how many marriage line pairs intersect with each other.\n\nInput\nFirst line contains a single integer N. The i-th line of the next N lines contain two space separated integers Mi and Fi, means there is a marriage line between male chef Mi and female chef Fi. No marriage line will be mentioned twice.\nOutput\nOutput the number of marriage line pairs that intersect with each other on a single line.\nConstraints\n1 \u2264 N \u2264 100000 (105)\n0 \u2264 Mi, Fi \u2264 1000000000 (109)",
            "input_format": "",
            "output_format": "",
            "problem_name": "Chef and Reunion",
            "user_tags": [
                "Fenwick Trees"
            ],
            "computed_tags": [
                "Advanced Data Structures",
                "Advanced Tree Structures"
            ],
            "problem_code_id": "LPAIR",
            "difficulty_level": "1959",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 36226234,
                    "submission_date": 1596782900,
                    "language": "PYTH 3",
                    "username": "bhavanagandra",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "1.46",
                    "memory": "18.6M",
                    "solution": 36226234,
                    "code": "from bisect import bisect_left\r\ndef solve(arr):\r\n    arr = sorted(arr, key = lambda x : x[0])\r\n\r\n    nums = []\r\n    ans  = 0\r\n\r\n    for x, y in arr:\r\n        idx = bisect_left(nums, y)\r\n        if idx == len(nums):\r\n            nums.append(y)\r\n        else:\r\n            ans += len(nums)-idx\r\n            nums.insert(idx, y)\r\n\r\n    return ans\r\n    \r\n\r\narr = []\r\nfor i in range(int(input())):\r\n    x, y = [int(x) for x in input().split()]\r\n    arr.append((x, y))\r\n    \r\nprint(solve(arr))\r\n    \r\n\r\n"
                },
                {
                    "id": 34676456,
                    "submission_date": 1592939826,
                    "language": "PYTH 3",
                    "username": "shanmbic",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "1.44",
                    "memory": "18.6M",
                    "solution": 34676456,
                    "code": "from bisect import bisect_left\ndef solve(arr):\n    arr = sorted(arr, key = lambda x : x[0])\n\n    nums = []\n    ans  = 0\n\n    for x, y in arr:\n        idx = bisect_left(nums, y)\n        if idx == len(nums):\n            nums.append(y)\n        else:\n            ans += len(nums)-idx\n            nums.insert(idx, y)\n\n    return ans\n    \n\narr = []\nfor i in range(int(input())):\n    x, y = [int(x) for x in input().split()]\n    arr.append((x, y))\n    \nprint(solve(arr))\n    \n\n"
                }
            ]
        }
    },
    "5": {
        "PCJ18D": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "        1\n        3 2",
                    "output": "        2",
                    "explanation": ""
                },
                {
                    "input": "        1\n        11 2",
                    "output": "        6",
                    "explanation": "Chef initially make 6 cookies. From the crumbs, Chef makes 3 new cookies with no crumbs left over. From the crumbs of the new cookies, Chef makes 1 new cookie and have crumbs left from one cookie. From the new cookie, Chef gets more crumbs. He adds the crumbs and gets one last cookie. After eating that, there are not enough crumbs left to make a new cookie. So a total of 11 cookies are consumed!"
                }
            ],
            "problem_statement": "Chef is baking delicious cookies today! Since Chef is super hungry, he wants to eat at least $N$ cookies.\nSince Chef is a messy eater, he drops a lot of crumbs. Crumbs of $B$ cookies can be put together to make a new cookie! \nGiven $N$ and $B$, help Chef find out the minimum number of cookies he must initially bake, $A$, to satisfy his hunger.\nInput:\n\nFirst line will contain $T$, number of testcases. Then the testcases follow. \nEach testcase contains of  two space separated integers $N, B$. \n\nOutput:\nFor each test case, print a single integer $A$, the minimum number of cookies Chef must bake initially.\nConstraints\n\n$1 \\leq T \\leq 1000$\n$1 \\leq N \\leq 1000000000$\n$2 \\leq B \\leq 1000000000$",
            "input_format": "",
            "output_format": "",
            "problem_name": "Chef and Cookies",
            "user_tags": [
                "Basic Maths",
                "Binary Search"
            ],
            "computed_tags": [
                "Mathematics",
                "Algorithms",
                "Searching"
            ],
            "problem_code_id": "PCJ18D",
            "difficulty_level": "2114",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 21682495,
                    "submission_date": 1543036672,
                    "language": "PYTH 3",
                    "username": "vidhan_jhawar",
                    "user_rating_star": 3,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.02",
                    "memory": "17.6M",
                    "solution": 21682495,
                    "code": "import math\nt=int(input())\nwhile(t>0):\n    n,b=map(int,input().split())\n    tobemade=math.ceil(((n*(b-1))+1)/b)\n    print(tobemade)\n    t-=1"
                },
                {
                    "id": 19811534,
                    "submission_date": 1534788902,
                    "language": "PYTH 3",
                    "username": "shsaurabh",
                    "user_rating_star": 4,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.03",
                    "memory": "27.7M",
                    "solution": 19811534,
                    "code": "for _ in range (int(input())):\n    n,b=input().split()\n    n,b=int(n),int(b)\n    a=int(n/b)\n    c=n-a\n    if(n%b==0):\n        c+=1\n    print(c)\n\n\n"
                }
            ]
        },
        "INVSMOD2": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "11  \r\n10 0  \r\n10 1  \r\n10 2   \r\n10 3  \r\n10 4  \r\n10 5  \r\n10 6  \r\n10 7  \r\n10 8  \r\n10 9   \r\n10 10",
                    "output": "1  \r\n1  \r\n0  \r\n1  \r\n0  \r\n0  \r\n0  \r\n1  \r\n1  \r\n0  \r\n0",
                    "explanation": ""
                }
            ],
            "problem_statement": "Read problem statements in Hindi, Bengali, Mandarin Chinese, Russian, and Vietnamese as well.\nYou are given two positive integers $N, K$, where $K \\leq N$. Your goal is to find the number of permutations of ${1, 2, ..., N}$ with exactly $K$ inversions. As the answer may be very large, you only need to find it modulo $2$.\nInput:\n\nThe first line contains one integer $T$, the number of test cases. Then the test cases follow. \nEach test case contains a single line of input, two integers $N, K$. \n\nOutput:\nFor each test case, print one integer: the number of permutation of $N$ elements with $K$ inversions, modulo $2$.\nConstraints\n\n$1 \\leq T \\leq 100$\n$0 \\leq K \\leq N \\leq 2 \\cdot 10^{10}$\n\nSubtasks\n\n10 points : $1 \\leq N \\leq 200$\n10 points : $1 \\leq N \\leq 2000$\n10 points : $1 \\leq N \\leq 200\\,000$\n10 points : $1 \\leq N \\leq 2\\,000\\,000$\n60 points : $1 \\leq N \\leq 2 \\cdot 10^{10}$",
            "input_format": "",
            "output_format": "",
            "problem_name": "Inversions",
            "user_tags": [
                "Bit Manipulation",
                "Combinatorics",
                "Observation"
            ],
            "computed_tags": [
                "Mathematics",
                "Algorithms"
            ],
            "problem_code_id": "INVSMOD2",
            "difficulty_level": "2177",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 38907486,
                    "submission_date": 1602512894,
                    "language": "PYTH 3",
                    "username": "sed_123",
                    "user_rating_star": 4,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "4.93",
                    "memory": "34.9M",
                    "solution": 38907486,
                    "code": "# import all important libraries and inbuilt functions\nfrom __future__ import division, print_function\nfrom fractions import Fraction\nimport numpy as np\nimport sys,bisect,copyreg,statistics,os,time,socket,socketserver,atexit\nfrom math import gcd,ceil,floor,sqrt,copysign,factorial,fmod,fsum,degrees\nfrom math import expm1,exp,log,log2,acos,asin,cos,tan,sin,pi,e,tau,inf,nan,atan2\nfrom collections import Counter,defaultdict,deque,OrderedDict   \nfrom itertools import combinations,permutations,accumulate,groupby,compress \nfrom numpy.linalg import matrix_power as mp\nfrom bisect import bisect_left,bisect_right,bisect,insort,insort_left,insort_right\nfrom statistics import mode\nfrom copy import copy,deepcopy\nfrom functools import reduce,cmp_to_key,lru_cache\nfrom io import BytesIO, IOBase\nfrom scipy.spatial import ConvexHull\nfrom heapq import *\nfrom decimal import *\nfrom queue import Queue,PriorityQueue\nfrom re import sub,subn\nfrom random import shuffle,randrange,randint,random\nfrom types import GeneratorType \nfrom string import ascii_lowercase\nfrom time import perf_counter\nfrom datetime import datetime\n\n# never import pow from math library it does not perform modulo\n# use standard pow -- better than math.pow\n\n# end of library import\n\n# map system version faults\nif sys.version_info[0] < 3:\n    from __builtin__ import xrange as range\n    from future_builtins import ascii, filter, hex, map, oct, zip\n\n# template of many functions used in competitive programming can add more later \n# based on need we will use this commonly.\n# bfs in a graph\ndef bfs(adj,v): # a schema of bfs\n    visited=[False]*(v+1);q=deque()\n    while q:pass\n\n# definition of vertex of a graph\ndef graph(vertex): return [[] for i in range(vertex+1)]\n\ndef lcm(a,b): return (a*b)//gcd(a,b)\n\n# most common list in a array of lists\ndef most_frequent(List):return Counter(List).most_common(1)[0][0]\n\n# element with highest frequency\ndef most_common(List):return(mode(List))\n\n#In number theory, the Chinese remainder theorem states that \n#if one knows the remainders of the Euclidean division of an integer n by \n#several integers, then one can determine uniquely the remainder of the \n#division of n by the product of these integers, under the condition \n#that the divisors are pairwise coprime.\ndef chinese_remainder(a, p):\n    prod = reduce(op.mul, p, 1);x = [prod // pi for pi in p]\n    return sum(a[i] * pow(x[i], p[i] - 2, p[i]) * x[i] for i in range(len(a))) % prod\n\ndef bootstrap(f, stack=[]):\n\tdef wrappedfunc(*args, **kwargs):\n\t\tif stack:return f(*args, **kwargs)\n\t\telse:\n\t\t\tto = f(*args, **kwargs)\n\t\t\twhile True:\n\t\t\t\tif type(to) is GeneratorType:stack.append(to);to = next(to)\n\t\t\t\telse:\n\t\t\t\t\tstack.pop()\n\t\t\t\t\tif not stack:break\n\t\t\t\t\tto = stack[-1].send(to)\n\t\t\treturn to \n\treturn wrappedfunc\n\n# make a matrix\ndef createMatrix(rowCount, colCount, dataList):   \n    mat = []\n    for i in range (rowCount):\n        rowList = []\n        for j in range (colCount):\n            if dataList[j] not in mat:rowList.append(dataList[j])\n        mat.append(rowList) \n    return mat\n\n# input for a binary tree\ndef readTree(): \n    v=int(inp());adj=[set() for i in range(v+1)]\n    for i in range(v-1):u1,u2=In(); adj[u1].add(u2);adj[u2].add(u1)\n    return adj,v\n    \n# sieve of prime numbers    \ndef sieve():\n    li=[True]*1000001;li[0],li[1]=False,False;prime=[]\n    for i in range(2,len(li),1):\n        if li[i]==True:\n            for j in range(i*i,len(li),i):li[j]=False    \n    for i in range(1000001):\n        if li[i]==True:prime.append(i)\n    return prime\n\n#count setbits of a number.\ndef setBit(n):\n    count=0\n    while n!=0:n=n&(n-1);count+=1\n    return count\n\n# sum of digits of a number\ndef digitsSum(n):\n    if n == 0:return 0\n    r = 0\n    while n > 0:r += n % 10;n //= 10\n    return r\n\n# ncr efficiently\ndef ncr(n, r):\n    r = min(r, n - r);numer = reduce(op.mul, range(n, n - r, -1), 1);denom = reduce(op.mul, range(1, r + 1), 1)\n    return numer // denom  # or / in Python 2\n\n#factors of a number\ndef factors(n):return list(set(reduce(list.__add__, ([i, n // i] for i in range(1, int(n**0.5) + 1) if n % i == 0))))\n\n#prime fators of a number\ndef prime_factors(n):\n    i = 2;factors = []\n    while i * i <= n:\n        if n % i:i += 1\n        else:n //= i;factors.append(i)\n    if n > 1:factors.append(n)\n    return set(factors)\n\ndef prefixSum(arr):\n    for i in range(1, len(arr)):arr[i] = arr[i] + arr[i-1]\n    return arr    \n\ndef binomial_coefficient(n, k):\n    if 0 <= k <= n:\n        ntok = 1;ktok = 1\n        for t in range(1, min(k, n - k) + 1):ntok *= n;ktok *= t;n -= 1\n        return ntok // ktok\n    else:return 0\n    \ndef get_num_2_5(n):\n\ttwos = 0;fives = 0\n\twhile n>0 and n%2 == 0:n//=2;twos+=1\n\twhile n>0 and n%5 == 0:n//=5;fives+=1\n\treturn (twos,fives)\n\ndef shift(a,i,num):\n\tfor _ in range(num):a[i],a[i+1],a[i+2] = a[i+2],a[i],a[i+1] \n        \ndef powerOfK(k, max):\n    if k == 1:return [1]\n    if k == -1:return [-1, 1] \n    result = [];n = 1\n    while n <= max:result.append(n);n *= k\n    return result\n\ndef getAngle(a, b, c):\n\tang = degrees(atan2(c[1]-b[1], c[0]-b[0]) - atan2(a[1]-b[1], a[0]-b[0]))\n\treturn ang + 360 if ang < 0 else ang\n\ndef getLength(a,b):return sqrt((a[0]-b[0])**2 + (a[1]-b[1])**2)\n\n# maximum subarray sum use kadane's algorithm\ndef kadane(a,size):\n    max_so_far = 0;max_ending_here = 0 \n    for i in range(0, size):\n        max_ending_here = max_ending_here + a[i]\n        if (max_so_far < max_ending_here):max_so_far = max_ending_here \n        if max_ending_here < 0:max_ending_here = 0\n    return max_so_far                                    \n                  \ndef divisors(n):\n    result = []\n    for i in range(1,ceil(sqrt(n))+1):\n        if n%i == 0:\n            if n/i == i:result.append(i)\n            else:result.append(i);result.append(n/i)\n    return result\n\ndef equal(x,y):return abs(x-y) <= 1e-9\n\ndef sumtilln(n): return ((n*(n+1))//2)\n\ndef isPrime(n) : \n\tif (n <= 1) :return False\n\tif (n <= 3) :return True\n\tif (n % 2 == 0 or n % 3 == 0) :return False\n\tfor i in range(5,ceil(sqrt(n))+1,6):\n\t\tif (n % i == 0 or n % (i + 2) == 0) :return False\n\treturn True\n\ndef isPowerOf2(n):\n    while n % 2 == 0:n //= 2\n    return (True if n == 1 else False)\n\ndef power2(n):\n    k = 0\n    while n % 2 == 0:k += 1;n //= 2\n    return k\n\ndef sqsum(n):return ((n*(n+1))*(2*n+1)//6)\n    \ndef cusum(n):return ((sumn(n))**2)\n\ndef pa(a):\n    for i in range(len(a)):print(a[i], end = \" \")\n    print()\n\ndef pm(a,rown,coln):\n    for i in range(rown):\n        for j in range(coln):print(a[i][j],end = \" \")\n        print()\n\ndef pmasstring(a,rown,coln):\n    for i in range(rown):\n        for j in range(coln):print(a[i][j],end = \"\")\n        print()\n\ndef print_case_iterable(case_num, iterable):print(\"Case #{}: {}\".format(case_num,\" \".join(map(str,iterable))))\n \ndef print_case_number(case_num, iterable):print(\"Case #{}: {}\".format(case_num,iterable))\n        \ndef isPerfectSquare(n):return pow(floor(sqrt(n)),2) == n\n\ndef nC2(n,m):return (((n*(n-1))//2) % m)\n\ndef modInverse(n,p):return pow(n,p-2,p)\n\ndef ncrmodp(n, r, p):  \n\tnum = den = 1\n\tfor i in range(r):num = (num * (n - i)) % p ;den = (den * (i + 1)) % p \n\treturn (num * pow(den,p - 2, p)) % p \n\ndef reverse(string):return \"\".join(reversed(string))        \n\ndef listtostr(s):return ' '.join([str(elem) for elem in s]) \n\ndef binarySearch(arr, l, r, x): \n\twhile l <= r: \n\t\tmid = l + (r - l) // 2; \n\t\tif arr[mid] == x:return mid \n\t\telif arr[mid] < x:l = mid + 1\n\t\telse:r = mid - 1\n\treturn -1\n\ndef isarrayodd(a):\n    r = True\n    for i in range(len(a)):\n        if a[i] % 2 == 0:r = False;break\n    return r\n\ndef isarrayeven(a):\n    r = True\n    for i in range(len(a)):\n        if a[i] % 2 == 1:r = False;break\n    return r\n\ndef isPalindrome(s):return s == s[::-1] \n\ndef gt(x,h,c,t):return ((x*h+(x-1)*c)/(2*x-1))\n\ndef CountFrequency(my_list): \n    freq = {} \n    for item in my_list:freq[item] = (freq[item] + 1 if (item in freq) else 1)\n    return freq\n\ndef CountFrequencyasPair(my_list1,my_list2,freq): \n    for item in my_list1:freq[item][0] = (freq[item][0] + 1 if (item in freq) else 1)\n    for item in my_list2:freq[item][1] = (freq[item][1] + 1 if (item in freq) else 1)     \n    return freq \n \ndef binarySearchCount(arr, n, key):   \n    left = 0;right = n - 1;count = 0  \n    while (left <= right):  \n        mid = int((right + left) / 2) \n        if (arr[mid] <= key):count,left = mid + 1,mid + 1\n        else:right = mid - 1      \n    return count\n\ndef primes(n):\n  sieve,l = [True] * (n+1),[]\n  for p in range(2, n+1):\n    if (sieve[p]):\n      l.append(p)\n      for i in range(p, n+1, p):sieve[i] = False\n  return l\n\ndef Next_Greater_Element_for_all_in_array(arr): \n\ts,n,reta,retb = list(),len(arr),[],[];arr1 = [list([0,i]) for i in range(n)]\n\tfor i in range(n - 1, -1, -1): \n\t\twhile (len(s) > 0 and s[-1][0] <= arr[i]):s.pop() \n\t\tif (len(s) == 0):arr1[i][0] = -1\t\t\t\t\t\n\t\telse:arr1[i][0] = s[-1]\t \n\t\ts.append(list([arr[i],i]))\t\t\n\tfor i in range(n):reta.append(list([arr[i],i]));retb.append(arr1[i][0])\n\treturn reta,retb\n\ndef find_lcm_array(A):\n\tif len(A) == 1:return A[0]\n\tl = lcm(A[0], A[1] ) \n\tfor i in range(2, len(A)):l = lcm(l, A[i]) \n\treturn l\n\ndef polygonArea(X,Y,n):   \n    area = 0.0;j = n - 1\n    for i in range(n):area += (X[j] + X[i]) * (Y[j] - Y[i]);j = i   \n    return abs(area / 2.0)\n\ndef merge(a, b):\n\tans = defaultdict(int)\n\tfor i in a:ans[i] += a[i]\n\tfor i in b:ans[i] += b[i]\n\treturn ans\n\ndef subarrayBitwiseOR(A): \n\tres,pre = set(),{0}\n\tfor x in A: pre = {x | y for y in pre} | {x} ;res |= pre \n\treturn len(res) \n\n# Print the all possible subset sums that lie in a particular interval of l <= sum <= target\ndef subset_sum(numbers,l,target, partial=[]):\n    s = sum(partial)\n    if l <= s <= target:print (\"sum(%s)=%s\" % (partial, s))\n    if s >= target:return \n    for i in range(len(numbers)):subset_sum(numbers[i+1:], l,target, partial + [numbers[i]])\n\ndef isSubsetSum(arr, n, summ):       \n    # The value of subarr[i][j] will be true if there is a \n    # subarr of arr[0..j-1] with summ equal to i \n    subarr =([[False for i in range(summ + 1)]for i in range(n + 1)]) \n      \n    # If summ is 0, then answer is true  \n    for i in range(n + 1):subarr[i][0] = True\n          \n    # If summ is not 0 and arr is empty,then answer is false  \n    for i in range(1, summ + 1):subarr[0][i]= False\n              \n    # Fill the subarr table in botton up manner \n    for i in range(1, n + 1): \n        for j in range(1, summ + 1): \n            if j<arr[i-1]:subarr[i][j] = subarr[i-1][j] \n            if j>= arr[i-1]:subarr[i][j] = (subarr[i-1][j] or subarr[i - 1][j-arr[i-1]])       \n    return subarr[n][summ] \n\ndef pre(s):\n    n = len(s);pi = [0] * n\n    for i in range(1, n):\n        j = pi[i - 1]\n        while j and s[i] != s[j]:j = pi[j - 1]\n        if s[i] == s[j]:j += 1\n        pi[i] = j\n    return pi\n\ndef prod(a):\n    ans = 1\n    for each in a:ans = (ans * each)\n    return ans\n\ndef binary(x, length=16):\n    y = bin(x)[2:]\n    return y if len(y) >= length else \"0\" * (length - len(y)) + y\n\ndef printSubsequences(arr, index, subarr): \n    if index == len(arr): \n        if len(subarr) != 0:print(subarr)       \n    else:printSubsequences(arr, index + 1, subarr);printSubsequences(arr, index + 1, subarr+[arr[index]])       \n    return\n\ndef modFact(n, p): \n    if n >= p:return 0      \n    result = 1\n    for i in range(1, n + 1):result = (result * i) % p    \n    return result \n\ndef SieveOfEratosthenes(n): \n    prime = [True for i in range(n + 1)]\n    for p in range(2,ceil(sqrt(n))+1):\n        if (prime[p] == True): \n            for i in range(p * 2, n + 1, p):prime[i] = False\n    prime[0]= False;prime[1]= False;return prime\n    \n#defining a LRU Cache\n# where we can set values and get values based on our requirement\nclass LRUCache: \n\t# initialising capacity \n\tdef __init__(self, capacity: int): \n\t\tself.cache = OrderedDict() \n\t\tself.capacity = capacity \n\n\t# we return the value of the key \n\t# that is queried in O(1) and return -1 if we \n\t# don't find the key in out dict / cache. \n\t# And also move the key to the end \n\t# to show that it was recently used. \n\tdef get(self, key: int) -> int: \n\t\tif key not in self.cache:return -1\n\t\telse:self.cache.move_to_end(key);return self.cache[key] \n\n\t# first, we add / update the key by conventional methods. \n\t# And also move the key to the end to show that it was recently used. \n\t# But here we will also check whether the length of our \n\t# ordered dictionary has exceeded our capacity, \n\t# If so we remove the first key (least recently used) \n\tdef put(self, key: int, value: int) -> None: \n\t\tself.cache[key] = value;self.cache.move_to_end(key) \n\t\tif len(self.cache) > self.capacity:self.cache.popitem(last = False)\n\nclass segtree:\n    def __init__(self,n):\n        self.m = 1\n        while self.m < n:self.m *= 2\n        self.data = [0] * (2 * self.m)\n    def __setitem__(self,i,x):\n        x = +(x != 1);i += self.m;self.data[i] = x;i >>= 1\n        while i:self.data[i] = self.data[2 * i] + self.data[2 * i + 1];i >>= 1\n    def __call__(self,l,r):\n        l += self.m;r += self.m;s = 0\n        while l < r:\n            if l & 1:s += self.data[l];l += 1\n            if r & 1:r -= 1;s += self.data[r]\n            l >>= 1;r >>= 1\n        return s        \n\nclass FenwickTree:\n  def __init__(self, n):self.n = n;self.bit = [0]*(n+1)  \n  def update(self, x, d):\n    while x <= self.n:self.bit[x] += d;x += (x & (-x))  \n  def query(self, x):\n    res = 0\n    while x > 0:res += self.bit[x];x -= (x & (-x))\n    return res\n  def range_query(self, l, r):return self.query(r) - self.query(l-1)    \n\n# Python program to print connected \n# components in an undirected graph \n\nclass Graph: \n\tdef __init__(self,V):self.V = V ;self.adj = [[] for i in range(V)] \n\tdef DFSUtil(self, temp, v, visited): \n\t\tvisited[v] = True;temp.append(v) \n\t\tfor i in self.adj[v]: \n\t\t\tif visited[i] == False:temp = self.DFSUtil(temp, i, visited) \n\t\treturn temp \n\t# method to add an undirected edge \n\tdef addEdge(self, v, w):self.adj[v].append(w);self.adj[w].append(v) \n\t# Method to retrieve connected components in an undirected graph \n\tdef connectedComponents(self): \n\t\tvisited,cc = [],[]\n\t\tfor i in range(self.V):visited.append(False) \n\t\tfor v in range(self.V): \n\t\t\tif visited[v] == False:temp = [];cc.append(self.DFSUtil(temp, v, visited)) \n\t\treturn cc \n    \nclass MergeFind:\n    def __init__(self, n):self.parent = list(range(n));self.size = [1] * n;self.num_sets = n;self.lista = [[_] for _ in range(n)]\n    def find(self, a):\n        to_update = []\n        while a != self.parent[a]:to_update.append(a);a = self.parent[a]\n        for b in to_update:self.parent[b] = a\n        return self.parent[a]\n    def merge(self, a, b):\n        a = self.find(a);b = self.find(b)\n        if a == b:return\n        if self.size[a] < self.size[b]:a, b = b, a\n        self.num_sets -= 1;self.parent[b] = a;self.size[a] += self.size[b];self.lista[a] += self.lista[b];self.lista[b] = []\n    def set_size(self, a):return self.size[self.find(a)]\n    def __len__(self):return self.num_sets\n# This is Kosaraju's Algorithm and use this class of graph for only that purpose    \n# can add more template functions here\n    \n# end of template functions\n\n# To enable the file I/O i the below 2 lines are uncommented.\n# read from in.txt if uncommented\nif os.path.exists('in.txt'): sys.stdin=open('in.txt','r')\n# will print on Console if file I/O is not activated\n#if os.path.exists('out.txt'): sys.stdout=open('out.txt', 'w')\n\n# inputs template\n#for fast input we areusing sys.stdin\ndef inp(): return sys.stdin.readline().strip()\n\n#for fast output, always take string\ndef out(var): sys.stdout.write(str(var))  \n\n# custom base input needed for the program\ndef I():return (inp())\ndef II():return (int(inp()))\ndef FI():return (float(inp()))\ndef SI():return (list(str(inp())))\ndef MI():return (map(int,inp().split()))\ndef LI():return (list(MI()))\ndef SLI():return (sorted(LI()))\ndef MF():return (map(float,inp().split()))\ndef LF():return (list(MF()))\ndef SLF():return (sorted(LF()))\n\n# end of inputs template\n\n# common modulo values used in competitive programming\nsys.setrecursionlimit(10**6)\nINF = float('inf')\nMOD = 998244353\nmod = 10**9+7\n\n# any particular user-defined functions for the code.\n# can be written here.   \n                                               \n# end of any user-defined functions\n\n# main functions for execution of the program.\nif __name__ == '__main__':  \n    # execute your program from here.\n    # start your main code from here\n        \n    # Write your code\n    for i in range(II()):\n        n,t = MI();count=0        \n        if n==0:print(0);continue        \n        if t==0:print(1);continue        \n        z=(n-1)&t\n        if z==0:count=count+1        \n        x=(((1+24*t)**(0.5))-1)/6;y=x;x=int(x)    \n        for j in range(1,x+1):\n            u=((j*(3*j-1))//2);a=n+t-j-1-u;b=t-j-u;z=(a-b)&b\n            if z==0:count=count+1        \n            a=a+j;b=b+j;z=(a-b)&b\n            if z==0:count=count+1        \n        x2=y+ (1/3);x2=int(x2)        \n        for j in range(x+1,x2+1):\n            u=((j*(3*j-1))//2);a=n+t-1-u;b=t-u;z=(a-b)&b\n            if z==0:count=count+1                \n        print(1) if count%2==1 else print(0)  \n      \n    # end of main code\n    # end of program\n\n# This program is written by :\n#   Shubham Gupta\n#   B.Tech (2019-2023)\n#   Computer Science and Engineering,\n#   Department of EECS\n#   Contact No:8431624358\n#   Indian Institute of Technology(IIT),Bhilai\n#   Sejbahar,\n#   Datrenga,\n#   Raipur,\n#   Chhattisgarh\n#   492015\n\n#   THANK YOU FOR \n#YOUR KIND PATIENCE FOR READING THE PROGRAM.    "
                },
                {
                    "id": 38449567,
                    "submission_date": 1601709477,
                    "language": "PYTH 3",
                    "username": "k_k_s",
                    "user_rating_star": 5,
                    "contest_code": "OCT20A",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "4.16",
                    "memory": "17.5M",
                    "solution": 38449567,
                    "code": "from sys import stdout,stdin\nfrom collections import defaultdict,deque\nimport math\n\nm=115475\nu=[0]*m\nfor i in range(m):\n    u[i]=(i*((3*i)-1))//2\n\nt=int(stdin.readline())\nfor _ in range(t):\n    n,k=map(int,stdin.readline().split())\n    temp=math.sqrt((1/36)+((2*k)/3))\n    temp+=0.00000000000005\n    #print(temp-(1/6),temp+(1/6))\n    lower=math.floor(temp-(1/6))\n    upper=math.floor(temp+(1/6))\n    #print(lower,upper)\n    a,b,c=0,0,0\n    if (n+k-1)|(k)==(n+k-1):\n        a=1\n    for i in range(1,lower+1):\n        x,y=n-1,k-u[i]-i\n        x+=y\n        if x|y==x:\n            b=b^1\n    for i in range(1,upper+1):\n        x,y=n-1,k-u[i]\n        x+=y\n        if x|y==x:\n            c=c^1\n    print(a^b^c)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\n\n\n"
                }
            ]
        },
        "PCJ18E": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "        2\n        5\n        1 2 3 4 5\n        5\n        1 3 2 5 4",
                    "output": "        0\n        3",
                    "explanation": "For the second sample, in the first move, we move 3 to the end of the array. In the second move, we move 4 to the end and finally in the third move, we move 5 to the end."
                }
            ],
            "problem_statement": "Chef loves sorting! Chef recently learnt about a new form of sorting, endsort! \nWhile performing endsort of an array $A$ of $N$ distinct elements, Chef can move any element to the end of the array. \nHowever, Chef fears that this will take too much time. Help Chef find the number of moves to sort the given array in ascending order using endsort!\nInput:\n\nThe first line contains a single integer $T$, the number of test cases. \nThe first line of each test case contains a single integer $N$, the number of elements of given array $A$. \nThe next line would contain $N$ space separated integers, the elements of the array. \n\nOutput:\nPrint a single integer, the minimum number of moves to sort the array in ascending order using endsort.\nConstraints\n\n$1 \\leq T \\leq 10$\n$1 \\leq N \\leq 100000$\n$1 \\leq A_{i} \\leq 10^9$",
            "input_format": "",
            "output_format": "",
            "problem_name": "Chef and Sorting",
            "user_tags": [
                "1D Arrays",
                "ad-hoc",
                "Sorting"
            ],
            "computed_tags": [
                "Data Structures",
                "Arrays",
                "Algorithms",
                "Constructive"
            ],
            "problem_code_id": "PCJ18E",
            "difficulty_level": "2133",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 37154886,
                    "submission_date": 1598425739,
                    "language": "PYTH 3",
                    "username": "reetam_123",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.48",
                    "memory": "21.1M",
                    "solution": 37154886,
                    "code": "for t in range(int(input())):\r\n    n = int(input())\r\n    arr = [int(i) for i in input().split()]\r\n    l = sorted(arr)\r\n    i = 0\r\n    j = 0\r\n    while(i<n and j<n):\r\n        if l[i]==arr[j]:\r\n            i+=1\r\n            j+=1\r\n        else:\r\n            j+=1\r\n    print(n-i)"
                },
                {
                    "id": 33226418,
                    "submission_date": 1590145308,
                    "language": "PYTH 3",
                    "username": "shubhamiitbh",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.42",
                    "memory": "22.8M",
                    "solution": 33226418,
                    "code": "for se in range(int(input())):\n    n=int(input());arr = list(map(int,input().split()));l = sorted(arr);i=j=0\n    while(i<n and j<n):\n        if(l[i]==arr[j]):i,j = i+1,j+1\n        else:j=j+1\n    print(n-i)    "
                }
            ]
        },
        "SPECIES": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [],
            "problem_statement": "Read problems statements in Mandarin Chinese, Russian and Vietnamese as well.\n\nBearland can be represented as a square grid that consists of N rows and N columns.\nTwo cells are called adjacent if they share a side.\nIn the input, each cell is described by one character:\n\n\n'.' is an empty cell.\n'B', 'G' or 'P' is a cell inhabited by bears of one species \u2014 brown, grizzly or polar bears respectively.\n'?' is a cell inhabited by bears of one species but you don't know which one.\nNote that this cell can't be empty.\n\nGrizzly bears are the most aggressive species.\nIf a cell is inhabited by grizzly bears, all adjacent cells should be empty, because otherwise there would be fights between bears.\nBrown and polar bears are a bit calmer.\nAll brown bears are fine with other brown bears in adjacent cells, but they would fight with bears of any other species.\nSimilarly, polar bears would fight with bears of any species other than polar bears.\nLet X denote the number of question marks.\nSince each question mark represents one of the three species, there are 3X ways to replace them with characters 'B', 'G' and 'P' (denoting the species that live in that cell).\nFind the number of such ways that there are no fights between bears.\nPrint the answer modulo (109+7).\nInput\nThe first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows.\n\nThe first line of each test case contains an integer N denoting the size of the grid.\n\nThe following N lines describe the grid.\nEach of those lines contains a string of length N.\nEach character is one of five: '.', '?', 'B', 'G', 'P'.\n\n\n\nOutput\nFor each test case, output a single line containing one integer \u2014 the number of ways to replace question marks to avoid fights in Bearland, modulo (109+7).\nConstraints\n\n1 \u2264 T \u2264 50\n2 \u2264 N \u2264 50\n\nSubtasks\n\nSubtask #1 (30 points): 2 \u2264 N \u2264 3\nSubtask #2 (30 points): Each character in the grid will be either '.' or '?'.\nSubtask #3 (40 points): Original constraints.\n\nExample\nInput:\n6\n3\n..?\n.?B\nG..\n2\nGG\n..\n3\n?..\n.??\n??.\n3\n??P\n???\n??B\n7\n?.?.?.?\n.?.?.?.\n?.?.?.?\n.?.?.?.\n?.?.?.?\n.?.?.?.\n?.?.?.?\n2\nPP\nPP\n\nOutput:\n1\n0\n6\n0\n288603514\n1\n\nExplanation\nTest case 1. We are given the grid of size 3 \u00d7 3. One of the already fixed cells is inhabited by brown bears. They would fight with bears of any species other than brown bears, so adjacent cells with question marks must by inhabited by brown bears as well.\nHence, there is only 1 way to replace question marks (both of them must be replaced by 'B').\nTest case 2. In the given grid, there are two adjacent cells both inhabited by grizzly bears.\nThey will fight with each other, so the answer is 0 \u2014 it's impossible to replace question marks so that there would be no fights (it doesn't matter that there are no question marks at all).\nTest case 3. There are 6 ways:\nB.. B.. G.. G.. P.. P..\n.BB .PP .BB .PP .BB .PP\nBB. PP. BB. PP. BB. PP.\n\nTest case 4. No matter how we replace question marks, bears in some two adjacent cells will start a fight.\nThe answer is 0.",
            "input_format": "",
            "output_format": "",
            "problem_name": "Bear and Species",
            "user_tags": [
                "Flood Fill",
                "DFS"
            ],
            "computed_tags": [
                "Algorithms",
                "Graph Algos",
                "Traversals"
            ],
            "problem_code_id": "SPECIES",
            "difficulty_level": "2139",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 90055239,
                    "submission_date": 1676889163,
                    "language": "PYTH 3",
                    "username": "rs5228127",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.04",
                    "memory": "9.7M",
                    "solution": 90055239,
                    "code": "import math,sys,bisect,heapq,os\r\nfrom collections import defaultdict,Counter,deque\r\nfrom itertools import groupby,accumulate\r\nfrom functools import lru_cache\r\n#sys.setrecursionlimit(200000000)\r\nint1 = lambda x: int(x) - 1\r\ndef input(): return sys.stdin.readline().rstrip('\\r\\n')\r\n#input = iter(sys.stdin.buffer.read().decode().splitlines()).__next__\r\naj = lambda: list(map(int, input().split()))\r\ndef list3d(a, b, c, d): return [[[d] * c for j in range(b)] for i in range(a)]\r\nMOD = 1000000000 + 7\r\ndef Y(c):  print([\"NO\",\"YES\"][c])\r\ndef y(c):  print([\"no\",\"yes\"][c])\r\ndef Yy(c):  print([\"No\",\"Yes\"][c])\r\n\r\n\r\n\r\n\r\ndef solve():\r\n\r\n\td1 = [0,0,1,-1] \r\n\td2 = [1,-1,0,0]\r\n\tdef ch1(x,y):\r\n\t\tif x < 0 or x >= n or y < 0 or y >= m:\r\n\t\t\treturn False\r\n\t\treturn True\r\n\r\n\tdef ch2(x,y):\r\n\t\tif vis[x][y] or mat[x][y] != '?':\r\n\t\t\treturn False\r\n\t\treturn True\r\n\r\n\r\n\tdef dfs(i,j):\r\n\t\tst = deque()\r\n\t\tst.append((i,j))\r\n\t\tC = Counter()\r\n\t\tC[mat[i][j]] = 1\r\n\t\twhile st:\r\n\t\t\tx,y = st.pop()\r\n\t\t\tfor i,j in zip(d1,d2):\r\n\t\t\t\txx = x + i\r\n\t\t\t\tyy = y + j\r\n\t\t\t\tif ch1(xx,yy):\r\n\t\t\t\t\tif ch2(xx,yy):\r\n\t\t\t\t\t\tst.append((xx,yy))\r\n\t\t\t\t\t\tC[mat[xx][yy]] += 1\r\n\t\t\t\t\tif mat[xx][yy] in ['G','B','P']:\r\n\t\t\t\t\t\tC[mat[xx][yy]] = 1\r\n\t\t\t\t\tvis[xx][yy] = True\r\n\t\treturn C\r\n\r\n\r\n\tfor _ in range(int(input())):\r\n\t\tn,= aj()\r\n\t\tm= n\r\n\t\tmat = []\r\n\t\tfor i in range(n):\r\n\t\t\tB = [*input()]\r\n\t\t\tmat.append(B)\r\n\t\tvis = [[False]*m for i in range(n)]\r\n\t\tans = 1\r\n\t\tfor i in range(n):\r\n\t\t\tfor j in range(m):\r\n\t\t\t\tif not vis[i][j] and ch2(i,j) :\r\n\t\t\t\t\tvis[i][j] = True\r\n\t\t\t\t\tC = dfs(i,j)\r\n\t\t\t\t\t#print(C)\r\n\t\t\t\t\tif '?' in C:\r\n\t\t\t\t\t\tif len(C) == 4 or C['G'] == 1 or (len(C) == 3 and C['P'] == 1 and C['B'] == 1) :\r\n\t\t\t\t\t\t\tans = 0;break\r\n\t\t\t\t\t\telif len(C) == 1:\r\n\t\t\t\t\t\t\tif C['?'] == 1:\r\n\t\t\t\t\t\t\t\tans*= 3\r\n\t\t\t\t\t\t\t\tans %= MOD\r\n\t\t\t\t\t\t\telse:\r\n\t\t\t\t\t\t\t\tans*=2\r\n\t\t\t\t\t\t\t\tans %= MOD\r\n\t\t\tif ans == 0:\r\n\t\t\t\tbreak\r\n\t\tif ans != 0:\r\n\t\t\tfor i in range(n):\r\n\t\t\t\tfor j in range(m):\r\n\t\t\t\t\tif mat[i][j] in ['G','P','B']:\r\n\t\t\t\t\t\tfor ii,jj in zip(d1,d2):\r\n\t\t\t\t\t\t\tx = ii + i\r\n\t\t\t\t\t\t\ty = jj + j\r\n\t\t\t\t\t\t\tif ch1(x,y):\r\n\t\t\t\t\t\t\t\tif mat[i][j] == 'G' and mat[x][y] in ['G','P','B','?']:\r\n\t\t\t\t\t\t\t\t\tans = 0\r\n\t\t\t\t\t\t\t\t\tbreak\r\n\t\t\t\t\t\t\t\telif mat[i][j] == 'P' and mat[x][y] in ['G','B']:\r\n\t\t\t\t\t\t\t\t\tans = 0\r\n\t\t\t\t\t\t\t\t\tbreak\r\n\t\t\t\t\t\t\t\telif mat[i][j] == 'B' and mat[x][y] in ['G','P']:\r\n\t\t\t\t\t\t\t\t\tans = 0\r\n\t\t\t\t\t\t\t\t\tbreak\r\n\t\t\t\tif ans == 0:\r\n\t\t\t\t\tbreak\r\n\t\tprint(ans%MOD)\r\n\r\n\r\n\r\ntry:\r\n\t#os.system(\"online_judge.py\")\r\n\tsys.stdin = open('input.txt', 'r') \r\n\tsys.stdout = open('output.txt', 'w')\r\nexcept:\r\n\tpass\r\n\r\nsolve()\r\n"
                },
                {
                    "id": 29188866,
                    "submission_date": 1579979756,
                    "language": "PYTH 3",
                    "username": "vikram9927",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.04",
                    "memory": "18M",
                    "solution": 29188866,
                    "code": "import sys\nsys.setrecursionlimit((10**7))\nfrom collections import defaultdict\ndef Neigh(i,j,N):\n    L=[]\n    if(i+1 !=N):\n        L.append([i+1,j])\n    if(j+1 !=N):\n        L.append([i,j+1])\n    if(i!=0):\n        L.append([i-1,j])\n    if(j!=0):\n        L.append([i,j-1])\n    return L\n    \ndef chngneigh(Arr,i,j,target):\n    ll=Neigh(i,j,N)\n    next=[]\n    for x in ll:\n        if(Arr[x[0]][x[1]]==\"?\"):\n            Arr[x[0]][x[1]]=target\n            next.append(x)\n    for x in next:\n        Arr=chngneigh(Arr,x[0],x[1],target)\n    return Arr\n    \nfor _ in range(int(input())):\n    N=int(input())\n    Mat=[]\n    for _ in range(N):\n        row=list(input())\n        Mat.append(row)\n    for i in range(N):\n        for j in range(N):\n            if(Mat[i][j]==\"P\"):\n                Mat=chngneigh(Mat,i,j,\"P\")\n            elif(Mat[i][j]==\"B\"):\n                Mat=chngneigh(Mat,i,j,\"B\")\n    fine=True\n    for i in range(N):\n        for j in range(N):\n            if(Mat[i][j]==\".\" or Mat[i][j]==\"?\"):\n                pass\n            elif(Mat[i][j]==\"G\"):\n                ll=Neigh(i,j,N)\n                for x in ll:\n                    if(Mat[x[0]][x[1]]!=\".\"):\n                        fine=False\n                        break\n            elif(Mat[i][j]==\"P\"):\n                ll=Neigh(i,j,N)\n                for x in ll:\n                    if(Mat[x[0]][x[1]]==\"B\" or Mat[x[0]][x[1]]==\"G\" ):\n                        fine=False\n                        break\n            elif(Mat[i][j]==\"B\"):\n                ll=Neigh(i,j,N)\n                for x in ll:\n                    if(Mat[x[0]][x[1]]==\"P\" or Mat[x[0]][x[1]]==\"G\" ):\n                        fine=False\n                        break\n        if(fine==False):\n            break\n    if(fine==False):\n        print(\"0\")\n        continue\n    else:\n        solo=0\n        for i in range(N):\n            for j in range(N):\n                if(Mat[i][j]==\"?\"):\n                    ll=Neigh(i,j,N)\n                    yup=True\n                    for x in ll:\n                        if(Mat[x[0]][x[1]]!=\".\"):\n                            yup=False\n                    if(yup==True):\n                        solo+=1\n                        Mat[i][j]=\"D\"\n        clustor=0\n        for i in range(N):\n            for j in range(N):\n                if(Mat[i][j]==\"?\"):\n                    Mat=chngneigh(Mat,i,j,\"c\")\n                    clustor+=1\n        answer=pow(3,solo,1000000007)*pow(2,clustor,1000000007)\n        print(answer%1000000007)"
                }
            ]
        },
        "SUBLD": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "3\n2\n3\n100",
                    "output": "9\n10\n170",
                    "explanation": ""
                }
            ],
            "problem_statement": "Vasya learned about integer subtraction in school. He is still not very good at it, so he is only able to subtract any single digit number from any other number (which is not necessarily single digit).\nFor practice, Vasya chose a positive integer $n$ and wrote it on the first line in his notepad. After that, on the second line he wrote the result of subtraction of the first digit of $n$ from itself. For example, if $n = 968$, then the second line would contain $968 - 9 = 959$, while with $n = 5$ the second number would be $5 - 5 = 0$. If the second number was still positive, then Vasya would write the result of the same operation on the following line, and so on. For example, if $n = 91$, then the sequence of numbers Vasya would write starts as follows: $91, 82, 74, 67, 61, 55, 50, \\ldots$. One can see that any such sequence eventually terminates with the number $0$.\nSince then, Vasya lost his notepad. However, he remembered the total number $k$ of integers he wrote down (including the first number $n$ and the final number $0$). What was the largest possible value of $n$ Vasya could have started with?\nInput:\nThe first line contains $T$ , number of test cases per file.\nThe only line in each testcase contains a single integer $k-$ the total number of integers in Vasya's notepad ($2 \\leq k \\leq 10^{12}$).\nOutput:\nPrint a single integer$-$ the largest possible value of the starting number $n$. It is guaranteed that at least one such number $n$ exists, and the largest possible value is finite.\nConstraints\n\n$1 \\leq  T \\leq 34 $\n$2 \\leq k \\leq 10^{12}$",
            "input_format": "",
            "output_format": "",
            "problem_name": "Subtract Leading Digit",
            "user_tags": [
                "vijju123"
            ],
            "computed_tags": [],
            "problem_code_id": "SUBLD",
            "difficulty_level": "2062",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 38561387,
                    "submission_date": 1601858538,
                    "language": "PYTH 3",
                    "username": "thomas456",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.04",
                    "memory": "17.5M",
                    "solution": 38561387,
                    "code": "def findsubtract(num):\n    n = num\n    strn = str(n)\n    count = 0\n    while n > 0:\n        fd = int(strn[0])\n        p = len(strn) - 1\n        if p == 0:\n            n -= fd\n            strn = str(n)\n            count += 1\n        else:\n            n1 = n - fd * 10**p\n            n2 = n1//fd+1\n            count += n2\n            n -= n2 * fd\n            strn = str(n)\n    return count + 1\n\n\n\n\n\nfor i in range(int(input())):\n    k = int(input())\n    if k == 2:\n        print(9)\n        continue\n    n = None\n    brutetop = 4 * k\n    brutebottom = 0\n    while abs(brutetop - brutebottom) > 20:\n        v = round((brutetop + brutebottom) / 2)\n        t = findsubtract(v)\n        if t <= k:\n            brutebottom = v\n        else:\n            brutetop = v\n    for j in range(brutetop, brutebottom - 1, -1):\n        n = findsubtract(j)\n        if n == k:\n            print(j)\n            break\n"
                },
                {
                    "id": 33085232,
                    "submission_date": 1589477572,
                    "language": "PYTH 3",
                    "username": "shubhamiitbh",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.10",
                    "memory": "17.6M",
                    "solution": 33085232,
                    "code": "def getAns(num):\n    if num<10:return 2 \n    last=int(str(num)[0]);rem=int(str(num)[1:]);steps=2;p=len(str(num))-1\n    while True:\n        steps+=rem//last+1;rem=rem%last \n        if last>0:rem=rem+10**p-last\n        last=last-1\n        if last==0:\n            p=p-1;last=9\n            if(len(str(rem))==1):rem=0\n            else:rem=int(str(rem)[1:])\n        if rem==0:            break\n    return steps\nfor awa in range(int(input())):\n    k=int(input())\n    if(k==1):print(0)\n    elif(k==2):print(9)\n    elif(k==3):print(10)\n    else:\n        low,high,ans = 0,10**18,0\n        while(low<=high):\n            mid=(low+high)//2;temp=getAns(mid)\n            if int(temp)==k:ans=max(ans,mid);low=mid+1 \n            elif temp<k:low=mid+1 \n            else:high=mid-1 \n        print(ans)"
                }
            ]
        },
        "H4": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "6\n1 100000\n2 100000\n3 100000\n4 100000\n5 100000\n6 100000",
                    "output": "1\n5\n32\n288\n3413\n50069",
                    "explanation": ""
                }
            ],
            "problem_statement": "Given n and m, calculate 11 +  22 + 33 + ... + nn modulo m.\nInput\nThe first line contains 1 \u2264 t \u2264 10, the number of test cases. Then the test case definitions follow. Each test case is of the form: 1 \u2264 n 1018, 1 \u2264 m \u2264 200000\nOutput\nFor each test case simply write a single line containing the answer to the problem.",
            "input_format": "",
            "output_format": "",
            "problem_name": "Just a simple sum",
            "user_tags": [
                "admin"
            ],
            "computed_tags": [],
            "problem_code_id": "H4",
            "difficulty_level": "2023",
            "ai_solutions": [
                "t = int(input().strip())\nmod = 10**9+7\nfor _ in range(t):\n    n, m = map(int,input().strip().split())\n    n %= mod\n    m %= mod\n    ans = 0\n    for i in range(1, n+1):\n        ans = (ans + pow(i, i, m)) % m\n    print(ans)",
                "def power(x, y, p):\n    res = 1\n    x = x % p\n    while (y > 0):\n        if (y & 1):\n            res = (res * x) % p\n        y = y >> 1\n        x = (x * x) % p\n    return res\n\nt = int(input().strip())\nfor _ in range(t):\n    n, m = map(int,input().strip().split())\n    ans = 0\n    for i in range(1, n+1):\n        ans = (ans + power(i, i, m)) % m\n    print(ans)"
            ],
            "human_solutions": [
                {
                    "id": 39166444,
                    "submission_date": 1603867437,
                    "language": "PYTH 3",
                    "username": "ayan_codechef",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "42.75",
                    "memory": "17.5M",
                    "solution": 39166444,
                    "code": "def p(b, e):\r\n    t = 1\r\n    while(e):\r\n        if(e & 1):\r\n            t = (t*b) % mod\r\n        b = (b*b) % mod\r\n        e >>= 1\r\n    return t\r\n\r\n\r\ndef f(i, e):\r\n    b = p(i, i)\r\n    t = 0\r\n    m = 1\r\n    m2 = p(i, mod)\r\n    while(e):\r\n        if(e & 1):\r\n            t = (t+m*b % mod) % mod\r\n            m = (m*m2) % mod\r\n        b = (b*(m2+1)) % mod\r\n        m2 = (m2*m2) % mod\r\n        e >>= 1\r\n    return t\r\n\r\n\r\nfor _ in range(int(input())):\r\n    n, mod = map(int, input().split())\r\n    ans = 0\r\n    for i in range(1, min(n+1, mod)):\r\n        ans = (ans+f(i, (n+mod-i)//mod)) % mod\r\n    print(ans)\r\n"
                },
                {
                    "id": 33523383,
                    "submission_date": 1590913985,
                    "language": "PYTH 3",
                    "username": "vasanthssv_258",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "44.83",
                    "memory": "17.6M",
                    "solution": 33523383,
                    "code": "def S(a, n, m):\n    if n == -1: return 0\n    if n == 0: return 1\n    if n == 1: return (1 + a) % m \n    if n % 2 == 1: return ((1 + a) * S(a * a % m, (n - 1)//2, m))%m\n    else: return (1 + a * (1 + a) * S(a * a % m, n//2 - 1, m) )%m  \nfor _ in range(int(input())):\n    n,m = map(int,input().split(' '));s=0;e = n//m\n    for i in range(1,n%m+1):s += pow(i,e*m + i,m);s = s%m\n    for i in range(2,m+1):s += (((S(pow(i,m,m),e-1,m) )%m)*pow(i,i,m))%m;s = s%m\n    print((s+e)%m)    "
                }
            ]
        },
        "A4": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "2\n4 2\n9 3",
                    "output": "25 56\n387 489",
                    "explanation": ""
                }
            ],
            "problem_statement": "Johnny was asked by his math teacher to compute nn (n to the power of n, where n is an integer), and has to read his answer out loud. This is a bit of a tiring task, since the result is probably an extremely large number, and would certainly keep Johnny occupied for a while if he were to do it honestly. But Johnny knows that the teacher will certainly get bored when listening to his answer, and will sleep through most of it! So, Johnny feels he will get away with reading only the first k digits of the result before the teacher falls asleep, and then the last k digits when the teacher wakes up.\n\nWrite a program to help Johnny to compute the digits he will need to read out.\nInput\nThe first line contains t, the number of test cases (about 30000). Then t test cases follow.\nEach test case consists of one line containing two numbers n and k (1 \u2264 n \u2264 109, 1 \u2264 k \u2264 9). It is guaranteed that k is not more than the number of digits of nn.\nOutput\nFor each test case, print out one line containing two numbers, separated by a space, which are the first and the last k digits of nn.",
            "input_format": "",
            "output_format": "",
            "problem_name": "The Rise and Fall of Power",
            "user_tags": [
                "Arbitrary Precision",
                "Basic Maths"
            ],
            "computed_tags": [
                "Mathematics"
            ],
            "problem_code_id": "A4",
            "difficulty_level": "2078",
            "ai_solutions": [
                "import math\n\ndef solve(n, k):\n    a = pow(10, k)\n    b = pow(n, n, a)\n    c = pow(10, k - 1)\n    d = int(str(pow(n, n))[:k])\n    return d, b if b > c else b + a\n\nt = int(input().strip())\nfor _ in range(t):\n    n, k = map(int, input().strip().split())\n    first, last = solve(n, k)\n    print(first, last)"
            ],
            "human_solutions": [
                {
                    "id": 40523419,
                    "submission_date": 1608349252,
                    "language": "PYTH 3",
                    "username": "krishnavamsi15",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "2.76",
                    "memory": "21.9M",
                    "solution": 40523419,
                    "code": "from decimal import *\nfor i in range(int(input())):\n    x, y = input().split()\n    x = int(x)\n    y = int(y)\n    if (x < 1000):\n        q1 = str(x ** x)[:y]\n    else:\n        x = Decimal(x)\n        q1 = str(int(10 **(x*(x.log10())%1 + y - 1)))\n    q2 = str(pow(x, x, 10 ** y)).zfill(y)    \n    print(q1 + \" \" + q2)"
                },
                {
                    "id": 32319625,
                    "submission_date": 1587921818,
                    "language": "PYTH 3",
                    "username": "vjudge1",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "2.95",
                    "memory": "21.9M",
                    "solution": 32319625,
                    "code": "from decimal import *\nfor _ in range(int(input())):\n    n,k = map(int,input().split())\n    if n >= 1000 :q1 = str(int(pow(10, (Decimal(n) *(Decimal(n).log10()))%1 + k -1)))\n    else: q1 = str(n**n)[:k]               \n    print(q1 + \" \" + str(pow(n, n, 10 ** k)).zfill(k))"
                }
            ]
        },
        "UWCOI20D": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "\t2\n\t2\n\t10\n\t01\n\t4\n\t1000\n\t0010\n\t0100\n\t0001",
                    "output": "\t3\n\t8",
                    "explanation": "In the first testcase, there are three valid base plans: The entire 2x2 square, the 1x1 square which contains only the cell (1, 1) and the 1x1 square which contains only the cell (2, 2).\n\nIn the second testcase, \n\nThere are eight valid base plans:\n- The 4x4 square with top left corner at (1, 1)\n- The 3x3 square with top left corner at (1, 1)\n- The 3x3 square with top left corner at (2, 2)\n- The 3x3 square with top left corner at (1, 1)\n- The 2x2 square with top left corner at (2, 2)\n- The 1x1 square which contains only the cell (1, 1)\n- The 1x1 square which contains only the cell (2, 3)\n- The 1x1 square which contains only the cell (3, 2)\n- The 1x1 square which contains only the cell (4, 4)"
                }
            ],
            "problem_statement": "After fixing the mercury leak, Kim has arrived in the planning room, where he finds a square map of a field, with $N$ rows and $N$ columns. Each cell in the field is either empty, or has a lookout tower on it. Using his notes, he immediately realises that this field is where the JSA will build their new base!\nKim knows that Soum is a fan of symmetric base design, and will only approve of a base to be built if it is square. Furthermore, Soum also requires that all the rows in the base, and all the columns in the base have exactly one tower square in them. \nThis means that a base plan is valid if and only if:\n\nIt is square in shape\nEvery row in the base has exactly one lookout tower in it.\nEvery column in the base has exactly one lookout tower in it.\n\nKim notices that all the rows and all the columns in the field have exactly one tower square in them, but he knows that some of them could have been built to throw him off! Can you help Kim find how many valid base plans are possible in this field? Two base plans are considered different if one contains a cell in the grid that the other does not.\nPlease refer to the samples for more details.\nInput:\n\nThe first line of input contains $T$, the number of testcases.\nThe first line of each testcase contains a single integer, $N$, representing the side length of the field.\nThe next $N$ lines of each testcase contain a string of length $N$, consisting of only 0 and 1. If position $j$ in string $i$ is 0, it means that this the field has no tower at $[i][j]$, and if it is 1, then this cell does have a tower at $[i][j]$.\n\nIt is guaranteed that every row in the input will have exactly one tower, and every column in the input will also have exactly one tower.\nOutput:\nFor each testcase, output a single integer $K$, representing the number of different base plans possible.\nSubtasks\n\nFor all subtasks, $N \\leq 2500$ and $T \\leq 10$. \nIn addition, the sum of $N$ in any testfile is at most $2500$.\n\nSubtask 1 [28 points] : All the towers will be on the diagonal from the top-left to the bottom-right positions. Formally, all positions where $i = j$ have a tower. And no other position has a tower\nSubtask 2 [39 points] : $N \\leq 600$\nSubtask 3 [33 points] : $N \\leq 2500$",
            "input_format": "",
            "output_format": "",
            "problem_name": "Base Plans",
            "user_tags": [
                "2D Arrays",
                "Segment Trees",
                "Observation",
                "Two pointers",
                "Prefix Sum",
                "Range Queries"
            ],
            "computed_tags": [
                "Data Structures",
                "Arrays",
                "Advanced Data Structures",
                "Advanced Tree Structures",
                "Algorithms",
                "Simple Algos",
                "Queries"
            ],
            "problem_code_id": "UWCOI20D",
            "difficulty_level": "2189",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 30600685,
                    "submission_date": 1584756692,
                    "language": "PYTH 3",
                    "username": "predominator",
                    "user_rating_star": 3,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "1.57",
                    "memory": "24M",
                    "solution": 30600685,
                    "code": "t=int(input())\nfor _ in range(t):\n    n=int(input())\n    if(n==1):\n        m=int(input())\n        print(1)\n    else:\n        m=[]\n        indexes=[]\n        for i in range(n):\n            l=input()\n            temp=l.index('1')\n            indexes.append(temp)\n            m.append(l)\n        \n        counter=0\n        for i in range(n):\n            left=indexes[i]\n            right=indexes[i]\n            for j in range(i,n):\n                left=min(indexes[j],left)\n                right=max(indexes[j],right)\n                if(right-left == j-i):\n                    counter+=1\n        print(counter)\n\n            \n    "
                },
                {
                    "id": 29917731,
                    "submission_date": 1582751258,
                    "language": "PYTH 3",
                    "username": "hackraj",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "2.21",
                    "memory": "17.6M",
                    "solution": 29917731,
                    "code": "t=int(input())\nwhile t>0:\n    n=int(input())\n    l=[]\n    l.append(0)\n    for i in range(1,n+1):\n        c=input()\n        for j in range(n):\n            if c[j]=='1': \n                l.append(j+1)\n    sum1=0\n    for j in range(1,n+1):\n        min1=l[j]\n        max1=l[j]\n        for k in range(j,n+1):\n            min1=min(min1,l[k])\n            max1=max(max1,l[k])\n            if max1-min1==k-j:\n                sum1+=1\n    print(sum1)\n    t-=1\n                \n            \n                "
                }
            ]
        },
        "RRUN": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "\t1\n\t4\n    4 2 3 1",
                    "output": "\t7 7 7 6",
                    "explanation": "For the 1st horse the 7 subsets are-  $ [4,2,3,1],[4,2,3],[4,2,1],[4,3,1],[4,2],[4,1],[4,3]$\nFor the 2nd horse the subsets are-  $[4,2,3,1],[4,2,3],[4,2,1],[2,3,1],[2,4],[2,1],[2,3]$ \n For the 3rd horse the subsets are-  $[4,2,3,1],[4,2,3],[3,2,1],[4,3,1],[3,2],[3,1],[4,3]$ \n For the 4th horse the subsets are-  $[1,2,3],[4,2,1],[4,3,1],[1,2],[4,1],[1,3]$"
                }
            ],
            "problem_statement": "\"I hide in plain sight, just as you\".\nGus Fring has earned a huge profit from Los Pollos Hermanos and he wishes to celebrate. He loves watching horse-riding, hence he bought $N$ horses.\nOne day he organizes a horse-riding competition to celebrate the deal with Don Eladio.\nThere are $N$ horses taking part in the competition with speeds of $A$$1$$,$ $A$$2$$,$ $...,$ $A$$N$ respectively. It is given that all speeds are distinct.\nMultiple races are being conducted and it is not mandatory for each horse to participate in every race.\nFor the $i$$th$ horse, find the number of subsets with size $\\geq$ $2$ such that if a race were to be conducted between horses in this subset then the $i$$th$ horse would finish in the top three.\nFor subsets of size 2 the runner should finish either 1st or 2nd. There is no 3rd position when the size of the subset is 2.\nSince the answer might be quite large, compute it, modulo $1000000007$ $(10^9+7)$.\nInput:\n\nFirst line will contain $T$, number of testcases. Then the testcases follow. \nFirst line of each testcase contains of a single integer $N$ denoting the number of horses.\nThe second line of each testcase contains $N$ space-separated integers $A$$1$$,$ $A$$2$$,$ $...,$$A$$N$, denoting the speeds of the horses. \n\nOutput:\nFor each testcase, output a single line containing $N$ space separated integers , where the $i$$th$ integer denotes the number of subsets of size $\\geq$ $2$ modulo $(10^9+7)$, such that the $i$$th$ horse finishes in the top three.\nConstraints\n\n$1 \\leq T \\leq 5000$\n$2 \\leq N \\leq 10^5$\n$1 \\leq A[i] \\leq 10^9$\nAll speeds are distinct\nSum of N over all test cases does not exceed $5*10^5$",
            "input_format": "",
            "output_format": "",
            "problem_name": "Los Pollos Hermanos",
            "user_tags": [
                "Case work",
                "Permutations & Combinations",
                "Sorting"
            ],
            "computed_tags": [
                "Special",
                "Mathematics",
                "Combinatorics",
                "Algorithms"
            ],
            "problem_code_id": "RRUN",
            "difficulty_level": "2187",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 39632186,
                    "submission_date": 1605460113,
                    "language": "PYTH 3",
                    "username": "arijitossrndc",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "3.65",
                    "memory": "29.4M",
                    "solution": 39632186,
                    "code": "T=int(input())\r\nmod=(10**9)+7\r\nfor _ in range(T):\r\n\r\n    N=int(input())\r\n\r\n    A=list(map(int,input().split()))[:N]\r\n\r\n    B={}\r\n\r\n    for i in range(N):\r\n        B[A[i]]=i\r\n    \r\n    newresult=[0]*N\r\n    A.sort()\r\n    for i in range(N):\r\n\r\n        index=B[A[i]]\r\n        value = ((pow(2,i,mod)-1) + ((pow(2,i,mod)*(N-i-1))%mod) + ((pow(2,i,mod)*((N-i-1)*(N-i-2))//2)%mod))%mod\r\n        newresult[index]=value\r\n    \r\n    print(*newresult)\r\n"
                },
                {
                    "id": 39310076,
                    "submission_date": 1604542498,
                    "language": "PYTH 3",
                    "username": "nevs",
                    "user_rating_star": 3,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "2.67",
                    "memory": "22.1M",
                    "solution": 39310076,
                    "code": "mod = 10 ** 9 + 7\n\ndef fp(a, b):\n    ans = 1\n    while b > 0:\n        if b & 1:\n            ans = ans * a % mod\n        b >>= 1\n        a = a * a % mod\n    return ans\n\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    pair = list(enumerate(arr))\n    pair.sort(key=lambda x: x[1])\n    ans = [0] * n\n    for i in range(n):\n        s = 0\n        a = n-i-1\n        b = a * (a+1) // 2\n        p = fp(2, i)\n        s = (s + p - 1) % mod\n        s = (s + b * p % mod) % mod\n        ans[pair[i][0]] = s\n    print(' '.join(map(str, ans)))\n        \n"
                }
            ]
        },
        "SLAEL": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "\t2\n\t5 3\n\t2 4 2 4 2\n\t8 5\n\t9 3 5 7 8 11 17 2",
                    "output": "\t5\n\t3",
                    "explanation": "If 3 is inserted at anywhere in the array, it is the second largest element. Hence the maximum length is 5.\nIf 5 is inserted anywhere between 1st and 4th element, it is the second largest element. The length of such subarray is 3."
                }
            ],
            "problem_statement": "Find the length of the longest contiguous segment in an array, in which if a given element $K$ is inserted, $K$ becomes the second largest element of that subarray.\nInput:\n\nThe first line will contain $T$, number of test cases. Then the test cases follow. \nThe first line of each test case contains two integers $N$ and $K$.\nThe next line contains N space-separated integers Ai denoting the elements of the array.\n\nOutput:\nPrint a single line corresponding to each test case \u2014 the length of the largest segment.\nConstraints\n\n$1 \\leq T \\leq 10$\n$1 \\leq N \\leq 10^6$\n$1 \\leq Ai, K \\leq 10^9$\nSum of N across all test cases doesn't exceed $10^6$",
            "input_format": "",
            "output_format": "",
            "problem_name": "Second Largest Element",
            "user_tags": [
                "Combinatorics",
                "Two pointers"
            ],
            "computed_tags": [
                "Mathematics",
                "Algorithms",
                "Simple Algos"
            ],
            "problem_code_id": "SLAEL",
            "difficulty_level": "2071",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 40660390,
                    "submission_date": 1608640888,
                    "language": "PYTH 3",
                    "username": "prsb2408",
                    "user_rating_star": 3,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "5.38",
                    "memory": "24.3M",
                    "solution": 40660390,
                    "code": "for _ in range(int(input())):\n    n,k=map(int,input().split())\n    a=list(map(int,input().split()))\n    def check(mid):\n        d,left={},0\n        for i in range(mid):\n            if a[i]>k:\n                if a[i] not in d: \n                    d[a[i]]=1\n                else: \n                    d[a[i]]+=1\n        if len(d)==1:\n            return True\n        for i in range(mid,n):\n            if a[left]>k:\n                d[a[left]]-=1\n                if d[a[left]]==0: \n                    del d[a[left]]\n            if a[i]>k:\n                if a[i] not in d: \n                    d[a[i]]=1\n                else: \n                    d[a[i]]+=1\n            if len(d)==1: \n                return True\n            left+=1\n        return False\n            \n    lo,hi=0,n\n    while lo<=hi:\n        mid=(lo+hi)//2\n        #print(mid,lo,hi)\n        if check(mid):\n            res=mid\n            lo=mid+1\n        else:\n            hi=mid-1\n    print(res)\n            \n            \n            \n        "
                },
                {
                    "id": 33281300,
                    "submission_date": 1590318695,
                    "language": "PYTH 3",
                    "username": "akashssbk321",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.68",
                    "memory": "31.2M",
                    "solution": 33281300,
                    "code": "t=int(input())\nwhile t:\n    a=input().split()\n    n=int(a[0])\n    k=int(a[1])\n    lst=input().split()\n    for i in range(n):\n        lst[i] = int(lst[i])\n    greater = 0\n    length=0\n    pos = -1\n    allTimeLong=0\n    for i in range(n):\n        if lst[i]>k and greater!=0 and lst[i]!=greater:\n            greater = lst[i]\n            if allTimeLong<length:\n                allTimeLong=length\n            length = i - pos\n            pos=i\n            continue\n        elif lst[i]>k:\n            greater = lst[i]\n            pos=i\n        length+=1\n    if allTimeLong<length:\n        allTimeLong=length\n    t-=1\n    print(allTimeLong)"
                }
            ]
        },
        "CHRL3": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "3 \n1 2 3",
                    "output": "1",
                    "explanation": ""
                },
                {
                    "input": "4\n4 1 2 3",
                    "output": "2",
                    "explanation": ""
                }
            ],
            "problem_statement": "Read problems statements in Russian also.\nChef plays with the sequence of N numbers. During a single move Chef is able to choose a non-decreasing subsequence of the sequence and to remove it from the sequence. Help him to remove all the numbers in the minimal number of moves. \nInput\nThe first line of each test case contains a single N denoting the number of integers in the given sequence. The second line contains N space-separated integers A1, A2, ..., AN denoting the given sequence\nOutput\nOutput a single line containing the minimal number of moves required to remove all the numbers from the sequence.\nConstraints\n1 \u2264 N \u2264 100000.\n1 \u2264 Ai \u2264 100000.\n\n\u00a0\nScoring\nSubtask 1 (10 points):   N = 10   \nSubtask 2 (40 points):   N = 2000   \nSubtask 2 (50 points):   N = 100000",
            "input_format": "",
            "output_format": "",
            "problem_name": "Chef and Numbers",
            "user_tags": [
                "Dilworth Theorem",
                "Dynamic Programming",
                "Longest Increasing Subsequence",
                "Greedy"
            ],
            "computed_tags": [
                "Mathematics",
                "Combinatorics",
                "Algorithms",
                "DP on sequences"
            ],
            "problem_code_id": "CHRL3",
            "difficulty_level": "2163",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 35454940,
                    "submission_date": 1594391454,
                    "language": "PYTH 3",
                    "username": "mantripaawan97",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.36",
                    "memory": "18.3M",
                    "solution": 35454940,
                    "code": "n = int(input())\narr = list(map(int,input().split()))\nlds = []\nfor i in arr:\n    lo,hi = 0,len(lds)\n    while lo<hi:\n        mid = (lo+hi)>>1\n        if i<lds[mid]:lo=mid+1\n        else: hi=mid\n    if lo==len(lds): lds.append(i)\n    else: lds[lo] = i\nprint(len(lds))\n"
                },
                {
                    "id": 34065437,
                    "submission_date": 1591707805,
                    "language": "PYTH 3",
                    "username": "prudhvipvp",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.20",
                    "memory": "18.3M",
                    "solution": 34065437,
                    "code": "def CeilIndex(A, l, r, key): \n  \n    while (r - l > 1): \n      \n        m = l + (r - l)//2\n        if (A[m] >= key): \n            r = m \n        else: \n            l = m \n    return r \n   \ndef lds(A, size): \n  \n    # Add boundary case, \n    # when array size is one \n   \n    tailTable = [0 for i in range(size + 1)] \n    len = 0 # always points empty slot \n   \n    tailTable[0] = A[0] \n    len = 1\n    for i in range(1, size): \n      \n        if (A[i] < tailTable[0]): \n  \n            # new smallest value \n            tailTable[0] = A[i] \n   \n        elif (A[i] > tailTable[len-1]): \n  \n            # A[i] wants to extend \n            # largest subsequence \n            tailTable[len] = A[i] \n            len+= 1\n   \n        else: \n            # A[i] wants to be current \n            # end candidate of an existing \n            # subsequence. It will replace \n            # ceil value in tailTable \n            tailTable[CeilIndex(tailTable, -1, len-1, A[i])] = A[i] \n          \n   \n    return len\n                \nt=1\nwhile(t>0):\n    t-=1 \n    n=int(input())\n    arr=list(map(int,input().strip().split()))[:n]\n    for i in range(n):\n        arr[i]*=-1\n    print(lds(arr,n))\n    \n    "
                }
            ]
        },
        "USF": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "1\n5\n2 2 4 17 8",
                    "output": "4",
                    "explanation": "Example case 1: The subsequence $[2, 2, 4, 8]$ has the maximum useful number. The number of distinct primes that divide each member of the subsequence is $1$ (only the prime $2$) and the length of the subsequence is $4$, so the useful number of this subsequence is $1\\cdot 4 = 4$."
                }
            ],
            "problem_statement": "Read problems statements Mandarin , Bengali , Hindi , Russian and Vietnamese as well.\nYou are given an integer sequence $A_1, A_2, \\dots, A_N$. Let's define the useful number of a subsequence of $A$ as the number of distinct primes $p$ such that $p$ divides each member of the subsequence, multiplied by the length of the subsequence. Find the maximum of useful numbers of all subsequences of $A$.\nInput\n\nThe first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\nThe first line of each test case contains a single integer $N$.\nThe second line contains $N$ space-seperated integers $A_1, A_2, \\dots, A_N$.\n\nOutput\nPrint a single line containing one integer \u2014 the maximum useful number.\nConstraints\n\n$1 \\le T \\le 10$\n$1 \\le N \\le 10^5$\n$1 \\le A_i \\le 10^5$ for each valid $i$\n\nSubtasks\nSubtask #1 (30 points):\n- $1 \\le N \\le 15$\n- $1 \\le A_i \\le 100$ for each valid $i$\nSubtask #2 (70 points): original constraints",
            "input_format": "",
            "output_format": "",
            "problem_name": "Useful Number",
            "user_tags": [
                "GCD",
                "Primes"
            ],
            "computed_tags": [
                "Mathematics",
                "Number Theory"
            ],
            "problem_code_id": "USF",
            "difficulty_level": "2126",
            "ai_solutions": [
                "from collections import defaultdict\nfrom math import sqrt\nfrom sys import stdin, stdout\n\ndef prime_factors(n):\n    i = 2\n    factors = set()\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.add(i)\n    if n > 1:\n        factors.add(n)\n    return factors\n\ndef solve():\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    primes = defaultdict(int)\n    for x in a:\n        for p in prime_factors(x):\n            primes[p] += 1\n    primes = sorted(primes.values(), reverse=True)\n    ans = max(primes)\n    for i in range(1, len(primes)):\n        ans = max(ans, (i+1)*primes[i])\n    stdout.write(str(ans) + '\\n')\n\nt = int(stdin.readline())\nfor _ in range(t):\n    solve()",
                "import math\nfrom collections import defaultdict\n\ndef prime_factors(n):\n    i = 2\n    factors = []\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    primes = defaultdict(int)\n    for i in range(n):\n        factors = set(prime_factors(a[i]))\n        for f in factors:\n            primes[f] += 1\n    print(max(primes.values()))\n\nt = int(input())\nfor _ in range(t):\n    solve()\n"
            ],
            "human_solutions": [
                {
                    "id": 35754636,
                    "submission_date": 1595089530,
                    "language": "PYTH 3",
                    "username": "pymath",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "3.16",
                    "memory": "20.4M",
                    "solution": 35754636,
                    "code": "def func(i, counterArr):\r\n    ans = 0\r\n    for j in range(i,n,i):\r\n        ans+=counterArr[j]\r\n    return ans\r\nn=int(1e5+1)\r\nprimes=[0]*n\r\nfor i in range(2,n):\r\n    if primes[i]==0:\r\n        for j in range(i,n,i):\r\n            # distinct primes add\r\n            primes[j]+=1\r\nt = int(input())\r\nfrom collections import Counter\r\nfor aaa in range(t):\r\n    xxx = int(input())\r\n    counterArr=Counter(map(int,input().split()))\r\n    print(max(func(i, counterArr)*primes[i]for i in range(2,n)))"
                },
                {
                    "id": 29262999,
                    "submission_date": 1580409529,
                    "language": "PYTH 3",
                    "username": "bhartendu2",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "(100)",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "3.60",
                    "memory": "20.4M",
                    "solution": 29262999,
                    "code": "from collections import Counter\r\nn = int(1e5+1)\r\npf = [0] * n\r\nfor i in range(2, n):\r\n    if pf[i] == 0:\r\n        for j in range(i, n, i):\r\n            pf[j] += 1\r\n            \r\ntest = int(input())\r\nfor _ in range(test):\r\n    input()\r\n    cnt = Counter(map(int, input().split()))\r\n    s = lambda i: sum(cnt[j] for j in range(i, n, i))\r\n    print(max(s(i) * pf[i] for i in range(2, n)))"
                }
            ]
        },
        "SIGNTURE": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "5\r\n3 3\r\n100\r\n010\r\n000\r\n000\r\n010\r\n001\r\n4 4\r\n0000\r\n0110\r\n0000\r\n0011\r\n1100\r\n0000\r\n1100\r\n0000\r\n3 3\r\n100\r\n000\r\n001\r\n000\r\n010\r\n000\r\n3 3\r\n000\r\n010\r\n000\r\n100\r\n000\r\n001\r\n3 3\r\n111\r\n000\r\n000\r\n001\r\n001\r\n001",
                    "output": "0\r\n2\r\n1\r\n0\r\n2",
                    "explanation": ""
                }
            ],
            "problem_statement": "Read problems statements in Hindi, Mandarin Chinese, Russian, Vietnamese, and Bengali as well.\nChef bought an electronic board and pen. He wants to use them to record his clients' signatures.\nThe board is a grid with $N$ rows (numbered $1$ through $N$) and $M$ columns (numbered $1$ through $M$) of pixels. Initially, all pixels are white. A client uses the electronic pen to sign on the board; whenever the pen touches a pixel, this pixel becomes black. Note that a signature may be non-continuous (a client may lift the pen while signing).\nChef stores a typical signature of his current client as a matrix of characters $A_{i, j}$, where for each valid $i$ and $j$, $A_{i, j}$ is either '1' (if the cell in the $i$-th row and $j$-th column is black) or '0' (if this cell is white). The client just signed on the board; this signature is stored in the same form as a matrix $B_{i, j}$. Chef wants to know how close this signature is to this client's typical signature.\nTwo signatures are considered the same if it is possible to choose (possibly negative) integers $dr$ and $dc$ such that for each $1 \\le i \\le N$ and $1 \\le j \\le M$, $A_{i, j} = B_{i + dr, j + dc}$. Here, if $B_{i + dr, j + dc}$ does not correspond to a valid cell, it is considered to be '0'.\nTo compare the signatures, the colours of zero or more cells must be flipped in such a way that the signatures become the same (each flipped cell may be in any matrix). The error in the client's current signature is the minimum number of cells whose colours must be flipped. Find the error in the signature.\nInput\n\nThe first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\nThe first line of each test case contains two space-separated integers $N$ and $M$.\n$N$ lines follow. For each valid $i$, the $i$-th of these lines contains a string with length $M$ describing the $i$-th row of the matrix $A$.\n$N$ more lines follow. For each valid $i$, the $i$-th of these lines contains a string with length $M$ describing the $i$-th row of the matrix $B$.\n\nOutput\nFor each test case, print a single line containing one integer \u2014 the error in the current signature.\nConstraints\n\n$1 \\le T \\le 50$\n$2 \\le N, M \\le 25$",
            "input_format": "",
            "output_format": "",
            "problem_name": "Signature",
            "user_tags": [
                "Brute Force"
            ],
            "computed_tags": [
                "Algorithms"
            ],
            "problem_code_id": "SIGNTURE",
            "difficulty_level": "2138",
            "ai_solutions": [
                "def min_flips(A, B, N, M):\n    min_flips = float('inf')\n    for dr in range(-N+1, N):\n        for dc in range(-M+1, M):\n            flips = 0\n            for i in range(N):\n                for j in range(M):\n                    if i+dr < 0 or i+dr >= N or j+dc < 0 or j+dc >= M:\n                        if A[i][j] == '1':\n                            flips += 1\n                    elif A[i][j] != B[i+dr][j+dc]:\n                        flips += 1\n            min_flips = min(min_flips, flips)\n    return min_flips\n\nT = int(input().strip())\nfor _ in range(T):\n    N, M = map(int, input().strip().split())\n    A = [list(input().strip()) for _ in range(N)]\n    B = [list(input().strip()) for _ in range(N)]\n    print(min_flips(A, B, N, M))",
                "def solve():\n    n, m = map(int, input().split())\n    a = [list(map(int, list(input().strip()))) for _ in range(n)]\n    b = [list(map(int, list(input().strip()))) for _ in range(n)]\n    ans = float('inf')\n    for dx in range(-n+1, n):\n        for dy in range(-m+1, m):\n            cnt = 0\n            for i in range(n):\n                for j in range(m):\n                    if i+dx < 0 or i+dx >= n or j+dy < 0 or j+dy >= m:\n                        cnt += a[i][j]\n                    else:\n                        cnt += a[i][j] != b[i+dx][j+dy]\n            ans = min(ans, cnt)\n    print(ans)\n\nt = int(input())\nfor _ in range(t):\n    solve()\n"
            ],
            "human_solutions": [
                {
                    "id": 33093300,
                    "submission_date": 1589530574,
                    "language": "PYTH 3",
                    "username": "soumya0531",
                    "user_rating_star": 3,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.86",
                    "memory": "78.6M",
                    "solution": 33093300,
                    "code": "import numpy as np\r\nfor _ in range(int(input())):\r\n    ans = np.float('inf')\r\n    n, m = (int(x) for x in input().split())\r\n    sig = np.zeros((n,m))\r\n    img = np.zeros((3*n,3*m))\r\n    for row in range(n):\r\n        sig[row,:] = np.array([int(x) for x in input()])\r\n    for row in range(n):\r\n        img[row+n,m:2*m] = np.array([int(x) for x in input()])\r\n    for i in range(2*n):\r\n        for j in range(2*m):\r\n            ans = min(ans, np.abs(np.sum(img[i:n+i, j:m+j] != sig)))\r\n    print(ans)"
                },
                {
                    "id": 32330627,
                    "submission_date": 1587976574,
                    "language": "PYTH 3",
                    "username": "shubhamiitbh",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.90",
                    "memory": "78.5M",
                    "solution": 32330627,
                    "code": "import numpy as np\nfor _ in range(int(input())):\n    ans = np.float('inf')\n    n, m = (int(x) for x in input().split())\n    sig = np.zeros((n,m))\n    img = np.zeros((3*n,3*m))\n    for row in range(n):\n        sig[row,:] = np.array([int(x) for x in input()])\n    for row in range(n):\n        img[row+n,m:2*m] = np.array([int(x) for x in input()])\n    for i in range(2*n):\n        for j in range(2*m):\n            ans = min(ans, np.abs(np.sum(img[i:n+i, j:m+j] != sig)))\n    print(ans)"
                }
            ]
        },
        "CHAIRS": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "1\n8\n10001010",
                    "output": "2",
                    "explanation": "The initial configuration is:\n       \n                 1\n              0    0\n           1          0\n              0    0\n                  1\n\nWe can tell the child who is boldened to move counter-clockwise, and the new configuration will be:\n       \n                 0\n              1    0\n           1          0\n              0    0\n                  1\n\nbecause he has moved to the first empty chair on his way.\nNow, we again tell him to move counter-clockwise, and now the new configuration will be:\n       \n                 0\n              0    0\n           1          0\n              1    0\n                  1\n\nbecause he moved counter-clockwise, found an occupied chair, and hence kept moving. The next chair was vacant, and he sat down there.\nNote that, in this example, we moved the same child twice, but this need not be the case. We can move different children in different moves.\n\n\nYou can check that this is the best we can do, and 2 is the minimum."
                }
            ],
            "problem_statement": "Read problems statements in Mandarin Chinese, Russian and Vietnamese as well.\n\nThere are N chairs placed in circular order. Some of the chairs are empty while others have a child sitting in it. You are required to change the places of the children so that all the children sit next to each other (i.e. they form a connected segment). You can do that by doing the following operation a number of times:\n\nChoose a child and tell him to walk around the circle in clockwise order or anti-clockwise order until he finds the first empty chair, and tell him to sit there.\n\nWhat is the minimum number of operations required to make all children sit next to each other?\n\nInput\n\nThe first line contains T, the number of test-cases.\n\nThe first line of each test-case contains N, the number of chairs.\nThe second line of each test-case contains a binary string of length N. If the i-th character is 1 then the i-th chair has a child initially. Otherwise (i.e. the i-th character is 0) it's empty.\n\nOutput\nFor each test case, output a single line containing a single integer donating minimum number of operations needed.\nConstraints\n\n1 \u2264 T \u2264 5,000\n1 \u2264 sum of N in all test-cases \u2264 106\nat least one chair will be occupied",
            "input_format": "",
            "output_format": "",
            "problem_name": "Chairs",
            "user_tags": [
                "Greedy",
                "Observation"
            ],
            "computed_tags": [
                "Algorithms"
            ],
            "problem_code_id": "CHAIRS",
            "difficulty_level": "2100",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 36171512,
                    "submission_date": 1596392002,
                    "language": "PYTH 3",
                    "username": "jthirupathi",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.31",
                    "memory": "17.6M",
                    "solution": 36171512,
                    "code": "t = int(input())\nfor m in range(t):\n    n = int(input())\n    sit = input()\n    num0=0\n    total=0\n    max0=0\n    s=0\n    e=0\n    i = 0\n    while i < n:\n        num0 = 0\n        while i < n and sit[i] ==\"0\":\n            i += 1\n            num0 += 1\n        total+=num0\n        if num0 > max0:\n            max0 = num0\n        if num0 == i:\n            s = num0\n        if i == n:\n            e = num0\n        i += 1\n    if s+e>max0:\n        max0=s+e\n    print(total-max0)\n"
                },
                {
                    "id": 31967978,
                    "submission_date": 1587136178,
                    "language": "PYTH 3",
                    "username": "kaguyasama12",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.30",
                    "memory": "17.6M",
                    "solution": 31967978,
                    "code": "t = int(input())\r\nfor m in range(t):\r\n    n = int(input())\r\n    sit = input()\r\n    num0=0\r\n    total=0\r\n    max0=0\r\n    s=0\r\n    e=0\r\n    i = 0\r\n    while i < n:\r\n        num0 = 0\r\n        while i < n and sit[i] ==\"0\":\r\n            i += 1\r\n            num0 += 1\r\n        total+=num0\r\n        if num0 > max0:\r\n            max0 = num0\r\n        if num0 == i:\r\n            s = num0\r\n        if i == n:\r\n            e = num0\r\n        i += 1\r\n    if s+e>max0:\r\n        max0=s+e\r\n    print(total-max0)\r\n"
                }
            ]
        }
    },
    "6": {
        "INVLIS": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [],
            "problem_statement": "Petya is preparing a problem for a local contest in his school. The problem is to find a longest increasing subsequence in a given permutation. A permutation of size $n$ is a sequence of $n$ numbers $a_1, \\ldots, a_n$ such that every number from $1$ to $n$ occurs in the sequence exactly once. An increasing subsequence of length $k$ of the sequence $a_1, \\ldots, a_n$ is a sequence of indices $i_1, \\ldots, i_k$ such that $1 \\leq i_1 < \\ldots < i_k \\leq n$ and $a_{i_1} < \\ldots < a_{i_k}$. A longest increasing subsequence is an increasing subsequences with the largest length. Note that in general there may be several longest increasing subsequences.\nPetya had some tests prepared, but then lost the input part for some of them. He now has a test for a certain value of $n$, and a sequence $i_1, \\ldots, i_k$ that is supposed to be a longest increasing subsequence. Petya now has to reconstruct a permutation of size $n$ with this sequence being an answer. Petya doesn't want to take any risks, so he additionally wants this sequence to be the only longest increasing subsequence, that is, all other increasing subsequences have to have strictly smaller length. Help Petya determine if this is possible, and if so, construct any such permutation.\nInput:\nThe first line contains an integer $T$, denoting number of test cases.\nThe first line of every test case contains two integers $n$ and $k-$  the size of the permutation and the length of the longest increasing subsequence ($1 \\leq k \\leq n \\leq 10^5$).\nThe second line contains $k$ integers $i_1, \\ldots, i_k-$ the longest increasing subsequence ($1 \\leq i_1 < \\ldots < i_k \\leq n$).\nOutput:\nIf there is no permutation with the sequence $i_1, \\ldots, i_k$ being the only longest increasing subsequence, print NO . Otherwise, print YES on the first line, followed by $n$ numbers describing any suitable permutation on the second line.\nConstraints\n\n$1 \\leq T \\leq 10$\n$1 \\leq k \\leq n \\leq 10^5$    \n$1 \\leq i_1 < \\ldots < i_k \\leq n$    \n\nSample Input:\n2\n3 2\n1 2\n2 1\n1\nSample Output:\nYES\n2 3 1\nNO",
            "input_format": "",
            "output_format": "",
            "problem_name": "Largest Increasing Subsequence",
            "user_tags": [
                "Constructive"
            ],
            "computed_tags": [
                "Algorithms"
            ],
            "problem_code_id": "INVLIS",
            "difficulty_level": "2473",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 39361400,
                    "submission_date": 1604731511,
                    "language": "PYTH 3",
                    "username": "sreevani20",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.42",
                    "memory": "18M",
                    "solution": 39361400,
                    "code": "for _ in range(int(input())):\r\n    n,k = [int(c) for c in input().split()]\r\n    a = [int(c) for c in input().split()]\r\n    ls = a\r\n    if n==1:\r\n        print(\"YES\")\r\n        print(1)\r\n        continue\r\n    if k==1:\r\n        print(\"NO\")\r\n        continue\r\n    \r\n    if k==2 and n>2:\r\n        if ls[0]!=ls[1]-1:\r\n            print(\"NO\")\r\n            continue\r\n\r\n    ans = [0 for i in range(n+1)]\r\n    count = n\r\n    for i in range(1,a[1]):\r\n        if i != a[0]:\r\n            ans[i]  =count\r\n            count-=1\r\n    for i in a[::-1]:\r\n        ans[i] = count\r\n        count-=1\r\n    for i in range(1,n+1):\r\n        if ans[i] == 0:\r\n            ans[i] = count\r\n            count-=1\r\n    print(\"YES\")\r\n    print(*ans[1:])"
                },
                {
                    "id": 33547518,
                    "submission_date": 1591010587,
                    "language": "PYTH 3",
                    "username": "sh1vansh",
                    "user_rating_star": 3,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.41",
                    "memory": "17.6M",
                    "solution": 33547518,
                    "code": "for _ in range(int(input())):\n    n,k=map(int,input().split())\n    ls=list(map(int,input().split()))\n    if n==1:\n        print(\"YES\")\n        print(1)\n        continue\n    if k==1:\n        print(\"NO\")\n        continue\n    \n    if k==2 and n>2:\n        if ls[0]!=ls[1]-1:\n            print(\"NO\")\n            continue\n    print(\"YES\")\n    mx=n\n    arr=[0]*(n)\n    for i in range(ls[0]-1):\n        arr[i]=mx\n        mx-=1\n    for i in range(ls[0],ls[1]-1):\n        arr[i]=mx\n        mx-=1\n    for i in range(k-1,-1,-1):\n        arr[ls[i]-1]=mx\n        mx-=1\n    for i in range(1,n):\n        if arr[i]==0:\n            arr[i]=mx\n            mx-=1\n    print(*arr)\n        "
                }
            ]
        },
        "PRMRANGE": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [],
            "problem_statement": "Given an empty array A of infinite length and a positive integer K you have to process \nQ queries of type:  \n- ! l r x: Fill the value x in all the empty places in the array from index l to r  (both inclusive).\n- ? l r: Print the number of prime factors of K which is also a prime factor of at least one number in A[l], A[l + 1], A[l + 2], \u2026 A[r].   \nInput\n\nThe first line contains two space separated integers K and Q respectively.\nThen Q lines follow:\nEach of the $i^{th}$ line contains one of the above two types of queries.\n\nOutput\nFor each query of the second type, print in a new line the answer to that query. i.e. number of prime factors of K which is also a prime factor of at least one number in A[l], A[l + 1], A[l + 2], \u2026 A[r].   \nConstraints\n\n$1 \\leq K, x \\leq 10^9$\n$ 1 \\leq l \\leq r \\leq 10^5$\n$ 1 \\leq Q \\leq 10^5$   \n\nSample Input\n20 5 \n? 1 5 \n! 3 5 4 \n? 1 5 \n! 1 4 15 \n? 1 5   \nSample Output\n0 \n1 \n2   \nEXPLANATION\nInitially, all the places in the array are empty. i.e _ _ _ _ _ \nAfter first update the array looks like: _ _ 4 4 4  \nIn the range [1, 5] the only factor of 20 which is also a prime factor of at least one number in _ _ 4 4 4  is 2. \nAfter the second update the array looks like: 15 15 4 4 4 \nIn the range [1, 5] the prime factors of 20 i.e. 5 is a prime factor of 15, 15 and 2 is the prime factor of 4, 4, 4.",
            "input_format": "",
            "output_format": "",
            "problem_name": "A Game of Primes",
            "user_tags": [
                "Segment Trees",
                "Prime Divisors"
            ],
            "computed_tags": [
                "Advanced Data Structures",
                "Advanced Tree Structures",
                "Mathematics",
                "Number Theory",
                "Integer Factorisation",
                "Divisors"
            ],
            "problem_code_id": "PRMRANGE",
            "difficulty_level": "2480",
            "ai_solutions": [],
            "human_solutions": [
                {
                    "id": 40728189,
                    "submission_date": 1608893719,
                    "language": "PYTH 3",
                    "username": "navya_17",
                    "user_rating_star": 2,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "0.92",
                    "memory": "18.3M",
                    "solution": 40728189,
                    "code": "\nimport math\ndef distinctPrimeFactors(num) :\n    primes,sqrt = set(),int(math.sqrt(num))\n    if (num == 2) :primes.add(num)\n    for j in range(2, sqrt + 1) :\n        if (num % j == 0) :\n            primes.add(j)\n            while (num % j == 0) :num //= j\n    if (num > 2) :primes.add(num)\n    return (primes)\nres,c,lst,primes,rangeData = [],0,{},{},{};k, q = map(int, input().split());primes[k] = distinctPrimeFactors(k)\nfor tc in range(q) :\n    query = input()\n    if (query[0] == '!') :\n        cmd, l, r, x = query.split();l,r,x = int(l),int(r),int(x);start,end,startflag = l,r,False\n        for i in sorted(rangeData) :\n            rangeVal = i\n            if (start > rangeVal[1]) :continue\n            if (end < rangeVal[0]) :break            \n            startRange,endRange = start,end\n            if (start >= rangeVal[0] and start <= rangeVal[1]) :start = rangeVal[1] + 1;continue\n            if (end >= rangeVal[0]) :endRange = rangeVal[0] - 1\n            if (startRange <= endRange) :\n                rangeData[(startRange, endRange)] = x;start = max(endRange + 1, rangeVal[1] + 1)\n        if (start <= end) :rangeData[(start,end)] = x\n    elif (query[0] == '?') :\n        cmd, l, r = query.split();l,r,count = int(l),int(r),0\n        for primenum in primes[k] :\n            for currRange in rangeData :\n                if (not (r < currRange[0] or l > currRange[1])) :\n                    if (rangeData[currRange] % primenum == 0) :count += 1;break\n        c += 1;res.append(count)    \nfor i in range(c):print(res[i])\n"
                },
                {
                    "id": 34836297,
                    "submission_date": 1593330358,
                    "language": "PYTH 3",
                    "username": "vijayaleele",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "1.02",
                    "memory": "18.3M",
                    "solution": 34836297,
                    "code": "import math\ndef distinctPrimeFactors(num) :\n    primes,sqrt = set(),int(math.sqrt(num))\n    if (num == 2) :primes.add(num)\n    for j in range(2, sqrt + 1) :\n        if (num % j == 0) :\n            primes.add(j)\n            while (num % j == 0) :num //= j\n    if (num > 2) :primes.add(num)\n    return (primes)\nres,c,lst,primes,rangeData = [],0,{},{},{};k, q = map(int, input().split());primes[k] = distinctPrimeFactors(k)\nfor tc in range(q) :\n    query = input()\n    if (query[0] == '!') :\n        cmd, l, r, x = query.split();l,r,x = int(l),int(r),int(x);start,end,startflag = l,r,False\n        for i in sorted(rangeData) :\n            rangeVal = i\n            if (start > rangeVal[1]) :continue\n            if (end < rangeVal[0]) :break            \n            startRange,endRange = start,end\n            if (start >= rangeVal[0] and start <= rangeVal[1]) :start = rangeVal[1] + 1;continue\n            if (end >= rangeVal[0]) :endRange = rangeVal[0] - 1\n            if (startRange <= endRange) :\n                rangeData[(startRange, endRange)] = x;start = max(endRange + 1, rangeVal[1] + 1)\n        if (start <= end) :rangeData[(start,end)] = x\n    elif (query[0] == '?') :\n        cmd, l, r = query.split();l,r,count = int(l),int(r),0\n        for primenum in primes[k] :\n            for currRange in rangeData :\n                if (not (r < currRange[0] or l > currRange[1])) :\n                    if (rangeData[currRange] % primenum == 0) :count += 1;break\n        c += 1;res.append(count)    \nfor i in range(c):print(res[i])"
                }
            ]
        }
    },
    "7": {
        "NQNF": {
            "constraints": "",
            "subtasks": "",
            "sample_test_cases": [
                {
                    "input": "3 6\n1 4 2\n3 1 2\n1 1 3\n2 1 3\n3 1 1 -2\n2 1 3\n4 1 2 3\n1 1 2",
                    "output": "4\n9",
                    "explanation": "Initially, $A = [1, 4, 2]$ and $B = [3, 1, 2]$.\n- In the first query, we should find the maximum element of $A$, which is $4$.\n- After the second query, $A = [4, 5, 4]$.\n- After the third query, $B = [1, 1, 2]$.\n- After the fourth query, $A = [5, 6, 6]$.\n- After the fifth query, $A = [8, 9, 6]$.\n- In the sixth query, we should find the maximum of $A_1$ and $A_2$, which is $9$."
                }
            ],
            "problem_statement": "Read problems statements in Mandarin chinese\n, Russian and Vietnamese as well.\nMaybe Fulu is not so good at writing codes for median elements, but solving problems with queries is really easy for him. Today, he decided to give you one hard problem with queries from his national contest.\nYou are given two sequences $A$ and $B$, each with length $N$ ($1$-indexed), and $Q$ queries. There are four types of queries:\n- $1\\; l\\; r$ \u2014 find $\\mathrm{max}(A_l, A_{l+1}, \\dots, A_r)$\n- $2\\; l\\; r$ \u2014 increase $A_l, A_{l+1}, \\dots, A_r$ by $B_l, B_{l+1}, \\dots, B_r$, i.e. for each $i$ ($l \\le i \\le r$), change $A_i$ to $A_i+B_i$\n- $3\\; l\\; r\\; x$ \u2014 for each $l \\le i \\le r$, increase $B_i$ by $x$\n- $4\\; l\\; r\\; x$ \u2014 for each $l \\le i \\le r$, increase $A_i$ by $x$\nCan you quickly process the queries?\nInput\n\nThe first line of the input contains two space-separated integers $N$ and $Q$.\nThe second line contains $N$ space-separated integers $A_1, A_2, \\dots, A_N$ denoting the initial sequence $A$.\nThe third line contains $N$ space-separated integers $B_1, B_2, \\dots, B_N$ denoting the initial sequence $B$.\nThe following $Q$ lines describe queries. Each of these lines starts with an integer $t$ denoting the type of the query. If $1 \\le t \\le 2$, it is followed by a space and two space-separated integers $l$ and $r$. If $3 \\le t \\le 4$, it is followed by a space and three space-separated integers $l$, $r$ and $x$.\n\nOutput\nFor each query of the first type, print a single line containing one integer \u2014 the maximum element in the subsequence $A_{l..r}$.\nConstraints\n\n$1 \\le N, Q \\le 10^5$\n$|A_i| \\le 10^9$ for each valid $i$\n$|B_i| \\le 10^9$ for each valid $i$\n$|x| \\le 10^9$\n$1 \\le l \\le r \\le N$",
            "input_format": "",
            "output_format": "",
            "problem_name": "No Queries No Fun",
            "user_tags": [
                "Square Root Decomposition",
                "Convex Hull",
                "Range Queries",
                "Online Queries"
            ],
            "computed_tags": [
                "Advanced Algorithms",
                "Computational Geometry",
                "Polygons",
                "Algorithms",
                "Queries"
            ],
            "problem_code_id": "NQNF",
            "difficulty_level": "3420",
            "ai_solutions": [
                "import sys\nfrom typing import List, Tuple\n\ndef process_queries(n: int, q: int, a: List[int], b: List[int], queries: List[Tuple[int, ...]]) -> List[int]:\n    res = []\n    for query in queries:\n        if query[0] == 1:\n            res.append(max(a[query[1]-1:query[2]]))\n        elif query[0] == 2:\n            for i in range(query[1]-1, query[2]):\n                a[i] += b[i]\n        elif query[0] == 3:\n            for i in range(query[1]-1, query[2]):\n                b[i] += query[3]\n        elif query[0] == 4:\n            for i in range(query[1]-1, query[2]):\n                a[i] += query[3]\n    return res\n\ndef main():\n    n, q = map(int, sys.stdin.readline().split())\n    a = list(map(int, sys.stdin.readline().split()))\n    b = list(map(int, sys.stdin.readline().split()))\n    queries = [tuple(map(int, sys.stdin.readline().split())) for _ in range(q)]\n    res = process_queries(n, q, a, b, queries)\n    for r in res:\n        print(r)\n\nif __name__ == \"__main__\":\n    main()",
                "import sys\nfrom typing import List, Tuple\n\ndef process_queries(n: int, q: int, a: List[int], b: List[int], queries: List[Tuple[int, ...]]) -> List[int]:\n    res = []\n    for query in queries:\n        t, l, r, *x = query\n        l -= 1\n        if t == 1:\n            res.append(max(a[l:r]))\n        elif t == 2:\n            a[l:r] = [ai+bi for ai, bi in zip(a[l:r], b[l:r])]\n        elif t == 3:\n            b[l:r] = [bi+x[0] for bi in b[l:r]]\n        elif t == 4:\n            a[l:r] = [ai+x[0] for ai in a[l:r]]\n    return res\n\ndef main():\n    n, q = map(int, sys.stdin.readline().split())\n    a = list(map(int, sys.stdin.readline().split()))\n    b = list(map(int, sys.stdin.readline().split()))\n    queries = [tuple(map(int, sys.stdin.readline().split())) for _ in range(q)]\n    res = process_queries(n, q, a, b, queries)\n    for r in res:\n        print(r)\n\nif __name__ == \"__main__\":\n    main()"
            ],
            "human_solutions": [
                {
                    "id": 22509144,
                    "submission_date": 1547637761,
                    "language": "PYTH 3",
                    "username": "im_the_one",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "6.00",
                    "memory": "81.8M",
                    "solution": 22509144,
                    "code": "import numpy as np\nn,q=map(int,input().split())\na=np.array(list(map(int,input().split())))\nb=np.array(list(map(int,input().split())))\nfor i in range(q):\n\tquery=list(map(int,input().split()))\n\tif query[0]==1:\n\t\tprint(np.amax(a[query[1]-1:query[2]]))\n\tif query[0]==2:\n\t\ta[query[1]-1:query[2]]+=b[query[1]-1:query[2]]\n\tif query[0]==3:\n\t\tb[query[1]-1:query[2]]+=query[3]\n\tif query[0]==4:\n\t\ta[query[1]-1:query[2]]+=query[3]\n\t"
                },
                {
                    "id": 21807788,
                    "submission_date": 1544282188,
                    "language": "PYTH 3",
                    "username": "vishnu0307",
                    "user_rating_star": 1,
                    "contest_code": "PRACTICE",
                    "tooltip": "accepted",
                    "score": "",
                    "points": "",
                    "icon": "/misc/icons/tick-icon.svg",
                    "time": "5.56",
                    "memory": "81.8M",
                    "solution": 21807788,
                    "code": "import numpy as np\r\nn,q = map(int,input().split())\r\na = np.array(list(map(int,input().split())))\r\nb = np.array(list(map(int,input().split())))\r\nans = []\r\nfor i in range(q):\r\n\tquery = tuple(map(int,input().split()))\r\n\tif len(query)==3:c,l,r = query\r\n\telse: c,l,r,x = query\r\n\tif c==1:\r\n\t\tans.append(np.max(a[l-1:r]))\r\n\telif c==2:\r\n\t\ta[l-1:r]+=b[l-1:r]\r\n\telif c==3:\r\n\t\tb[l-1:r]+=x\r\n\telse:\r\n\t\ta[l-1:r]+=x\r\nprint(*ans,sep=\"\\n\")"
                }
            ]
        }
    }
}